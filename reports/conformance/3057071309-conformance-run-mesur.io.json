{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fafc93fd-fa17-4646-a53c-0e4004628620",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "445b635c-c09d-41b1-a76d-f2a72523696c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "233b52b8-71aa-461d-b1da-2b16e6125c7b",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a0788c7-d0cf-47d0-9577-17e64e1ea1ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47046527-c9a5-489c-9854-f37fdc74c4be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "455cf7e2-7356-4588-8ef3-a2f27b35032f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6b3d32b0-8242-4fdb-a53c-e183273a463e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9dcecd2f-b64a-4795-922a-18334bcc86ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4671acf8-66e6-4d30-bb07-0fd433f5901c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdb01f4-41d9-47fe-abd3-018e72dd1ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4d360b5-fe16-4a33-a9c0-cfc45ab40c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eeda92f-0ffc-443e-84fd-e3e1ca1fc501",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9546b086-aea1-406d-92e6-95211729c7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59bd2f7d-6384-405a-9fc7-e56fd86bc7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff4d4bb-7a5a-426b-b619-de1d80ebd8f8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d87f175-4d29-47de-ac8e-6c87d68fec27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70dc51bc-268e-4040-8e16-553a408be721"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c5ad44e2-3d28-473a-b0d6-5ec6835229dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52ff783a-0beb-44ab-b9e1-d94f50d371af",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57e8ad1-ed72-45aa-98a1-932459e7ce9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9b162a7-462f-4349-a88d-f32be20dd2b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5184ef76-5e1e-4fb9-b7b7-0746ddd0bdea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83071473-d655-4164-9df0-259140ea972f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8b84cf-a254-4c44-be5d-e9ba623b9d20",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26aac2bd-5b43-447e-a51b-737a8fc58800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b597e8e-5461-4b00-a66f-f855758433a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fac7c11-8714-49be-8ac9-13a6bb7199ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c89c3641-b604-4c3f-a2d5-c9dc8de21ff3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "576cae90-5bed-4e7b-b1ee-eb939b594ca0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "afced5e3-01a4-46d4-84e4-8c35e6176667",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74c6736d-5f61-4949-a1c2-29f1a1767d64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "eedb35fe-4d79-419f-bf6d-420ff0dc2654"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f822505-9da3-4839-a849-af7d124924a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4e600f0b-6527-4ba3-a583-0cbeb373d2c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8448db7b-9a5a-4485-816d-13022bac7de4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58d4397a-ce55-436a-99a6-653b80d6106b"
            }
          }
        ]
      },
      {
        "id": "271d9d8e-3c02-41ed-b44c-346ecc68b4f5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9ea20ceb-38a5-40b1-9c02-4bf80156de03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e2f37a7-203b-46dd-9c67-380f1fb0ef98",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4cb38071-16a1-40f0-808b-3663245a4b1d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5435d77-b642-4cc0-b44d-ebbbff7d91c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4034f2-28d9-493b-92d5-7d4d35c92808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c77b2c9-b6a1-4115-bd72-b42ed44db402",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96df7699-a324-446a-bdf6-23701cc1fe79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3655adf8-3e3b-4a3c-9ce1-59f54c48c524",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9a301d-b08c-40fb-9c9f-2306f4740301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3aafbab-e3db-417b-b075-2b49a7f2f1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52491637-53e7-4a7f-a47c-77a70d6df320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7501ae55-db71-4b99-9602-e3917002b645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70897dbd-b1a4-499a-b0e6-3d492a8cd4c7",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de25310-072c-4c4a-b447-6d2ab9991623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e57a09-e2be-4105-b0df-fe86dcfeab10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c64a18-9f92-4dc7-b37d-a8b8a350fc55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "928d5b06-43fd-40a8-8f40-fbdee7cc4e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8e5a5a-3536-4cea-910f-fc8e535c8402",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2146f059-806a-4ff7-a096-8719de1af843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19467d05-893f-4d75-8061-9aecd415a38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93863b3e-97bb-4074-89d1-cf87653f265e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efd4b957-c36e-47a3-aa8f-46517fb176d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06c426f-29b0-40e3-a4db-05de16e05679",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d0a001-3b73-4289-9a50-f014673144f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9450ad76-4cb6-4af8-9879-3c19c559eb8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b32c4a8-65ec-4382-8f9b-ad2b66191dc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c35b3ec-9efe-4bd5-bade-1d5ec8886389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57231dfd-9f37-42a8-8728-ee2a0646a3a1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19d5ae6-f673-4eb1-8be8-ba06ef878cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7643c313-5d86-42c3-99e8-8ce61310763b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da39e8d9-c958-4d3e-b2c5-afe9acfb079f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "417f1684-5447-4d4c-bed9-dd38d3a0d879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619529f9-9c2d-4e74-815e-886df0d60135",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0475e20-abdb-4e0a-a940-8491a42562af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d046a222-65b9-443a-a376-acc405ad7f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ff23c7-b4cb-42d8-9912-6cd373d25fe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c7f8f9d-64fe-4e88-aa63-9d399d601145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af4e48e-c8e6-4684-a80c-e0136381e843",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49bdcf4-f6be-4ec7-881f-93ec990e7192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08f8eaa-41b2-4b56-9ace-de4c0259de76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec807bf9-9f01-4bd2-a60f-27c92e29fdef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f68e4d0e-4895-4706-8424-10e77f1ea108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee19f60-cd67-4aa9-9952-1fe87c0c0e98",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0cfdf3-bd6b-44b9-a4ed-d02af9a35ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a0d07d-76fc-409d-82ec-3422f0c71fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1131ea0-339b-4549-86e7-166ef2904c30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ddacebf-8ff1-4830-bd7c-f45f8e6c825a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ba0b7d-3705-410b-86a7-683272dc72bf",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bafff3-cfd5-4c63-a6aa-e4f133914823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97bd454-46d5-4696-b7a2-fa20d96acfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576dd3d1-ae61-4434-8444-e98b0cc9360c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51b4dda2-6938-44b8-abe2-81549bbbf7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abca32e0-41fb-45d0-9736-abcecbe93605",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a70314-c16e-4ee1-8a1c-378585425867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b1acf7f-afbc-4eb6-b8e5-cda7635e6709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb66a6c6-3efc-4118-bd65-6503087bd478",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "3643798f-a904-4f6b-bc07-613a724ff611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521bb483-8ad8-48f8-abb3-ec6504f7f9b4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a779a7-5c8e-4e43-a1bc-2d0629fc6205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b993ee22-a8be-4767-af35-2825665ef7ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7143d355-841e-42b9-b698-76e60f229d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "4d78955e-1b3d-4825-833f-462dce041718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843324a7-4994-45ea-86e3-3104285e957e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35b7550-70b7-44d7-8a89-66afdc986e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc940a9-e265-457c-9398-6bc325c5d724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c2d494-09dc-40de-afd3-ab7df210f176",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1182c4f6-7f5a-42b3-ac65-60ee7fa22674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202a83b4-ac3a-4130-9474-c45446845da8",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1513fce-6c25-4e40-a4b7-d86fe7df58b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094a6b40-1bfe-48b3-90ca-3cb6289e8757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabf63bf-6b85-4574-961f-b37a35872e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19f0d469-1cbe-413f-b052-35d55b5cd4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc95a6a-eedc-4278-892e-78dfe4fb04c9",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df701af-679a-474b-b461-6528f6e01faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9623188-2253-4615-b7a5-ca7341deb06d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84650cfa-3fc7-4f6b-ace5-98795f057dd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "dbe3c0df-7433-492e-aa87-3ea55d111da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c57560-2be5-4960-9356-995567c728d7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50a4909-11ce-4351-9966-a21f77abe023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f1ba0c-2e7a-4367-8da5-ce9e03722321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7d1990-280c-490e-831c-b96413064195",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "de378001-2f05-4340-8a9d-126739beaefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a80d59-4715-4c3d-88da-f973dd7c0dd5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4561d2a0-94d3-4c6c-a9c2-642a0f20f631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3ae15d-8998-46ba-b49a-952d2ced836b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5841d8c7-49fe-4162-993b-51773e3a30a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "504d930e-5a64-495e-a9e9-5600dddb4de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd7187b-1501-48c3-b02e-cdce20230251",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05493f1d-3452-4c9a-997b-9655aa53b155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf3ce7b-53be-46e2-9f38-d344ad7676ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af230e1-bd22-47fa-94aa-cd9b0cfc36cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f78b63f-a31a-49cd-9c7a-f05c26bec8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca33b34-3383-4feb-831c-3c285509ee8a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e430b78-7364-466c-a3e2-2abf9e7edd47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8594aee-1a32-4d37-a5f6-986983031310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf931ef-9917-40ca-ac2c-64bdf2b7e735",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a76ee99-f496-4108-ad40-75e3a23108a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64420668-2481-4e2f-974f-3e9599672b2b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd6ce07-ebde-4ad9-92a7-5162aa43da12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6552ce03-0bce-4c54-a5bf-498ab1c05f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2548fd-1721-4dae-aa2c-a8de645c6376",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60f62e8d-85f4-444e-8076-89d407496711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b48b23e-39bb-4301-a57b-c190113566d6",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17434efa-6967-4b41-a674-8a131633e84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de20fdf5-50d1-4f9a-869d-30cc9e1df36d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc5d3ee-77bc-4a4d-b504-2a7cbe95fdae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc1e1b41-1308-4a4a-a192-46663c0c7e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df6a019-d96a-4b59-a41c-a0d0edf04279",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355378e9-ce47-45a4-8c18-55dbde93bb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48de06dc-8f7c-4c47-ad9d-ebe92dd36777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f68daf-98bd-42af-8672-9d1a759cdb48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f76a324b-44de-4faa-ab9a-5476952e0001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d4aa8e-6925-4ce5-89c2-1e2e3150b452",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247ec2d3-33b0-400e-9021-646a9d91252c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731676c5-d036-4c33-a9e5-6dd00dd3ee8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fec6dc-2024-465e-a32c-33867daf4824",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c2062fa-d489-4692-88a9-969dbadb6121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e949ab-e4d1-421b-9f6b-da695f5dc045",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ce72ea-517f-49bc-936a-f2c9917996fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f68724-dd3c-4602-98c8-95b2a32fa142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b088989-cc93-4c38-8e22-8cb4eb3a801a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e449ab3-a8b2-4e97-a647-8d170fd7baf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24be673-0952-4d09-b3a1-6ba890e0af4e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412bd735-9e1a-4bcb-a5d4-d7590d652464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217c0b22-89c3-4e7a-ad04-3a2cbc867143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae772d67-8984-43ba-ac60-7342f620d8dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dab9961-c687-45d9-9b67-e44936fe6eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5d8eb0-ea78-4a75-9b3d-db58b0912934",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2756510-5958-418f-a1c1-0e959e4d3671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daaff58c-f744-4bdb-a678-ccce5536ce3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89158b22-11d0-49be-8802-69020f378b10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d91457bb-78a5-4301-8146-481abda31ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f7afad-f871-49b1-995b-f9e6b8975286",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9010343e-a6d9-447e-aae6-baee88f19b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de34c41b-7af5-4288-a6e0-a26432bf26a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16667f10-ae3e-42d5-85c2-aff7a1178dfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9bc6984-3d63-4e85-bcd4-1782598868d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5557498d-939e-45e7-a3a8-8fdd5d3fa140",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd00d8a-3969-4b6a-bdd9-854b25a89cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d838aeea-e9d1-4bb4-bd6d-7fa0cf99b633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d7380e-a2ef-449f-94b4-6f9cd8af5db8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3115507d-77e5-4e2d-a577-2bf16e619d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4a2961-94cf-443d-ab4f-7991b8394f0c",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2668815e-1fa4-4228-9139-61e2f0a3de64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4aef2f8-51e8-4f41-bb1c-0c642a6c46d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac06b8f-1c82-4bde-ab24-40485eaaa5e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99e9bad7-8b61-472c-b328-a389baf85ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f4e47f-6a2f-4829-ab6a-1d83f034b939",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb829a5c-70a1-4df9-8a57-1c94625d4ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891cab12-4abd-45f8-9523-4ade4e77d23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61abe47e-6c92-41d6-9b93-d654a5da99cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "978617bc-b923-4b71-b8b2-dbc06cb557a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310e0536-e267-4c5a-acfe-f7f219c37fb8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f31ad5a-9390-490c-9b4d-61483e47c3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c222b32c-4235-4a4a-8b6b-a8b944ec746a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acab89cf-b78d-4c92-a8b2-a1f9bbe5fd44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7cd77f7-98d7-4a49-92af-520daf7537b1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "03f1c6c9-8788-403d-984e-ce375cb3a0da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5838c95-4153-435e-a136-4b9510fa4d3a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e339f8-32e4-40d0-99a6-ffab834db503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60ac8916-e998-4fe5-aa70-394ac388dd43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a8a23d-32b4-4371-8f66-cfce4b6bef2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2b716747-f09e-4fa0-aefc-d6ab0f9dce73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302e8acf-0b3d-40a4-99f1-601df312eecb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0f4412-0a61-4ae9-b3a5-4cfe1458b28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8766c18c-811f-4351-bbdb-cdc83f4e020f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2952d6a0-814d-4075-ba89-b6995953a70b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2f07e849-40d3-4379-be9b-01d776926e6d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fb194de-a72c-4a3b-8a33-79883fe19e4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acd1e99a-afb0-429e-bf1c-8096eebb4588"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "371bdd61-ab6a-479e-bce9-e7c19a2898a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "039d537e-5d45-45ba-96e7-4fe3a07d4f73"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bf23f2d7-06be-44fe-afe7-9998c359a797",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50ed4890-6189-416b-970f-47b3f948dd75"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e4582659-b500-4f95-88ee-2d9cc873446a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b3a8789b-34ea-404c-b1e6-3ef62ef1ab66"
                }
              }
            ]
          },
          {
            "id": "7fcd597d-ce3b-4d24-a6c0-4812d1f48b32",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9bd9e234-04bc-4ea6-be22-7ff9850d0400",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16113f17-0518-4759-84fa-1aafe3aa3880",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bfbe7fe-acb7-4965-b31c-de7b7cfd71ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a4e5ce0-9303-4b22-9433-1b75af465156",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6d496d4c-cb1d-4023-a75f-1997964b4340"
                    }
                  }
                ]
              },
              {
                "id": "ed692f61-ff6c-48ed-9487-63f96b69ba92",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1dbc73f3-09dc-4f94-a912-c2f7ecabf73e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5877f226-b9c9-40a4-a188-7185101708da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dae42e98-fea9-4825-8270-429fbf43caf7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0edbff37-5641-496e-8d9a-aa6094c03864"
                    }
                  }
                ]
              },
              {
                "id": "0ea3ea6c-67ba-4ef0-a7af-7c25593de68c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe782519-2993-45b5-abb1-f651929e4b22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ba814b0-6956-4690-a75a-4c16e7cebdb2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a078b1d7-cf35-4f9d-8eab-4e69ad3a86c2",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9604689e-73bb-4ce2-b007-1a5d9610211a"
                    }
                  }
                ]
              },
              {
                "id": "54bf5f4c-45d8-49c2-a516-1dda2a383788",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f719c63-03bd-4810-af7e-04fb840ecd88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d625ae8a-8f1d-4084-b23e-235ff1b413ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0322000-cf43-4fcb-8e75-d63b9e9a4346",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "530d73c1-9699-4354-9618-0c1e3d6224e0"
                    }
                  }
                ]
              },
              {
                "id": "d76cea08-525f-448b-b687-5d0fe864d732",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10be8e7f-f993-44a4-80a2-12ac47a927eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a959295-2ef6-483b-81d2-11610d1fbc1c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfc1f738-8472-478a-ab2d-ee22cded0703",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "56d35fae-0b43-4278-865a-f22000f96290"
                    }
                  }
                ]
              },
              {
                "id": "611a51dd-f961-4b63-b98d-148dad2da02e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67f96594-50c0-41f2-aa31-f858f596ce46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a083a765-f62b-4d00-9498-cd5a789264e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69efc641-d081-4736-b5c7-97afc726db6a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5f91fc99-3407-4dd0-9360-103af902cdcf"
                    }
                  }
                ]
              },
              {
                "id": "26d84bb1-0568-40a4-b6c6-69c0cb07e4ab",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1069ced8-0d26-45d8-b554-436484158855",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "504676b2-0b62-4eed-9f6d-bd6c27c217a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ddb099c-2aa9-4b68-884e-e5ddb1d4c05d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "73f1de73-9ad0-4da7-a7e3-a94829218fdd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cd681773-6f89-4a33-bbd6-0832f5f25fbb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "99ca0cb7-9198-411e-bb99-6cbaa5902c8a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "59e7a4e2-409f-4870-ad22-c46189999c47",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d073e05d-e136-405a-9846-9e2f21d913f2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43ec36d7-136b-4176-9d9c-fea263db979e",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "2283982e-a83b-4b6e-b1ff-298245db029c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28b97769-53ae-4d16-b8b5-3fbc0ae18b72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a60123e5-d605-405a-a219-fb258cf5c2f2"
            }
          }
        ]
      },
      {
        "id": "5fcafc2e-e9a2-4d3a-b26d-ae392235291e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fbaa1178-1f76-428a-a657-1e69625db48e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10af3b38-a22c-4b04-8b4b-2e0b0e9efc5f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60183d85-c686-42e1-9976-c16a26e25c54",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac30de2-8233-4f71-be1a-b9e5f90a214f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "423d5d96-766f-43dc-abab-8d8a225f06ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2105890-19ef-4b0f-9a5b-c687f0a5ca61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5173e9e-210e-45bd-8843-58da16c40cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d96672-4d41-40fb-918e-dbc2971bff76",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d39f032-6200-4b73-8515-19c7a3edd5be",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "878f1e85-4f29-4457-8bfb-a6bf39922027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5870fb-33a2-4e12-957f-5a9c91ac7dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ace9fad5-beff-4a9d-a6de-6008f8c39518"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7f9f971-9426-4e5c-a346-fdd07bcf2e47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e05c4fa-2871-495b-8301-458f07426f11"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "132ab9f4-6b67-4027-9939-b656a8bd9ee8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47157dc9-6237-4c84-b6c4-91cdca3a1015"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7cf315aa-7902-4285-9857-e80ca0b3c384",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "a54a50a4-bad6-4cb1-862e-6a57058cfb00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5bd53f35-b891-42de-a5e7-28317d0d0a52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e43cd8f9-b7ca-46ab-8904-60128c69db02"
            }
          }
        ]
      },
      {
        "id": "c572b579-0d0b-4239-b3b3-c04b009cd483",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6ef59214-52ab-4799-9a6c-b0d48ba40382",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52ae9872-d7ea-4ed7-bca5-58017408d441",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "65bc531b-e574-4ebe-bafb-93456b23f921",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc79d30d-606c-4225-8507-f41f2dd9e6bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39e2f5d9-765a-4c0f-8805-ae994b04c340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1cf0e4-5c6a-402e-aec0-7575e36b8027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a759a5c-b266-4e2a-9d85-966e9d3af662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb021992-fed1-4868-a755-ccda08a381fb",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2258a9c-7c34-4a44-8367-422f13101f5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "116ef8ab-6b6f-46b8-912e-830d5fc9b86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c038e4d-169a-4ecf-90f4-f056b2495572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "565dca38-174e-4461-933d-9670d3f74589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3482c4-03a9-47be-8688-b031dae32a5b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80381a4-f3c4-48ae-9df0-6d8298a36785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5114e408-2a00-4c93-ada2-d669f1ddf457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a7c30a-ab8d-4edb-a083-4319337319b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4601549-8692-49e8-a27f-5666c6d02c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab6dad2-1f11-463e-a881-e831337dfa90",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739211a4-faef-4623-8274-225a5041b0dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "509c51fa-f6be-4ab5-8c50-7bb1463d780f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8d1ce4-596a-481a-a4bf-8300728d8ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd8a3dad-e29c-4a17-b319-5279a12ebd2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24cd42d-9ef0-4fac-9e08-ac10bb594bf0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76020f1-74d2-46f7-8623-98ebc67562c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d58073cd-8579-421e-819e-58ad3b3af4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0096ef-5f1a-4c68-b79a-6b233c57de57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "247ea494-b637-46c9-bc84-2450a44c9ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162e963f-7eb3-4eb0-b4d1-3c97bb13e8e5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36fd9e7-a766-4f20-b7d5-c06a19fe52fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6a5c24e-c1f7-45d9-ad68-920426795ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece1cad4-d35e-46da-8bd0-59caf8347905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dabe1d12-66ff-4687-a9aa-e0012ca3591d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4085e38d-3ae9-4fc5-9424-757cf7dc0179",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "800b65c9-4096-43ec-9e58-0bced1b82a4f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709c989f-d97d-41d9-9c59-b7d2e3d4a6ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "cd34fda3-a8e9-4737-95c2-262ed49e50fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf74e628-26cb-4fb3-be3f-ea4571edbe63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2240897a-4a48-4c91-9039-896cd3c88337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d432a7-da3e-485b-bfda-7dc20cf2982c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e5ca11-5fa3-4fe8-a386-5f669d08bd5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "c8f92638-ebd8-420f-b8bd-62f32e5baf5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d4e602-8ff3-4d8d-b45b-542bf5e39227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4aa59dc-660a-4854-a2c6-b6845133308f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c2e49e9-6e2a-4e05-81ef-df8ef6dd11a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e123497-0337-4933-beae-9619a3bc7b3e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2dc059e-7cc4-44c9-b679-df71e5216114",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "adfa1cc1-323b-410c-ae3f-1c7593096b29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0862603-33bf-4a51-826a-cf4b8bdcf303",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "34f5701e-3601-4ea8-8d99-c01ae575c739"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa2f1d7a-9c5c-4cfa-81f6-2ca5d5285717",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06e41de2-77f6-49bb-a233-2836c4a98e73"
            }
          }
        ]
      },
      {
        "id": "ac9e3187-c9fd-45bc-9bce-4d4ce00f684d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9cb2c281-ae87-4f29-8698-0f8fab05e09d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f74f1622-fd10-4f0c-af3f-92596f9b7122",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c0ddb69-b1a9-4d36-8f3a-2c0d17961d02",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff2b0dc-a7a7-426d-8fdc-b28c5a3fb31e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f2c7d4-52bc-42a9-9254-ffe8e409a765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7515d3ae-b277-4618-89da-c883442e3462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "693daee6-6119-4b43-9387-81049623e3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380fa072-4242-4f21-9b65-46d3dc546033",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b36e365-6b17-4fa4-b871-fa3a045e777f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "864ec1a7-cc63-4a63-ae45-2bd00a5672d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b736e24e-74c3-4c21-bf95-aaa50ec16d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a11e028-c3fd-4f1e-a653-8d82f7b8ebcb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f0b8f6c-acfb-4ea8-be82-8fa6cecd9b9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7ae8db4-3fd4-4a9f-b63a-2b09c04b36ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d7b1f70-c6f8-4a88-bedf-9a90880a0c6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1367985b-9c39-42f2-a89f-55ce65207b49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "215f96ba-428c-485d-a3bc-b29a8d16b41b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "97763a47-465d-4ed5-be02-c8ae28be9eb5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b1fbce1-6bd0-42ae-9ede-5b1805e8d34f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29f615ff-e7ba-4001-a618-0902f2965e3d"
            }
          }
        ]
      },
      {
        "id": "6c285e46-ca40-4023-82f4-cd75ff3b7887",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "81a0425c-eba2-416f-89ac-5d19d5a53574",
            "name": "Negative Testing",
            "item": [
              {
                "id": "390fc875-eed9-4524-a6b2-28678b20a484",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "770ca722-16a4-4eca-8a5d-c91a42fb1c7b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e5b9da-d17c-4b2c-89f9-15c3e0f59c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d065e6-2d8d-4019-9a69-ebf3ca95748e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29230db4-2d2a-49f8-b74b-a45fa01bd5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc46b765-677d-466e-9d1d-8dee9c46cc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a1d092-28eb-4964-a1d2-7ffb0f8291dc",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6070a8-d29e-49de-829f-2593f347816a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "aade21d8-0189-4831-a94f-7d0fe48f24ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "462e1710-9385-4828-821d-5573fda752ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f3dd982-ba36-48c0-8f69-bd737ec2d775"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fea4b039-4500-46fa-8a3a-6b68bfad362c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7678efe2-b662-4914-a189-a830075e5b44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31e9a92e-1d6b-4528-b602-0ae6d383e450",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82ecef1b-ff89-40c7-87f1-f932b47f707c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95a598fd-c928-4b90-b3da-4efedc7585ac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "a7daf2b9-4765-4153-9a12-6c6758ed9b84"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3c0ccb1-0fff-430e-8820-ce9758ce7aee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a74bb75-05bd-4a82-a6d7-12bf4c4eda2a"
            }
          }
        ]
      },
      {
        "id": "edea7eb4-aa55-4fc7-a551-02a30037e127",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0d3ace96-c7e9-489b-94e9-d1463a3349e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fa4ff20-6d8c-497c-890a-f2bce21b4748",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4eae6b00-bd65-41dc-a3d7-1bf202ab4a5c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf46dbba-c04e-4d43-8365-82fcc81b9121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769b9dc5-85ae-422d-9c0d-6c3fdb279d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfda28fe-a18e-420b-906a-be60bc0e1dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "613e2a7a-6baa-416e-95f8-37e34989ff1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1af9857-2914-45e4-94f1-64d12a5b1c80",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce60009-a6be-4cc4-b288-be3d900da98a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2d329ee2-aca4-40f0-a919-33828ab613bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b785ebd-3aa3-4256-8bf3-93c3a022ef88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e26057c3-b055-41ca-b0fc-1b2abe17b42b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f40bec28-2ce5-4650-9ffc-e7b2bec8052c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "457b227a-23e7-495c-b7ae-aa72ad8f187f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4df83ba7-31dc-4722-93e0-0a352e294166",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d04a33a-d559-403a-851c-f58db61dad7f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "082232a2-a5f0-4a46-a26c-d71c70d665ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "120e2b22-4f05-4811-bc84-d942594b78e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4c0bbd9-3338-41f1-8687-f42b1e48ddd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20bc4dcf-40e0-463a-9bb1-99d50b632453"
            }
          }
        ]
      },
      {
        "id": "d6499fd2-78d7-4e17-a74b-a91604bb0549",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "51baad22-7f5c-4e07-a5ba-c5b6ad3a7779",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 103
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 44.12612612612612,
      "responseMin": 4,
      "responseMax": 294,
      "responseSd": 64.35348848032788,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663203305532,
      "completed": 1663203313566
    },
    "executions": [
      {
        "id": "233b52b8-71aa-461d-b1da-2b16e6125c7b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b9bb5459-e2e1-4598-b411-c01745baf94c",
          "httpRequestId": "76f54884-b9cb-4acd-9c2d-b8532d954119"
        },
        "item": {
          "id": "233b52b8-71aa-461d-b1da-2b16e6125c7b",
          "name": "did_json"
        },
        "response": {
          "id": "9ab0db62-28eb-4e22-b533-fcb91d2002a7",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "4671acf8-66e6-4d30-bb07-0fd433f5901c",
        "cursor": {
          "ref": "c11fc187-6556-4963-ac09-4a6b718f6796",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6c47b5b2-ffab-420a-a19e-9c4c56f94887"
        },
        "item": {
          "id": "4671acf8-66e6-4d30-bb07-0fd433f5901c",
          "name": "did:invalid"
        },
        "response": {
          "id": "a9f10f01-6380-4e1a-aff6-329b82247ef2",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4671acf8-66e6-4d30-bb07-0fd433f5901c",
        "cursor": {
          "ref": "c11fc187-6556-4963-ac09-4a6b718f6796",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6c47b5b2-ffab-420a-a19e-9c4c56f94887"
        },
        "item": {
          "id": "4671acf8-66e6-4d30-bb07-0fd433f5901c",
          "name": "did:invalid"
        },
        "response": {
          "id": "a9f10f01-6380-4e1a-aff6-329b82247ef2",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eeda92f-0ffc-443e-84fd-e3e1ca1fc501",
        "cursor": {
          "ref": "69c99eef-a372-4068-aea4-33f967eb914f",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7954f345-2657-42bb-926d-70ca046307ec"
        },
        "item": {
          "id": "0eeda92f-0ffc-443e-84fd-e3e1ca1fc501",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "64556ac0-6a5e-4043-a326-ea7aa8b301b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 154,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "2ff4d4bb-7a5a-426b-b619-de1d80ebd8f8",
        "cursor": {
          "ref": "5c0ee9bb-8ebb-4601-8045-5d762d7c6059",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "efdea088-b131-444e-b5eb-10fe14646d14"
        },
        "item": {
          "id": "2ff4d4bb-7a5a-426b-b619-de1d80ebd8f8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ea50b454-0098-4430-8488-9181146899ce",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "52ff783a-0beb-44ab-b9e1-d94f50d371af",
        "cursor": {
          "ref": "a58b58bd-df5b-4e6f-a52b-653597d6f858",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "78e14b10-f48e-4714-bbe1-a830d37bf1bc"
        },
        "item": {
          "id": "52ff783a-0beb-44ab-b9e1-d94f50d371af",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b6dd7b9a-1772-4cce-924c-9423252bb497",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "af8b84cf-a254-4c44-be5d-e9ba623b9d20",
        "cursor": {
          "ref": "634af6c3-9310-4e09-a59e-97d4287982cb",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5d4dac34-fe36-429a-9be9-57827e7ff1ae"
        },
        "item": {
          "id": "af8b84cf-a254-4c44-be5d-e9ba623b9d20",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b3f38eac-4893-4352-90d9-2555cbccf1d8",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "af8b84cf-a254-4c44-be5d-e9ba623b9d20",
        "cursor": {
          "ref": "634af6c3-9310-4e09-a59e-97d4287982cb",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5d4dac34-fe36-429a-9be9-57827e7ff1ae"
        },
        "item": {
          "id": "af8b84cf-a254-4c44-be5d-e9ba623b9d20",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b3f38eac-4893-4352-90d9-2555cbccf1d8",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "afced5e3-01a4-46d4-84e4-8c35e6176667",
        "cursor": {
          "ref": "21ceb9b2-79b5-4163-9f62-9e2945c9da60",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "69aaaef9-9ef9-43b1-98ea-f1b02546a3b9"
        },
        "item": {
          "id": "afced5e3-01a4-46d4-84e4-8c35e6176667",
          "name": "identifiers"
        },
        "response": {
          "id": "5769ec96-665d-4b27-bcf3-4486f95662db",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb38071-16a1-40f0-808b-3663245a4b1d",
        "cursor": {
          "ref": "041aa1a5-038c-4cbb-b566-5f65d5a1e267",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0edf14f2-8950-4e99-8487-46c36f281f6e"
        },
        "item": {
          "id": "4cb38071-16a1-40f0-808b-3663245a4b1d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fd86ca39-f34b-4161-abdd-4c5b3a40a988",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 259,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4cb38071-16a1-40f0-808b-3663245a4b1d",
        "cursor": {
          "ref": "041aa1a5-038c-4cbb-b566-5f65d5a1e267",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0edf14f2-8950-4e99-8487-46c36f281f6e"
        },
        "item": {
          "id": "4cb38071-16a1-40f0-808b-3663245a4b1d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fd86ca39-f34b-4161-abdd-4c5b3a40a988",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 259,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4cb38071-16a1-40f0-808b-3663245a4b1d",
        "cursor": {
          "ref": "041aa1a5-038c-4cbb-b566-5f65d5a1e267",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0edf14f2-8950-4e99-8487-46c36f281f6e"
        },
        "item": {
          "id": "4cb38071-16a1-40f0-808b-3663245a4b1d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fd86ca39-f34b-4161-abdd-4c5b3a40a988",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 259,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3655adf8-3e3b-4a3c-9ce1-59f54c48c524",
        "cursor": {
          "ref": "ee17fbb9-685b-49a7-bc10-79f7a346642c",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7c67cd05-5663-4b6a-ac6b-b53be51f743a"
        },
        "item": {
          "id": "3655adf8-3e3b-4a3c-9ce1-59f54c48c524",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "88032c8c-e3f4-4bf1-813d-123b10e0d295",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "3655adf8-3e3b-4a3c-9ce1-59f54c48c524",
        "cursor": {
          "ref": "ee17fbb9-685b-49a7-bc10-79f7a346642c",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7c67cd05-5663-4b6a-ac6b-b53be51f743a"
        },
        "item": {
          "id": "3655adf8-3e3b-4a3c-9ce1-59f54c48c524",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "88032c8c-e3f4-4bf1-813d-123b10e0d295",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "70897dbd-b1a4-499a-b0e6-3d492a8cd4c7",
        "cursor": {
          "ref": "29194373-2805-47c7-9366-2a9e4f48689f",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cee0ad25-3c03-4924-b1d6-764bc5307b9d"
        },
        "item": {
          "id": "70897dbd-b1a4-499a-b0e6-3d492a8cd4c7",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "a3aa24ca-c00a-4945-af2d-56e40d8cbfa2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "70897dbd-b1a4-499a-b0e6-3d492a8cd4c7",
        "cursor": {
          "ref": "29194373-2805-47c7-9366-2a9e4f48689f",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cee0ad25-3c03-4924-b1d6-764bc5307b9d"
        },
        "item": {
          "id": "70897dbd-b1a4-499a-b0e6-3d492a8cd4c7",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "a3aa24ca-c00a-4945-af2d-56e40d8cbfa2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3a8e5a5a-3536-4cea-910f-fc8e535c8402",
        "cursor": {
          "ref": "a1261c1f-9498-49a9-b99f-722fbbc75606",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "04590cdb-da0c-4c18-9dbd-115f237d4077"
        },
        "item": {
          "id": "3a8e5a5a-3536-4cea-910f-fc8e535c8402",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "369cddad-9a93-4387-a28d-230b5b6d3d09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "3a8e5a5a-3536-4cea-910f-fc8e535c8402",
        "cursor": {
          "ref": "a1261c1f-9498-49a9-b99f-722fbbc75606",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "04590cdb-da0c-4c18-9dbd-115f237d4077"
        },
        "item": {
          "id": "3a8e5a5a-3536-4cea-910f-fc8e535c8402",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "369cddad-9a93-4387-a28d-230b5b6d3d09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e06c426f-29b0-40e3-a4db-05de16e05679",
        "cursor": {
          "ref": "65ed9674-e5e3-498f-bef2-c3210c9b6464",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "46fb4201-9244-4bee-bac3-309a2aeb0a3b"
        },
        "item": {
          "id": "e06c426f-29b0-40e3-a4db-05de16e05679",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "e9da885d-1b5a-4819-a9c9-dfb99d30ccc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "e06c426f-29b0-40e3-a4db-05de16e05679",
        "cursor": {
          "ref": "65ed9674-e5e3-498f-bef2-c3210c9b6464",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "46fb4201-9244-4bee-bac3-309a2aeb0a3b"
        },
        "item": {
          "id": "e06c426f-29b0-40e3-a4db-05de16e05679",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "e9da885d-1b5a-4819-a9c9-dfb99d30ccc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "57231dfd-9f37-42a8-8728-ee2a0646a3a1",
        "cursor": {
          "ref": "1e4decbd-220f-4e8c-8a9c-f4dc9e8ef21b",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "54433d98-f2c0-4b30-bbad-153469aca66f"
        },
        "item": {
          "id": "57231dfd-9f37-42a8-8728-ee2a0646a3a1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9bda3823-8963-473e-bfb0-c36e1cb6d019",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "57231dfd-9f37-42a8-8728-ee2a0646a3a1",
        "cursor": {
          "ref": "1e4decbd-220f-4e8c-8a9c-f4dc9e8ef21b",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "54433d98-f2c0-4b30-bbad-153469aca66f"
        },
        "item": {
          "id": "57231dfd-9f37-42a8-8728-ee2a0646a3a1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9bda3823-8963-473e-bfb0-c36e1cb6d019",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "619529f9-9c2d-4e74-815e-886df0d60135",
        "cursor": {
          "ref": "8b6ec728-3f0a-4d6e-affd-0c8bcf4e70ce",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0c93ec3b-8849-4ee0-8665-2c8fc7f68e78"
        },
        "item": {
          "id": "619529f9-9c2d-4e74-815e-886df0d60135",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "563f81e6-f115-4d6d-b4eb-0e9bd6db6035",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "619529f9-9c2d-4e74-815e-886df0d60135",
        "cursor": {
          "ref": "8b6ec728-3f0a-4d6e-affd-0c8bcf4e70ce",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0c93ec3b-8849-4ee0-8665-2c8fc7f68e78"
        },
        "item": {
          "id": "619529f9-9c2d-4e74-815e-886df0d60135",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "563f81e6-f115-4d6d-b4eb-0e9bd6db6035",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "5af4e48e-c8e6-4684-a80c-e0136381e843",
        "cursor": {
          "ref": "7b013a35-29cc-4a22-ad12-97c1aa8bfe9b",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "aff488a6-accb-4c46-9539-4036f084cf44"
        },
        "item": {
          "id": "5af4e48e-c8e6-4684-a80c-e0136381e843",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "96ea8722-02c7-49ac-a8b4-bb61ad5c65b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "5af4e48e-c8e6-4684-a80c-e0136381e843",
        "cursor": {
          "ref": "7b013a35-29cc-4a22-ad12-97c1aa8bfe9b",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "aff488a6-accb-4c46-9539-4036f084cf44"
        },
        "item": {
          "id": "5af4e48e-c8e6-4684-a80c-e0136381e843",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "96ea8722-02c7-49ac-a8b4-bb61ad5c65b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "0ee19f60-cd67-4aa9-9952-1fe87c0c0e98",
        "cursor": {
          "ref": "a035a9d7-3c07-423e-a24c-38f3e5cf4499",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "430fcbb3-3269-4d74-8a50-da95401fd828"
        },
        "item": {
          "id": "0ee19f60-cd67-4aa9-9952-1fe87c0c0e98",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f2830b5e-cd96-4047-b445-98ff74b4b8f7",
          "status": "Created",
          "code": 201,
          "responseTime": 49,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "0ee19f60-cd67-4aa9-9952-1fe87c0c0e98",
        "cursor": {
          "ref": "a035a9d7-3c07-423e-a24c-38f3e5cf4499",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "430fcbb3-3269-4d74-8a50-da95401fd828"
        },
        "item": {
          "id": "0ee19f60-cd67-4aa9-9952-1fe87c0c0e98",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f2830b5e-cd96-4047-b445-98ff74b4b8f7",
          "status": "Created",
          "code": 201,
          "responseTime": 49,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a1ba0b7d-3705-410b-86a7-683272dc72bf",
        "cursor": {
          "ref": "b7c5d356-9d01-4018-90c7-9cffc0c4ca38",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1facc3b7-5552-489a-af9b-a245e3731385"
        },
        "item": {
          "id": "a1ba0b7d-3705-410b-86a7-683272dc72bf",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "8b78b1c0-9b3b-4cdf-a28a-0fc518ba5015",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "a1ba0b7d-3705-410b-86a7-683272dc72bf",
        "cursor": {
          "ref": "b7c5d356-9d01-4018-90c7-9cffc0c4ca38",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1facc3b7-5552-489a-af9b-a245e3731385"
        },
        "item": {
          "id": "a1ba0b7d-3705-410b-86a7-683272dc72bf",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "8b78b1c0-9b3b-4cdf-a28a-0fc518ba5015",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "abca32e0-41fb-45d0-9736-abcecbe93605",
        "cursor": {
          "ref": "7c03eba9-f34e-4f32-9346-9dfdb391f6f3",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b8038cb5-1ec6-473c-b381-f64f55add98f"
        },
        "item": {
          "id": "abca32e0-41fb-45d0-9736-abcecbe93605",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "566568ec-5dbe-4ed0-91a5-58b4562071f7",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "abca32e0-41fb-45d0-9736-abcecbe93605",
        "cursor": {
          "ref": "7c03eba9-f34e-4f32-9346-9dfdb391f6f3",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b8038cb5-1ec6-473c-b381-f64f55add98f"
        },
        "item": {
          "id": "abca32e0-41fb-45d0-9736-abcecbe93605",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "566568ec-5dbe-4ed0-91a5-58b4562071f7",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "521bb483-8ad8-48f8-abb3-ec6504f7f9b4",
        "cursor": {
          "ref": "6a729724-fc62-4cbb-971a-594e7e76e479",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3d3cce4b-9391-41b0-b116-878265046c94"
        },
        "item": {
          "id": "521bb483-8ad8-48f8-abb3-ec6504f7f9b4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "97619121-77c0-4f84-a26d-c5abe431af35",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "521bb483-8ad8-48f8-abb3-ec6504f7f9b4",
        "cursor": {
          "ref": "6a729724-fc62-4cbb-971a-594e7e76e479",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3d3cce4b-9391-41b0-b116-878265046c94"
        },
        "item": {
          "id": "521bb483-8ad8-48f8-abb3-ec6504f7f9b4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "97619121-77c0-4f84-a26d-c5abe431af35",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "843324a7-4994-45ea-86e3-3104285e957e",
        "cursor": {
          "ref": "e2dcd1d2-d8dd-4d7a-bb55-478d53668436",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "00242ba0-d043-4a72-b3d8-35fb9b650ccb"
        },
        "item": {
          "id": "843324a7-4994-45ea-86e3-3104285e957e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6049ff98-5eb0-4ecf-a737-b1b6bbcbaa52",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "843324a7-4994-45ea-86e3-3104285e957e",
        "cursor": {
          "ref": "e2dcd1d2-d8dd-4d7a-bb55-478d53668436",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "00242ba0-d043-4a72-b3d8-35fb9b650ccb"
        },
        "item": {
          "id": "843324a7-4994-45ea-86e3-3104285e957e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6049ff98-5eb0-4ecf-a737-b1b6bbcbaa52",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "202a83b4-ac3a-4130-9474-c45446845da8",
        "cursor": {
          "ref": "233f8de1-dccb-4fdc-a9f1-21d29264eb76",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2a742dd2-ff2a-4ea9-8a6e-4dc5b274fd93"
        },
        "item": {
          "id": "202a83b4-ac3a-4130-9474-c45446845da8",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "5d58220a-47b6-437e-8d4b-857c9ad8386f",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "202a83b4-ac3a-4130-9474-c45446845da8",
        "cursor": {
          "ref": "233f8de1-dccb-4fdc-a9f1-21d29264eb76",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2a742dd2-ff2a-4ea9-8a6e-4dc5b274fd93"
        },
        "item": {
          "id": "202a83b4-ac3a-4130-9474-c45446845da8",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "5d58220a-47b6-437e-8d4b-857c9ad8386f",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "3dc95a6a-eedc-4278-892e-78dfe4fb04c9",
        "cursor": {
          "ref": "3dd862c4-e018-4c53-9656-43145e5f15cf",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3594982c-fb27-436f-b168-de9c8ac2bc13"
        },
        "item": {
          "id": "3dc95a6a-eedc-4278-892e-78dfe4fb04c9",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "a7bd0fa9-4289-4749-a510-22b3cb43678b",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "3dc95a6a-eedc-4278-892e-78dfe4fb04c9",
        "cursor": {
          "ref": "3dd862c4-e018-4c53-9656-43145e5f15cf",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3594982c-fb27-436f-b168-de9c8ac2bc13"
        },
        "item": {
          "id": "3dc95a6a-eedc-4278-892e-78dfe4fb04c9",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "a7bd0fa9-4289-4749-a510-22b3cb43678b",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e0c57560-2be5-4960-9356-995567c728d7",
        "cursor": {
          "ref": "e7c1a924-3376-46a9-8a22-e5b7aba2dae4",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "30d0ddca-ca69-4ed1-be1e-0b66fc0eb0f4"
        },
        "item": {
          "id": "e0c57560-2be5-4960-9356-995567c728d7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e9e59532-b692-4c77-8eeb-8993b8aac879",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e0c57560-2be5-4960-9356-995567c728d7",
        "cursor": {
          "ref": "e7c1a924-3376-46a9-8a22-e5b7aba2dae4",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "30d0ddca-ca69-4ed1-be1e-0b66fc0eb0f4"
        },
        "item": {
          "id": "e0c57560-2be5-4960-9356-995567c728d7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e9e59532-b692-4c77-8eeb-8993b8aac879",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b7a80d59-4715-4c3d-88da-f973dd7c0dd5",
        "cursor": {
          "ref": "ab307be4-8647-4a3f-88fe-4f1f9fa85b2a",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ecac9b24-c567-4437-be25-bf5cbc5cd8b1"
        },
        "item": {
          "id": "b7a80d59-4715-4c3d-88da-f973dd7c0dd5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f2a821c4-6186-4866-a86c-8e7d2014d932",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "b7a80d59-4715-4c3d-88da-f973dd7c0dd5",
        "cursor": {
          "ref": "ab307be4-8647-4a3f-88fe-4f1f9fa85b2a",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ecac9b24-c567-4437-be25-bf5cbc5cd8b1"
        },
        "item": {
          "id": "b7a80d59-4715-4c3d-88da-f973dd7c0dd5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f2a821c4-6186-4866-a86c-8e7d2014d932",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "7bd7187b-1501-48c3-b02e-cdce20230251",
        "cursor": {
          "ref": "4534cc88-5db1-4870-9447-ed9d3a0db742",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "99f22710-411d-43e6-97dd-209d7d57a677"
        },
        "item": {
          "id": "7bd7187b-1501-48c3-b02e-cdce20230251",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "4c998780-465b-4c82-80a9-9c5b8bcb70ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "7bd7187b-1501-48c3-b02e-cdce20230251",
        "cursor": {
          "ref": "4534cc88-5db1-4870-9447-ed9d3a0db742",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "99f22710-411d-43e6-97dd-209d7d57a677"
        },
        "item": {
          "id": "7bd7187b-1501-48c3-b02e-cdce20230251",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "4c998780-465b-4c82-80a9-9c5b8bcb70ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9ca33b34-3383-4feb-831c-3c285509ee8a",
        "cursor": {
          "ref": "a330e77a-1961-440d-a753-c334a882e011",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7d0aa9d0-8226-410d-bac8-6bee4c1fc89e"
        },
        "item": {
          "id": "9ca33b34-3383-4feb-831c-3c285509ee8a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c3c45d8a-e350-4969-b708-349cf11cd302",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "9ca33b34-3383-4feb-831c-3c285509ee8a",
        "cursor": {
          "ref": "a330e77a-1961-440d-a753-c334a882e011",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7d0aa9d0-8226-410d-bac8-6bee4c1fc89e"
        },
        "item": {
          "id": "9ca33b34-3383-4feb-831c-3c285509ee8a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c3c45d8a-e350-4969-b708-349cf11cd302",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "64420668-2481-4e2f-974f-3e9599672b2b",
        "cursor": {
          "ref": "752284f2-f043-489b-9adb-cb1c6d5cade9",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "20157dae-cddf-4d43-894f-5b5c08367b91"
        },
        "item": {
          "id": "64420668-2481-4e2f-974f-3e9599672b2b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "aaf9bbcb-efd1-4609-ba5a-4ad0f4c03eee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "64420668-2481-4e2f-974f-3e9599672b2b",
        "cursor": {
          "ref": "752284f2-f043-489b-9adb-cb1c6d5cade9",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "20157dae-cddf-4d43-894f-5b5c08367b91"
        },
        "item": {
          "id": "64420668-2481-4e2f-974f-3e9599672b2b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "aaf9bbcb-efd1-4609-ba5a-4ad0f4c03eee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "8b48b23e-39bb-4301-a57b-c190113566d6",
        "cursor": {
          "ref": "31a4a3d7-f958-440b-b547-bebdbcf14ee1",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fd0a3fdd-88b2-48bf-94a2-50c0c71b422c"
        },
        "item": {
          "id": "8b48b23e-39bb-4301-a57b-c190113566d6",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f728cf96-b1aa-42b5-b4a9-2b5b88693119",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "8b48b23e-39bb-4301-a57b-c190113566d6",
        "cursor": {
          "ref": "31a4a3d7-f958-440b-b547-bebdbcf14ee1",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fd0a3fdd-88b2-48bf-94a2-50c0c71b422c"
        },
        "item": {
          "id": "8b48b23e-39bb-4301-a57b-c190113566d6",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f728cf96-b1aa-42b5-b4a9-2b5b88693119",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "7df6a019-d96a-4b59-a41c-a0d0edf04279",
        "cursor": {
          "ref": "1ed35820-9443-41e9-af30-441cf4f61568",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "19ff4755-8b79-4d96-9577-deba26258dcf"
        },
        "item": {
          "id": "7df6a019-d96a-4b59-a41c-a0d0edf04279",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "fe6d6c67-71c5-4733-8e20-7afa15d9af12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7df6a019-d96a-4b59-a41c-a0d0edf04279",
        "cursor": {
          "ref": "1ed35820-9443-41e9-af30-441cf4f61568",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "19ff4755-8b79-4d96-9577-deba26258dcf"
        },
        "item": {
          "id": "7df6a019-d96a-4b59-a41c-a0d0edf04279",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "fe6d6c67-71c5-4733-8e20-7afa15d9af12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "c5d4aa8e-6925-4ce5-89c2-1e2e3150b452",
        "cursor": {
          "ref": "d319a1d9-0442-4019-93f1-11e60fa1725e",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4b03363f-444d-4bf2-a934-d693fc9d6626"
        },
        "item": {
          "id": "c5d4aa8e-6925-4ce5-89c2-1e2e3150b452",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "dbb81f6c-969b-4cb7-a8aa-06989f5d3d8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "c5d4aa8e-6925-4ce5-89c2-1e2e3150b452",
        "cursor": {
          "ref": "d319a1d9-0442-4019-93f1-11e60fa1725e",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4b03363f-444d-4bf2-a934-d693fc9d6626"
        },
        "item": {
          "id": "c5d4aa8e-6925-4ce5-89c2-1e2e3150b452",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "dbb81f6c-969b-4cb7-a8aa-06989f5d3d8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d7e949ab-e4d1-421b-9f6b-da695f5dc045",
        "cursor": {
          "ref": "5dc73e77-e3f7-44ce-ae19-1c0c56902b98",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9c581177-4a5d-4a91-b2dc-6f304dd8fe5d"
        },
        "item": {
          "id": "d7e949ab-e4d1-421b-9f6b-da695f5dc045",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "660d3d0b-ae59-4ac5-bb05-f03e912e6a91",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "d7e949ab-e4d1-421b-9f6b-da695f5dc045",
        "cursor": {
          "ref": "5dc73e77-e3f7-44ce-ae19-1c0c56902b98",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9c581177-4a5d-4a91-b2dc-6f304dd8fe5d"
        },
        "item": {
          "id": "d7e949ab-e4d1-421b-9f6b-da695f5dc045",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "660d3d0b-ae59-4ac5-bb05-f03e912e6a91",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "f24be673-0952-4d09-b3a1-6ba890e0af4e",
        "cursor": {
          "ref": "fcbcb0cc-0508-4cc7-b542-924905c96408",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ae1f4e80-16f4-4568-adbe-d77f1e1dab24"
        },
        "item": {
          "id": "f24be673-0952-4d09-b3a1-6ba890e0af4e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "99b20868-5a81-43f1-b7e8-9a52cb83b604",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f24be673-0952-4d09-b3a1-6ba890e0af4e",
        "cursor": {
          "ref": "fcbcb0cc-0508-4cc7-b542-924905c96408",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ae1f4e80-16f4-4568-adbe-d77f1e1dab24"
        },
        "item": {
          "id": "f24be673-0952-4d09-b3a1-6ba890e0af4e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "99b20868-5a81-43f1-b7e8-9a52cb83b604",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8c5d8eb0-ea78-4a75-9b3d-db58b0912934",
        "cursor": {
          "ref": "651e7290-a6c4-4100-9cbd-4118d0ac89f2",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d18383f8-26d5-4904-a543-13b09d8f96c4"
        },
        "item": {
          "id": "8c5d8eb0-ea78-4a75-9b3d-db58b0912934",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "4a17d0ce-0c8f-4b62-b33d-af7eb7674d15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "8c5d8eb0-ea78-4a75-9b3d-db58b0912934",
        "cursor": {
          "ref": "651e7290-a6c4-4100-9cbd-4118d0ac89f2",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d18383f8-26d5-4904-a543-13b09d8f96c4"
        },
        "item": {
          "id": "8c5d8eb0-ea78-4a75-9b3d-db58b0912934",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "4a17d0ce-0c8f-4b62-b33d-af7eb7674d15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "c0f7afad-f871-49b1-995b-f9e6b8975286",
        "cursor": {
          "ref": "95faca7c-b287-4015-9e3d-27dbed1b90f3",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c780317a-51d1-417d-bc24-e478729b1bda"
        },
        "item": {
          "id": "c0f7afad-f871-49b1-995b-f9e6b8975286",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6579ed21-d135-4db4-9684-5facab7824b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "c0f7afad-f871-49b1-995b-f9e6b8975286",
        "cursor": {
          "ref": "95faca7c-b287-4015-9e3d-27dbed1b90f3",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c780317a-51d1-417d-bc24-e478729b1bda"
        },
        "item": {
          "id": "c0f7afad-f871-49b1-995b-f9e6b8975286",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6579ed21-d135-4db4-9684-5facab7824b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "5557498d-939e-45e7-a3a8-8fdd5d3fa140",
        "cursor": {
          "ref": "08c4cf01-e9d0-4a04-9bb3-9cc27e90bb28",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "dd07b116-ff7b-4a31-8880-f19c07fc6554"
        },
        "item": {
          "id": "5557498d-939e-45e7-a3a8-8fdd5d3fa140",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "bbac934f-57da-439d-958b-82c387d1bac8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "5557498d-939e-45e7-a3a8-8fdd5d3fa140",
        "cursor": {
          "ref": "08c4cf01-e9d0-4a04-9bb3-9cc27e90bb28",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "dd07b116-ff7b-4a31-8880-f19c07fc6554"
        },
        "item": {
          "id": "5557498d-939e-45e7-a3a8-8fdd5d3fa140",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "bbac934f-57da-439d-958b-82c387d1bac8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "7f4a2961-94cf-443d-ab4f-7991b8394f0c",
        "cursor": {
          "ref": "e89e9013-df00-4e85-a4ac-fdf9634b88cb",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2cfd4426-d201-4fe6-8976-4a3a17cdda6e"
        },
        "item": {
          "id": "7f4a2961-94cf-443d-ab4f-7991b8394f0c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "aca74d71-e72a-4654-95d3-0ea553d1ca66",
          "status": "Created",
          "code": 201,
          "responseTime": 124,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "7f4a2961-94cf-443d-ab4f-7991b8394f0c",
        "cursor": {
          "ref": "e89e9013-df00-4e85-a4ac-fdf9634b88cb",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2cfd4426-d201-4fe6-8976-4a3a17cdda6e"
        },
        "item": {
          "id": "7f4a2961-94cf-443d-ab4f-7991b8394f0c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "aca74d71-e72a-4654-95d3-0ea553d1ca66",
          "status": "Created",
          "code": 201,
          "responseTime": 124,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "21f4e47f-6a2f-4829-ab6a-1d83f034b939",
        "cursor": {
          "ref": "e8a00dd3-5b69-4a91-87b7-4cf791e7b9cd",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "84d5c67c-1bf6-49e1-ad84-4623c3ef7b6c"
        },
        "item": {
          "id": "21f4e47f-6a2f-4829-ab6a-1d83f034b939",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "38e74f5c-3a30-46f1-a83c-e4ce1c9b4ce6",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "21f4e47f-6a2f-4829-ab6a-1d83f034b939",
        "cursor": {
          "ref": "e8a00dd3-5b69-4a91-87b7-4cf791e7b9cd",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "84d5c67c-1bf6-49e1-ad84-4623c3ef7b6c"
        },
        "item": {
          "id": "21f4e47f-6a2f-4829-ab6a-1d83f034b939",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "38e74f5c-3a30-46f1-a83c-e4ce1c9b4ce6",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "310e0536-e267-4c5a-acfe-f7f219c37fb8",
        "cursor": {
          "ref": "01469366-c90c-487d-88d9-4fe1bf271081",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "11c584b6-8713-4f64-a2ad-75e6e77234a4"
        },
        "item": {
          "id": "310e0536-e267-4c5a-acfe-f7f219c37fb8",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "d6143749-710b-4f33-954d-28463097825c",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "310e0536-e267-4c5a-acfe-f7f219c37fb8",
        "cursor": {
          "ref": "01469366-c90c-487d-88d9-4fe1bf271081",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "11c584b6-8713-4f64-a2ad-75e6e77234a4"
        },
        "item": {
          "id": "310e0536-e267-4c5a-acfe-f7f219c37fb8",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "d6143749-710b-4f33-954d-28463097825c",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "a5838c95-4153-435e-a136-4b9510fa4d3a",
        "cursor": {
          "ref": "be2a8512-4225-4358-9999-292024af66a9",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "11727e25-6224-47a2-a8a3-6ae662051bda"
        },
        "item": {
          "id": "a5838c95-4153-435e-a136-4b9510fa4d3a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "94bd9b84-5688-422e-b0dc-b03615e821c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a5838c95-4153-435e-a136-4b9510fa4d3a",
        "cursor": {
          "ref": "be2a8512-4225-4358-9999-292024af66a9",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "11727e25-6224-47a2-a8a3-6ae662051bda"
        },
        "item": {
          "id": "a5838c95-4153-435e-a136-4b9510fa4d3a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "94bd9b84-5688-422e-b0dc-b03615e821c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "302e8acf-0b3d-40a4-99f1-601df312eecb",
        "cursor": {
          "ref": "5b0cb027-fa0b-46df-8030-06e990666e2b",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0d9ae70e-6417-4fc6-96a1-4a18b194eadd"
        },
        "item": {
          "id": "302e8acf-0b3d-40a4-99f1-601df312eecb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ff129159-8269-4169-b07b-ecd5a0727b54",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "302e8acf-0b3d-40a4-99f1-601df312eecb",
        "cursor": {
          "ref": "5b0cb027-fa0b-46df-8030-06e990666e2b",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0d9ae70e-6417-4fc6-96a1-4a18b194eadd"
        },
        "item": {
          "id": "302e8acf-0b3d-40a4-99f1-601df312eecb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ff129159-8269-4169-b07b-ecd5a0727b54",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9bd9e234-04bc-4ea6-be22-7ff9850d0400",
        "cursor": {
          "ref": "c2f2201b-f39b-4dee-810d-22ccbee87de6",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a9a6e196-8d84-4430-b6da-83b990f3fcf5"
        },
        "item": {
          "id": "9bd9e234-04bc-4ea6-be22-7ff9850d0400",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c3d32ecc-7589-4bb0-aec2-6a72493c55bd",
          "status": "Created",
          "code": 201,
          "responseTime": 28,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd9e234-04bc-4ea6-be22-7ff9850d0400",
        "cursor": {
          "ref": "c2f2201b-f39b-4dee-810d-22ccbee87de6",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a9a6e196-8d84-4430-b6da-83b990f3fcf5"
        },
        "item": {
          "id": "9bd9e234-04bc-4ea6-be22-7ff9850d0400",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c3d32ecc-7589-4bb0-aec2-6a72493c55bd",
          "status": "Created",
          "code": 201,
          "responseTime": 28,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed692f61-ff6c-48ed-9487-63f96b69ba92",
        "cursor": {
          "ref": "35b25779-007e-4eb1-b166-efabc5fdfa5c",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e84ab939-4225-404b-8deb-7b687971d5a0"
        },
        "item": {
          "id": "ed692f61-ff6c-48ed-9487-63f96b69ba92",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c7744d35-d673-4d99-82c1-8c65d96896c7",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed692f61-ff6c-48ed-9487-63f96b69ba92",
        "cursor": {
          "ref": "35b25779-007e-4eb1-b166-efabc5fdfa5c",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e84ab939-4225-404b-8deb-7b687971d5a0"
        },
        "item": {
          "id": "ed692f61-ff6c-48ed-9487-63f96b69ba92",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c7744d35-d673-4d99-82c1-8c65d96896c7",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea3ea6c-67ba-4ef0-a7af-7c25593de68c",
        "cursor": {
          "ref": "0e3a5009-5c32-4f74-893c-b97b471e7853",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3af9b121-8efb-473d-84f1-056cfd431ca1"
        },
        "item": {
          "id": "0ea3ea6c-67ba-4ef0-a7af-7c25593de68c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e5eb8aec-3191-4fc7-abfb-f754657030d0",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea3ea6c-67ba-4ef0-a7af-7c25593de68c",
        "cursor": {
          "ref": "0e3a5009-5c32-4f74-893c-b97b471e7853",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3af9b121-8efb-473d-84f1-056cfd431ca1"
        },
        "item": {
          "id": "0ea3ea6c-67ba-4ef0-a7af-7c25593de68c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e5eb8aec-3191-4fc7-abfb-f754657030d0",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bf5f4c-45d8-49c2-a516-1dda2a383788",
        "cursor": {
          "ref": "a3e8518f-a822-4a3f-b2a4-5c72e7c9d091",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2321771b-55aa-4403-be61-2c3ef90a4bf6"
        },
        "item": {
          "id": "54bf5f4c-45d8-49c2-a516-1dda2a383788",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1ad6a18f-5772-4c09-af70-c8aca220e9bf",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bf5f4c-45d8-49c2-a516-1dda2a383788",
        "cursor": {
          "ref": "a3e8518f-a822-4a3f-b2a4-5c72e7c9d091",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2321771b-55aa-4403-be61-2c3ef90a4bf6"
        },
        "item": {
          "id": "54bf5f4c-45d8-49c2-a516-1dda2a383788",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1ad6a18f-5772-4c09-af70-c8aca220e9bf",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76cea08-525f-448b-b687-5d0fe864d732",
        "cursor": {
          "ref": "cdd32584-77ec-43b7-90f0-032d6b83c144",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2314f5ac-dac0-40ae-85f3-9e153487e66e"
        },
        "item": {
          "id": "d76cea08-525f-448b-b687-5d0fe864d732",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3de4c36f-0d75-42f0-a2bd-0884cf997e56",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76cea08-525f-448b-b687-5d0fe864d732",
        "cursor": {
          "ref": "cdd32584-77ec-43b7-90f0-032d6b83c144",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2314f5ac-dac0-40ae-85f3-9e153487e66e"
        },
        "item": {
          "id": "d76cea08-525f-448b-b687-5d0fe864d732",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3de4c36f-0d75-42f0-a2bd-0884cf997e56",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "611a51dd-f961-4b63-b98d-148dad2da02e",
        "cursor": {
          "ref": "aac41bd9-306e-4978-85e6-24be509780f3",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "11c12fcc-406b-4c8d-a4c1-5000c128bd6b"
        },
        "item": {
          "id": "611a51dd-f961-4b63-b98d-148dad2da02e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "09e8be61-c3c8-49f1-869e-3ba71d7dc546",
          "status": "Created",
          "code": 201,
          "responseTime": 52,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "611a51dd-f961-4b63-b98d-148dad2da02e",
        "cursor": {
          "ref": "aac41bd9-306e-4978-85e6-24be509780f3",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "11c12fcc-406b-4c8d-a4c1-5000c128bd6b"
        },
        "item": {
          "id": "611a51dd-f961-4b63-b98d-148dad2da02e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "09e8be61-c3c8-49f1-869e-3ba71d7dc546",
          "status": "Created",
          "code": 201,
          "responseTime": 52,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d84bb1-0568-40a4-b6c6-69c0cb07e4ab",
        "cursor": {
          "ref": "13af4f9b-cad9-4405-bff9-194d3d530c0b",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b08b277e-f794-456d-9699-8362a2ae42d0"
        },
        "item": {
          "id": "26d84bb1-0568-40a4-b6c6-69c0cb07e4ab",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "49127caa-6fd6-459d-a8ef-3102a658e30b",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d84bb1-0568-40a4-b6c6-69c0cb07e4ab",
        "cursor": {
          "ref": "13af4f9b-cad9-4405-bff9-194d3d530c0b",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b08b277e-f794-456d-9699-8362a2ae42d0"
        },
        "item": {
          "id": "26d84bb1-0568-40a4-b6c6-69c0cb07e4ab",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "49127caa-6fd6-459d-a8ef-3102a658e30b",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60183d85-c686-42e1-9976-c16a26e25c54",
        "cursor": {
          "ref": "12f54efa-48b7-46b8-ad73-fc9dd9ffb736",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d975a42d-6357-45ca-9fd4-cdad154a7235"
        },
        "item": {
          "id": "60183d85-c686-42e1-9976-c16a26e25c54",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d1662845-06ec-4738-83cf-7690cad29d26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "60183d85-c686-42e1-9976-c16a26e25c54",
        "cursor": {
          "ref": "12f54efa-48b7-46b8-ad73-fc9dd9ffb736",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d975a42d-6357-45ca-9fd4-cdad154a7235"
        },
        "item": {
          "id": "60183d85-c686-42e1-9976-c16a26e25c54",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d1662845-06ec-4738-83cf-7690cad29d26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b3d96672-4d41-40fb-918e-dbc2971bff76",
        "cursor": {
          "ref": "34840282-2c04-4292-a5d3-d769ac464169",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "90dd5d76-7cef-46df-a65b-6940d36dddfb"
        },
        "item": {
          "id": "b3d96672-4d41-40fb-918e-dbc2971bff76",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e812cb2e-0747-4d87-aca0-50242fd892af",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 7,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "65bc531b-e574-4ebe-bafb-93456b23f921",
        "cursor": {
          "ref": "4887a894-339c-4a30-b7ca-00aa4bdd7bb0",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b57a8b78-1881-4688-993c-f32cb7755dc8"
        },
        "item": {
          "id": "65bc531b-e574-4ebe-bafb-93456b23f921",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "44b3f898-70c8-4d96-b0ea-3b85e18270c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 13,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "65bc531b-e574-4ebe-bafb-93456b23f921",
        "cursor": {
          "ref": "4887a894-339c-4a30-b7ca-00aa4bdd7bb0",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b57a8b78-1881-4688-993c-f32cb7755dc8"
        },
        "item": {
          "id": "65bc531b-e574-4ebe-bafb-93456b23f921",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "44b3f898-70c8-4d96-b0ea-3b85e18270c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 13,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cb021992-fed1-4868-a755-ccda08a381fb",
        "cursor": {
          "ref": "a3c1474c-2fe1-47a0-9186-0788c0a92209",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5643b696-75bf-4ea0-ae8f-3b66c7ad8dda"
        },
        "item": {
          "id": "cb021992-fed1-4868-a755-ccda08a381fb",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fac51652-a37b-437e-bb72-a18f2a3798fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3d3482c4-03a9-47be-8688-b031dae32a5b",
        "cursor": {
          "ref": "efa5fd22-a868-4f0f-beaa-50ea3bf1239b",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d39ecfbf-414c-463d-b2cb-02597a1d4b20"
        },
        "item": {
          "id": "3d3482c4-03a9-47be-8688-b031dae32a5b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1434c721-aa87-4eb7-82f0-dc52fcaec094",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2ab6dad2-1f11-463e-a881-e831337dfa90",
        "cursor": {
          "ref": "8f615c4e-13eb-4573-9f6e-a5a84b51a534",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2d39e970-28ff-4936-80a0-0159aa313d9a"
        },
        "item": {
          "id": "2ab6dad2-1f11-463e-a881-e831337dfa90",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9c8c64d2-3106-489d-9c71-9092f74311a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f24cd42d-9ef0-4fac-9e08-ac10bb594bf0",
        "cursor": {
          "ref": "f3690e5f-5312-4749-8c90-796733fca60c",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4aed3a6c-1ce6-4ce1-9382-e08d86304887"
        },
        "item": {
          "id": "f24cd42d-9ef0-4fac-9e08-ac10bb594bf0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d6c65ceb-4afa-438d-b29d-ac1bb284f138",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "162e963f-7eb3-4eb0-b4d1-3c97bb13e8e5",
        "cursor": {
          "ref": "73484e35-2960-4ee9-8e85-f13dd58b3fbd",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2028871a-698a-422c-8663-5295307cb64a"
        },
        "item": {
          "id": "162e963f-7eb3-4eb0-b4d1-3c97bb13e8e5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e76dfd16-be4c-4eff-b785-5dbc72d7cd1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "800b65c9-4096-43ec-9e58-0bced1b82a4f",
        "cursor": {
          "ref": "e3410b00-06b2-41b7-b7bf-321a88a9cd04",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "46c4c53d-6477-407d-8aee-de2f1a633648"
        },
        "item": {
          "id": "800b65c9-4096-43ec-9e58-0bced1b82a4f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d3e35ce5-5ff4-4b26-a471-e05b6f427ef6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "53d432a7-da3e-485b-bfda-7dc20cf2982c",
        "cursor": {
          "ref": "4dbf1581-513b-4257-b194-cbf7e6ff8f5c",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "539cb897-7011-4028-82b8-82fd783452c9"
        },
        "item": {
          "id": "53d432a7-da3e-485b-bfda-7dc20cf2982c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "96f2d04c-4c06-4ea8-9cf1-95d52456c8e5",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "9c0ddb69-b1a9-4d36-8f3a-2c0d17961d02",
        "cursor": {
          "ref": "d1dcbc4a-0348-4ec6-b47e-74ffbcb03b0b",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2c155241-eafe-47bc-af83-86512e67b6f4"
        },
        "item": {
          "id": "9c0ddb69-b1a9-4d36-8f3a-2c0d17961d02",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7a4ad54e-f810-4fee-a453-38abe7999571",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "9c0ddb69-b1a9-4d36-8f3a-2c0d17961d02",
        "cursor": {
          "ref": "d1dcbc4a-0348-4ec6-b47e-74ffbcb03b0b",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2c155241-eafe-47bc-af83-86512e67b6f4"
        },
        "item": {
          "id": "9c0ddb69-b1a9-4d36-8f3a-2c0d17961d02",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7a4ad54e-f810-4fee-a453-38abe7999571",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "380fa072-4242-4f21-9b65-46d3dc546033",
        "cursor": {
          "ref": "9618b9b2-63d1-4f8d-b90a-ee1c4278283d",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5f92f563-e29f-4e20-bb3d-f8248328b8a3"
        },
        "item": {
          "id": "380fa072-4242-4f21-9b65-46d3dc546033",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6c15da51-26d1-499a-892e-23b6b7723a75",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "770ca722-16a4-4eca-8a5d-c91a42fb1c7b",
        "cursor": {
          "ref": "e9406b96-dbf9-41f0-94b4-0f5a9379cb90",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "eb33acd8-5f06-4e94-b2e5-20906d4159c2"
        },
        "item": {
          "id": "770ca722-16a4-4eca-8a5d-c91a42fb1c7b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e2e503b1-eb53-45a0-a5d0-4714d5c0cb6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "770ca722-16a4-4eca-8a5d-c91a42fb1c7b",
        "cursor": {
          "ref": "e9406b96-dbf9-41f0-94b4-0f5a9379cb90",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "eb33acd8-5f06-4e94-b2e5-20906d4159c2"
        },
        "item": {
          "id": "770ca722-16a4-4eca-8a5d-c91a42fb1c7b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e2e503b1-eb53-45a0-a5d0-4714d5c0cb6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "b6a1d092-28eb-4964-a1d2-7ffb0f8291dc",
        "cursor": {
          "ref": "9560ad81-928d-487e-badf-cbe0ecef5d58",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8f7b6128-b7a1-43f5-aea9-625fc8731162"
        },
        "item": {
          "id": "b6a1d092-28eb-4964-a1d2-7ffb0f8291dc",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0fc1f1c8-931c-4b10-88e5-6567609a1250",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "4eae6b00-bd65-41dc-a3d7-1bf202ab4a5c",
        "cursor": {
          "ref": "479cd3f5-b4f7-451c-bb65-3f41c0ca5a00",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "06c17392-3ea7-4cc1-b865-9b9e2249eaa1"
        },
        "item": {
          "id": "4eae6b00-bd65-41dc-a3d7-1bf202ab4a5c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f639d78b-da10-4007-a7d7-b255e15e49ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "4eae6b00-bd65-41dc-a3d7-1bf202ab4a5c",
        "cursor": {
          "ref": "479cd3f5-b4f7-451c-bb65-3f41c0ca5a00",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "06c17392-3ea7-4cc1-b865-9b9e2249eaa1"
        },
        "item": {
          "id": "4eae6b00-bd65-41dc-a3d7-1bf202ab4a5c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f639d78b-da10-4007-a7d7-b255e15e49ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "c1af9857-2914-45e4-94f1-64d12a5b1c80",
        "cursor": {
          "ref": "ea75eb3e-758a-471f-883d-9900068333d0",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4f6fcc4c-acbe-4fc4-b4ea-e39bb56ae59f"
        },
        "item": {
          "id": "c1af9857-2914-45e4-94f1-64d12a5b1c80",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "61ab4f60-8d49-40a1-b849-428e640a9ba7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      }
    ]
  }
}