{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2e1481cc-3c23-44bd-9d61-5c92be9b9486",
        "name": "API Configuration",
        "item": [
          {
            "id": "901b447d-6a48-413f-80d4-731cc5cc51a7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4e69cb88-91c3-4719-9c09-d8d430d4bf31",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f696518-508a-4712-a8d8-bf9ca1d0d077",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b64d7412-7136-477f-9c67-9a528bb2f021"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "baa87c7d-adcc-42e1-a51d-ecba25854932",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "7eb25153-048f-4c31-865a-ca752b1aa0df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6d3f9f2-df9c-440a-bcf0-cd5f2333352e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4909fcfc-f324-42eb-8fcb-a38c366a82a4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a1e55e-b035-40f6-8842-790cf12f7726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cd78686-0001-48e4-bd25-4e7bf1941246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced8deee-bf85-4d7d-ad73-30d7e7585654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0698fec3-f7f6-4c6e-b480-18cd64e4b459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b92d08-8097-4d80-a6bc-16ba66207a51",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34699dd4-1f88-4995-a078-4e98088ee462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b369307-1c03-4153-84ef-41bd73d34396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c28e7c-e57c-48a7-9353-801b101dc83c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "25c8ee5b-15ea-40c4-b512-e2293a762c25"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4265306a-c699-4e53-8d4e-661a7665a791",
            "name": "Positive Testing",
            "item": [
              {
                "id": "28b2ba97-f4e4-42ea-ad1a-205a4c5515a1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed1e707a-b29c-45b0-ad81-5fda75a1ac40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "434b88c6-3c55-4400-ac04-f6a5beedca8e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f280629c-accd-432f-99f0-ae657bb876e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8e97cf94-d657-4fb1-8f84-a3f6fd587616"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f343b041-e3fa-48fe-b0b1-d6bd2d156d4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1808d14c-0158-40fc-8c87-1b6039f030da"
            }
          }
        ]
      },
      {
        "id": "4c22436a-93f7-4b94-a21b-98e24e475565",
        "name": "Issue Credential",
        "item": [
          {
            "id": "266eb19f-33f0-4e12-899e-6454426fadc7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23a8aced-11e0-4a35-97a8-9ea176a8c8ea",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9c6cfe01-bbf7-4c77-932e-d6a44bc01697",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c68999f-ae88-4cb2-93f9-69d76851b512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f85e98c-4d42-46e5-aea2-f357531a20c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd4a60a-fab3-430a-af07-f0b3c20447eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e98e1af5-a223-4dd8-a5be-beae596ea17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302d324f-5d02-4113-838e-6d527d205286",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b426c7-8d8d-49ce-a2eb-38c4b31744a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b05f621a-a11b-4425-867f-a87307072827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9702000f-25b4-4fe5-b660-685a7409e64a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "624af63d-8474-4765-b73a-cf800c830e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f573c7-9ef3-4043-813e-f2991349494c",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f033063-451e-4980-9c18-8ea59a583e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e392418-89e1-49a8-a9de-a7b3397d1de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d59a4d8-188e-46c2-a7ed-ba4410d73807",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82bddcbc-da55-4b67-b828-1178fe026a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea51228-03de-4764-866d-03deac6cddd5",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf683e1-cbba-4677-a7dc-2f9249307c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7262a10b-e535-4258-aa9f-c417b3b50907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91c08cc-91c5-4f8e-aa4e-8bd9d248ef8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d53b11-ea89-4192-be38-092e20af2464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d374564-70ad-4983-bbf0-7b7a3e86ad27",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bd7095-e82b-4ab7-a51f-3e28fc336f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd1fb57-6126-49db-ba1d-ff629d11574d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb0f7f3-0778-4c61-a251-47af2db94519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ba76bb-2f8a-40a2-94df-215ee82685bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392b10fc-c8a3-449f-b956-d8cbfe72d28c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd89c9e-d4b4-49ce-a0fe-ea2e7b17a3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "154b1c68-2b39-4a3a-b41e-fb4a26cdf4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999813c9-024f-4270-8796-aabea487a45d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d850b4a-ddc4-474d-83aa-44963a4e6429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6991261-706f-4a90-a1f5-ecb9f96f8868",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbf61c3-668b-4d14-ae1f-9f5ccb41184b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c378b190-e121-408a-b51d-83a376f82de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de97ab2-356e-4339-9853-07f00e35cd39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29644447-aa55-4ea3-a6d6-a8c2666a0b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124a1384-2f4e-4082-81ff-5668f93fc80d",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db114686-6b4c-4e21-8ea2-2d011128f5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7cf7fe-2a19-418c-a11c-b5360c346749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166a32bc-cad8-41d9-9ab5-c59ff5adc2d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01177cb2-7fc9-4132-997b-10af3d5dbcf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5374b1-cbc5-4603-8386-b22854b6b037",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7920df8-44db-4c0b-8d49-81d9aeb959c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27474e1b-f01b-49e9-b107-02e2b174522a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59f0bf6-818e-4525-a15d-420cbf5acb7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0e978e2-c24b-4bae-839c-e1f5b45380d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32f9dac-d75c-4e9a-a3ef-13da2a43e539",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf6ca70-06a2-4749-95cf-03912f0131c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6dafee5-ae28-4dd6-a09c-e67f7566f6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee31b94-2a34-412b-ac4b-e43543bcc5b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64b28932-7aaa-4f25-96b1-63cee2b63fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17dd171-44a0-409f-b263-8aac8cc903d1",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a605be73-846b-49d6-856d-472b16770f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f7fc086-f9ed-4e6a-806e-c447d6c8c7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730984fb-3bb0-4e6d-9902-055450e1933e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d9658340-c969-4f45-a4ff-02a203fc2bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e43b2ce-e0f8-48cf-b044-feaf019d3d51",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9620c174-7e4f-4a0c-9494-af9898210689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab7f5ec-7fb2-42a8-9812-d42daf331dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17dc4f9a-272e-48bb-a06f-d418a05ebca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "e2470e2f-b3a8-4b58-aeb7-9a24af2582fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806de58c-0840-4ddd-8e78-cd7f5f17514b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f5d93f-dfea-48fc-b595-d52048b1cc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c13cd47-f1f2-47bb-a370-a10f700e46e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f566ca-6f8d-4f73-8064-530f9934319e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1cb146d-9bee-4bbc-855d-aee4caa516f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ada392-571c-43a2-9083-8e405de3ddf8",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b0ed4b-f99a-4881-b0d8-c58eebf3f6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300dd4d8-3d10-4ff3-a776-6d629727fd77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5305dc4c-3589-4a09-903b-bff1ba41759a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7744b9e-77bd-4f8f-a447-6d4bd32185c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4028e01-c519-4bb0-8c0c-052e4d53318d",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e0797d-7eaf-49c0-8068-db280d6392bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef026b82-d712-4ba0-ba4b-842063439a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead62fbb-ef0f-4794-8b9b-819a154fd3a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b274112e-d34d-4e24-9fb7-d04dbbe1bad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd74ed1d-e41c-4ed7-bf4f-dc8a4c7f8fe1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ab4df6-d16c-487f-a61a-35e50f60b626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb360b8-0360-40ce-87ba-b8c07b37c590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509a8498-286b-4c11-befc-261ca760b032",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "7c071cec-2f8f-461d-8552-df2f2904a819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2781eec-5dcd-41e7-82ed-8d09901337cd",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280da180-b54f-48a1-992b-6cd48ffe0744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e35bf5c-4c7a-44b3-b5e7-e9ff50eecfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e0b852-412a-4a15-8930-f443a009745f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0042c8d-3251-40f9-b4e4-5c7494bffe59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1544d81-19bc-4758-93e2-b03c73e5a6aa",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce06c6b6-8014-4826-8c88-85b39e9214fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db83f4d-e8d1-4ff8-9308-a288d5097752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59c6925-b9f5-4c45-9ce8-205729510087",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e2b9c27-53ef-453a-98d8-87e3a7612c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cdbd92-ceda-49be-a149-032c4c59b63e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc763c89-ee04-4605-ad60-8c3de1598d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc286a1-e8ac-4ead-838f-2be3861c4727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf9c627-2e85-4de0-83c0-e369d82bd962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90f0f556-85b7-4082-8364-0fc9270b16da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3612e7c5-dc1f-48f8-b48a-a8d99dbd8956",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3143b858-865c-46d2-8541-815630e73a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfeb8ad2-7c0f-4e1c-aa43-7d641520aa9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7378d9c-f4b7-45d4-9e03-ef132e5c6b2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0913157-8d17-4acd-831e-ed32b7dd8685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08b274b-b9e9-4e2f-8050-0222641310e7",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33258a0-35d9-4e97-b529-4a78463d42e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8852b9-60f7-461b-9877-356286c53456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317622c1-2859-458c-8a11-851de99e1db8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5634be6c-3a52-40c8-b342-c28cb60dcec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb82dcb-c909-441e-9b0f-13766edbcb99",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a664d772-4114-4479-9701-47c6d65eb9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41a6f55-11ad-4803-92c7-c0da8a54f84f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d55bdd5-afb9-4c4f-a2cc-f4a49f7e0513",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e78d0195-7a9d-4ab3-98c8-2909f2f213ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffee38a-a07f-406f-8902-460960038371",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff459b5b-9c5e-4223-9fad-901957efe7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6aaf47-a2ef-4868-8307-376a31464582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e8963a-6065-4b5a-b43d-76d1125ec80d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e49ae71-5929-4617-95bf-2848bdb348a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a59960e-a5b7-4f35-bb41-181ae780a9bf",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602568cb-2311-4039-aceb-292ebf8bfca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a410add-d80e-4b5b-a244-bfe7d82864c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33a177c-96c4-44f5-8fcb-c7f63053becb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40f277bf-42be-4408-985d-adfc45a90622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5203cfac-7e29-434a-a068-30bf1b450c35",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bf9185-31c7-4d1f-ae55-e8c8b3fc5cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11531f9-61d3-47fd-8fac-8a9f27bef8ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cde595a-e30c-4587-a6ef-b984fd18a14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ae9da8-6841-46fd-8763-972a80852155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ba0236-1609-4a41-afd3-339286dee888",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffc37f9-9ef7-46f5-9bfa-16a572dd4bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b706771-3550-4240-a34d-0fdde874d827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e2e5b4-057d-4df5-a284-8d465172566c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9058d6de-ac62-421e-b4c0-d3aac3f75f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ce32e0-7fe2-4d02-80d3-a26338385daa",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6b5657-22bd-4f3d-9929-fc8e4bd3f3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb3db7a-6d6c-48c6-ada3-3c98acbeca5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040a6030-24dd-4e65-af4b-640e0ca91b9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f619f7b-713b-4dbc-9e19-72770cd05c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5bc41b-841f-49c6-a047-c80e8fffd262",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22003ddf-3897-402e-8bf5-633e4e368672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a705c07-4906-41ea-9ab6-54fc8f9480b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f63b5ca-cb69-4f82-ad32-2c00fd473e8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "395a214b-7d1d-4b5a-8cf1-0be689ec3f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042ac849-332c-4546-bb74-c335be19a00c",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff3b63a-f90a-4dd4-859d-359994e1f918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8fe148-b353-478c-a227-e2fbb976585f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5356e3-3851-4123-8aa3-76445da427d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2941ea0c-27cd-4015-ad67-4754ec11c21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cab5b1c-0030-42ad-b69e-b21a90594687",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e85230-6307-4002-8292-f132e4352bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c3505e-7fa8-4aff-ad6e-c023a2a56c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0e7e11-a9d7-4a80-b7ed-6fb0c0a7edbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30571078-27a9-4dbc-b08b-86fde8b20f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e7e19f-4e20-4512-b7a2-07091857edb1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcd04a9-1810-4bc7-9acc-e3b69909661c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d5fa7f24-8d69-4070-ac4b-bc2586495760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bb970b-2104-4994-afe5-1aefbd5222b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f406271d-1d58-4c1e-96d6-9a78bc03f364"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6383f33d-007a-491e-8c66-abfc4a2499b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e5c5874-af46-4a49-b495-2d6058cdac9f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5705a83b-426c-43c1-84f9-0f0d63938a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc467bed-dd68-4012-a7b9-980514f15b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb07906-9931-4a01-b8e8-3cf9a95bb26a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "16c48914-13a9-4a68-9faf-6c6ad6969cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d643328-e277-4fe8-a92b-2c4a645b601c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92a2083-0af4-4392-afc3-4663c122cbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82b88309-4341-45e3-bcb1-1912a0f37918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469444da-f1f8-4dc5-9968-73af6cd892c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "21a0a087-18da-4884-98d0-2b23317ed30d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c0b7e3f-a38e-491c-83c8-5dfcf34eddbe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9334086a-bb49-4951-bf5c-d4cbc63cbbf6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ccfecba-546b-4205-a7fa-daf10cbb480f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f88812d4-713b-4eba-9f9b-99bd3de65382"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aed581a3-abf0-4a33-b581-0aabf9bfb04a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a5ee38e9-7a09-456c-a599-49177d85f325"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e654e27d-83ef-4888-a0de-2cc3faefdfbe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "675c1692-c776-4895-a51c-844f2b1c58e7"
                }
              }
            ]
          },
          {
            "id": "20e1e70f-6326-4758-a47f-cc4bc5880e7d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cbbc7fe3-39db-44c5-8d28-20c548f72470",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff10c65f-d361-4c96-9e35-179d6fac399e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e06306a9-2282-4c46-b9a9-5ccb063fa344"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfeac532-be4a-4424-b521-05bd2aa176e9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1f8583a1-0d12-41d0-bc63-0e2da945247e"
                    }
                  }
                ]
              },
              {
                "id": "d57eb5ac-d376-4036-a973-9936e973c278",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0deb6ac6-108d-49fd-b87b-1d34acc0d8a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24b29f4f-364d-4e80-9307-bf6a3e189c5e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eed98b00-a53f-4f66-8f91-f23fcf32893e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5e073e58-84e0-4124-b603-76f11191f3a6"
                    }
                  }
                ]
              },
              {
                "id": "59a9f6c7-5cdb-4867-9694-e7965b3513c4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0822ed06-cd40-4d88-b9a6-d770a679724f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1754c7fd-454f-45a6-a5fc-44febf8a557e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7698a438-e645-4512-8a91-eeac5a414a32",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e4c765ba-9685-4191-9a81-bfd5f086f3d0"
                    }
                  }
                ]
              },
              {
                "id": "11a4139f-efdc-40df-b6a9-6e4cc1e94edc",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6727ace7-a2ed-4349-8f5a-1202192b9845",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eebc21b1-c63e-4982-b2ca-169afca8c417"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a023ceb-e097-4562-a334-5f1109c8d1fa",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7ff12520-737c-413a-b0fa-51e7c3164a07"
                    }
                  }
                ]
              },
              {
                "id": "c01bdc96-08ca-470f-8b68-b2e74f13a8d0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8848bedd-d337-4971-a79b-b4646a3c1420",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "e0a4eb66-1f87-4ee9-a58e-f3385f17131c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77bfd1d3-216f-46c8-b133-52b945de308c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e632aaff-dd35-432a-aad6-9dd0180143dc"
                    }
                  }
                ]
              },
              {
                "id": "5093b0cd-63db-4747-8f5a-6101028fe6e1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f71b361-31fd-4f7b-a61a-29cfad491d47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2981848f-7baa-4599-90aa-f514a340ac85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68d04c84-bf47-4bda-94db-cd757553f2d3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9af4db48-1d0c-4101-85f6-c4bf557b2933"
                    }
                  }
                ]
              },
              {
                "id": "1ea4aad4-85eb-467c-acb6-2b33de3626bc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19047a55-add3-4e1a-a018-f74ff7a6511b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6163c476-ae8c-4199-8a78-ccaf8ed639d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9224ef5-d142-4e0c-a777-74c50780caf9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3330263d-8fcb-4f6d-b566-ffbd7a08bfcc"
                    }
                  }
                ]
              },
              {
                "id": "89797a68-6307-4198-9913-a1367300da5a",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11f1e47e-7791-4369-b9c4-4441557db019",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5005a00f-b564-4608-951a-78962d630993"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4583869b-e95b-4eab-b15b-0fac76cbea76",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "55e0fc1d-5b54-4603-8e09-5817c3904c35"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dea9a2a7-d5d1-4b90-b62f-edecd63dc0b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f99bd58d-72e0-4948-ab03-f51a8eee37d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "044e1226-53c6-4ddd-a229-ee6342056a91",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6d8072b-2967-4808-afeb-d86250fdedf5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd9bef8c-7176-460e-b8da-b4ff1d09dbe3",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "65135cea-04b7-406e-b66f-5a7e200ff238"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f70f466f-8dea-482c-ad8a-f8666ad18fc9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "789db792-2a82-4e02-a888-2d3e87066a68"
            }
          }
        ]
      },
      {
        "id": "71f62e0b-344a-481c-a6fd-9e100a6a47dd",
        "name": "Credentials Status",
        "item": [
          {
            "id": "98621aed-6842-4130-8090-89053af22f8c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1e4c7fd-8b0a-443b-8131-9da7b61ea2a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c58eba22-e097-4192-93a4-58c7d15ad88c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5668c700-f69e-4ecb-b801-e2ee3bf845b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c480f435-13db-46a5-a96a-1cc2f6a082e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "908822ae-e78e-43cf-85e6-b8ff4df1e7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46f809e5-0585-4d57-a80b-453320e68dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b2df3d-9a3a-43e0-b339-7c573b863e82",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb56d781-daab-4355-b119-5302a6651013",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "33a0ce37-0a4e-4b27-bc08-c9dd03ca2e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42eb9cf3-b71b-4b28-81e1-61c40957314f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9b24f80-37f9-404b-a58e-e5d928fa5387"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c12517c-cd01-4acb-8824-3d14d1e14f84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7337d008-ccab-4aeb-92fc-4f56b8a2709c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22da21b7-a0d4-41f0-829d-56c289f4cd94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49c27343-77de-4076-bc82-66a0f50e617b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18e3b02b-974b-4d44-ae49-2ac4bd10d5fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "688ebcbf-4e6f-424f-8ba3-fc2083c88513"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2db4412a-4b06-4692-abb6-d9de940fbe58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "79be9520-d4da-464c-8993-c0684fe6f0da"
            }
          }
        ]
      },
      {
        "id": "30242607-d014-47f6-9390-ff74c50ccd6b",
        "name": "Presentations",
        "item": [
          {
            "id": "0c9897ce-e28d-4ddd-bd9b-d8f4f53c9816",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80192f86-fcb8-418d-ad4b-fd57e2e75e4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "264c9e9d-cf18-4e60-abea-5b8ab794f65b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7cf58c-bf38-42c5-8d57-f9e64c950526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a7725c-f8d7-4c63-8c4f-9f425bca184c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83529c73-164c-40c8-a628-e097d3c6a33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f293734d-eaf6-4e27-8dd4-14a7194c43fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac9a8b7-b7b3-4cd0-ae08-bed5bfa70d12",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff36628-9692-4abb-aecc-7c355a272e0b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d19d25f8-8342-4b65-bd37-8bc198681880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6d42c7-b7af-426d-8773-850be397e313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4cfe496-f69a-43ec-a953-bbd504a98c4c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fa77959-f754-421a-963f-e871c71755b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06c68df0-8ab4-4aa5-8b85-8bd3607ec82e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c733bf66-67be-4b7c-bd33-2e07cb40808f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "248b95e0-cd80-4357-aed7-72ed7773b130"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30a33557-19f4-4e80-ba3d-0c3114d30747",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "01ac2574-db25-4491-9414-69934b9e1a0b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1afae8b8-2cd1-4a2f-8ca3-427ad768f745",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13e2aab4-3582-499f-9057-195d3cf2726a"
            }
          }
        ]
      },
      {
        "id": "cca18b28-3e9a-49d9-931e-3939c5006b0e",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "98a4e96d-b74e-464e-b70f-fa74492ae08f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14442349-7dad-43ec-b0d2-cfa158bb48b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6af11cf7-7f22-4f79-b921-38f460951678",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de09b610-cd0f-4d7d-84e7-07701a7ae8e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b891ddc4-19b0-4d4b-9d8e-13cc2d66a3e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be138911-56b6-4afa-8827-47695216111b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "239688f7-27b5-4ffb-824b-b27bf61c5df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5d76b1-66b7-46e0-a3eb-7bbb92552aec",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474f4ce8-6e71-400b-bc68-23d2e6b51d4c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "66476392-47fb-4e29-90da-c2f54989fb0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "232dea32-ae61-4c5a-bf3e-69e35234e753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "665fa6fa-d6f7-4b19-84aa-f00981454159"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c11b208-a2cc-46ce-ba0a-a6798eba8ee7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "233f31fa-220b-4b2f-b5ef-16363d87ec79"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4223c61-cdd3-4edb-b85f-ec963a3d285d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba46dc12-f967-451a-914e-c9abe7db9ac0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3be1ee2e-c344-4fd9-9532-ca94dbcaea17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                ""
              ],
              "_lastExecutionId": "443a881e-488d-4dae-b568-5bcb0cf2fbbe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e5b3da7-4766-44a5-8c71-6a390195935f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b74e35c-a953-438e-8035-cd48f25cf4c9"
            }
          }
        ]
      },
      {
        "id": "476423ab-5414-431c-a6e5-bee0bd924960",
        "name": "Presentations Prove",
        "item": [
          {
            "id": "a17dd411-a2c6-467d-be27-d8d03435aef8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "159e151d-b4df-4d9b-9909-d0eacbcc64d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "487c1012-6cd2-42b0-bf8f-2d10485a5ab6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c583d79b-9167-4823-aefc-815e734dc3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ce29dd-3d78-4409-a9fa-6df46e81b216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31ad271-2dc0-4033-9478-0c477ec17af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3d57dd1-a817-411b-bf9a-62fd06e160a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ed00dc-43ba-40ff-acc6-760187953f39",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6415a825-3ef9-4289-9da7-f9387eb1f86d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3a5d214f-5358-4c62-bd48-f29189182b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf14b0f-2aea-44d0-996e-7503f5375e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4906c50-ade2-464d-bf7c-9cf690bbdbe3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "575f3525-7540-4908-8020-dfb13cd8f9bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e994df8-0376-4348-976d-67585b34e0a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84750999-e084-47da-9b01-eda491d2fb38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "230d757e-c54f-4098-a547-7819b40eabea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23619804-d019-47c6-b95a-197e663b6e9b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "0afb5454-cbff-42ba-9490-03504ddd5564"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b0f2031-75a2-4b3d-a407-91a193771456",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af71ddd6-8e53-434c-9003-345b377a046c"
            }
          }
        ]
      },
      {
        "id": "9699bf9b-f9a4-4281-911a-51f800f6deaa",
        "name": "Presentations Verify",
        "item": [
          {
            "id": "68b6650b-9e7b-4e9e-ab82-c731f8a478d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b882874-820b-4e16-8a75-3ae586ff8d1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5fc6b86-9552-4598-a683-5320dfa8382e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bafb172-be8b-4963-a81d-ecd8c207c960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe0f7662-1463-485a-bdab-4b70af3b2b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a5f65c-847f-4f14-8d94-ab8af40ccbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3eb36626-4520-4a38-bcd7-84d4b3d6d0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bb25fa-5176-498b-95e5-99f26b251815",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f5d844-60be-4d8f-bd7c-6d1f24d13ff3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "75ad3a02-c4c1-404f-af4f-1ad79978478c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0959b6-aa1c-48da-adc4-b71533c78328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b311d5d2-fad7-4b62-aa0f-58739d5787b7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe3d4850-84c6-488b-a13e-884f80fa5558",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6aa28b61-3737-4b56-b1dc-8636610b98d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3940c0f0-5dd8-4a06-a6f7-b5415dda236f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4d8ebe7-f75c-44bb-bbaa-58cbcbd78638"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3766bbd7-9bae-43c8-8b78-ccff333ad8c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "9a1d8a4b-7faa-4288-9e2d-6b78fb8b5562"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90086a93-6f93-44eb-b8f6-7bf8f6c65d35",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4456d93-0442-4f92-9a79-6db18c5b2af9"
            }
          }
        ]
      },
      {
        "id": "91a3f24a-3cb5-46e9-a533-6f3d8eace1d0",
        "name": "Presentations Available",
        "item": [],
        "event": []
      },
      {
        "id": "50dde754-3c09-49a0-b83d-512f3006365b",
        "name": "Presentations Submissions",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 432,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 104,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 115,
        "pending": 0,
        "failed": 93
      },
      "testScripts": {
        "total": 217,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 215,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 50.53846153846152,
      "responseMin": 5,
      "responseMax": 497,
      "responseSd": 83.37276384695002,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1660524344787,
      "completed": 1660524352904
    },
    "executions": [
      {
        "id": "4e69cb88-91c3-4719-9c09-d8d430d4bf31",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 55,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "64739118-4972-44f1-b8c9-188675f49acf",
          "httpRequestId": "1e9a6ebd-d776-479e-ba25-610c7b3d3191"
        },
        "item": {
          "id": "4e69cb88-91c3-4719-9c09-d8d430d4bf31",
          "name": "did_json"
        },
        "response": {
          "id": "34b01fbf-1743-4a67-86d4-c4e03fd3f61a",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4909fcfc-f324-42eb-8fcb-a38c366a82a4",
        "cursor": {
          "ref": "9120b001-850d-401e-a8d8-f5f12fd1fd52",
          "length": 55,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6bc9a95e-32ff-4e9a-834d-eab6f2576937"
        },
        "item": {
          "id": "4909fcfc-f324-42eb-8fcb-a38c366a82a4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "aad9c9c8-17aa-44af-af3e-48edd796ceb9",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "4909fcfc-f324-42eb-8fcb-a38c366a82a4",
        "cursor": {
          "ref": "9120b001-850d-401e-a8d8-f5f12fd1fd52",
          "length": 55,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6bc9a95e-32ff-4e9a-834d-eab6f2576937"
        },
        "item": {
          "id": "4909fcfc-f324-42eb-8fcb-a38c366a82a4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "aad9c9c8-17aa-44af-af3e-48edd796ceb9",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "30b92d08-8097-4d80-a6bc-16ba66207a51",
        "cursor": {
          "ref": "559e1510-b722-4af7-838c-b7a361daca1d",
          "length": 55,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e579966f-1da5-49fe-b798-cbdfd1fa5866"
        },
        "item": {
          "id": "30b92d08-8097-4d80-a6bc-16ba66207a51",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4a865d74-f40a-469f-9ee0-caec16c27866",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "30b92d08-8097-4d80-a6bc-16ba66207a51",
        "cursor": {
          "ref": "559e1510-b722-4af7-838c-b7a361daca1d",
          "length": 55,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e579966f-1da5-49fe-b798-cbdfd1fa5866"
        },
        "item": {
          "id": "30b92d08-8097-4d80-a6bc-16ba66207a51",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4a865d74-f40a-469f-9ee0-caec16c27866",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "28b2ba97-f4e4-42ea-ad1a-205a4c5515a1",
        "cursor": {
          "ref": "5fa98248-14e4-4ba5-8e31-a380f21c53fa",
          "length": 55,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8f75a708-ce80-45e2-adc9-5346a0d0eed3"
        },
        "item": {
          "id": "28b2ba97-f4e4-42ea-ad1a-205a4c5515a1",
          "name": "identifiers"
        },
        "response": {
          "id": "5b58c23f-37b3-4d02-8a0b-b62c49406f59",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6cfe01-bbf7-4c77-932e-d6a44bc01697",
        "cursor": {
          "ref": "8f133d92-ecaf-4e98-ba15-e22b706a8a4a",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8114746c-7e12-4391-8809-6cbde1f1567c"
        },
        "item": {
          "id": "9c6cfe01-bbf7-4c77-932e-d6a44bc01697",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5ec15d48-4b40-4631-a8e0-8fbe4d6ced4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 384,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "9c6cfe01-bbf7-4c77-932e-d6a44bc01697",
        "cursor": {
          "ref": "8f133d92-ecaf-4e98-ba15-e22b706a8a4a",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8114746c-7e12-4391-8809-6cbde1f1567c"
        },
        "item": {
          "id": "9c6cfe01-bbf7-4c77-932e-d6a44bc01697",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5ec15d48-4b40-4631-a8e0-8fbe4d6ced4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 384,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "9c6cfe01-bbf7-4c77-932e-d6a44bc01697",
        "cursor": {
          "ref": "8f133d92-ecaf-4e98-ba15-e22b706a8a4a",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8114746c-7e12-4391-8809-6cbde1f1567c"
        },
        "item": {
          "id": "9c6cfe01-bbf7-4c77-932e-d6a44bc01697",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5ec15d48-4b40-4631-a8e0-8fbe4d6ced4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 384,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "302d324f-5d02-4113-838e-6d527d205286",
        "cursor": {
          "ref": "e9f79202-0aba-44f2-871d-10b2099f9ba6",
          "length": 55,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "65a047e1-4e37-47ca-ac92-855e5517efb5"
        },
        "item": {
          "id": "302d324f-5d02-4113-838e-6d527d205286",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c4483ee4-477c-43f0-a671-ee36cad45bc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "302d324f-5d02-4113-838e-6d527d205286",
        "cursor": {
          "ref": "e9f79202-0aba-44f2-871d-10b2099f9ba6",
          "length": 55,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "65a047e1-4e37-47ca-ac92-855e5517efb5"
        },
        "item": {
          "id": "302d324f-5d02-4113-838e-6d527d205286",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c4483ee4-477c-43f0-a671-ee36cad45bc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "e9f573c7-9ef3-4043-813e-f2991349494c",
        "cursor": {
          "ref": "7f7bb463-516b-4bb9-a450-dda77c97c4a0",
          "length": 55,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "be2e8124-5abb-4e09-afd6-369f8664627c"
        },
        "item": {
          "id": "e9f573c7-9ef3-4043-813e-f2991349494c",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "1ee2117e-8b02-497a-88da-c943169c42ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e9f573c7-9ef3-4043-813e-f2991349494c",
        "cursor": {
          "ref": "7f7bb463-516b-4bb9-a450-dda77c97c4a0",
          "length": 55,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "be2e8124-5abb-4e09-afd6-369f8664627c"
        },
        "item": {
          "id": "e9f573c7-9ef3-4043-813e-f2991349494c",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "1ee2117e-8b02-497a-88da-c943169c42ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "aea51228-03de-4764-866d-03deac6cddd5",
        "cursor": {
          "ref": "94093d3c-7764-41e2-b7b7-4cfbc24edaed",
          "length": 55,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f638aa10-e9bb-4560-93eb-56f1c99a967b"
        },
        "item": {
          "id": "aea51228-03de-4764-866d-03deac6cddd5",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "6996d4b4-3ac9-4018-bc2e-f5e4f41f536d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "aea51228-03de-4764-866d-03deac6cddd5",
        "cursor": {
          "ref": "94093d3c-7764-41e2-b7b7-4cfbc24edaed",
          "length": 55,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f638aa10-e9bb-4560-93eb-56f1c99a967b"
        },
        "item": {
          "id": "aea51228-03de-4764-866d-03deac6cddd5",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "6996d4b4-3ac9-4018-bc2e-f5e4f41f536d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4d374564-70ad-4983-bbf0-7b7a3e86ad27",
        "cursor": {
          "ref": "70ce2964-1512-4661-ab10-3c17c91c2a2c",
          "length": 55,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b2df1d8b-43a2-4f77-9f68-a0a332b8ee1c"
        },
        "item": {
          "id": "4d374564-70ad-4983-bbf0-7b7a3e86ad27",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "0eb4dd5b-f40b-4303-a4c5-b23b7bbb934d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "4d374564-70ad-4983-bbf0-7b7a3e86ad27",
        "cursor": {
          "ref": "70ce2964-1512-4661-ab10-3c17c91c2a2c",
          "length": 55,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b2df1d8b-43a2-4f77-9f68-a0a332b8ee1c"
        },
        "item": {
          "id": "4d374564-70ad-4983-bbf0-7b7a3e86ad27",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "0eb4dd5b-f40b-4303-a4c5-b23b7bbb934d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "392b10fc-c8a3-449f-b956-d8cbfe72d28c",
        "cursor": {
          "ref": "593a5aa3-46d1-4c6f-820f-c77a773b3cef",
          "length": 55,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d28fdef0-5720-4e48-94ae-5f434f237c94"
        },
        "item": {
          "id": "392b10fc-c8a3-449f-b956-d8cbfe72d28c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "67d9f7a8-a6fd-4bc5-8fb9-b599d0058b2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "392b10fc-c8a3-449f-b956-d8cbfe72d28c",
        "cursor": {
          "ref": "593a5aa3-46d1-4c6f-820f-c77a773b3cef",
          "length": 55,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d28fdef0-5720-4e48-94ae-5f434f237c94"
        },
        "item": {
          "id": "392b10fc-c8a3-449f-b956-d8cbfe72d28c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "67d9f7a8-a6fd-4bc5-8fb9-b599d0058b2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f6991261-706f-4a90-a1f5-ecb9f96f8868",
        "cursor": {
          "ref": "c886df39-4989-43ed-aaae-99efd7358636",
          "length": 55,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "aa764c29-a4dd-4d2e-ab52-20e9f5baad81"
        },
        "item": {
          "id": "f6991261-706f-4a90-a1f5-ecb9f96f8868",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "c3e8ffdd-07ac-4be0-93e0-4f04035fcb3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "f6991261-706f-4a90-a1f5-ecb9f96f8868",
        "cursor": {
          "ref": "c886df39-4989-43ed-aaae-99efd7358636",
          "length": 55,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "aa764c29-a4dd-4d2e-ab52-20e9f5baad81"
        },
        "item": {
          "id": "f6991261-706f-4a90-a1f5-ecb9f96f8868",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "c3e8ffdd-07ac-4be0-93e0-4f04035fcb3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "124a1384-2f4e-4082-81ff-5668f93fc80d",
        "cursor": {
          "ref": "4c6d2727-2063-40dd-8efc-735567aae7e5",
          "length": 55,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2c1b915b-6e4d-4009-94be-4a32599e9fe3"
        },
        "item": {
          "id": "124a1384-2f4e-4082-81ff-5668f93fc80d",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "ce6b2db1-926b-4906-9202-d956f1eeb738",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "124a1384-2f4e-4082-81ff-5668f93fc80d",
        "cursor": {
          "ref": "4c6d2727-2063-40dd-8efc-735567aae7e5",
          "length": 55,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2c1b915b-6e4d-4009-94be-4a32599e9fe3"
        },
        "item": {
          "id": "124a1384-2f4e-4082-81ff-5668f93fc80d",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "ce6b2db1-926b-4906-9202-d956f1eeb738",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "8d5374b1-cbc5-4603-8386-b22854b6b037",
        "cursor": {
          "ref": "e79621b8-c94b-4f7b-9abd-d1b8164459ea",
          "length": 55,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cd3e5b87-51db-45e9-92bd-c2031c807330"
        },
        "item": {
          "id": "8d5374b1-cbc5-4603-8386-b22854b6b037",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5aa79116-815c-41c9-ba07-cd768a6f8d0c",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "8d5374b1-cbc5-4603-8386-b22854b6b037",
        "cursor": {
          "ref": "e79621b8-c94b-4f7b-9abd-d1b8164459ea",
          "length": 55,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cd3e5b87-51db-45e9-92bd-c2031c807330"
        },
        "item": {
          "id": "8d5374b1-cbc5-4603-8386-b22854b6b037",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5aa79116-815c-41c9-ba07-cd768a6f8d0c",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "c32f9dac-d75c-4e9a-a3ef-13da2a43e539",
        "cursor": {
          "ref": "4300869a-548d-4f47-b06d-38dbe194f047",
          "length": 55,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1d364d58-b3ec-4fe4-aada-bcd50ca77b1f"
        },
        "item": {
          "id": "c32f9dac-d75c-4e9a-a3ef-13da2a43e539",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "35144b88-c9de-4827-84ab-1915a96b68a8",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "c32f9dac-d75c-4e9a-a3ef-13da2a43e539",
        "cursor": {
          "ref": "4300869a-548d-4f47-b06d-38dbe194f047",
          "length": 55,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1d364d58-b3ec-4fe4-aada-bcd50ca77b1f"
        },
        "item": {
          "id": "c32f9dac-d75c-4e9a-a3ef-13da2a43e539",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "35144b88-c9de-4827-84ab-1915a96b68a8",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "d17dd171-44a0-409f-b263-8aac8cc903d1",
        "cursor": {
          "ref": "80fa0fac-fb74-4155-9973-069a305ed1f2",
          "length": 55,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "320388dc-c77f-445b-8a7d-5aa4c9b44701"
        },
        "item": {
          "id": "d17dd171-44a0-409f-b263-8aac8cc903d1",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "b43ad5f7-bc2e-474a-b036-0b53f1a8494d",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "d17dd171-44a0-409f-b263-8aac8cc903d1",
        "cursor": {
          "ref": "80fa0fac-fb74-4155-9973-069a305ed1f2",
          "length": 55,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "320388dc-c77f-445b-8a7d-5aa4c9b44701"
        },
        "item": {
          "id": "d17dd171-44a0-409f-b263-8aac8cc903d1",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "b43ad5f7-bc2e-474a-b036-0b53f1a8494d",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "0e43b2ce-e0f8-48cf-b044-feaf019d3d51",
        "cursor": {
          "ref": "1a186faa-240f-4b6e-bc4f-704bfefb40d5",
          "length": 55,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dbefd8bc-d769-44fa-9b7c-74c9a08395df"
        },
        "item": {
          "id": "0e43b2ce-e0f8-48cf-b044-feaf019d3d51",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3255c7e7-c6ae-4f36-8787-df840c61625b",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "0e43b2ce-e0f8-48cf-b044-feaf019d3d51",
        "cursor": {
          "ref": "1a186faa-240f-4b6e-bc4f-704bfefb40d5",
          "length": 55,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dbefd8bc-d769-44fa-9b7c-74c9a08395df"
        },
        "item": {
          "id": "0e43b2ce-e0f8-48cf-b044-feaf019d3d51",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3255c7e7-c6ae-4f36-8787-df840c61625b",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "806de58c-0840-4ddd-8e78-cd7f5f17514b",
        "cursor": {
          "ref": "6c27ee66-b333-4adb-b1f3-dfb635915fa7",
          "length": 55,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "35b516ee-1424-4bcc-ba1a-41d0e20284e8"
        },
        "item": {
          "id": "806de58c-0840-4ddd-8e78-cd7f5f17514b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e35e1b84-b58f-4f42-8a71-d3a9340079ed",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "806de58c-0840-4ddd-8e78-cd7f5f17514b",
        "cursor": {
          "ref": "6c27ee66-b333-4adb-b1f3-dfb635915fa7",
          "length": 55,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "35b516ee-1424-4bcc-ba1a-41d0e20284e8"
        },
        "item": {
          "id": "806de58c-0840-4ddd-8e78-cd7f5f17514b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e35e1b84-b58f-4f42-8a71-d3a9340079ed",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "16ada392-571c-43a2-9083-8e405de3ddf8",
        "cursor": {
          "ref": "ee0fc291-8a9a-4554-9a6a-94e20b9b5e70",
          "length": 55,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "255d645c-ac19-4ab1-94bd-b922193e26d8"
        },
        "item": {
          "id": "16ada392-571c-43a2-9083-8e405de3ddf8",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "f47089f4-af0d-4119-84b8-212ff4f6d868",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "16ada392-571c-43a2-9083-8e405de3ddf8",
        "cursor": {
          "ref": "ee0fc291-8a9a-4554-9a6a-94e20b9b5e70",
          "length": 55,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "255d645c-ac19-4ab1-94bd-b922193e26d8"
        },
        "item": {
          "id": "16ada392-571c-43a2-9083-8e405de3ddf8",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "f47089f4-af0d-4119-84b8-212ff4f6d868",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "a4028e01-c519-4bb0-8c0c-052e4d53318d",
        "cursor": {
          "ref": "3cc3d717-2fff-45df-89d9-3fad3a278700",
          "length": 55,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "81b383d2-9ae0-4525-9b60-0d72fd73b3a7"
        },
        "item": {
          "id": "a4028e01-c519-4bb0-8c0c-052e4d53318d",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "1d23d853-9b2a-4b65-a606-6adb3e3f2337",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "a4028e01-c519-4bb0-8c0c-052e4d53318d",
        "cursor": {
          "ref": "3cc3d717-2fff-45df-89d9-3fad3a278700",
          "length": 55,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "81b383d2-9ae0-4525-9b60-0d72fd73b3a7"
        },
        "item": {
          "id": "a4028e01-c519-4bb0-8c0c-052e4d53318d",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "1d23d853-9b2a-4b65-a606-6adb3e3f2337",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "cd74ed1d-e41c-4ed7-bf4f-dc8a4c7f8fe1",
        "cursor": {
          "ref": "2d1b670d-da37-47a6-ae46-6ea61888eec4",
          "length": 55,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "eeb3323d-8c68-47d5-948f-43a4772b6dda"
        },
        "item": {
          "id": "cd74ed1d-e41c-4ed7-bf4f-dc8a4c7f8fe1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8c0f34d4-d98d-4502-8139-d918f3f37999",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "cd74ed1d-e41c-4ed7-bf4f-dc8a4c7f8fe1",
        "cursor": {
          "ref": "2d1b670d-da37-47a6-ae46-6ea61888eec4",
          "length": 55,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "eeb3323d-8c68-47d5-948f-43a4772b6dda"
        },
        "item": {
          "id": "cd74ed1d-e41c-4ed7-bf4f-dc8a4c7f8fe1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8c0f34d4-d98d-4502-8139-d918f3f37999",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "f2781eec-5dcd-41e7-82ed-8d09901337cd",
        "cursor": {
          "ref": "b6d225b7-e533-4cb2-8665-5eb906983b24",
          "length": 55,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0fadea0b-319b-4ee7-863a-8da8eb55e660"
        },
        "item": {
          "id": "f2781eec-5dcd-41e7-82ed-8d09901337cd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8256fdaa-e8a1-4a6f-90bf-d3fe0612b11f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f2781eec-5dcd-41e7-82ed-8d09901337cd",
        "cursor": {
          "ref": "b6d225b7-e533-4cb2-8665-5eb906983b24",
          "length": 55,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0fadea0b-319b-4ee7-863a-8da8eb55e660"
        },
        "item": {
          "id": "f2781eec-5dcd-41e7-82ed-8d09901337cd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8256fdaa-e8a1-4a6f-90bf-d3fe0612b11f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f1544d81-19bc-4758-93e2-b03c73e5a6aa",
        "cursor": {
          "ref": "739796ce-b691-4ea0-abb5-793dd87a5ca2",
          "length": 55,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "213b1101-c32f-4aaf-81a2-b2e9466a2915"
        },
        "item": {
          "id": "f1544d81-19bc-4758-93e2-b03c73e5a6aa",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "5b701be0-7719-4130-9956-20b125580ed1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f1544d81-19bc-4758-93e2-b03c73e5a6aa",
        "cursor": {
          "ref": "739796ce-b691-4ea0-abb5-793dd87a5ca2",
          "length": 55,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "213b1101-c32f-4aaf-81a2-b2e9466a2915"
        },
        "item": {
          "id": "f1544d81-19bc-4758-93e2-b03c73e5a6aa",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "5b701be0-7719-4130-9956-20b125580ed1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a0cdbd92-ceda-49be-a149-032c4c59b63e",
        "cursor": {
          "ref": "f81e2fcd-1337-4677-a1ea-e0943fd70ef7",
          "length": 55,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "51268ed5-2cae-4c43-b23b-c7ed3576316c"
        },
        "item": {
          "id": "a0cdbd92-ceda-49be-a149-032c4c59b63e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f72453f1-39e9-42dd-af3b-f88de93a1303",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a0cdbd92-ceda-49be-a149-032c4c59b63e",
        "cursor": {
          "ref": "f81e2fcd-1337-4677-a1ea-e0943fd70ef7",
          "length": 55,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "51268ed5-2cae-4c43-b23b-c7ed3576316c"
        },
        "item": {
          "id": "a0cdbd92-ceda-49be-a149-032c4c59b63e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f72453f1-39e9-42dd-af3b-f88de93a1303",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "3612e7c5-dc1f-48f8-b48a-a8d99dbd8956",
        "cursor": {
          "ref": "ccaee51b-751e-41bf-9f1e-6906e71eed6d",
          "length": 55,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "79986a39-0f36-48a7-81f8-0fff513f7f48"
        },
        "item": {
          "id": "3612e7c5-dc1f-48f8-b48a-a8d99dbd8956",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fc43b9ab-0ca1-47bb-9604-8d414bd7d0ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "3612e7c5-dc1f-48f8-b48a-a8d99dbd8956",
        "cursor": {
          "ref": "ccaee51b-751e-41bf-9f1e-6906e71eed6d",
          "length": 55,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "79986a39-0f36-48a7-81f8-0fff513f7f48"
        },
        "item": {
          "id": "3612e7c5-dc1f-48f8-b48a-a8d99dbd8956",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fc43b9ab-0ca1-47bb-9604-8d414bd7d0ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f08b274b-b9e9-4e2f-8050-0222641310e7",
        "cursor": {
          "ref": "3b43dd39-e2f9-4332-b592-bbf0866064d0",
          "length": 55,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f9c629dd-8c4f-41bd-bb33-237c0e67a294"
        },
        "item": {
          "id": "f08b274b-b9e9-4e2f-8050-0222641310e7",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "5a468922-c4ee-4408-ba37-dde9cd2f95cd",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f08b274b-b9e9-4e2f-8050-0222641310e7",
        "cursor": {
          "ref": "3b43dd39-e2f9-4332-b592-bbf0866064d0",
          "length": 55,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f9c629dd-8c4f-41bd-bb33-237c0e67a294"
        },
        "item": {
          "id": "f08b274b-b9e9-4e2f-8050-0222641310e7",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "5a468922-c4ee-4408-ba37-dde9cd2f95cd",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "2fb82dcb-c909-441e-9b0f-13766edbcb99",
        "cursor": {
          "ref": "2f7550c1-2683-4e82-b369-5052db68f4cd",
          "length": 55,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2d86266b-06dd-4261-a257-57cdbd8d2709"
        },
        "item": {
          "id": "2fb82dcb-c909-441e-9b0f-13766edbcb99",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "79b496b4-4146-48cb-9a1f-de005645f6e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "2fb82dcb-c909-441e-9b0f-13766edbcb99",
        "cursor": {
          "ref": "2f7550c1-2683-4e82-b369-5052db68f4cd",
          "length": 55,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2d86266b-06dd-4261-a257-57cdbd8d2709"
        },
        "item": {
          "id": "2fb82dcb-c909-441e-9b0f-13766edbcb99",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "79b496b4-4146-48cb-9a1f-de005645f6e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "cffee38a-a07f-406f-8902-460960038371",
        "cursor": {
          "ref": "992a69bc-07f8-4a8c-89db-c5a3f4d20482",
          "length": 55,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "aa3c00ad-c4f1-41f3-981b-4abb6e6beb1f"
        },
        "item": {
          "id": "cffee38a-a07f-406f-8902-460960038371",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bbda7663-f6fd-4c78-8603-49f311482a4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "cffee38a-a07f-406f-8902-460960038371",
        "cursor": {
          "ref": "992a69bc-07f8-4a8c-89db-c5a3f4d20482",
          "length": 55,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "aa3c00ad-c4f1-41f3-981b-4abb6e6beb1f"
        },
        "item": {
          "id": "cffee38a-a07f-406f-8902-460960038371",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bbda7663-f6fd-4c78-8603-49f311482a4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "3a59960e-a5b7-4f35-bb41-181ae780a9bf",
        "cursor": {
          "ref": "1abcd605-cfa5-4819-be73-a4ca9b3e6d97",
          "length": 55,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b822d1ae-8977-41bb-a8eb-7502d8ace00f"
        },
        "item": {
          "id": "3a59960e-a5b7-4f35-bb41-181ae780a9bf",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "2e936804-9530-4eb2-a196-f7aed3ce269b",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "3a59960e-a5b7-4f35-bb41-181ae780a9bf",
        "cursor": {
          "ref": "1abcd605-cfa5-4819-be73-a4ca9b3e6d97",
          "length": 55,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b822d1ae-8977-41bb-a8eb-7502d8ace00f"
        },
        "item": {
          "id": "3a59960e-a5b7-4f35-bb41-181ae780a9bf",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "2e936804-9530-4eb2-a196-f7aed3ce269b",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "5203cfac-7e29-434a-a068-30bf1b450c35",
        "cursor": {
          "ref": "f2a01d38-2181-4c83-b2f2-a5075173e92e",
          "length": 55,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "268df31f-6021-444e-a361-a68f44141fe9"
        },
        "item": {
          "id": "5203cfac-7e29-434a-a068-30bf1b450c35",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "058a8435-ef42-428b-87fc-8b214a3fc641",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "5203cfac-7e29-434a-a068-30bf1b450c35",
        "cursor": {
          "ref": "f2a01d38-2181-4c83-b2f2-a5075173e92e",
          "length": 55,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "268df31f-6021-444e-a361-a68f44141fe9"
        },
        "item": {
          "id": "5203cfac-7e29-434a-a068-30bf1b450c35",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "058a8435-ef42-428b-87fc-8b214a3fc641",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "46ba0236-1609-4a41-afd3-339286dee888",
        "cursor": {
          "ref": "ccba49c4-ba93-42fa-b3a3-2723eb5c0853",
          "length": 55,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "56b4c660-ef56-44d3-a278-03a6b0ae30d2"
        },
        "item": {
          "id": "46ba0236-1609-4a41-afd3-339286dee888",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "5b7b23a0-9ddc-4eb2-b535-3835caf1070e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "46ba0236-1609-4a41-afd3-339286dee888",
        "cursor": {
          "ref": "ccba49c4-ba93-42fa-b3a3-2723eb5c0853",
          "length": 55,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "56b4c660-ef56-44d3-a278-03a6b0ae30d2"
        },
        "item": {
          "id": "46ba0236-1609-4a41-afd3-339286dee888",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "5b7b23a0-9ddc-4eb2-b535-3835caf1070e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "52ce32e0-7fe2-4d02-80d3-a26338385daa",
        "cursor": {
          "ref": "ea43349f-3a2d-4e2b-8df6-4b9e69180778",
          "length": 55,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "71b0008e-b8bb-4009-92d3-7c6d898eeb03"
        },
        "item": {
          "id": "52ce32e0-7fe2-4d02-80d3-a26338385daa",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ced38062-67ca-4390-9e56-38445607404e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "52ce32e0-7fe2-4d02-80d3-a26338385daa",
        "cursor": {
          "ref": "ea43349f-3a2d-4e2b-8df6-4b9e69180778",
          "length": 55,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "71b0008e-b8bb-4009-92d3-7c6d898eeb03"
        },
        "item": {
          "id": "52ce32e0-7fe2-4d02-80d3-a26338385daa",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ced38062-67ca-4390-9e56-38445607404e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "da5bc41b-841f-49c6-a047-c80e8fffd262",
        "cursor": {
          "ref": "8b7ce0ba-7e80-4268-bbef-941dd87b320e",
          "length": 55,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "da9ae18e-182c-43f4-8655-f117679b168f"
        },
        "item": {
          "id": "da5bc41b-841f-49c6-a047-c80e8fffd262",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "af50143b-c0d1-43e9-ba5a-2fee6ac53182",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "da5bc41b-841f-49c6-a047-c80e8fffd262",
        "cursor": {
          "ref": "8b7ce0ba-7e80-4268-bbef-941dd87b320e",
          "length": 55,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "da9ae18e-182c-43f4-8655-f117679b168f"
        },
        "item": {
          "id": "da5bc41b-841f-49c6-a047-c80e8fffd262",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "af50143b-c0d1-43e9-ba5a-2fee6ac53182",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "042ac849-332c-4546-bb74-c335be19a00c",
        "cursor": {
          "ref": "64b57fce-fb5e-4986-a1f2-5143d20a62d3",
          "length": 55,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "66b9d6f9-45fd-4850-8df7-b3802ffe3553"
        },
        "item": {
          "id": "042ac849-332c-4546-bb74-c335be19a00c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "42b531ab-92b4-4ff4-b63f-41a651971185",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "042ac849-332c-4546-bb74-c335be19a00c",
        "cursor": {
          "ref": "64b57fce-fb5e-4986-a1f2-5143d20a62d3",
          "length": 55,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "66b9d6f9-45fd-4850-8df7-b3802ffe3553"
        },
        "item": {
          "id": "042ac849-332c-4546-bb74-c335be19a00c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "42b531ab-92b4-4ff4-b63f-41a651971185",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7cab5b1c-0030-42ad-b69e-b21a90594687",
        "cursor": {
          "ref": "d85c85aa-efd0-4c57-aeb3-19af6e105b88",
          "length": 55,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e96256ad-97a9-40eb-95e1-648915161113"
        },
        "item": {
          "id": "7cab5b1c-0030-42ad-b69e-b21a90594687",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ca8e6c8b-ac10-462e-887d-4bc54d475cca",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7cab5b1c-0030-42ad-b69e-b21a90594687",
        "cursor": {
          "ref": "d85c85aa-efd0-4c57-aeb3-19af6e105b88",
          "length": 55,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e96256ad-97a9-40eb-95e1-648915161113"
        },
        "item": {
          "id": "7cab5b1c-0030-42ad-b69e-b21a90594687",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ca8e6c8b-ac10-462e-887d-4bc54d475cca",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "b1e7e19f-4e20-4512-b7a2-07091857edb1",
        "cursor": {
          "ref": "a91140fc-f96f-46b9-ab98-920552910f1d",
          "length": 55,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "952a1b91-8088-46a0-99c7-19adbb5613ac"
        },
        "item": {
          "id": "b1e7e19f-4e20-4512-b7a2-07091857edb1",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "4e106fe5-236c-484a-88f7-10024a94e5ca",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "b1e7e19f-4e20-4512-b7a2-07091857edb1",
        "cursor": {
          "ref": "a91140fc-f96f-46b9-ab98-920552910f1d",
          "length": 55,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "952a1b91-8088-46a0-99c7-19adbb5613ac"
        },
        "item": {
          "id": "b1e7e19f-4e20-4512-b7a2-07091857edb1",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "4e106fe5-236c-484a-88f7-10024a94e5ca",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "6e5c5874-af46-4a49-b495-2d6058cdac9f",
        "cursor": {
          "ref": "b38d032a-78c4-4cfd-b7a0-1c8e8e5f4c84",
          "length": 55,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7187658d-e122-421d-a98c-c339a1adf14f"
        },
        "item": {
          "id": "6e5c5874-af46-4a49-b495-2d6058cdac9f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "36beae6a-ea04-4b9f-92f9-dae5ab6b4c70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "6e5c5874-af46-4a49-b495-2d6058cdac9f",
        "cursor": {
          "ref": "b38d032a-78c4-4cfd-b7a0-1c8e8e5f4c84",
          "length": 55,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7187658d-e122-421d-a98c-c339a1adf14f"
        },
        "item": {
          "id": "6e5c5874-af46-4a49-b495-2d6058cdac9f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "36beae6a-ea04-4b9f-92f9-dae5ab6b4c70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "5d643328-e277-4fe8-a92b-2c4a645b601c",
        "cursor": {
          "ref": "633ac6ef-9708-4708-b2b1-a60a7adafc70",
          "length": 55,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "67f73999-681c-436f-bc2b-0ab014f01211"
        },
        "item": {
          "id": "5d643328-e277-4fe8-a92b-2c4a645b601c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "69d210c4-af01-44b7-9fa6-29f4c7700f2d",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "5d643328-e277-4fe8-a92b-2c4a645b601c",
        "cursor": {
          "ref": "633ac6ef-9708-4708-b2b1-a60a7adafc70",
          "length": 55,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "67f73999-681c-436f-bc2b-0ab014f01211"
        },
        "item": {
          "id": "5d643328-e277-4fe8-a92b-2c4a645b601c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "69d210c4-af01-44b7-9fa6-29f4c7700f2d",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "cbbc7fe3-39db-44c5-8d28-20c548f72470",
        "cursor": {
          "ref": "6ecb5c32-838d-4f39-be08-06a12747fcb4",
          "length": 55,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e09e600a-7e45-413c-9e36-cbb1adf8726b"
        },
        "item": {
          "id": "cbbc7fe3-39db-44c5-8d28-20c548f72470",
          "name": "credentials_issue"
        },
        "response": {
          "id": "aa48ef16-3c09-4203-ab3a-5c818c194bc0",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbc7fe3-39db-44c5-8d28-20c548f72470",
        "cursor": {
          "ref": "6ecb5c32-838d-4f39-be08-06a12747fcb4",
          "length": 55,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e09e600a-7e45-413c-9e36-cbb1adf8726b"
        },
        "item": {
          "id": "cbbc7fe3-39db-44c5-8d28-20c548f72470",
          "name": "credentials_issue"
        },
        "response": {
          "id": "aa48ef16-3c09-4203-ab3a-5c818c194bc0",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57eb5ac-d376-4036-a973-9936e973c278",
        "cursor": {
          "ref": "0d70af8c-11ad-4e0a-a510-df9b63f916e1",
          "length": 55,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fe5bed6c-4387-4708-9b00-3c3572fcf12a"
        },
        "item": {
          "id": "d57eb5ac-d376-4036-a973-9936e973c278",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "6fd02aa3-ca7c-4cdb-a799-104e0f04422e",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d57eb5ac-d376-4036-a973-9936e973c278",
        "cursor": {
          "ref": "0d70af8c-11ad-4e0a-a510-df9b63f916e1",
          "length": 55,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fe5bed6c-4387-4708-9b00-3c3572fcf12a"
        },
        "item": {
          "id": "d57eb5ac-d376-4036-a973-9936e973c278",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "6fd02aa3-ca7c-4cdb-a799-104e0f04422e",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "59a9f6c7-5cdb-4867-9694-e7965b3513c4",
        "cursor": {
          "ref": "2e118a3f-3e47-4d9f-9f3a-86461be82459",
          "length": 55,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c30b8a5c-951b-4586-814d-2aeb8a8f96db"
        },
        "item": {
          "id": "59a9f6c7-5cdb-4867-9694-e7965b3513c4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "030cedb0-aabf-4816-bd4f-dc62366a508a",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a9f6c7-5cdb-4867-9694-e7965b3513c4",
        "cursor": {
          "ref": "2e118a3f-3e47-4d9f-9f3a-86461be82459",
          "length": 55,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c30b8a5c-951b-4586-814d-2aeb8a8f96db"
        },
        "item": {
          "id": "59a9f6c7-5cdb-4867-9694-e7965b3513c4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "030cedb0-aabf-4816-bd4f-dc62366a508a",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a4139f-efdc-40df-b6a9-6e4cc1e94edc",
        "cursor": {
          "ref": "f299c765-f53d-438e-ab71-68a6662be32e",
          "length": 55,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "dd7e0caf-f149-4480-ab5a-42e76fec1d2d"
        },
        "item": {
          "id": "11a4139f-efdc-40df-b6a9-6e4cc1e94edc",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "00ff005e-7f65-4550-81da-ba684400d47f",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "11a4139f-efdc-40df-b6a9-6e4cc1e94edc",
        "cursor": {
          "ref": "f299c765-f53d-438e-ab71-68a6662be32e",
          "length": 55,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "dd7e0caf-f149-4480-ab5a-42e76fec1d2d"
        },
        "item": {
          "id": "11a4139f-efdc-40df-b6a9-6e4cc1e94edc",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "00ff005e-7f65-4550-81da-ba684400d47f",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c01bdc96-08ca-470f-8b68-b2e74f13a8d0",
        "cursor": {
          "ref": "f25e873e-150b-401a-8379-a3037e80afc7",
          "length": 55,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e488c203-ccd4-4a33-8e6d-af96eba1bd25"
        },
        "item": {
          "id": "c01bdc96-08ca-470f-8b68-b2e74f13a8d0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4b4ad2ad-a2c6-46af-a4ee-9a20b6451346",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01bdc96-08ca-470f-8b68-b2e74f13a8d0",
        "cursor": {
          "ref": "f25e873e-150b-401a-8379-a3037e80afc7",
          "length": 55,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e488c203-ccd4-4a33-8e6d-af96eba1bd25"
        },
        "item": {
          "id": "c01bdc96-08ca-470f-8b68-b2e74f13a8d0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4b4ad2ad-a2c6-46af-a4ee-9a20b6451346",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5093b0cd-63db-4747-8f5a-6101028fe6e1",
        "cursor": {
          "ref": "c1e06396-a21e-482e-b6f0-f23331385794",
          "length": 55,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "eb1b94ce-2212-4b04-823d-8922dc447af8"
        },
        "item": {
          "id": "5093b0cd-63db-4747-8f5a-6101028fe6e1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "85023f08-fe5c-4fc1-a4cc-f6b1c6855ebd",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5093b0cd-63db-4747-8f5a-6101028fe6e1",
        "cursor": {
          "ref": "c1e06396-a21e-482e-b6f0-f23331385794",
          "length": 55,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "eb1b94ce-2212-4b04-823d-8922dc447af8"
        },
        "item": {
          "id": "5093b0cd-63db-4747-8f5a-6101028fe6e1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "85023f08-fe5c-4fc1-a4cc-f6b1c6855ebd",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1ea4aad4-85eb-467c-acb6-2b33de3626bc",
        "cursor": {
          "ref": "02adb69c-1680-4d46-a4d5-5e40e426b846",
          "length": 55,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6076c9b1-c9b0-4c15-924f-42485960b45f"
        },
        "item": {
          "id": "1ea4aad4-85eb-467c-acb6-2b33de3626bc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d768e93b-3983-4d68-a47a-22fcdc64434a",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1ea4aad4-85eb-467c-acb6-2b33de3626bc",
        "cursor": {
          "ref": "02adb69c-1680-4d46-a4d5-5e40e426b846",
          "length": 55,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6076c9b1-c9b0-4c15-924f-42485960b45f"
        },
        "item": {
          "id": "1ea4aad4-85eb-467c-acb6-2b33de3626bc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d768e93b-3983-4d68-a47a-22fcdc64434a",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "89797a68-6307-4198-9913-a1367300da5a",
        "cursor": {
          "ref": "d2d2c26c-a0e7-4264-9e36-9294c6ddd770",
          "length": 55,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "19dfdb2c-2154-461b-ac47-014bb04589da"
        },
        "item": {
          "id": "89797a68-6307-4198-9913-a1367300da5a",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "3578ce61-3631-440c-8254-16468923fba5",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "89797a68-6307-4198-9913-a1367300da5a",
        "cursor": {
          "ref": "d2d2c26c-a0e7-4264-9e36-9294c6ddd770",
          "length": 55,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "19dfdb2c-2154-461b-ac47-014bb04589da"
        },
        "item": {
          "id": "89797a68-6307-4198-9913-a1367300da5a",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "3578ce61-3631-440c-8254-16468923fba5",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c58eba22-e097-4192-93a4-58c7d15ad88c",
        "cursor": {
          "ref": "396dd0fb-ed2d-4964-96e6-563b6b423d3b",
          "length": 55,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f7f7ee59-cc95-43d6-91c7-8854af289bd0"
        },
        "item": {
          "id": "c58eba22-e097-4192-93a4-58c7d15ad88c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "de1bd1be-307d-43df-8366-344b753d0bd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c58eba22-e097-4192-93a4-58c7d15ad88c",
        "cursor": {
          "ref": "396dd0fb-ed2d-4964-96e6-563b6b423d3b",
          "length": 55,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f7f7ee59-cc95-43d6-91c7-8854af289bd0"
        },
        "item": {
          "id": "c58eba22-e097-4192-93a4-58c7d15ad88c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "de1bd1be-307d-43df-8366-344b753d0bd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c5b2df3d-9a3a-43e0-b339-7c573b863e82",
        "cursor": {
          "ref": "4325f99d-51b4-4471-8e1a-f4fea5ac3556",
          "length": 55,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8146b059-7293-4175-9f06-70a1e8ed910c"
        },
        "item": {
          "id": "c5b2df3d-9a3a-43e0-b339-7c573b863e82",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6d79bcfe-1e5b-4967-b517-1e67bd32702f",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 12,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "264c9e9d-cf18-4e60-abea-5b8ab794f65b",
        "cursor": {
          "ref": "18fcd189-dcbb-44c5-ba2e-fde8401e6834",
          "length": 55,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "acd348da-4c04-4be6-bdf2-242a67471f78"
        },
        "item": {
          "id": "264c9e9d-cf18-4e60-abea-5b8ab794f65b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bcc47655-0392-4651-b826-ff85ba736eeb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "264c9e9d-cf18-4e60-abea-5b8ab794f65b",
        "cursor": {
          "ref": "18fcd189-dcbb-44c5-ba2e-fde8401e6834",
          "length": 55,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "acd348da-4c04-4be6-bdf2-242a67471f78"
        },
        "item": {
          "id": "264c9e9d-cf18-4e60-abea-5b8ab794f65b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bcc47655-0392-4651-b826-ff85ba736eeb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5ac9a8b7-b7b3-4cd0-ae08-bed5bfa70d12",
        "cursor": {
          "ref": "c770d6de-5a0c-4902-b5f4-e55ffef1d637",
          "length": 55,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cf800370-ba60-472e-b240-d2a0f8b3e300"
        },
        "item": {
          "id": "5ac9a8b7-b7b3-4cd0-ae08-bed5bfa70d12",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "31b57306-3116-4f22-acfb-97274da925d3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6af11cf7-7f22-4f79-b921-38f460951678",
        "cursor": {
          "ref": "d2bcc26d-158b-4205-8f00-da098cc7591c",
          "length": 55,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "131532f1-6830-441b-a779-20d239766644"
        },
        "item": {
          "id": "6af11cf7-7f22-4f79-b921-38f460951678",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6bf5ff08-123d-4049-b8f5-30c2cbe1d009",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6af11cf7-7f22-4f79-b921-38f460951678",
        "cursor": {
          "ref": "d2bcc26d-158b-4205-8f00-da098cc7591c",
          "length": 55,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "131532f1-6830-441b-a779-20d239766644"
        },
        "item": {
          "id": "6af11cf7-7f22-4f79-b921-38f460951678",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6bf5ff08-123d-4049-b8f5-30c2cbe1d009",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9f5d76b1-66b7-46e0-a3eb-7bbb92552aec",
        "cursor": {
          "ref": "7d7b8afc-e61f-4061-9d9f-46073f127c15",
          "length": 55,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ab918867-efe3-4244-a44a-bbec6c90a278"
        },
        "item": {
          "id": "9f5d76b1-66b7-46e0-a3eb-7bbb92552aec",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c2f9fda4-822e-4e5c-89a0-f4c82c514679",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "487c1012-6cd2-42b0-bf8f-2d10485a5ab6",
        "cursor": {
          "ref": "356b5a07-393e-44db-8765-e342631650a5",
          "length": 55,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "721f8dc9-4188-48bd-bc44-7ef0d467f6f0"
        },
        "item": {
          "id": "487c1012-6cd2-42b0-bf8f-2d10485a5ab6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7b4f4f51-5c06-46f4-b4ee-d3a36938b769",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "487c1012-6cd2-42b0-bf8f-2d10485a5ab6",
        "cursor": {
          "ref": "356b5a07-393e-44db-8765-e342631650a5",
          "length": 55,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "721f8dc9-4188-48bd-bc44-7ef0d467f6f0"
        },
        "item": {
          "id": "487c1012-6cd2-42b0-bf8f-2d10485a5ab6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7b4f4f51-5c06-46f4-b4ee-d3a36938b769",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "03ed00dc-43ba-40ff-acc6-760187953f39",
        "cursor": {
          "ref": "fbf01d59-d8fc-471a-af55-65877164e3f7",
          "length": 55,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7b292488-ce81-4d27-9c3e-0aad98c5b3f1"
        },
        "item": {
          "id": "03ed00dc-43ba-40ff-acc6-760187953f39",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "efee3e98-e3f9-451f-bea0-e19afc0b8615",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f5fc6b86-9552-4598-a683-5320dfa8382e",
        "cursor": {
          "ref": "6575a11f-79a6-4243-8400-c354dab0f834",
          "length": 55,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "66b19615-5526-4ac9-ac34-2c6a3d874ad1"
        },
        "item": {
          "id": "f5fc6b86-9552-4598-a683-5320dfa8382e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6f1d94ea-d007-453c-9e94-a148c24ce60f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "f5fc6b86-9552-4598-a683-5320dfa8382e",
        "cursor": {
          "ref": "6575a11f-79a6-4243-8400-c354dab0f834",
          "length": 55,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "66b19615-5526-4ac9-ac34-2c6a3d874ad1"
        },
        "item": {
          "id": "f5fc6b86-9552-4598-a683-5320dfa8382e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6f1d94ea-d007-453c-9e94-a148c24ce60f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "10bb25fa-5176-498b-95e5-99f26b251815",
        "cursor": {
          "ref": "7b26cf44-09a1-4f62-8a41-39d347214bc3",
          "length": 55,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "49d15eae-bf71-41a8-b381-b9a24fe54779"
        },
        "item": {
          "id": "10bb25fa-5176-498b-95e5-99f26b251815",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "380756d7-8842-48d3-8a7d-21a3fe61db2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      }
    ]
  }
}