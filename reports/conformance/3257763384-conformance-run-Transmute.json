{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c1a0b940-33a2-4e25-997e-12e9d0dbad06",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c98f64dd-4613-4067-88a8-14c32a8ef32c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "00a9990d-b41f-4090-8bf9-44a6d9f1f1ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "351489bf-58fd-4c28-907b-83d3a59cd3e3"
                }
              }
            ]
          },
          {
            "id": "f363cfcb-4956-4c22-b90c-8bd881d3398a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "168625ae-71f6-4614-abac-799efab0fc03",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2e84ea58-7c54-4831-9890-35a7ea7108b3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "47738f8c-11a9-48ef-9d7f-95d1e22ba9ee",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0f605b04-62e1-41f1-9046-82fb67e2d7f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96b4c277-c3c4-40b5-af9a-91b800048bfc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3472f030-78aa-48ef-9e80-2b9e1379f595",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0aa2368-cef7-479f-9722-353d9de5c959"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b63e716f-0a6d-42e4-b42e-534e1921713f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ad722a0e-960f-483c-a2f5-9935e0113ac0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6d345f4-1ea4-4622-b403-b0bd0f3d998c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4f87400-9e41-43aa-a180-0315b53a13f5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "322bdd9d-2336-4184-b058-cbcf1775b33c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f69c4854-2823-44f4-8c95-7d8c54aec181"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f63820a-af9a-4774-9a21-edddcdd83140",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ecd4a631-2442-4d60-8199-396d860380ca"
            }
          }
        ]
      },
      {
        "id": "0cb9ed46-4f8c-4871-a107-a3f3ab5f6edd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "da06fe14-d405-4084-8e73-9e443a5e6766",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4e82aa3-9149-4c11-bf63-0b4d1a8000cd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2007b839-3092-4aac-918f-3b5f0b793200",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff1a78f-d050-4a62-844b-b26427abe5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0495b380-5aef-4c8d-833f-c8a7096f579a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22b83ba-0ee4-4858-aadc-e5fc2e609093",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45805aee-4c4c-4b99-8c7e-6de215a602e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c25fdc01-164e-468f-a2e9-6633f7d6c26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355fb761-fd9e-4f4c-87ba-30a1ff0dbf8a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c60d97c-acdf-4d34-9c98-1fdedf954c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb076037-6d78-48ad-b38b-0eda96c9b9ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b4cafa70-ce7b-403e-ac4f-8c1b6dcef9fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a60e57d-10d8-4947-a1eb-5a95b250207e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0574769c-9234-4bdf-9121-40aa6f691014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55a1467d-2d48-4d48-afc6-1a13a9c05552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af463af6-83c5-4168-a9a9-a14f89020908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9cd43e-dcac-4eaf-b5b4-b688fe37257b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabd547c-b238-4832-99e0-d64516cf3361",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6699357a-c45c-4d8e-b010-4b63e640e549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "058a9698-a82a-4ecb-bdb4-b44d6aed0bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7699cdc-73f7-4eba-9637-a2f68cc8819d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7bbb9a35-87da-4cd1-92e7-96e38a531397"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "91d602f7-0956-49a4-8ff4-c9d2a04936e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "40aa14a5-cb4d-4a72-9640-fff5b3142a32",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a3503c4-e0ba-4d04-9714-c29854a0c5c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c5986715-96bb-4389-9c25-c8d1d5502262"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5726870-d010-415a-90e8-9a44599dccf5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "da8adc92-e544-4072-a474-e3dbc5e67ad1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c008e1c2-bd5a-4ff3-af1c-9f23e5a677e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "465d095e-3862-4de2-8f15-74ff61bc498c"
            }
          }
        ]
      },
      {
        "id": "6be82de1-89f2-4fda-9ae3-52da81de2a88",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "65f3c7a6-5076-4e3f-81e7-bdbb82ea835b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b93e1b62-1b22-4a0b-9fcf-3b78bf28643d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "15796f93-7cae-4379-817f-4575e2bbd0d1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9922c3c-06b6-41ed-bdb0-9682619cf420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048d09e5-c722-4ca5-a2df-e52ded0d3880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1e8c40-64d0-47b7-8259-a05c6a385a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd767f74-19fd-49c7-97dc-33e785019f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817d63e8-7e82-4d1a-9e77-bf0bf8480488",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944da040-7465-4f14-9707-03860eb89762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fcec41d-43b2-44a3-b3b5-49de483860af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4481aa83-e28d-47e4-8369-8fb88c12e66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "652ccd0f-117b-48ca-b2ea-a71b80f221a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6aae011-28ec-40f0-95e8-f6c15c0ed599",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9c92e6-ad7c-4f98-9d59-7a16df51cc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58d94b5-70d4-4705-a851-4d37152193cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ba8141-b9f2-446e-a043-6f66b703fbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29d85012-8c43-42c3-b686-034f295fa8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280ed2a7-07d7-4a36-af1a-a8a75b72aef2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a686139-adb0-4030-b92f-1360691206fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b3cd4d2-e441-4e8a-92fa-013432d8b098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58139957-6b43-483f-aad1-17e72c02d07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87c3a071-29d3-4092-811a-a68b86a28100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5f8e75-e5e2-475a-a75c-87c37f00a927",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1253bbd6-287b-44e4-94fc-cf7ed784da5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ab86cd-c971-4bc4-baeb-f23d9a469692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a91e5b-6ce4-47d3-84ef-581a7ef82d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "138c64ef-6954-4d68-b2fb-8f28b0742624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8845f0b-b7f0-455e-8c15-968ade8f0f17",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67454b3-b967-44d7-933b-192615c01d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5463acf-8661-4935-9325-7b6dae6225bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852013f1-8148-4c5c-8b5c-94e3c2d17303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a18ae40-8c59-43ef-b2d9-ded5d22347fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28152a39-a93a-49c6-83f7-3b37b9b5c30f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eecc24a-0735-469c-a145-74779a5438b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d46be0f-c1c3-440c-8c8b-cf34e33c9283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e67ab02-39ec-4706-8eb4-fb00e21d7e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45eced5f-add0-474b-9008-5811527b7835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707dac71-c65b-4ceb-b1a6-92e9e30be6ea",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212166f6-5839-43fa-a8a6-e66d96e6e1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80d5f31-839f-431c-9ed1-912ebd0e8443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2ea18d-28bb-4be3-b804-97aab3b4d59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "604ad942-fb7d-4b7f-8af8-be142463aa30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f384ee-b7d8-4f17-8f6c-2815dd8c089d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1199e27-f854-4808-9c78-1413ffa0877c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e58fc7-9330-4200-92d8-eca84bc0cbe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1346bbee-0fc1-4fa3-9125-de341b65df2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1ee1f9a-bf11-400c-a670-b66b4a55c471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6409b33-fc0b-4a62-a01c-03721dc7d955",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f188c007-d6e6-403d-a416-43d7c77edd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae2d2a7-6d26-4524-8784-de6f0eeab1bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a532641f-445d-49c7-965a-a38419e452da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a16f908-2f5e-4ae9-b9b9-8649c99cd4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f340e3a9-acd5-41c9-b607-695b43296491",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355a8eb4-1ff9-42ce-b50f-e48bef3deaee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "097f7c69-4dd2-455e-9d59-58bcf4fb3b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da98f77-8e6b-4349-8d7b-1ae04ed6c26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc634080-630f-46e3-84df-55b5d30a9917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2923e73-29bc-4644-b5e1-924d3a44a1b9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17ec9ee-4bc0-4c1c-ad4b-9ce2ddb8f5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8d7b24-1f44-4899-96e7-6f056d172b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b575b7-498f-4102-9e2e-78cb737f99c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae39c9c7-4f50-49b8-a6c5-8de7140a4b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa18457-d531-4a17-acbd-98e84e286c33",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848784c1-c466-41e7-b25d-eb8cc0d5737b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90be205-4ce4-4b36-a10d-8bef869f8d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170733e6-394c-42ae-95d8-40a51d569bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef21bb42-81df-4208-a515-229dc4dc4058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738a189b-2b50-4b07-be5f-d4a18f95a6c6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd476e3c-4c8b-47a6-9e56-2ff4b3a5fe22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea22c9d-16eb-42da-a90f-919dc8ac5205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda25b06-39d8-4244-b033-a08403b89d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56ffee62-bf75-48d7-81f7-b97beda8a268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07a828d-3903-4a3d-b61c-c7d79c2d6a6f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb1767a-c155-4254-9dd1-997d51f794e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "648a9d2c-e2a2-4472-80a0-1ce662bce72a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57687b0-34f4-463f-a175-1191b9f1d933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11a6d9c6-7424-4fd8-b8dc-d69d3eb79650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d2236c-cf4a-43bb-a17b-b332e7ecd23f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfd6855-ce94-42e9-8070-a7f4f33eb6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a973359a-bf02-49e2-9d69-c94810ae20f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee20662c-f869-41f5-b695-289803728839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65a0d16e-fb64-42c7-bc52-874b4941a71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdde8778-3bf8-431d-9a63-dbd48ca98255",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1454b1-920e-4ef6-8847-64f2de99fb23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83e4c57-6342-41a3-b10e-2c32ca78cbec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddedea1-6232-41be-ae33-f365b6ea0796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94e80feb-c0fb-4737-a0d2-23b279973c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e8c783-f449-4ddf-b3fd-1a0347511c31",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc9a8e8-401a-42c0-b473-d5d28d7211ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc887ab-06f9-400f-80f4-be64926f9b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a551285-633b-4847-881a-51755f6c737f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "13c026f6-e71b-4eda-8fab-d51f329997c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6410e653-736a-4c25-bb08-6898dd4a9116",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54db4f48-90f1-4c1d-83f2-8094e4c97d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f704cc8e-726e-4c87-b11d-888d467e7317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621c0b47-e27c-4a8d-9a86-5bfaad9467a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "879c566b-1f79-4307-a559-2bd8e6e6427a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95eb187c-665f-403b-a6d2-5c11c67fec8f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ecbb8e-1bc5-4ca1-baa0-3a2a646aa5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d581a59d-a27d-4782-94f4-8bd62356bb56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eedfab2-1426-4201-8a57-185e0320fa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0442cba-4ee8-419b-b945-a6d27b32f7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ab1ba8-9417-4c1b-bc57-51ce0cd7115b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e967947-f589-4f75-a588-d439d44597bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14db453e-7f21-40fd-a72c-d74f66259181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd71906d-0ea3-49aa-bc95-19fe014d3800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d984bf-d458-4d6a-8110-678c1aea78ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4c035a-c144-458e-b353-fff65f15f4d5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78669a5e-b20a-49f8-adbb-d13ffcb162fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7780a59-5961-4794-82a8-7eb411165dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427eb41c-e9ba-46f7-9440-a4ab9a2e2d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9677d9aa-8c60-4a17-85b5-7b303eaaf5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7a1ffd-993e-4221-aa44-2d537923e49b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203726f6-8170-419b-a178-594f11e0c2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1030ab0-8e34-4695-8b91-fd60df0f46c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa089fe3-3723-419e-a453-5ed316735c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ba0729b-437e-4902-9303-6e4ea40f0032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f84be81-fdaf-4046-8604-ece348d9f46f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8a2321-3b13-4ffd-958d-14b1c4b49568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1907ab-d1bb-4e89-8054-19ecd0625ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3350da67-7b24-4977-93fe-17f375b11870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c12668c6-c4df-4d92-bf3e-fad62a0ef80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853ee8ef-ad70-41f5-910d-122d10a9f9cc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027af715-3e9f-4520-9f8f-61ac0801352f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a10a8e-d8a9-42e5-82b3-ab66baef6676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f9cfb2-bf95-4f36-9e5d-eeba960d2a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c450770b-2f28-46c3-b51e-17e952f17683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9eba211-11f4-4b6b-b612-16978a43dd0e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed57dcd-2201-4a65-8a54-598a1b50ad5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8e8e64-9276-4176-a346-b3795dbb46ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba501c1a-515c-44ef-9263-e5f898ddaf1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac1c97db-844b-4f19-87bd-321232dc197e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180438e1-f1a7-46e8-a0f6-c2c9a65164ae",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1b9256-e1b0-41f0-8193-1d8fa03e518f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97dbd65-6469-4afa-bf45-aef9a4233d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c32f7e3-64ed-4f03-b6d6-0989d2de6e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b06de19-9ca1-45bf-982a-9ae2c395cb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdaa961b-f076-4224-80e4-dc4de9c06379",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937f56c1-b9de-4353-9d57-768fcdb426bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da0063a-0ff9-49f1-b534-35cf5410a5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0d4147-8370-408b-87c4-6c812882989a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd9eb1c-c184-4d16-ad40-b491d07b654a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353a29ad-d87e-488d-bf85-e3e8f4610cb5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01c82c0-e01c-45d4-8eba-5254da1161a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a33f71a-b710-41ba-b304-d893b89607c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9005df8-e15f-4b05-9441-d19693eb4415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f88e69-1f9d-46c9-9876-0d1f0d8f65dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b241c53-c903-4dd4-80ba-ebe44c0b0dc7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a999893-0cf3-4278-a50f-7e72357399e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f760f0aa-5f78-4bc2-b71e-0f16fe53bbfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21524d0-7a03-44ce-83fe-6f6a35881bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e7c6296-c4d3-429c-9b69-fe633f7d7e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e9ac61-6c23-4a72-8175-517c095d26bc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231e1450-9143-4c69-a8c8-ced45ad433bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "917e4639-3c20-47ac-979e-5ff71e2817f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70112e5-2052-4d17-bb2d-f1672e227109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1221e87-d655-4821-977a-0785f1ac7f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4210c62b-e71e-444f-bd15-1f75642ed25e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3783e5-9262-4450-81e3-0e173dbf8096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e94902-376c-46c7-ac2d-c87fd1cd05f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bc4857-f644-4e28-8802-f2cb67d09550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ca3aa7-fe82-43a7-8082-add6d555f440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6418f9-cdae-48c3-bfe7-8c18df0d2a02",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89297f8b-41b0-46aa-b6f8-1d8ebc3d2d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3388c1-7439-4869-afd1-521d47d6070c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b89649-2692-4353-9b85-14234c448022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86cbe099-4feb-4269-9c69-9827a06ba477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d588b1b-a1f2-41f2-a962-0d08d1faff5f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50645dce-193a-4f58-a758-b81a81f217df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0362988-163e-4ea5-8d18-35056526500b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3962ef-d6cb-49cf-a48f-27501dbef63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac9957b9-a002-4eed-8586-1d455ec8903c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7bc58e-950d-4034-beb1-b7e32a17332c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa23a02-23a9-44d8-b333-24442e2a005a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e66f80-3d68-4596-b5e0-7e815a1d589f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335103db-b948-4fb6-b894-214a9bc643b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cabacaf9-13f6-4d80-93e0-9b97616e5e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d0df97-d3bc-4d5b-af89-b36f8138456f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39821a0-546a-41ab-a079-d689d79996d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c46f7d3-164d-44bd-8710-7bf44f7f05bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0bf3a4-f15c-4849-8191-08f698f624f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30aa6817-2c21-4c73-aaca-0f97b7f26fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cd0273-2997-4ebe-adde-ebda0220c323",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746e08c5-7514-4113-89c0-3dcaae28638e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d390ffa-236b-4f41-ab82-9d4721a41b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad14c040-2260-40ae-86a8-02c566237fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d6fe365-7829-4539-84a1-ef50589b16b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6234e863-ed39-48a1-ae84-ef9f9dfa0ce7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e0343a-1792-4b60-9713-230460159fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd0af89-3c17-4d7a-a6ad-af88f99de8fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baabf9a9-7b25-49e4-a2a5-ecd178c509c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa6051c-ddf1-46e3-8c06-bf14e9ea0444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9f69d5-8d07-481f-a2dc-a43596669a24",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5ec86e-b8cc-42f0-b795-0c6da18d401c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35bc2354-cfa9-4473-affe-9861c6deb47b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fc962f-83d9-4ac1-b64b-9d452bb27fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "036fa8e3-91ae-4d9e-9e0b-c088fe576893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ac7d44-bde4-44b4-b630-889b7d9e8db0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c329b7e0-2a5e-4b7e-bb9a-78d4d3a492d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7877cbdf-5b6b-44cf-91a1-3595dda014e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c2e7b8-6310-4578-972b-42a271aafa20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d261e6e-aacb-415c-a057-d0d627e282f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8add667a-36c4-4772-b484-b4b134148c9f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58edd1ef-ce52-47c0-a8bd-307bde41f52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34cf816-3a98-43e9-8b80-87055105a3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771956f9-601d-462a-8445-c560fa3cf92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d46e23ff-9b26-4dde-8421-3431e3bbb992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e9a02b-862b-4bbc-bdf3-c7e8a41d8257",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8792909-e6f7-4d16-ac8e-95f1466f45a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6b3616-5ecb-4af2-aebb-5d7ec8d506cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69a2ba0-2a2e-4f8d-af66-95cccc26efed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "daf100a9-a832-4547-8c3d-9d388cf5455e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ca82ef-e32f-493c-bff5-b06d2c9ec6ac",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45da448-0744-49e6-9b24-a39fb2658d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b1f8de7-847e-496d-98bc-d26276cf159c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c45cb18-19f0-49d4-a72d-a1659ab8b3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c175374-b2a8-4f93-903e-db824e0e077e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f4acd1-324e-4ec2-b0a2-37bb6f4d983e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68f15e9-4acd-4574-a286-3daae0235eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a803bec8-3fae-4104-b93d-1f02a2c20c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a58bcbe-0231-4155-b8f9-4263c0ba2c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "98f7b93f-3ce4-4786-b476-5b30cf8b7477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8e33db-b968-421f-a102-1ee9abe414d5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8435d18d-87b6-48d1-a2bb-e1baaf795d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8646ea8-28be-412e-a7a9-ebc9ab6ddc5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d29072-83d6-483d-8c89-7c66107b21c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "184df1c3-05e6-48db-9d2c-3cddd7e86c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48be5462-20ac-4742-88e5-c43c89f07b97",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d84247-e546-4d6a-a1b8-50bf092aa728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe3e8f4-b991-4b24-b8b5-a08ca896e5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678c1cd2-6d99-41a1-bd95-430ebcb828af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2dae99-2ecf-4b00-84bf-c2a34a64c655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2fccbfb-57b6-4ed8-a207-59f6c37133ef",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8844bb74-ffc7-425e-8b34-5b49c6783bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459cdbed-4977-4a37-932c-b3c4628e79e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445c23bd-ef5e-41e0-aaaa-9ee2f4d0b28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5021dffb-72aa-4593-b0e8-f2c0dfb59afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5daf77-8f15-4053-b7d5-61aeaa16045d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f1e197-451f-4660-adea-b8ace1997f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65bdaa3-d4d5-4c65-b4c1-53b5aad53eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc60950-b678-482e-a147-1b9e496dce28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d3feb0-45e3-4cdf-aded-61b3f7a264f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd85af7-96f1-4a2f-993d-0e8a1db69bf3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "843c4385-c33f-4102-9611-efcd8dced9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97268d67-8c91-4743-b9a5-84b8aa1dbadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95deb788-6e8a-4954-b5e4-8e0e4fee6f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b324fa-7064-4b74-80bc-3ac317e32c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a024cf3-5183-4a86-a409-21ad4d008032",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7f8058-6521-4dcd-a032-14b8c7d49062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d3d74e-d19c-4ea3-92dd-fce8e0c9e0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5f2b3e-4659-471c-a7af-fcf670e71aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b567c5a8-f0dd-4752-a36f-c5e6e5893f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731706c2-52be-4d14-8a5d-658e705bbb98",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72764316-ee96-4b81-8100-b965a0bd58b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f534e26-9634-4574-93a6-0de63ac11032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece38ed1-0c57-4fa8-90ea-13b007cde815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6fe73e-0a95-4a1e-987c-3a9c81e5112e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374edf9e-5e5f-40fc-a992-048c35058ccc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c4fed0-863c-4952-90c7-d9abf0cf17e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9a1ec1-68f1-47ad-a0d6-3945eb2ac4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9660d013-339b-4d37-a178-62ac22653af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4935b11f-cd23-4267-99d9-58a48e3ef25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f48ed93-1e80-4c69-9081-ba72e98bffb6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231b8172-7297-4048-a6f7-a2e45b5687fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ff14ab-acf1-48b8-a50e-7cf5808bd6d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7568de27-dd8c-47d8-ba9a-98d0ab8f4e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9449c2c5-7857-4e7d-841d-8be02bd68d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087f3e0f-46ab-423e-a2ff-1bcdf58d6aea",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb0839e-64ce-44f0-96c1-fb0bb1277f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0004c7c-02fa-4d32-83f5-661a4be5c7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea6dd10-1db0-4b06-a964-211dffdc3a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "964f396a-472f-4f77-876a-e75c74459a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d127219-4c19-4814-99f6-f0548f303c40",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5109512-ef41-4677-a6cb-748c5842050a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbac7788-1503-4fff-9f9e-26c07bae4253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4d84b6-ec83-4b2f-af9e-38feaa2121f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aab3b12-a0ce-4958-851a-36cc483e19de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f02ace-e504-4237-8074-64a6db7b14df",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2d0d59-0771-42a5-b6de-a8140eb8a6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d63f43d-802e-4589-8fb9-20d1e861d039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7028cdda-abf0-410e-8374-d4413a2a48a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9c34a604-e106-456c-a7ea-8eb80fa5e034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1edf8c-821e-450c-9dad-521c875bbea3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1e7c00-cc01-4aa5-85a6-16d106431ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8077f28e-076a-4931-9086-76aa5da93116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146df1cc-19a1-4021-b80d-95f43e07547b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d40fd7d7-2800-4c9c-8a6f-34fd0e2a8a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99598651-20f4-4482-84ce-243e1f050a2a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1468ecbf-b946-46df-bf2a-18f62c54dc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f81f24-276f-469b-bfb3-be235b5aa7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c82ed73-4681-4262-bf87-4f0938c318be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a28fc7f-d9be-4edc-85da-96023ec6ca0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff6aadd-4ace-4493-9079-2288a1dc6e84",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54e7858-9e66-4426-93f6-f58e086f59fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ecacf7-c939-4a93-a39e-311bd3a89984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0140606-b959-483c-b595-19b01e9579e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ade5744e-d9e9-487a-ac93-a4b4a7f51bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c425576-43e8-4493-8f40-9c4523b338b1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b23439-3453-43f1-90af-59d1339e7472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca70c717-a75e-4131-b52e-866ea78f16f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4fc1355-fd9f-4c87-9988-eaa918ee78dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9117d4b7-2bfc-4ffc-8b40-d051cd04860c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527da879-1178-4ff1-b7fc-fcc47a5919e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acca7b5-2c0d-4508-b4ab-1f9bd806a9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d18e0a9-fcb2-499c-91f5-bc6c3cf5b827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87245109-7d24-4740-a5c3-aed87ba12b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "187bea02-457a-444f-857e-ff0ca16f0f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbcefa0-bb93-4715-977e-ee23f5343f24",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "831908f8-17bd-41e2-8a84-f88a6ec2dc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390047ef-88b1-4591-aff6-404753c2c49f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67419fa3-6219-40ac-9f85-474ee0707d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3dfc74c-9fc3-4e25-948c-c52c450c0590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4493b460-2c04-4f81-8fed-e42624af2b08",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55bb994-abf4-41da-aba2-45f62f6b3ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2354fef-b002-4f9f-8af1-4ec1dd7ff5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96164b04-4083-4fcd-ad32-32a87f690b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8680abfc-b370-46a2-bb95-6a898b0775ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ebbd26-2946-4e70-a474-b061341298ad",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc12e7fd-8b41-4608-b1e7-7b53d3adf0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d1cfb2-d837-4427-bd91-6d510f120710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6872f4ce-41cb-4917-ade3-e08a02ca3997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99441bb3-c72a-46fe-ad58-8157fe640a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923be160-3877-4d53-ac11-0ebe3cd20a22",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec8cb89-5d1b-4bcc-a82f-96e8f654605e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7be9f61-a1dc-4dee-a826-b132729b072b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b74fe33-9eaf-4c32-b9cb-0d609da43778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6b856b-b017-4ab2-a68b-f8907fe78c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679defbc-70bd-47c1-8ac3-27e131971279",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b00eba5-2b63-441f-b0c6-3b96b3d9890e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cea5323-4cf8-41ba-a5d5-975f1c60dfee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3545f21-cbe2-4bfc-979e-71ced6c942b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f0a759f-19e3-4069-8f85-b615c9502183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70dfd502-15f9-4500-abce-9e75e6a7a6c8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8201130-1a56-4a69-9e84-f28fb3570d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe6e5af-b982-469a-8702-abcd66a74ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408d6326-701e-4b1b-9b00-de165e7ee904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "012d32ef-4305-44c8-9e16-7643dd950408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc871756-cc06-4f7a-bd0e-99823365b626",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f783f9-c8ec-46a0-8487-18c971e54679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c287d5-8fbf-4c59-902b-1b3d685158b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95dbf219-1894-4a5f-9947-743960859631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd1ba11-c4b2-440b-af78-c0ed7cae6746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a4353a-191a-42f3-b971-6c4011e48cd9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b1a0ae-8ead-487e-8e95-dcba6ebb4113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4ffbb0-62fa-44dc-961b-f0df797aae62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102fa289-2b0d-4300-bb36-53550ef19bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1212f6-42bc-42cb-9c2b-ed057a5d9099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bba79d-7016-422a-89e7-b61ac3bed44e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de16ee6-629d-431b-90da-5118584ef1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9398c5d0-1495-401c-baa7-874d552afe28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e237409-4fa5-45c2-958d-e66475b8b893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61cdc724-513d-4626-ae9a-d7d4d04fb045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2f894a-dd12-457b-a576-dfa1e48789c7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bb7755-1712-4ff1-8a3d-52ec4125f4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369714ce-d6f8-491e-9bae-d8ede5a9d92f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14905163-8692-473c-bbdb-c255fcfcdbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53e477a0-a636-4d65-821a-9366528a2a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3a5c64-cbf4-45dc-ab0e-a4be16282081",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a89d6e9-847f-4b7e-82b2-3b8459adbea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12cb46e7-ec33-49c5-bdb3-381692442eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362882d1-142d-4481-a4b8-7856e3482654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95d5b532-c291-490f-8df0-e97c3d0fb973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c4e035-371d-4426-9a1a-98df3452e43b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f25541-3677-41c7-87e9-db56ed9b17fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c470cb-f654-4c8e-9f91-f61891415c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7da0c9-7166-43ef-bf31-2138ebc8982f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "96f30078-3f30-4cf8-9468-21de4437646e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c028e975-1e49-4c7c-b7e6-dade523c95f5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e1f744-245b-411a-8ea5-af18037b05da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db7bcd1-cc15-4e7b-abd9-d47ab0f1645e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b7bcfd-c388-4196-8b72-a796021d8ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b656675-1a5e-4d8c-96ed-037efdd96b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38e1411-41b7-47e7-9e02-de415edb9c73",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a1cd27-bb92-4c2e-a6f8-9a12929ee22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f2749b-8c99-4f2f-a902-35dc40443032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473c6f54-2bd1-403e-9652-240375fa0b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7684e9be-8d36-461d-b9ae-6492fae3aa14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96c34cb-440b-422b-849c-881c6af16e86",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf66c25-cd55-4944-9134-8242b80db9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc360b7f-a414-4823-be11-2d572f3c4feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd26d8a5-acb6-4f48-b7e1-d30d6d3e57a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d18fce35-ad6e-456a-ae4b-e9555093e0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8433c6-2aaf-4544-8bb0-a0f89d25ee8f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6a9661-0c52-4110-b73a-f1cde45a7b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7f6165-f077-45b7-b110-3b79e3c618b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31ccd6a-4dd2-4bf5-8be2-c5fd6c6bff71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "918d4c67-ce1d-4d7e-bc08-831710cb35dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b7b57f-af96-452a-9634-c8139585ec8d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a622fb46-cf34-47b7-b655-4c816b0f5dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833fbd6c-feb4-4826-b034-767c5b4e0f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7faea278-b269-4718-87c5-3238880de851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2328b016-d185-44a1-9523-cf08341a963e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d704acc-ce65-4a05-87f6-51ad59e8bca5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "663d47e6-d452-4677-bd89-7cdb292ae6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed6906b-3dd7-4b84-9a18-2aa202ff6adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a02d43a-bc6e-4ba5-8c5a-aad470eeb7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb4b752-2977-47f6-a07b-1871ea2ebcf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26733cfe-14fe-4ec2-92a3-90f6c60f7989",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb51020-c1d5-44a1-b66a-0cca994a8682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7949408-2cca-4177-8552-0ec5a3bef4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71bb881-f4a5-4e1f-b9b6-b4fc1d1036a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb39e749-50f0-413f-94b0-29abd98eda78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a296b498-7074-476a-b9f3-bdbd387412ae",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b564424e-d744-4618-b333-a07a5edc053a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d0f6e3-b6a4-4e35-8033-39969fa9e595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3902b8db-b043-4ee6-aaed-37d3da54dce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9deae5a6-cb9a-44f3-bd21-2c38d3c30cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cb798b-1e09-4401-a655-391b7be35c10",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5373aec9-77b7-4d61-b18c-4fbc7ae07f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba550d71-3d1c-4030-91a1-850ede484feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5560802d-f296-4f25-9e3a-f1c486732ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e7da256-dfb4-4e8c-b962-ced05e17dc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acf0a86-da53-4c46-a6ae-961e8cb92e57",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74da13b-f00e-4be8-8526-e1d91daff5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40352552-4cae-4634-b7fb-318d81289186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f47a0b-d5ff-492a-b949-74f194d95bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07aebae8-e9a6-46d6-a105-b76edd122ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c926817-c464-406c-ae69-f1cf8fe567d8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5836f6-cdca-47a9-95d4-3a12c9462e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74925e05-8d38-493c-96dc-532e44710733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbb3e40-484d-4dc4-a45a-b402668c9094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9745376-3b72-46c6-a1ba-207d229e442c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f315025-341e-4dbf-aa0b-593d48abf492",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e472fc5a-19dd-4e2b-b101-29758015173f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "decb90b6-57d4-48dd-9780-50e838ecee9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1895765-689c-4525-af31-9f3a1eaa4525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3324daba-2442-484e-8c1b-8ca9af2df1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccaca36b-c328-4b63-8f3d-7bc34309ceb6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974173d2-f32b-4850-8e54-faaf19ef96bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c67916-b251-421f-a59e-ff1ddaa1f1ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad5831f-67e8-4ef3-88e7-55a5f8225d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcdccc40-5a4b-442b-a1b9-0fe38f31cc7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee26b02-35ef-4266-93d6-6df9836cc022",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bcf7cf-632c-4f5a-90fb-7b18ae6b6d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0bb1e1-18c9-4893-a9fa-44faf577349c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19d6e73-060d-4424-8b9f-12a949ffc622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bce428f-cda8-4f66-9486-bfc9affca272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb798df-cab2-43bc-ae52-03be76efa51f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf741fb4-2316-4f1a-9d6b-06277060a980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99db045-34b4-4f1b-8c49-a208f58cacbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1e2929-8a49-4111-ab32-0b556207eead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8ffe46-2890-4388-85d9-db7002fbcef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc846138-38f1-4caf-80b5-7320f3d497a4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39bd9c4-752e-4c25-ae01-972d07f3a33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf67cba-5449-4083-872d-948f8a3daec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251a5dd5-6404-441d-8d5b-d7a321a964cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c2c71c0-b2bf-49f5-9415-331b2ef855a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266c6cef-e8dd-4e40-9b28-0e45770ee175",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a3e380-c703-4ad7-9ed6-2bc611a50728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ac4637-068f-40a1-aa41-72c396155045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01896e65-f1ef-4506-9ec6-5737c407b0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4af468fc-5d69-4f24-909e-97ccb96d4d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e7d290-aa27-4daf-8522-75156678bd1a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0a5200-b7b1-4e21-9c19-c614457a25bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce5d6e2-962b-4fc0-92ca-68f3dbef872d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59991781-a446-49f6-a56c-99cae3e7d29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd1ec47-e2c7-4916-a1e3-175693eb8a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ec0ad1-45c4-4d55-a22a-69d26695b45f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fbcaca-d7df-4fee-adaf-701ee29eb653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "91129792-ba03-4c53-90be-acfb81179e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccfd6c2-bbc6-4341-960b-13ccc51149b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a09bbf2-56ad-4686-9b17-0f75a331075f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "259d678e-302f-4a3a-932e-92a1316e9480",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d859ad69-58bd-4404-ad74-faa1f8d98613",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4951a7d8-02cf-4693-92db-b3c2d662ae0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e37aa61c-7cbb-4f9f-bf14-d787130c8b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a1995f-f16d-4362-a6df-77cdaec2a532",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4d524cb6-4a10-490c-b28b-6f4c906924a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e903e4b6-2ef6-42c0-b4dd-19a15ea1504e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe99a52-13f9-4087-856f-31c9fbebfe0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "237565b7-257b-4865-9df4-29443ceb6fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31d0e1e-ee6e-46ad-a7dd-36603ed95870",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8d927ab0-a8c5-457f-bbb4-279478ed6eb1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e01cbfa0-e31b-4053-876f-366a8d48a3cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19eb103b-5806-4722-96fc-6fe8c79e3470"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0373f441-e387-4ff9-847c-c7c801b401ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20030344-dd7a-4d6b-8c90-e64f018ce9e5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cdf7f38c-1148-40da-b0e7-9d56da32dc54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c3a8038-0c6d-462f-a757-b41b7ecf2a33"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4f5bc337-7ccf-4824-8292-44ce4da725ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4d0f5c32-5834-44e8-be99-72790a11d767"
                }
              }
            ]
          },
          {
            "id": "ab20b217-4cf2-483d-be00-177fc3cba7b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "00f60f43-2486-488e-a492-cec6493e0dc1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfdafba6-1992-4f05-b4da-14c52f37d2cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3a270a9-a5bf-4cf4-8272-2cacfa126aab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f96d989e-f278-4a31-9ec1-c60605b5fc22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7651ae15-a030-432e-8292-affe68b7e691"
                    }
                  }
                ]
              },
              {
                "id": "ad8e16e9-7d1c-4caf-b9a4-6a320a426243",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7f54dab-bd94-4235-a530-b0704b977079",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "902489f6-b5b3-4d20-a03d-14f112cbcb86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a42b78c-034f-413c-962d-8cb16080c177",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fef72542-d01d-42e7-ae26-305c8df2abd2"
                    }
                  }
                ]
              },
              {
                "id": "31057c6a-08fd-4fd9-8c31-71be46cf8cec",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ea5e537-3642-4c2b-97d3-930195a3addc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "642ad8ec-d531-4c19-845a-ced943246ec9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69212435-379e-4eca-9b5d-b9d41a88738b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9a0b1f34-5a27-45a4-91e8-ad7e3ff45b3d"
                    }
                  }
                ]
              },
              {
                "id": "f0f40f9d-d37a-4790-a245-00a5a049be97",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad120ee4-0a14-4be9-ad3c-0c36ae0e8be5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d6ac57f-f263-4d23-887b-b6af9278efe0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a86faec4-6770-453c-b94b-d5eeaed1a73b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "94b5f531-5ed0-4405-b4b4-fb65dd50b41d"
                    }
                  }
                ]
              },
              {
                "id": "588c184e-9c26-48a9-9ab5-f5e38271490c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a6ed18a-5025-4669-bdf3-41e07486be7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f62d57dd-9630-4e21-b9dc-596f3b96a484"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6aec411e-de11-4ea2-acc4-c6e15ffba35e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "211b0f95-515e-43a9-9f5b-f9258c296f08"
                    }
                  }
                ]
              },
              {
                "id": "d7ecebb5-e5ff-4644-a4bf-427323dfba2f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7904e3cb-bf38-423a-9843-cc75cf40da37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1cecae40-49ec-4bb5-8020-c37d5de0292c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4163d1a2-5f7f-4911-8b6a-fc1fd6150076",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "34543f9f-c766-4e6f-9d4d-6e5d39a60c34"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "005558e0-9074-47ec-93fd-2fba114d1c57",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bdccfb2f-74da-4660-8b96-6b4e63cbc5bd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e442cd26-4085-4e63-8f5c-0fc244d375fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc1d5501-8df2-484c-aa51-f076f18211f6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80399418-fc3a-4158-9c3a-1956421b5487",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5de5a226-1277-4bc0-8f6e-f001ae3e3045"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88efe367-fe87-4d1d-bb42-936f32cc676b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4fabbb6-1ac4-445e-9374-942ad621187d"
            }
          }
        ]
      },
      {
        "id": "42d0246d-317a-4043-ad0a-d788babfe32d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "88a3e9a3-d047-4399-84cf-76cf16eeb00d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f18c9df8-a26d-448f-b52e-654ac7ea5c49",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "73db1d25-0c0d-4ce3-a0e3-7b2073a1d9e2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1deed2a-d10c-4887-b949-4033540f5d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af16f2c3-93c7-4c70-bf52-a2bebf117757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f1690c-0af4-40f1-8697-c338429652ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d86e7cd7-4376-4597-9f1c-74e06beeab50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d5c963-bbb7-4e4e-a3e4-df1c3d4f0384",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a026f5-3446-4769-b2c2-43dc323d7ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a0309e-5620-4256-ab71-7b12ae7465a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f2fcfe-2588-4c1f-9233-a04112e5f827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "38d44026-f240-4b32-bfd4-48ac831f2950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542c024f-5e26-45b9-938c-16af82399af3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b64c6b-8f1f-4bbf-80d5-32a004fa6b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac0824a-f082-4838-a371-a1304474b5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ae9287-a900-4a3c-b6bb-ee8b2f75aff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e733618-1cb8-4bb5-8fdd-b0e758700041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf82580e-a696-4a39-97a1-9665a54846f5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af48586-9ce9-433d-9627-27a5f8cf47d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e552f45-0dd2-494e-bef7-a08abcdf1924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daacb7d3-e90f-4957-91c9-80867d90874d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15768e81-7a77-469b-bda1-ba28b897ef9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325c6cfa-459c-427a-983a-1a672c6b7693",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57afb753-5a45-44b5-b8b2-54cbf05df121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec393478-8725-4b3c-855e-069287f573c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b215c89-a0a3-4969-8902-6b2e9a1d2bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b6e4bff-84f1-4e58-b344-01b0e02dd53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048f191a-fa7b-4d2e-b788-ae34a495804a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85810f69-a9fa-473d-97a7-ec2d8b5485bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3664da-7759-4ec4-8f08-b9bb545fc189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858b3500-ca08-4676-b0be-d27b02062ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a80c25b0-d85a-4b15-96a2-61af03b78a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2836ec-f7d3-4d8f-be57-ec832792978a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265252f4-8069-4ec4-b06f-e3b181ba0915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f39116-1639-4e70-9879-8d794133a653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688a88b5-7965-4b63-ad5a-deb4e00dc3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5089ca77-b0a5-42a4-b02d-b93f7ae1c94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6fc446-d928-4a9d-b291-71394fe94e3a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecf1c0b-5b4f-40aa-abd0-1cc34ec5b5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3ba2c5-f4e7-4f55-adbd-726498b47199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25a4a21-0951-4288-8872-d9156208df92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1518e6-4f92-40f3-9c12-c2c6c0e161a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ce71d6-77f7-4da8-ac91-fa0efee3c775",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd3472b-fe13-4b34-9552-938002e50c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c51175-097d-4a53-984b-3f0c3e921c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b802af89-7076-4bb3-a6d4-ace18b0482fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2fed2b-0ab3-4700-b0a6-395e2a7a0fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9a7225-8b91-4aab-9460-e60532c62e10",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08ef3e1-5cad-40f3-8a56-446d67fbeb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2082723-dec9-4118-85d3-b1b6c528972b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc123f7-d757-44a7-af98-cb1dc4d123b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a24b3b-8048-4a2b-a9e0-f81400cd075a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a223387a-09c4-479d-aae2-787cd8bed04b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1a800f-81f0-407d-ab20-4ddb38625ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d3b4c9-c418-4c3f-930f-3aaa0c1a529d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e4e2bd-6c15-493f-a3da-e48c59cbd75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d9463b57-2b6f-4992-be45-a9bcf3d33c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57afc65-0699-4a8e-b5be-e0df41e4177c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d485a12-a829-4982-b0ef-0c431b403ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "928edd8d-3a60-4409-a70c-5d40bca159b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3fcc76-f6bb-45fe-b795-35c233abbf87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6aeed1-5ea4-4e18-b0cb-5edeb65e7b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a587c9-3aef-43bd-9abc-27e1bb2967c7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef9a376-604e-4f69-afd6-ef5cb93be814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc2bf09-4341-4e3f-b3ee-ef648bd76376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef718ba-5ce1-46b0-a66c-db3356c37c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0af1a546-8fea-4065-8748-51490c21ff0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12bf1ef-1b56-4219-9dbf-447fd79a7e93",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde137e0-9c0a-42ea-bad9-be9f976ef69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ffaf72-fdde-4071-8d78-6de7cd3e2313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6ff8b2-84f4-4e41-b505-bbe79225e2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "44c29804-d68f-4f02-91c5-d75cb9cc8f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb3ca8b-f70b-4f10-96b5-392889273c22",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b764906-8c0b-4ca8-9269-8ec1d3a8bd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c52846d-1cfa-44b7-8778-b7d050803e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9df570-a614-4ed8-b29b-8847cbfc991f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f286ec-573f-4075-9eb1-07aeb92a35a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234b5018-43f7-4655-b422-4ce7d619566f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab09560-3a03-4a13-ad4e-2bf7793d3e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b94f597e-651f-45da-86e7-32c43cf78160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cfa0ef-7244-4997-96a4-599eaa0100e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3764a4d-6760-4632-8e7c-5aba391bdac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e980c7e-f0e3-4629-baf2-ee3624b08b7b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acf81c0-afaf-4e31-957d-96afb36c9ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f46afdf-1b31-4457-ba77-8daff3c012f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869f5451-0b0e-4c24-b86f-913f2c55e15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "95ed5f33-f236-43f1-af17-eedbe17ba076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c791dce-2312-4c87-aac7-3a4728d664e9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bba33b-bde2-4eaf-bc87-9b3afec2579c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd335679-9329-4b28-9523-b778712390ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681565b6-01c5-4655-8c78-ad1da02fe436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b72afada-91c0-45bd-91a5-157c7d841a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85e2f15-167b-4e6a-b72e-577cf310880f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "022ed197-99e4-4154-9843-d7e3eec2f2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7e4081-d83d-4e82-bb42-e1eda413df54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b9ef25-1493-4449-853d-23da8e7f146f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "631d527c-5209-449c-8694-b47999345e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a6ab09-d477-4ce3-94b1-934f44044218",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ec058d-0e8a-4677-b479-ba6664c8b1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca543af-5ae7-4c0f-81e9-565ff2146919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3694c5-31c1-4264-883a-166eb90adcbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb5a23f-e37c-4d60-aa8e-a1b39987d8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021a7689-1ee1-476e-afb0-8279788a1e8d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baaf9639-2c89-4a62-b73c-0011e5f0d30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb882d8-fb33-48bc-a3f7-c45d8e35c57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3a3d76-f07b-4b7f-9961-3c219b9cf5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8057fa52-56d8-442d-9df7-2132f7d6af7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43adf5db-cfb4-458c-8df8-4832cffb40f1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25262d61-7961-4549-b75c-11ecc477c2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a24bcd-0cc2-467b-b6be-a825fd057900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc09481-40a2-47ec-847e-8af6b56b6714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f82a0d0-8cff-497f-9aae-8c6359b59627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9749367-419b-4991-8343-916e96461aef",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327582df-a9f1-413a-9277-065c04ae91fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c61235d-3efb-46f8-87d3-94de51567db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e120e605-d9ca-4eb8-9cb6-7d47a21e34c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37a81912-4d59-4ab4-bfc6-59e2dc8e3c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd812bb3-b852-4635-9177-e1ee3c202f5e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2debc2c1-b344-4ecf-92ff-a02d0fe74ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a4e7ca-fdf9-487b-8a61-4979dc9ec734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c5e5ed-b245-437f-b500-6d2e2bb6b04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc8a029-9aef-4345-89b0-442a9ecb330b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195fa87a-c1e8-42d9-ae67-e805d6036bfa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33dc2257-97cb-4f7b-9ef2-dd8b11d822cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f23d8e-8858-4b08-a64c-f16ac037d4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9104902-51e2-4e1a-8fa7-0700e981678a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "791cd7bf-af77-4e9e-8ba5-576470196b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297fa036-72f1-43df-aac6-33c02682e2b5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efb80e0-383e-4dad-b3b1-89c0bcbe6d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b71d943-75af-4e1b-a861-070d9b1e704c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd02b424-2d82-40ae-b350-7297010f58c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af72fd00-e259-4b13-94cb-de4b52ff8e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a6612b-e357-4b97-895c-daa6bb46cd05",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272d5ba9-c16e-498a-84df-e32f398a6d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a622ad7-6ada-4df2-9e4a-6fa7f7c110c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cd9751-1b63-47a9-aaf1-da311a435b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72e733ae-377e-47ca-9282-7dd1a1823de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37efdc43-13f2-4417-98d7-cb49fa74c915",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0979816-f0ea-42a2-b17c-c8cf3e7c92e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfc2d9c-aa44-46f6-a99a-b99ec84725d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ae5cc1-ac7f-457b-9fe5-1ac666d78e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a96c3fd-c26e-40b5-812f-2bc8bb09a474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349feaac-7ebf-4b29-82b4-30c37265d86d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88daa724-0b13-4145-8593-bc35cf0a2095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c1f1e9-1f93-41df-a98d-fab3aa91e7f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bc1d2c-53e6-4946-a94c-d345038df3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a553da8e-e0b2-43bf-8b9a-999a8320d401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d251ee9d-25e9-4b22-86e1-e7524c333ca6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cefb5e4-e9a7-4741-8def-0bc117aa7630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c1df30-b5b0-45ae-9e29-500e0286f31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961a5720-4c6d-4e4d-bb0a-9fb54c8df4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2b9575-bba1-473d-b0f1-4ad73263afc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e96274f-38e0-4061-8e10-377e30850016",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fc6a41-02d0-4942-9806-94c154636619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b47a79-029f-4402-9557-6c9c94e46881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc944d5-8f4a-4f48-acd0-f9ffec283e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2965bfa3-2f53-4e84-be3c-cc477005fb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505a4ea6-58b6-4b5f-b307-22f2c13b136a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f79a097-8a77-470d-8912-5347d946c052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f359c029-2385-476c-b57d-01f3bdb5fbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4a2d90-9c78-4d43-9c2c-91af2e957245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf758b6-a705-4949-b86b-b0b7e6d70a70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c87715b5-e6d9-4e91-8213-3b8f019e8a3d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "65b22638-5417-4890-84e2-f2737d2dc8e2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00465ee-bb08-468a-a06f-afe346e729e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a517b0e-6a02-4417-840b-bc4df50fcf0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1661c171-55ee-4ed6-90da-394e8c2f2030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c92da07-b83b-4611-8879-ca9b4f667922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e59718-1a18-4c83-9e61-77cc0958078e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3b2e6a-7185-4703-bf67-6a6bec843f97",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e0123623-3df7-499d-bf29-2fa71268ed69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b164321d-067c-47c0-8586-1fb1a271ec6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1182b92d-5e16-4e31-b0e7-2d96602c27a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9d666f5-52c7-4046-bf54-e78c34d5c98b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c09e5716-685d-4c6f-9b10-b57fcb764f21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9baa1761-65e4-4ad8-9046-b9ea39c7710e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51dc3338-c06b-4ace-ad51-27f24e5f49e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b923d5de-9493-4055-ab2b-15d71442c9d9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f0ab5cae-5217-4b26-a4e1-59fc9b7e3e00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5949b34b-d130-477f-87f0-b9e9e3835a54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "990f8b35-5a7e-43c7-af99-ea2fbd49ec30"
            }
          }
        ]
      },
      {
        "id": "0c8b1e19-d398-42c0-b155-054dbe41952b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8beacf3d-fb98-4cae-b9f1-6ea3ff135ddf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a897bc80-166b-49b7-97b4-d3a347b712a5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "068487ab-3506-4a98-ac8d-90d21e149364",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33f75e5-f6e2-4c0e-b9c7-6325a9cf7902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1068b748-e36e-4f37-aca6-823e51fabe6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666c539e-2c5b-427c-a231-082e9c65183a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1205553e-6653-465e-b4ee-6a9a06cfe369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836eb60d-49f6-449b-9817-5055fdfac97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab289d75-1360-45fe-865d-a9848972864f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9a70e0-9562-4ae9-806c-2565b1ebf77d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c545c33-8358-441a-945f-118368aa5161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a80e40-a521-4192-a599-5bfe0456bf72",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a972c13e-2c59-4f05-8198-f8e2214d88e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da2abe0-acf5-4430-87c3-1ec6e7f8cd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864304f1-0433-443e-a788-5265191fe932",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f622e730-8cb8-405c-9dad-edffe26e3bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa03fbe7-680f-403b-8dc4-d6a8b3684f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88dbbf22-1b4f-4380-80c2-b2c79032e293",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b589c3-32eb-4150-bc5f-455239f31c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7892a0a6-fa67-4610-addf-cdf05884f3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1712dc2-0a44-470c-9539-3b260ddfb3fc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7179fd20-d780-43ba-a5ce-71e37def63dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f131e8c3-ba79-4949-9d26-5c5bd5fbf2b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00649ab7-a482-489a-9b7a-354218f0f160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64ddf5b-307a-4a67-a7c6-c41f350c22d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370137bb-5c83-413c-9916-6b838cdd7464",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad120d60-8d2d-4c50-b94c-f9eb864572a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c9a8e45-dec2-46f2-ade7-df1fc85ccd05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2850a253-4493-41ab-9ba5-a1c9d7674091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c47822-d01c-4a3a-92ad-a50d87f0302c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4919ed64-5a74-4470-b313-a6da605cb0df",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d392b0-3fd8-4215-a2b4-804b68d70767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32c3bb44-b920-485b-8628-41794f47ab57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c0403d-5a4e-46c5-81e3-bb1471ff063d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e9fbfa-969c-4cf1-958d-e28b8ef7356a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52433129-6c0e-419e-8278-7600d55830fe",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49caca12-af38-4980-8a74-0d25d40f3562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66cde647-90da-4f0d-8d19-19de7f143dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0880507b-3f56-41d9-8f03-e321ce07068e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cdb65e9-f8f6-415a-bfd9-10e330c316bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46001132-b2f4-423a-b1e5-f78d689c4bc6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab385d8-f73c-4a24-80ff-da2f6682ac62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7154f13f-d4a9-4b50-a3e0-8db2fbb08b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f2305e-c87b-45e8-9dbe-368d3ac08ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d115cc25-8863-4797-ada8-65f971397de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f961a8-8ed2-4c63-bc66-dce37aa09faa",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0536d2f-1123-4162-8c73-93e3f9e553b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966d9796-84ca-4a47-a014-f99c5b7ca2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "681cc235-c89c-4a25-90b5-04f960492cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66469ec-b090-4f87-9be0-643deea39367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abaff23-69ab-4d21-9c1d-ceca5a8bf9eb",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7d1e8b-29e2-4d0a-8d8c-46011b14fde8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4831a01b-2e9a-4fea-832f-42a5a01270d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbbb25a-4c87-4395-b11a-4d9776c44eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22d0127b-0b85-4327-b170-632fee2391c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6954342-89fd-4987-a1d3-17a5ecebb16e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47edf0d-9001-4054-aa66-472f144dd671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bac147ac-24a8-4e7c-924d-dacf74911d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2c55f2-8a41-40f1-81aa-f588ba0ad6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cdc9cb0-95a0-40e8-b49d-09b4cec100e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c5c6df-c14c-4b88-9832-3dd17fc32365",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd18c0a5-7906-44c6-bd03-30abf5ea8947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d6af405-eec0-432e-b6ce-a82a34ddaba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ca0a6c-55c7-4a87-9655-0b713969ffa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5718f378-e4e7-4a37-be54-33a3594623ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741a7c76-a73d-4b6e-aca2-3ad723bfe22e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9632dec5-1d42-44e4-bdfd-8f9ea1aaa80f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f39c8e-a5b9-4770-91f2-665bc4d7cf4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7677978-23d0-4b61-a9f7-121aedcacbb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538d5eef-3392-450d-a4c3-2fc90f00b818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d0d879-a3d2-4aea-8aec-94675e020cf4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b8e5c6-5b9e-4c15-881e-14a567a5cff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa6faeb-7369-4620-9aef-831dc6057b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a25fb7d-4bd9-4260-abab-8b56ed84dc38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be49546-d2ba-4f70-83f9-fb494d3f2129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed75e6a-0898-4134-829e-303029532187",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e607eeb0-3c42-47d1-9375-722865ed3edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afbd687a-4cd5-42f4-94d8-1a1d05aa5582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "758a6fcf-3598-4f26-9f93-d65102ddecc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69379752-3768-4c76-80d9-67638ca6ac82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1cd1e6-5fa1-4fe2-a94f-8855ec76664c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b654449-ae81-463b-9bc9-91e5bf619894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0b6b6c-54e7-449b-bd16-760ed59df519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e55176e-8704-424e-ab5c-944c09606e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fbe6b16-6415-4ab0-bb2a-46e60d666eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b50f37-7a60-494b-bc3c-645a606f0c4e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8030e1-2922-4551-a50d-3f7c80acb887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c07209-70e9-4c5d-8c78-b315e65f229e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4943ab37-5b2c-445c-bfc4-9d2a5405eff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcac62e5-8efd-429f-9f8d-1a241336b096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916f04d9-1739-437d-b40f-fce19ba14317",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1cd7c1-b87d-49b2-acba-def064aca73e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb8733e-af0f-4397-9e5b-f300255626cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "994cb7e1-9e18-4553-89af-30ccaa85b680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b128f4d-ba00-44d4-98f0-88171bac79f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940bdc89-7dc3-4a96-9475-cf9dda5d9dab",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7070a054-fae0-472a-8a1d-525cf809f2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93140002-bfb5-4495-b1f4-4b09c7926f12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d248c30-fe77-44dd-9b2f-c2747bc62a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ccb53a-8336-42ab-b788-7ffb2e0b4a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629fad13-d2b5-4bfa-ae52-64b927d10e71",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340295cf-a1f5-4e7b-ab1b-0d2d97838d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9286f796-c753-4e58-8a83-425a5d5a5861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4573b32-f280-46f5-982b-8f739eb1d249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e5b31a-7ab4-494c-8b5b-4b78727fbe75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d963dba6-fbc0-4f83-8ff0-554378ebbfa9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5699241e-689e-4a82-83ec-7b264fb4174d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a19ccd8e-2289-442b-9243-c364e943a374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "990eab08-12f0-4d07-9020-1b534b78929a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd523f17-3016-4bc2-b09e-f24ed42f32d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6320f2-500d-4020-b032-a226ae219adc",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5e1f24-0a0a-4738-b760-699f38957af2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f59d5405-014d-4c15-9492-c2e7649f52d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1096a4-a1e6-4ae3-b0ad-f86a774db749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658047eb-36e8-4ce2-8866-8e555c39698d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af52c9a-3e99-4287-b7e3-5375e2259cf8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a70f6b5-bd8e-43f0-8c44-4318f4cf6c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f5488e1-98b5-41c7-adbc-e96c767a3f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4d77d1-8e4e-4c38-8cae-aa014e8cec24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2464f35d-5eb5-4f95-9d86-43299d02ac2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d267cf8-b89d-4bb3-bd4f-5bb1ff4f771e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a831108-3268-4a28-a90e-338820567d50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61300948-6780-46f0-82de-5d2b86b83772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad3c6a3-f845-4758-80c6-5ee0bfc2a994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8baa77a-8753-4d5c-a8b9-af1bf84245fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b7eba9-3e83-406b-89c0-02853ebae56e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e1ca36-e27e-4944-bdab-f805dde303b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80568d72-95fa-4d4f-92ca-5c34124b7ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70643a8-5171-48ad-9570-bc70d2b9999b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74020237-d072-4d69-8c79-32fc6f282008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14ab866-28e7-4eb5-99bf-a2e9825c573f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dc4046-93d2-427e-94e0-04c12a5270c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e2c0ac-4703-4e86-b93f-99aa221fc816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b533e8-8ff4-449d-9cf6-f5fa5098cd1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "421754c4-7759-4fb6-8954-b019fc6a8fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53633a1-c155-4957-bc52-f80f7cc7b873",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86f5955-60f5-439d-a5fa-d22cb2540a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1dcad08-a973-4b06-84b0-6b7bcd1a3b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee120ad-56ed-491e-8299-650b2c758ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989fb5f4-bf28-4678-b52b-18d72394a6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191f72fc-bbff-45e9-8573-89bb8ae663e5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b84665-76b0-4e5a-a329-1d68aa37b106",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80b5d81e-202d-44f5-ae9f-4655b571bbe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0aa486e-0f66-4909-b80d-7e202add7b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1827a41-266f-4f76-a208-b04da2839a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c69cf5-ae13-457c-a88e-4c22311fdb8b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf863a5-060b-47f1-84f6-c817cc10094a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7c9dd20-23ea-4714-84df-a7f88bf91080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6aad03f-4ade-4514-9d71-fd79feb40f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953f77ed-2fa0-433a-b176-ad753737bc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84db6b4-7cb3-4ee7-861d-f576bc0da80f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfa98ef-eb00-4e50-9fee-20a631af1975",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fac9c89c-714c-4116-8fd1-5a1596af2a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61a019f-46ad-49f6-b714-6ac5d6361dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f53e91e-c64c-4508-b5a7-1b6ba0b09e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7133d05-2780-4cbf-acd5-cae498ed95f7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5789b1-75ff-42b9-9a12-72e03c5bdb79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c50bc3b3-7946-46ed-adc6-e3a2756586c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1035933b-69b7-4a01-a59c-7ab661ecae9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1271250-fe13-48fd-9f69-39f8d384b86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4339eb0-c94a-44d2-9552-ac120c437ef1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd62e7f7-5971-4753-8588-9f994a6b5a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ac4626-7cea-4fd6-bcce-63d6835f605a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fa08fa-c575-4bbb-95a5-48630e0bd12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e5ffc8-4602-4e0d-9fe0-10f75010356c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb352f2-c976-49b5-a444-0a62e7573a96",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df2b1d6-f8a5-4e08-a6cd-2078eecbb368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7b2651-732f-4dd2-a6f0-af6c9e13d45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2f6551-07f2-43e8-9c81-23cc1a9afabf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380aa82b-4c42-4467-824d-e3959a16a8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c405bc7b-b6bc-45ef-b047-14d45f696b23",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb73f103-7f6b-4cc1-bed1-07ad4ee6de2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27130369-178f-43aa-a672-9d7459069f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f056c7-7cac-4692-88d1-0311e84a8fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adaff0e9-01c4-4086-8ab0-5818b8bc0f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19e49ae-6355-4471-b939-6f8a7f0cc0a7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64bcef1-2358-4bbd-83cb-b987cd5098d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5670b54d-470c-42ae-baf2-3a4b8a060223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b5ce13-d3a6-41e6-b3cf-43de23c6c417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5498d6-7b62-4e26-b519-848c3993ef69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12435e36-0714-4337-9d17-4eee084c6417",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2178c0f4-c2d9-42c9-93b4-ed9876abf0e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27725f25-7101-4aaf-9c61-373b6fae8c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5710654-ce06-4be5-bd37-b16a9e6d527c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00119152-3a46-4611-b317-303a5a61cdc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3fe394-835a-4644-962b-341b82398e54",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a67848-cb6b-455d-9454-cb1fcfb03e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e9dc52-f61f-485f-8dd0-77c45d8d5dbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4252bb7-0878-4572-aa0c-69cfb41556bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3939044-25aa-4d97-b669-7b150fca525e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c25a30-7982-4457-a259-4cd6e4902413",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558736ab-4156-4412-9448-fcf618aa0d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf175ca-a1ab-4b40-9eb4-b1de907dcb04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af54f02f-ef44-49ce-a629-1371e4426c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9b5113-e860-4189-8062-907680b3c85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6473daea-a493-4fac-bc99-edf36e1b3d61",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed14bc4-e270-49ae-9a9b-1fa3477fff90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1738e344-61f3-43aa-a628-d9f0138c215b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7510a7a3-6377-4d29-ad1e-2fb4b3fc0d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a54209b-2fc6-4ba9-a598-4c4271aeb666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90527924-2e0f-469f-94e2-0b662b6a65d8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e37d25-d6cd-4ce9-8032-eccb97392138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e6c994-b7ed-43cd-b78e-e0659c8ce1d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4f977c-41d1-4eb5-a400-c23a6f5bdb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89189183-abdd-4501-b3d0-ff10b8230024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99e5e5e-9bc3-4902-89d4-e4bf581a769e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7944d37-60cd-47f3-beb6-b588a67160fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9643d9f2-ce29-4ee2-9d09-6210e2827dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09cf431-6639-428e-86a9-74de5d8aa55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f000f783-79dd-4a5c-a533-373b90f5ca38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6c1e57-2e71-4735-9d7d-2c4fc66b697a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7474bc4-0626-41c6-bf12-f3670e9a4d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cca7179-86ac-4710-835b-c41bcf62380f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7154f793-b69c-44ee-9fe8-4e542a4c977a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c5c4fd-36c1-4177-ad28-706262c6be73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51504a6b-5f9e-4e6a-b9b6-bc246b706cdf",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c089dc39-692c-4f14-ab59-bd978f0a79da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2befd5fe-f467-44d2-aaa0-90bd611894fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86519d67-e21c-4808-b01e-64eac2391859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f14aa1-5e69-4fae-ab56-6537fe89c1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca66af1d-5f64-4832-93af-b3cf9da7d214",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cc1672-6d1a-4bf4-960c-534f04f6c7b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec977f84-8102-4403-bb0a-87ff87d7aa34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e998cd-0f5d-4abd-b801-3f23bd93c107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38e632d-32ce-4a08-b6ac-97802fceb806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a75f77b-5e3e-4734-9f2a-ea213fc8cf25",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09309b0-8824-496d-b315-b1e01cb61207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365d5407-b8f4-4b2f-8ead-5324fbdcf749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456b08b2-c98a-4e0d-b9bf-492c299d4d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cd2501-992d-4679-9015-73a0624ed9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c4bc1f-18c9-4e8c-a6c7-9e1fb1862ef7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5522ae2-3dc2-4b10-a3c1-f1d5658a3fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c773e998-dc3f-492c-880f-3b79e9ba4231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff6b9c4-076a-4da9-9474-633475f95b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2990a3ce-18cd-475d-b7cf-e3a31cdadec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5623f33-6fec-4a83-988e-e7c0bb3d1932",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c477c320-f107-41dd-bc4c-497005813a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea360320-40e7-43c4-ae00-0cafdc88776c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a571603-7534-4a72-96b7-1dc7520b630d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eec34cf-1caa-4242-8f43-1059e23c9091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601a0282-5d6c-4a8d-8079-b793e39a6fc9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e802f3de-ba83-4b2f-81ec-75f1e995417c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9974d7d2-9ec8-4a7c-812b-793f0a23646a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898a5925-c432-45b7-9880-612b43cd12fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a567f9d7-f935-411b-92c9-097d2e3e05e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76e6bff-857d-4446-9688-1fbf30838c32",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d49f16c-563d-4d45-90a7-bd2001a7d546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24619cfa-3822-4dba-9f92-d1738d697cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f1560b-9e03-44a7-8b0c-dbcc84e1ae05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4debda9-9494-4383-a0df-86b5403e6364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded29112-3436-4a10-a0ef-3c8109cde78e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf7f012-185f-4149-9e27-87eb1c35c100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6615f3-fe47-4dc0-ae83-0cd70b5eff61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9cac2b-577a-4031-87b2-c9843541d36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271d7a96-dcc5-4e3f-81e5-dff20149f7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17c61ca-a04c-4803-8ef9-e9cd261a1741",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5623c84a-e941-4ac9-b44b-2ca0cfbca314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ade0982-90ff-46c8-89a3-35f87b536c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6de45d-c2a3-4dfb-b11a-16dcb364efc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa0cebe-31f1-478d-9551-e9460e781552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197fb4c7-1dfc-4150-b09d-b9853faf5057",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22f3577-e8dc-4a4f-85cf-f37ae0a0556f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56efb47-9495-4b58-ac43-f1d41258645f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba33938f-d2d6-43f7-9c21-59c8dac9a5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717c24a9-4cb8-4366-95b8-5dfe76adcba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed63b06-7fec-4b83-9133-869b24db9fc6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdc0a7a-39e4-4763-997a-e4022abf1a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7519bc2c-2e84-40ef-a0e2-53d00c917ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a994fb2d-1153-48e9-b521-73c4800b0d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5269edad-6ca4-4994-a949-3611021eeb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57159ade-6855-4825-8681-38fa07d060b2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b9a357-b016-4e4a-835d-23d03ff4b3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3987cc-f5fc-4b9d-bc5d-5a5f7f31c906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7067de2-2b2d-4e46-8176-0ede97d8bf86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72a6b7b-94c9-42c4-b564-69d04a43a3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3855c1-d181-448d-a0e5-040d52189513",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d881bbc-6bb1-4bfc-bd36-bffe1cc57895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e4909b-51ac-43bf-b3a9-6b13e46a0f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4713f7-d231-414a-87bd-ecf876e27bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b65cc57-c5d5-4439-97ca-2813e2ebdba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46526013-2b12-47ca-9ca8-8651886f09aa",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5dd7b69-33fc-4cea-8c8e-f85e795cb441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a918ce1-a8fe-432f-af8f-7002b7b0fee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "186727a1-929f-41e5-b48a-0951ffaec5b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ec1f9e-3e62-4e9b-8e51-1774ec296410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926e8c2d-cb04-40aa-a705-727f77a7cc11",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ddf5ed-8baf-424e-a3a3-5f2edaa4d0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "344b2b84-0e4c-4c8c-954e-78f5551dd2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b89da64-bd84-4f9c-bd4a-a1cb1cf13a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668a1531-4634-4d87-92dc-e34a1a43a79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94efa1ab-c299-4d4f-a49b-9a2b18acf661",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8e0161-39dd-437a-8ebf-802556abce8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13b23b4-f4e5-4823-b829-4d4679ecfafd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a021c6-5b1f-4d83-847f-610bbde45c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d559de43-c3f0-42f3-9e39-8cbe101dcb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fed841-c1b6-4e8c-82ee-c0078cbff701",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e65a9d-b261-4605-b86e-72d8f2708c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2c8f51-db57-469a-a973-4d6ba7c1540a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225076de-67a5-4ffa-8ba4-3174d11c9ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "713ab323-1168-4266-a859-11219b5279d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fecef1-11b3-4d90-ace9-5e2667a3db82",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfc31a2-74db-4f7f-9676-998834d33a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098f0507-eefb-4d98-943e-b91f296f7cd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d646f9d7-0e87-4932-a152-1be64e99042e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9758e00-a015-496a-a3f6-7c8d804b857a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd55bff-aef9-4853-aae9-bb4b3070836b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852011c2-63ad-417c-a091-b9fd13a9e045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0556f496-d52f-480b-b699-83363773a223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbfeebb-d511-422c-bdb3-40920bd45feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf1823b-d269-4235-84d5-82a86d30a76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c345ddf-b574-4a2f-a317-05a211476c3d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74890d4-914b-4d88-81c0-bdeb6841cb86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72db5bbe-6b33-4196-befa-ff2aa4abd134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d207277-be36-4e91-a882-5c06e8b97fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c053ffd-2c51-4f80-b196-029f8f6573d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8438f8-ab3c-436f-a5d9-562c1e327434",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70563d1-8230-4266-b8a5-97928e910950",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3ba2294-0259-4442-8289-a0ffdbb46465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f442e0da-5ec9-45d0-b854-c40bea2e6d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c128e127-e949-4572-b3a4-7bfd97eea104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd7a612-bcb9-46b5-922b-1867bcc07e52",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d214814a-e749-4a41-b1a1-4a3508e261f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d845299-f95c-4549-9284-75d075cfe32d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11559407-ab1f-4f91-81f2-7698c25875cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53472a64-9aec-4909-9e44-b872ad668cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a894fb0f-a864-499c-855f-680e82df2bac",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2effbc8-2e45-4a1e-8c9a-84174e42fa79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e57efb8-9dd3-46ef-b11d-e97a7e93a86d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdce445b-c342-4af2-9110-4eafa9abf832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab205b24-1cb7-4c00-911d-b8f081d61f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6cd8e5-a9bf-4a99-91f8-3ff495509f59",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097ed61d-6ac0-4955-927e-b129b3533954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2782378-2652-4e53-9309-36eddb12e5e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f6f415-6312-41e0-88ae-7316158fec29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf91858-68e7-4776-9354-08835f613d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cb29cb-b1e1-40f7-82e1-5f651299bd81",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ad70d9-8bc3-42df-b233-2d1938032276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9874c320-94d3-41ac-a7ed-5ef35b762f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbecd86e-be36-426d-a5dd-bff3ad967122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95396cc5-2718-4994-8713-f2c2c37134b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777ecbc0-c097-4a1b-a861-2ce519ca6cb6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40de9b7-3a21-493d-972b-4d5d2ae2c05b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94e8e7bd-f602-48aa-a236-686ad8514911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdb0164-5912-44c3-bef6-5f912ff0f6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a54760-c66a-4514-958c-9840ca311897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4916f48-47ae-45fe-8cd3-be1e9771402e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dffac2b-a79a-4d00-a7f1-5afedc01870b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7f19d9c-241a-4a98-8956-8786b4c44f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf8efa1-52d6-45c5-955d-3b7f5daeaf0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172196f5-cdf2-4dce-bcb8-19c4125e4e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d02470-d39a-4261-a026-6c568f7dcf8d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b7b3d8-3263-4db5-9852-0a8d0a1b7936",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03a6af78-49da-4818-9104-a12101a482af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce21d133-fcb3-4e83-adc7-9ece229c644c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406ec66e-b38a-483d-902d-0ed7b0a4354d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa96bfc5-406d-422a-9118-b5aa50c41147",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a88c917-8c01-4c70-96a4-e6dc2bc3dfd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ae89378-06f8-4eb2-9d1d-7245b9a6c4a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b51451-7894-4935-b45f-a7356fbf4bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a694cdf3-c80c-4d85-aee7-841f01f32b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8071f3a-06e2-4a75-b253-b4bdc28a3fe1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0000e4c2-e074-479f-a3c0-67aae6621862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baef9202-a955-4999-ade8-f808dafdbbd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9405c045-7561-4d94-9836-e56da75c3f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b363fb5-603f-464c-b088-8d531eaa0b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c57aad-0366-4dd7-9510-aefff7b3b0ac",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4636c76-dac4-41a1-b509-6ea637427fdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b81db7dd-fccf-47e1-83d7-0c4b82ff618d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77675a84-e5d6-4c74-bd87-ed6b4a8927ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66baf1eb-1dcf-442a-9a61-fd96fdf625a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee747c3d-3f2b-4e71-ad88-1d8139e7df98",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb95610-f220-4dc3-aec9-6357632f480d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30136c2b-6e4b-4109-93ec-18e34901ef36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0248e7e5-baa7-40ef-9947-7608b52a5ec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a58b1d3-fbb2-4f6e-a2d8-cf794f574a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a4e9a7-53e5-4894-87dd-45eb0b053fce",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fc656f-768b-4790-b2ce-46a40e22da73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a90fe79-040d-4163-9990-af363e26f61f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea294d9-ef52-4064-9415-c47e58c0774d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af7d6b8-3923-4b85-b82c-91a000246b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e61293-c519-4127-8d3d-3acf87e3d21b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820abd8b-0cac-420e-8cd1-6234e0ed1fbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8336709-2436-40cc-8006-bfda138318b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2990242-1247-4181-84d5-500a5c09e818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d23f1c0-40ac-4492-ac47-0e77664f364c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6570e805-371a-4077-bac3-3f35427261cc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a95d8a-3ae7-415d-b94c-93f1c66d05d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b41daf0-3a7f-43a1-80fc-7b0acf2ad03e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c46928-aff5-4de6-a12e-e5de06143a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2baf8dc-2560-4c36-bbdd-17d5ca516e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5242ab83-8619-49ee-a809-36bca40fdc93",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc2300d-0cc8-4882-8ad3-22524ae8658b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0ffe17e-7da5-4123-b391-a1e239ff6f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89187053-ddd1-4823-ab32-fb02a09d0223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ebf63ad-6ca9-47c8-bfbe-c619c4b5f7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022c467e-d4ea-4e5a-bfa7-6cbbdb24fa18",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a472d8-3451-4e93-9c64-06ef648295de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fba86e11-7e21-43f8-8586-7385580e2b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca2043d-7d11-4c12-9336-592b4f53dc8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e649c973-65d5-4186-9b36-e5becbf4118e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f57753a-6583-47c1-bebb-3b0daba91d9a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1179bf0-372d-42d2-ba52-91e114971698",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72cb4e4f-9b22-40c9-a445-30781f8464a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a92dd8-3d9f-4e39-8d07-199cc904dc98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1086bc75-be8d-4c3d-8918-cc640fd6a011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6107e8e2-a58c-4626-8555-822b9320a47d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee287561-f28d-4047-9ddd-73b580e77abf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f83274c4-6d9a-46ae-8815-587d9bcaedeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a63b07-0bee-4793-86a5-c32a1aec931a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bbeab32-49dd-4877-8f18-c126c1b68a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db44d328-0c68-48d3-bf9e-da6405142e3e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19f7031-8900-4b56-a85f-80b4ef082aef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89ccc529-96c5-42f5-a844-81df157f84e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d062db4f-3d05-4087-993e-a93bb58928eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e964bba8-d0cf-4095-9a08-8f14ca8e3a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1276f85-f0a8-4590-ae91-a8fe95b9cc45",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768f0e21-79f5-4d2c-8e77-25c3891fbd82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "848c5a12-e26d-49be-be13-320b832b0550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b3cc02-d55e-4edd-816c-b23abdb35538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ccd389-0b1e-45e9-af7c-85993f976de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6e0436-6de0-4acf-b199-dbbc650a17e0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14cdb303-42cd-442a-b15d-afd3ce48bec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afd42f7b-1e11-490a-bd3a-4f52bb025997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8084d2e3-e611-4f45-bf62-ae3bffe77033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aac696a-f264-462b-ac3d-451f9f636fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4c58be-3e58-49cd-a263-7182e52f7619",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be187cc4-eaea-48d7-8ff7-53a9b275bfe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8bf6704-6512-46a7-85f7-329e37abdf27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da181b17-d764-404c-8ce9-1152fbbd496c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3884b03b-df9e-4c93-a1af-bb57071f66e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f036853-669e-4253-b85a-aba878959eee",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bba99d7-e0bb-40f9-8aef-c628898a695d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a99cb40-7a3a-413a-b7b3-7903d184117d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72d5889-de2e-4a02-946c-4209f25d4364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c25ab2a-e67b-4f55-8992-bc1cc55e463a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b302f1-b80b-48aa-9848-a26173f33198",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db6f323-c531-40aa-9c59-61c79286498d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84faa6de-a1ec-4bb5-9f0b-f8caee5ac713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65225609-a4b7-4ca9-9326-3024a57dc818",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43831b2d-64dd-42ea-ad52-75c010ceb0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48257016-a9bf-42d5-8a16-3a1c1729fddc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27642309-b203-44bb-9174-75f29620cbed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6502531f-7421-4192-ba02-71eca489ae20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "423a1c9e-d3e6-4948-9f4a-44132a6716a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3940bb9-716d-4ad5-8274-d39ff58d5397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dcb0c88-b7ff-4c63-a1c8-19e2c93120e3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9505f327-aad8-4db1-bef2-17195afcf67d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "935b0be7-be36-49ea-8287-4d9bd8c950cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5476458d-7699-4aa2-90ca-fca1b6b7e600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348bf215-631e-405d-94f9-8a87befbab60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5c5699-41a9-49aa-8bcd-36bd4275d35e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71532510-1070-4f79-8389-b4c6166cab5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "623ef319-d614-40a7-9c86-f67e5425b3f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a32e699-4c4c-4ce9-90ba-822723535185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af1d681-4064-4248-b802-d4cda1cd9828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa5b4bd-d7e2-4f72-97d5-c374332a1f25",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87656791-45bd-49da-af4e-5b496ea7fb65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0654dc4b-33e5-48be-b7a8-ad6a4e64953b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05259817-f79a-4220-a219-c831afdc7322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e681392-1a05-4c3f-84d1-ac49435dbae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cd2d18-5616-4957-8237-7f111d7070e2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2f3306-d098-4a1b-ba58-0ed0affc7043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f924f22-3672-4747-87f3-cda1f2fc0091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdcc209-bb81-4f2b-b11c-f705b1e9e0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c84d072f-e4eb-429e-a44c-a3252e93881e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f410e3-c5c7-4e7c-bbe0-6243a6aa9f8f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766f9267-dadf-44ea-9592-fcbed76f0352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb23ec1a-da69-491c-91fb-d6a206b59d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbad5f52-797f-4c0c-b24e-b8e2a19b27bf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6172ff84-f19e-4a68-8be1-2993a2d01374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa0f273-b47d-4c3b-8e85-2cba3cd053e6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1794bf-e3a3-4217-913e-e967190768e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4c8964f-40fc-4b0f-afd6-be86d3cb016a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de33bef-284f-47c9-9e44-b1a68329c0cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd970baf-3397-4fdf-9ae1-5328ae6cedd7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f711f12-4439-4ce0-a278-68d3af9b6456",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9404cab9-fbee-4c6a-9966-a62ec4780a83"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9b5f22f-c6eb-4433-b5ea-45be273bf397",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "665ceca9-e953-4e06-96a9-8a7e254418d6"
                    }
                  }
                ]
              },
              {
                "id": "9928e9ac-e2ce-4701-a263-abebda61bb7c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c45054f-60e7-4d2e-9659-86b01d53f271",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fe77bd-d109-4c86-a7b4-f6fbbcb1d641",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "591d5972-e895-4dfa-a569-9363fe32af5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf705e6-9b26-4d5b-9e80-79b7d27aaee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "538ecd71-6491-469a-bfe6-a833fc488b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab96e8c9-fe7f-481e-a30e-0c2d0d417fa3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d835d860-e69c-42da-988b-afa768df8a48",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c918f797-7d14-46be-b4cd-520470ff4d8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc55510-c2bb-49ce-84be-441527a21ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6627d97-5840-4992-91c9-201d359c173f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb016c01-c4de-43fa-8082-1b56d46e7462",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e015cf20-ad1d-42d5-9c08-7c9c78332238"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5544c5a6-31ed-4c0a-8494-685f16f71311",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d852e64-8817-4791-af5d-9a90227b9770"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "2afbbe90-b21f-4ff8-861d-747b8c5604a5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c819bcc7-3010-4b61-b0ca-4cbafa693f57",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51fdcb93-1288-4620-80a0-38783cf591ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "517cd2f5-7558-4f57-8998-288fe2e50746"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "976bd62c-6873-49b8-ae86-27a907269b34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "603e4d85-933c-43a2-8d89-0308acd26f67"
                    }
                  }
                ]
              },
              {
                "id": "d8eab586-c31b-4795-8d3c-284767a9d708",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6623274-5a72-415f-aecf-43b835a57a75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad98b8e4-67ed-460d-822a-079189016e2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09a7b9d1-0cfd-4674-ae63-a6943d40f947",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "138342e8-ecd8-4a81-92db-dcbe37f99695"
                    }
                  }
                ]
              },
              {
                "id": "2317863a-780b-4865-b93d-f17d0d7293ac",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a107990a-8046-4d2e-8080-8aee6c003f23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1092fa94-13c7-4437-b639-59dc3369de9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "191f996a-de61-4f36-b9c8-9769747d9c9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba74b4c3-9a2f-4222-a262-fd919d75e105"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daa48830-c701-4336-85d5-40195cf2b278",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b6aa806e-687d-431e-9221-53fd84296b13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a26ade50-a7a3-4ff2-96f4-175c503b2a15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89cc434f-d889-4554-8703-941942086d7b"
            }
          }
        ]
      },
      {
        "id": "32709407-e019-42ad-8dff-05c48f00a37a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "43192705-e452-4006-9d37-49dda96a2bbf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ab1decd-3513-4d1f-a99a-f955efe917bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f84eb57-09c9-4adc-9ec6-5a25d27fafe1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4079412-6e1f-470f-b855-605243048aec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b09e1a14-f05b-41a3-8844-438fc7d51b54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e11f9af-9833-4b10-83c8-163a8fc72cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87f99928-ffcc-4778-9fd6-b3f89a5db3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9c4ce8-3c63-40cb-9b50-83b3bab59ff7",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4fc467-b3f4-4a9f-8429-54e0022e785d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a02f4e44-e509-4bcf-9fe3-1983fb83f056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b83085-254a-493f-8a43-f2346e86e1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e6e2285-865c-42b9-bb81-03087cc0c048"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49461e5a-208e-40b3-818b-e9b0febf4fc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd579b39-edb8-48ac-aa62-109d63c0d280"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8ee27ac-20b2-4ea0-a596-1c90ad67b6ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f0fc7b4-b242-4b8a-afde-5f92fe398c75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "929b9fd2-2d35-4dab-82ff-aa98946e12c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "25e7c2fd-3fc8-43e7-927a-43ae1285d5bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43456a47-b259-4825-b84a-8ef65ee337a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f7d3177-068e-4d6b-9abc-0ab1b235b38a"
            }
          }
        ]
      },
      {
        "id": "70d91852-e5f1-4019-82c3-8ee36941a223",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4052e6ef-e370-426f-9777-76784d7f5397",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b531f6ea-8c40-4c4e-b6d1-b588e1d50ffb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6afa880b-53b9-49b1-9fde-f2f9e30f9b37",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b110528f-3d7e-41b3-a3a4-e60458709279",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e4ecd3ca-9152-45d0-b894-a58210fd97f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f5ce90-844a-499e-9fc3-4e342ef40681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cff73f0-972b-4162-a812-77ac8e0b46c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f45dac-0333-4bf2-9b33-eedb0cc36c5a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1ef379-0030-4fc4-87eb-a0984058662b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2b32e788-2a5f-4ae9-a8f9-9000376ecb37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b513bd94-18cd-4666-9168-37998cc61a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eaccb5c5-e74b-4147-9657-475e8f95bb27"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27cbf082-f5fa-4985-86b0-08505d1eba88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1cd1113-69fb-4d28-a919-fced1ffe3d0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7213be86-032e-4988-968a-730a011b2e10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2521b545-5134-46ca-bfb0-236eca411f23"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a623bd55-7e38-4b39-9d7c-b82fb868b5fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "be1d7c79-07b7-4076-860c-105d36bd8fc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "122899e4-df01-4d3c-a5cc-353bc70f0b98",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0293f4a6-0f24-4666-9fa3-6ea2b6f9125a"
            }
          }
        ]
      },
      {
        "id": "07e990ec-49d1-44f1-bfba-0f85033a719e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "cfa0c55e-d887-4f67-9806-abafeb7f9ad7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d27e1b1d-e513-4896-bf3b-e6dbf5c4512e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b6efe41-c051-4dab-9362-4631c112ef3f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fdd700-5b09-46a5-8169-67b548b4794f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d70736fe-c61b-4764-8cac-26583a82a99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2ff365-4e21-4b7d-8844-3ae4079f04b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbc074f6-d499-4967-925f-17c0f1813bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a59a68-bd17-42b1-b15d-3633ae5a3538",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93fbf01d-7aff-4d26-9a72-33903aef343d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a5060e69-7683-4120-b0fa-ff18a187ed42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407dcb37-b612-4fe3-a7d8-ec3458c5ac76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e516b8b7-853b-494c-91a3-b89a8e16d3ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d560eca-5435-48ff-8ef7-4ef49be7cc06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2b8e81e-195a-46f8-ab54-6ae9031cf7a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0288c038-300e-4f70-ae4c-83c3c0f8b512",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cdc724d-25d8-4fd7-adca-075a188bf8fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab5801e8-25ad-43f2-b7db-b84ebe44595c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "65904a94-9503-43c0-b697-2c43daa3e2d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb5b3417-7048-41b1-9755-23d6564d0356",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa4d8c6c-6feb-4b48-9021-bf6f453588d2"
            }
          }
        ]
      },
      {
        "id": "31e15d86-7f2c-4fba-a475-054691dfaa49",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92d12400-54d8-4041-8531-ae8dd7dad970",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aee7010e-4450-4299-a866-14ef651050a9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2a9f3a01-5de8-44ff-887e-a8c51eef3ad8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7910f6a9-628b-48a9-881c-4f7100818168",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "035358a5-9b85-4998-a83b-d84220c77ab8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 338
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 613.3153846153846,
      "responseMin": 43,
      "responseMax": 7332,
      "responseSd": 834.8811618300532,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665882066059,
      "completed": 1665882239224
    },
    "executions": [
      {
        "id": "c98f64dd-4613-4067-88a8-14c32a8ef32c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d6cd579d-5899-4506-af99-eead56b2103d",
          "httpRequestId": "e70cc67c-af12-49a9-864e-a504257de54f"
        },
        "item": {
          "id": "c98f64dd-4613-4067-88a8-14c32a8ef32c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7ed6fec6-f6a7-4a96-90d9-64803541b23b",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 0
        }
      },
      {
        "id": "f363cfcb-4956-4c22-b90c-8bd881d3398a",
        "cursor": {
          "ref": "6d4d7c91-382f-4116-8c0f-a446b0667f56",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e06c4ccf-8b3a-42f5-9ac8-dc57baa656a7"
        },
        "item": {
          "id": "f363cfcb-4956-4c22-b90c-8bd881d3398a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c9fa6fe3-94a1-48d0-a92f-ce7801c333db",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 0
        }
      },
      {
        "id": "96b4c277-c3c4-40b5-af9a-91b800048bfc",
        "cursor": {
          "ref": "2fbac853-541e-4447-8291-4837d177ccf9",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ddeb7600-4570-401a-88ee-08c56bc74545"
        },
        "item": {
          "id": "96b4c277-c3c4-40b5-af9a-91b800048bfc",
          "name": "did_json"
        },
        "response": {
          "id": "860cb711-3ea3-42da-b5ed-4d914250e89c",
          "status": "OK",
          "code": 200,
          "responseTime": 2266,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2007b839-3092-4aac-918f-3b5f0b793200",
        "cursor": {
          "ref": "e9543fe1-360c-4ab7-847a-605efd39b87c",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0516daf7-b15d-4447-811d-5b40595aa29b"
        },
        "item": {
          "id": "2007b839-3092-4aac-918f-3b5f0b793200",
          "name": "did:invalid"
        },
        "response": {
          "id": "1fc958ff-b73f-40ac-b1fc-792dad78e1c6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2164,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2007b839-3092-4aac-918f-3b5f0b793200",
        "cursor": {
          "ref": "e9543fe1-360c-4ab7-847a-605efd39b87c",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0516daf7-b15d-4447-811d-5b40595aa29b"
        },
        "item": {
          "id": "2007b839-3092-4aac-918f-3b5f0b793200",
          "name": "did:invalid"
        },
        "response": {
          "id": "1fc958ff-b73f-40ac-b1fc-792dad78e1c6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2164,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f22b83ba-0ee4-4858-aadc-e5fc2e609093",
        "cursor": {
          "ref": "3f0cbd66-d4db-4bd6-9efb-508a04b5fa09",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "771d00e2-f1d8-4898-8a69-c09fd77f5097"
        },
        "item": {
          "id": "f22b83ba-0ee4-4858-aadc-e5fc2e609093",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a8a0f5db-cbb5-4710-aaa0-78aa774e3d27",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1773,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "355fb761-fd9e-4f4c-87ba-30a1ff0dbf8a",
        "cursor": {
          "ref": "6b9455fa-1a05-4257-a538-b2a3fc7bae21",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0de969fc-3d9f-4b4c-a234-0cf08abfc8b4"
        },
        "item": {
          "id": "355fb761-fd9e-4f4c-87ba-30a1ff0dbf8a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "20f27b40-fd70-4c43-918e-b081d32752e5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2319,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "9a60e57d-10d8-4947-a1eb-5a95b250207e",
        "cursor": {
          "ref": "2f0ab80b-d8a4-418b-9dce-e9d774bdbb8b",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "782a894c-36be-4030-a157-0dd9ea77a7a4"
        },
        "item": {
          "id": "9a60e57d-10d8-4947-a1eb-5a95b250207e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a4b02fc1-514d-4da0-b2d7-89078fd2eb54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "aabd547c-b238-4832-99e0-d64516cf3361",
        "cursor": {
          "ref": "85cc82f6-c6f4-468e-b5ec-6f910246b6e3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3dc0fd04-c540-4c2b-bed5-7e02b75fcbe0"
        },
        "item": {
          "id": "aabd547c-b238-4832-99e0-d64516cf3361",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2a1a5ed4-bc01-4549-bc52-1456d8879307",
          "status": "OK",
          "code": 200,
          "responseTime": 3664,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "aabd547c-b238-4832-99e0-d64516cf3361",
        "cursor": {
          "ref": "85cc82f6-c6f4-468e-b5ec-6f910246b6e3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3dc0fd04-c540-4c2b-bed5-7e02b75fcbe0"
        },
        "item": {
          "id": "aabd547c-b238-4832-99e0-d64516cf3361",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2a1a5ed4-bc01-4549-bc52-1456d8879307",
          "status": "OK",
          "code": 200,
          "responseTime": 3664,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "40aa14a5-cb4d-4a72-9640-fff5b3142a32",
        "cursor": {
          "ref": "401005ad-4748-424c-92bd-a581df253e81",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d7dcc95c-9351-4ce8-ba97-d44728f3171c"
        },
        "item": {
          "id": "40aa14a5-cb4d-4a72-9640-fff5b3142a32",
          "name": "identifiers"
        },
        "response": {
          "id": "3c517229-93a8-4c9c-9500-5a0aad27bd66",
          "status": "OK",
          "code": 200,
          "responseTime": 3011,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15796f93-7cae-4379-817f-4575e2bbd0d1",
        "cursor": {
          "ref": "c7cb4856-c0f8-49b9-9148-459aac388044",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fed005b3-bd48-4890-884c-628c91a0275c"
        },
        "item": {
          "id": "15796f93-7cae-4379-817f-4575e2bbd0d1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "818700ab-4d53-46a0-a657-77713e9da095",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1269,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "15796f93-7cae-4379-817f-4575e2bbd0d1",
        "cursor": {
          "ref": "c7cb4856-c0f8-49b9-9148-459aac388044",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fed005b3-bd48-4890-884c-628c91a0275c"
        },
        "item": {
          "id": "15796f93-7cae-4379-817f-4575e2bbd0d1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "818700ab-4d53-46a0-a657-77713e9da095",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1269,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "817d63e8-7e82-4d1a-9e77-bf0bf8480488",
        "cursor": {
          "ref": "801202a1-e8e3-4640-bd64-9e71bf0901f2",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "de31993c-5d9e-423d-b907-23c83c82d122"
        },
        "item": {
          "id": "817d63e8-7e82-4d1a-9e77-bf0bf8480488",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2e6443e1-062c-4434-975a-f737a837f33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1215,
          "responseSize": 441
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e6aae011-28ec-40f0-95e8-f6c15c0ed599",
        "cursor": {
          "ref": "a7535b87-5ea1-4c2b-bf7b-61455bb3de25",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a9519e79-635d-47d8-b475-db758f1c6e4f"
        },
        "item": {
          "id": "e6aae011-28ec-40f0-95e8-f6c15c0ed599",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8dbe3ee7-3d28-419c-a052-a087d64f66c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1343,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "280ed2a7-07d7-4a36-af1a-a8a75b72aef2",
        "cursor": {
          "ref": "fb9aaede-761a-48e7-ba99-fb300d1835e3",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "30d28b8e-c26b-47c7-86e5-0769d52f49d0"
        },
        "item": {
          "id": "280ed2a7-07d7-4a36-af1a-a8a75b72aef2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a618d10e-581b-40a5-914d-37195326b359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1285,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "ba5f8e75-e5e2-475a-a75c-87c37f00a927",
        "cursor": {
          "ref": "ea70353d-de59-4cf8-8571-a4f7127fe5a3",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "61a04f0c-863c-4539-a5bb-e4cde9e21e3c"
        },
        "item": {
          "id": "ba5f8e75-e5e2-475a-a75c-87c37f00a927",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d2e6a2cd-3d38-47c2-bb13-693dd0c8d646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1285,
          "responseSize": 959
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "c8845f0b-b7f0-455e-8c15-968ade8f0f17",
        "cursor": {
          "ref": "97765231-6420-4b9f-bca8-8d77fa78788a",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f934325f-7bbb-491e-a7bc-6c14311ef70b"
        },
        "item": {
          "id": "c8845f0b-b7f0-455e-8c15-968ade8f0f17",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8e3c0149-0bda-4409-b077-2ff0620ea943",
          "status": "Created",
          "code": 201,
          "responseTime": 7332,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "28152a39-a93a-49c6-83f7-3b37b9b5c30f",
        "cursor": {
          "ref": "decbd098-cfd2-4cae-98b2-f22df366f664",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3885d59e-5442-4025-9382-c6c84c24dea2"
        },
        "item": {
          "id": "28152a39-a93a-49c6-83f7-3b37b9b5c30f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d2426e71-a158-401e-9fb5-58fec2e67b76",
          "status": "Created",
          "code": 201,
          "responseTime": 6116,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "707dac71-c65b-4ceb-b1a6-92e9e30be6ea",
        "cursor": {
          "ref": "5496df3f-ba0d-4912-b0ae-f366c4eaae04",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6dd64fa4-cd78-46db-9cea-41f61c8878f6"
        },
        "item": {
          "id": "707dac71-c65b-4ceb-b1a6-92e9e30be6ea",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b148679c-63a6-4da7-9065-3819ba5df876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1125,
          "responseSize": 1448
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "09f384ee-b7d8-4f17-8f6c-2815dd8c089d",
        "cursor": {
          "ref": "f9f43e94-3766-490c-84e3-cb369df5d574",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "033eb27c-5bc0-40b7-8e9b-f82618d2e0a4"
        },
        "item": {
          "id": "09f384ee-b7d8-4f17-8f6c-2815dd8c089d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4f60fb28-5dc5-4f12-b168-ce5c04a31b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1324,
          "responseSize": 1417
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "a6409b33-fc0b-4a62-a01c-03721dc7d955",
        "cursor": {
          "ref": "966dc090-926a-4c8c-8b35-2c5d7ddc7a85",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1cc8d89e-503c-4a86-a3df-fa97c25b1bd0"
        },
        "item": {
          "id": "a6409b33-fc0b-4a62-a01c-03721dc7d955",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "683aa948-6a34-4cf2-83c1-2c1e35ba678e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 609,
          "responseSize": 1414
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "f340e3a9-acd5-41c9-b607-695b43296491",
        "cursor": {
          "ref": "8e1fc9c4-4171-49ab-9b12-d0d8d651d2d6",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a8a56a68-4418-47a6-a589-98da774a1348"
        },
        "item": {
          "id": "f340e3a9-acd5-41c9-b607-695b43296491",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "29d18eee-e4ba-4bef-85c6-4b5965efe69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 973,
          "responseSize": 1416
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c2923e73-29bc-4644-b5e1-924d3a44a1b9",
        "cursor": {
          "ref": "7586a11c-1970-4ecc-af89-cd7a298d0bc8",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f91ab945-5b93-4f88-8f2e-0824299e10b9"
        },
        "item": {
          "id": "c2923e73-29bc-4644-b5e1-924d3a44a1b9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1694101f-3f52-47b1-ada8-25821668eebc",
          "status": "Created",
          "code": 201,
          "responseTime": 5946,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5aa18457-d531-4a17-acbd-98e84e286c33",
        "cursor": {
          "ref": "fba769e8-8f4c-47d3-a26f-001df8e25bd2",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1ec3c1a0-f6c1-4a6b-913d-4fa5010a0cfb"
        },
        "item": {
          "id": "5aa18457-d531-4a17-acbd-98e84e286c33",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "53ca0e33-e907-4f19-b212-983b77c1f9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 877,
          "responseSize": 522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "738a189b-2b50-4b07-be5f-d4a18f95a6c6",
        "cursor": {
          "ref": "80245ed9-00e0-4a76-9c28-09421bd1d095",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "72b2dfff-f265-48ac-8e86-4beb00ba99fe"
        },
        "item": {
          "id": "738a189b-2b50-4b07-be5f-d4a18f95a6c6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e8b1fb15-729c-4818-b0cf-3c2288040883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 861,
          "responseSize": 478
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b07a828d-3903-4a3d-b61c-c7d79c2d6a6f",
        "cursor": {
          "ref": "8004c409-cac9-41d2-a3e7-5f4f5f418047",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b707c8ce-bd80-4d53-9b7d-21331faacade"
        },
        "item": {
          "id": "b07a828d-3903-4a3d-b61c-c7d79c2d6a6f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "72f50e1d-acdd-4bff-85db-ce2adb10b8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 792,
          "responseSize": 475
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "74d2236c-cf4a-43bb-a17b-b332e7ecd23f",
        "cursor": {
          "ref": "34e54619-c24c-4b25-9cbe-f10101a2fa4f",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ea8b6f30-eab6-4bb7-bf7b-1bd9a13dcbfa"
        },
        "item": {
          "id": "74d2236c-cf4a-43bb-a17b-b332e7ecd23f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f040821a-c19a-40b3-8641-a54756a4f4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 971,
          "responseSize": 477
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "bdde8778-3bf8-431d-9a63-dbd48ca98255",
        "cursor": {
          "ref": "b1e3ac02-c6f6-45ba-8157-d4e3b9069ebc",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "46e16d0b-9394-4796-a9bb-bf3a0f6a92a0"
        },
        "item": {
          "id": "bdde8778-3bf8-431d-9a63-dbd48ca98255",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "93fbe95e-536e-44ec-9ac0-d6c0cf1a5900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1006,
          "responseSize": 527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "40e8c783-f449-4ddf-b3fd-1a0347511c31",
        "cursor": {
          "ref": "fd2af3e5-3fd1-412e-826f-f489837e1212",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8de68c8c-23ec-4ac7-93b6-52389aa55c80"
        },
        "item": {
          "id": "40e8c783-f449-4ddf-b3fd-1a0347511c31",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f8694eba-dad4-4d4b-b6f3-b000e194fe58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1047,
          "responseSize": 455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6410e653-736a-4c25-bb08-6898dd4a9116",
        "cursor": {
          "ref": "8de60a89-02b9-43e5-b487-6a9be1bc8212",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "040b678a-31ee-4e71-924c-8371f2f8afd6"
        },
        "item": {
          "id": "6410e653-736a-4c25-bb08-6898dd4a9116",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d2994be4-a72a-42e9-935a-08c2f49ccfbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 836,
          "responseSize": 757
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "95eb187c-665f-403b-a6d2-5c11c67fec8f",
        "cursor": {
          "ref": "070c4e3e-fe93-476a-bbf0-5684c7a74b22",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fdf547e9-87f4-428b-8a5d-882c741f4754"
        },
        "item": {
          "id": "95eb187c-665f-403b-a6d2-5c11c67fec8f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7509a5e4-3be5-4b55-b640-db6bc84cda0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 863,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "e1ab1ba8-9417-4c1b-bc57-51ce0cd7115b",
        "cursor": {
          "ref": "13dff4f1-c7e3-4057-90be-402767b2faf1",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "087ff44f-787c-414d-bea5-11f18043061c"
        },
        "item": {
          "id": "e1ab1ba8-9417-4c1b-bc57-51ce0cd7115b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7d3b7825-b6a3-4a91-891f-ea07b395ddec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 856,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "ea4c035a-c144-458e-b353-fff65f15f4d5",
        "cursor": {
          "ref": "883d0b78-3bdf-4094-925b-a8c2e91d90de",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "411efc5a-2d1b-426f-906d-0c080ddbb87d"
        },
        "item": {
          "id": "ea4c035a-c144-458e-b353-fff65f15f4d5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4fbd5eb1-1c5e-4cd7-9988-8a05e9aedb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 578,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "7b7a1ffd-993e-4221-aa44-2d537923e49b",
        "cursor": {
          "ref": "9af22085-669f-474c-bc18-947306ee29b6",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1d6f1591-e513-47a9-bef3-c2d624bcab63"
        },
        "item": {
          "id": "7b7a1ffd-993e-4221-aa44-2d537923e49b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d7bbf317-efe0-472f-806e-7d0e744aa505",
          "status": "Created",
          "code": 201,
          "responseTime": 2125,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1f84be81-fdaf-4046-8604-ece348d9f46f",
        "cursor": {
          "ref": "84ae6341-8b9f-4b07-a511-ae606e2a7910",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4bab2bb0-ff4d-4fdb-a467-89aadb9db6b0"
        },
        "item": {
          "id": "1f84be81-fdaf-4046-8604-ece348d9f46f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d44a559f-6113-480a-b3ea-0bf9363a8727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 174
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "853ee8ef-ad70-41f5-910d-122d10a9f9cc",
        "cursor": {
          "ref": "a09c707a-f44c-4ad0-9cee-a01ea790905e",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ec3a1149-3628-4cb4-a534-5833cae047f7"
        },
        "item": {
          "id": "853ee8ef-ad70-41f5-910d-122d10a9f9cc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "183cdf05-8fde-4581-95b7-09c60c140caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 450,
          "responseSize": 802
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a9eba211-11f4-4b6b-b612-16978a43dd0e",
        "cursor": {
          "ref": "c175ffeb-cac6-4c82-8250-7c8cca619fb5",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ac46fb70-eba2-4e8d-a5a8-366b6cf25e16"
        },
        "item": {
          "id": "a9eba211-11f4-4b6b-b612-16978a43dd0e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "010af3f1-2504-4214-b30f-046893998141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 448,
          "responseSize": 792
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "180438e1-f1a7-46e8-a0f6-c2c9a65164ae",
        "cursor": {
          "ref": "5160485b-781b-496d-a78b-fc06b0f50e07",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7f9c33d0-08b4-4505-9480-075a1ef4077e"
        },
        "item": {
          "id": "180438e1-f1a7-46e8-a0f6-c2c9a65164ae",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "548c9fa9-795e-4831-b693-d6d641078c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 524,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "bdaa961b-f076-4224-80e4-dc4de9c06379",
        "cursor": {
          "ref": "64a3c4bb-ca9e-4e23-9b65-f0e6d7da2356",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4fd0b7a0-112e-4075-a755-eef22df947d6"
        },
        "item": {
          "id": "bdaa961b-f076-4224-80e4-dc4de9c06379",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "faed102b-8448-41bc-8171-7ecf1b0b6a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 546,
          "responseSize": 791
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "353a29ad-d87e-488d-bf85-e3e8f4610cb5",
        "cursor": {
          "ref": "62c15904-a6f5-4f6a-babe-cb5a5640898e",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "95315dbc-8009-4dc6-98ad-1236292fc20f"
        },
        "item": {
          "id": "353a29ad-d87e-488d-bf85-e3e8f4610cb5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fcaa3805-7fc3-4a61-b191-6fad81e880db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 466,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "4b241c53-c903-4dd4-80ba-ebe44c0b0dc7",
        "cursor": {
          "ref": "f8abdd9e-6762-4f92-beea-87e0723e084a",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "72d2fdc9-feed-4ed9-be40-31711b6f6a5b"
        },
        "item": {
          "id": "4b241c53-c903-4dd4-80ba-ebe44c0b0dc7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4504ce7a-fee2-4203-b9fc-20f8ad6773ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 407
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "61e9ac61-6c23-4a72-8175-517c095d26bc",
        "cursor": {
          "ref": "2c31aeb4-a195-4e0a-85f1-efc9c792c778",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "44b0a653-0a08-4ab7-b5a6-b7b274b115d0"
        },
        "item": {
          "id": "61e9ac61-6c23-4a72-8175-517c095d26bc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6727f30a-e141-4d06-be01-1deff77d642d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 753
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4210c62b-e71e-444f-bd15-1f75642ed25e",
        "cursor": {
          "ref": "4ce496fa-b125-49ed-a662-8f2684a24f56",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b83630bc-84c8-473b-8f1a-bfeaf7802de3"
        },
        "item": {
          "id": "4210c62b-e71e-444f-bd15-1f75642ed25e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f373a9e9-9ff3-4bd8-b748-a99835f3619d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ed6418f9-cdae-48c3-bfe7-8c18df0d2a02",
        "cursor": {
          "ref": "116a8aaa-9c99-43b8-b840-2cc09081d045",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "df6a71f3-189e-4059-a9f9-7406fba2358e"
        },
        "item": {
          "id": "ed6418f9-cdae-48c3-bfe7-8c18df0d2a02",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b8484227-4a12-46b6-bf87-9a51b539e465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "3d588b1b-a1f2-41f2-a962-0d08d1faff5f",
        "cursor": {
          "ref": "3569dbaa-d468-4b9e-b812-1b43b7790f20",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d9417ec1-79ec-47c3-9be2-0494d0051c67"
        },
        "item": {
          "id": "3d588b1b-a1f2-41f2-a962-0d08d1faff5f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d7f6c152-e1ec-4896-ad7c-a93f24d8cc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 681
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "ba7bc58e-950d-4034-beb1-b7e32a17332c",
        "cursor": {
          "ref": "6298599a-0499-4b23-9351-aa475e7df3ae",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ad2c78dd-0fd0-4d3a-b609-104bfccc5dc0"
        },
        "item": {
          "id": "ba7bc58e-950d-4034-beb1-b7e32a17332c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3a25b838-52cf-4ea0-b3ab-663101d6e804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 471,
          "responseSize": 930
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "41d0df97-d3bc-4d5b-af89-b36f8138456f",
        "cursor": {
          "ref": "1b2a5dd8-731d-4cc2-bbc9-49396c118579",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "542b7d59-9dc7-482e-9f13-5ebc13a11d75"
        },
        "item": {
          "id": "41d0df97-d3bc-4d5b-af89-b36f8138456f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "df287df4-7d49-4c04-ab16-79a342d70fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "65cd0273-2997-4ebe-adde-ebda0220c323",
        "cursor": {
          "ref": "a7f73cb8-9976-4e49-8740-bc22c52d96f5",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0208ab09-5a23-46c1-87e9-b481e562f5f0"
        },
        "item": {
          "id": "65cd0273-2997-4ebe-adde-ebda0220c323",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d3180c8a-b043-45f6-9d37-bfe1cde3e6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 459,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6234e863-ed39-48a1-ae84-ef9f9dfa0ce7",
        "cursor": {
          "ref": "924c15c7-47c6-4b41-947a-f08e80c17016",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "df9160cd-a5fe-4b72-802b-798e8e4d7c4e"
        },
        "item": {
          "id": "6234e863-ed39-48a1-ae84-ef9f9dfa0ce7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a779a9c2-3cca-49ca-8deb-aa26cc35e846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 421,
          "responseSize": 778
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5e9f69d5-8d07-481f-a2dc-a43596669a24",
        "cursor": {
          "ref": "17d603a0-56ba-46eb-a1b8-7499ea978cc2",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6fe623a6-a267-4d1e-a0d2-ee2be0d327f4"
        },
        "item": {
          "id": "5e9f69d5-8d07-481f-a2dc-a43596669a24",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "313c34dc-473a-4dc7-9747-eb4fb5dbe054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 414,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "10ac7d44-bde4-44b4-b630-889b7d9e8db0",
        "cursor": {
          "ref": "be1290a5-eab8-4719-ba95-f14e2ceb2d47",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5ecbaab0-d5f1-490c-8696-0d5a823fde4b"
        },
        "item": {
          "id": "10ac7d44-bde4-44b4-b630-889b7d9e8db0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "16a492e6-1456-4ace-98d3-1638476b1ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 704
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8add667a-36c4-4772-b484-b4b134148c9f",
        "cursor": {
          "ref": "92268341-e20e-456e-82ee-de2518c6ea0b",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "47cd0dae-4889-4e69-91ab-3396d5f66a9a"
        },
        "item": {
          "id": "8add667a-36c4-4772-b484-b4b134148c9f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "686c333b-ddaa-496a-b572-540a23c9ab35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 706
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b1e9a02b-862b-4bbc-bdf3-c7e8a41d8257",
        "cursor": {
          "ref": "d72544ad-4553-43a6-9d0c-949e2e5b90a2",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0de262f7-f84f-47d5-bdd3-4b83efa586d1"
        },
        "item": {
          "id": "b1e9a02b-862b-4bbc-bdf3-c7e8a41d8257",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7275b036-218c-49f1-80b8-d03a8b0af54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 955
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "89ca82ef-e32f-493c-bff5-b06d2c9ec6ac",
        "cursor": {
          "ref": "3aa9c20e-7412-4459-8fed-a4b77e2ad5b7",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "97b86e4b-2b0a-4ffc-ba29-4ee86c3bc1de"
        },
        "item": {
          "id": "89ca82ef-e32f-493c-bff5-b06d2c9ec6ac",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "152cbc94-a463-4ef3-b1c1-6ea319788785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "25f4acd1-324e-4ec2-b0a2-37bb6f4d983e",
        "cursor": {
          "ref": "eb500865-6080-4d26-a042-3404130839f7",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bc7c7909-0af4-46c5-b192-a14e7f32813e"
        },
        "item": {
          "id": "25f4acd1-324e-4ec2-b0a2-37bb6f4d983e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "493434e5-ac9a-41b2-a5b2-212a8211c9f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 537,
          "responseSize": 465
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "3e8e33db-b968-421f-a102-1ee9abe414d5",
        "cursor": {
          "ref": "3169b357-9535-4782-bc79-2dc8fa67741f",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d89f575a-0ae5-43b6-9203-f0a61404685e"
        },
        "item": {
          "id": "3e8e33db-b968-421f-a102-1ee9abe414d5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "32a46f24-5de0-4fcf-9dfa-5d2065ddbc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "48be5462-20ac-4742-88e5-c43c89f07b97",
        "cursor": {
          "ref": "6271b0af-0a34-4453-a02c-329a16c7e654",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b98c40d0-68c1-41ba-9092-322a85bad66a"
        },
        "item": {
          "id": "48be5462-20ac-4742-88e5-c43c89f07b97",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4b9fdd48-548f-4bc8-a2aa-ae3fe1726b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "c2fccbfb-57b6-4ed8-a207-59f6c37133ef",
        "cursor": {
          "ref": "e7eb7a77-bb80-4e46-9622-9b171d501e8c",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7647cf8a-ce84-4faf-9a21-416cf5ca54b9"
        },
        "item": {
          "id": "c2fccbfb-57b6-4ed8-a207-59f6c37133ef",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "87f87c1d-0265-4cee-9a6b-06e5fc6b36da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "0c5daf77-8f15-4053-b7d5-61aeaa16045d",
        "cursor": {
          "ref": "9c214c1f-39ce-4b1d-9644-35f48fc84c24",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cc440299-0e92-4ead-af0c-f0c0806c47e9"
        },
        "item": {
          "id": "0c5daf77-8f15-4053-b7d5-61aeaa16045d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "594ac42a-db2d-4f2f-8b55-45239afb2c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "abd85af7-96f1-4a2f-993d-0e8a1db69bf3",
        "cursor": {
          "ref": "6a303db4-bfe6-4f16-b7a3-e16408f545f2",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ca6c5423-fadf-45b2-a256-d90e6be48a38"
        },
        "item": {
          "id": "abd85af7-96f1-4a2f-993d-0e8a1db69bf3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "221e2c2a-aeaf-45dc-9588-aa5d8f9cb309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "2a024cf3-5183-4a86-a409-21ad4d008032",
        "cursor": {
          "ref": "778beb38-7b79-48f4-b77f-255e093390c2",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c808b664-41db-4d3c-998d-dc512d28f7a7"
        },
        "item": {
          "id": "2a024cf3-5183-4a86-a409-21ad4d008032",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ae601eba-9f86-4fe6-84c6-aa5b6d07b36a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 459,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "731706c2-52be-4d14-8a5d-658e705bbb98",
        "cursor": {
          "ref": "e8edde23-6b57-4b78-905c-d4945c88281e",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "201ebdea-93e6-45a7-9b50-3c73394177e4"
        },
        "item": {
          "id": "731706c2-52be-4d14-8a5d-658e705bbb98",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "62a83954-247c-4307-b3ac-4c32269e2766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 524,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "374edf9e-5e5f-40fc-a992-048c35058ccc",
        "cursor": {
          "ref": "737ca8a9-0182-458a-b286-00c29b46bee2",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "45d66d53-0c64-48e7-a047-896faf8095b2"
        },
        "item": {
          "id": "374edf9e-5e5f-40fc-a992-048c35058ccc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "abbf4993-a109-408c-86f5-12f8f951058c",
          "status": "Created",
          "code": 201,
          "responseTime": 1605,
          "responseSize": 653
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "0f48ed93-1e80-4c69-9081-ba72e98bffb6",
        "cursor": {
          "ref": "07299fa8-4592-4b8c-bf63-6eda0a3f8481",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "552b1b4f-4b51-4421-a7d0-4bba5aae66f4"
        },
        "item": {
          "id": "0f48ed93-1e80-4c69-9081-ba72e98bffb6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2fe0fa8e-1659-4779-9ea5-8247ea4155ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 935
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "087f3e0f-46ab-423e-a2ff-1bcdf58d6aea",
        "cursor": {
          "ref": "ed471435-f48c-4b96-90f3-33bddb74afb8",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0532b9da-474b-4f93-b809-305928146d70"
        },
        "item": {
          "id": "087f3e0f-46ab-423e-a2ff-1bcdf58d6aea",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a1e7b4a5-e971-4a06-bbf7-83c7fc008a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 454,
          "responseSize": 932
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "5d127219-4c19-4814-99f6-f0548f303c40",
        "cursor": {
          "ref": "afd2da26-40a8-4717-a1b9-c98eaa5d0303",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "92a18b72-4ee1-4516-84fa-578d0ce58063"
        },
        "item": {
          "id": "5d127219-4c19-4814-99f6-f0548f303c40",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d70936db-66f1-4f64-a198-b11d5784c9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 596,
          "responseSize": 934
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "c4f02ace-e504-4237-8074-64a6db7b14df",
        "cursor": {
          "ref": "91d4ca7d-7ae7-405a-8595-1e032f3b909f",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "de2c8010-d059-4243-8022-04c32fb33c29"
        },
        "item": {
          "id": "c4f02ace-e504-4237-8074-64a6db7b14df",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "dd63edd1-505f-467d-be7c-28fc21109dfe",
          "status": "Created",
          "code": 201,
          "responseTime": 3867,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5f1edf8c-821e-450c-9dad-521c875bbea3",
        "cursor": {
          "ref": "5362cbff-8b25-491b-ac7b-d4bdc32acd0a",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d3dcbd91-5253-42c2-bfc8-a83633e22f5d"
        },
        "item": {
          "id": "5f1edf8c-821e-450c-9dad-521c875bbea3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "702a5629-0c5e-4d03-b8cd-b67a433ab628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 739,
          "responseSize": 1273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "99598651-20f4-4482-84ce-243e1f050a2a",
        "cursor": {
          "ref": "b9066f55-c57c-43e1-8ddb-8a409e8a741c",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a036d86e-d4eb-4614-8f0f-24b6e0ac7afa"
        },
        "item": {
          "id": "99598651-20f4-4482-84ce-243e1f050a2a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "50271647-f496-42aa-be77-ef88b8949bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 910,
          "responseSize": 1259
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7ff6aadd-4ace-4493-9079-2288a1dc6e84",
        "cursor": {
          "ref": "b70a341f-3171-4fac-b245-1e935ec4a6b3",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9707b8bf-85df-43f6-9e27-622b6c25d5bd"
        },
        "item": {
          "id": "7ff6aadd-4ace-4493-9079-2288a1dc6e84",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "aff792ad-2a32-4fb0-9655-fd4db9498951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 642,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "7c425576-43e8-4493-8f40-9c4523b338b1",
        "cursor": {
          "ref": "75ded705-9b15-43cb-a40f-7bae56cdad76",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "582691b7-9eeb-4f65-830e-b96cb7b4a411"
        },
        "item": {
          "id": "7c425576-43e8-4493-8f40-9c4523b338b1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c574ff13-686a-4795-86b9-e36f24637267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 1258
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "527da879-1178-4ff1-b7fc-fcc47a5919e9",
        "cursor": {
          "ref": "5801c215-4f5f-43f3-861d-3269069afd41",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a637bd05-3374-41a4-ad0c-c33011322644"
        },
        "item": {
          "id": "527da879-1178-4ff1-b7fc-fcc47a5919e9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bf47b691-4a45-4a8b-a057-b25800433c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 480,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "fdbcefa0-bb93-4715-977e-ee23f5343f24",
        "cursor": {
          "ref": "6135de6d-c525-499a-b79f-b8f307c66937",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ed004184-6b6c-4b31-a626-474e18c0b62e"
        },
        "item": {
          "id": "fdbcefa0-bb93-4715-977e-ee23f5343f24",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fb361871-42c3-46cb-8c77-14ee349b1df8",
          "status": "Created",
          "code": 201,
          "responseTime": 1764,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "4493b460-2c04-4f81-8fed-e42624af2b08",
        "cursor": {
          "ref": "36fea11a-50bd-4abd-b8a6-9b65583b6236",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "dd46796a-2396-4e2d-a43d-2daca2546c0a"
        },
        "item": {
          "id": "4493b460-2c04-4f81-8fed-e42624af2b08",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4409fd35-90f5-417c-8fd3-69ef3c18f7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "92ebbd26-2946-4e70-a474-b061341298ad",
        "cursor": {
          "ref": "6cb6d30f-d356-43a0-ad40-13e399c583a7",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b6b6e758-c570-4ef7-ba71-2e1b4f0807b1"
        },
        "item": {
          "id": "92ebbd26-2946-4e70-a474-b061341298ad",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bc5499eb-a73c-4b6e-b738-d315ba87ca64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 435,
          "responseSize": 463
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "923be160-3877-4d53-ac11-0ebe3cd20a22",
        "cursor": {
          "ref": "487dc5ef-a8f7-4ba7-8675-ab4ba7530300",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4322c181-9b6d-42c4-93d4-c9c574ac5355"
        },
        "item": {
          "id": "923be160-3877-4d53-ac11-0ebe3cd20a22",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "544a8267-6425-46a1-a2a1-a0608743782b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "679defbc-70bd-47c1-8ac3-27e131971279",
        "cursor": {
          "ref": "098bbad1-8ceb-493e-b04c-a33714dfaf79",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "47187bdb-2d37-46ef-9463-2aab4721d17b"
        },
        "item": {
          "id": "679defbc-70bd-47c1-8ac3-27e131971279",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9ba7d0bb-e449-4d79-8553-5853ac1c4349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 463,
          "responseSize": 462
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "70dfd502-15f9-4500-abce-9e75e6a7a6c8",
        "cursor": {
          "ref": "65f4a6a6-962f-466c-b691-18f8eb3643e6",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5626dcc4-6ee4-42b1-a548-a62b297a6e0a"
        },
        "item": {
          "id": "70dfd502-15f9-4500-abce-9e75e6a7a6c8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bd12af20-77af-40c3-84c0-77823a8b875a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "dc871756-cc06-4f7a-bd0e-99823365b626",
        "cursor": {
          "ref": "497bdaab-00ec-4c3c-a165-a0f923940b74",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "08993a54-725b-419b-8e34-af1df184d82b"
        },
        "item": {
          "id": "dc871756-cc06-4f7a-bd0e-99823365b626",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "09c0fa74-66b5-491e-aaa8-47aa3c34a696",
          "status": "Created",
          "code": 201,
          "responseTime": 1742,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "b2a4353a-191a-42f3-b971-6c4011e48cd9",
        "cursor": {
          "ref": "5b093151-7aba-4b04-88d4-bdd2ebe28038",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "96e08e05-65ca-4e0b-a5e6-33db3cbdf954"
        },
        "item": {
          "id": "b2a4353a-191a-42f3-b971-6c4011e48cd9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "404b77b5-07b1-4dca-995b-669ec33654d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 512
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "53bba79d-7016-422a-89e7-b61ac3bed44e",
        "cursor": {
          "ref": "09088bd9-9dd9-438a-aa60-7b0137848c39",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "98e9dd9c-152f-4cf8-8d30-4531689813a8"
        },
        "item": {
          "id": "53bba79d-7016-422a-89e7-b61ac3bed44e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "825caf9e-a754-4c73-b8ac-0bd8ff0f422a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 493
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "9d2f894a-dd12-457b-a576-dfa1e48789c7",
        "cursor": {
          "ref": "e430255b-3f76-43db-a00d-89d4e4796194",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ecda071f-8580-47fa-8aae-1f703c8c36a8"
        },
        "item": {
          "id": "9d2f894a-dd12-457b-a576-dfa1e48789c7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fc76abcb-2b2e-4d11-84fb-d5fa6e044262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "fd3a5c64-cbf4-45dc-ab0e-a4be16282081",
        "cursor": {
          "ref": "e35e3530-f129-4c3b-b232-989aa2edac61",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b9f5bacc-766f-4137-b3d2-674ca5430bdf"
        },
        "item": {
          "id": "fd3a5c64-cbf4-45dc-ab0e-a4be16282081",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4602d449-8e85-4530-9f72-bb24c68a5229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 492
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "56c4e035-371d-4426-9a1a-98df3452e43b",
        "cursor": {
          "ref": "60e6182c-6fd6-44f4-a2dc-526c6d9c13f5",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "88402ec7-a959-4d07-bf1a-62856907034e"
        },
        "item": {
          "id": "56c4e035-371d-4426-9a1a-98df3452e43b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "017a6bb8-17c5-4b81-b300-038ce6bdb426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 517,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "c028e975-1e49-4c7c-b7e6-dade523c95f5",
        "cursor": {
          "ref": "57749503-9253-4b63-9eb8-1cde701fcdfc",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "484a0ccf-5354-440f-bf37-47eccbb99c58"
        },
        "item": {
          "id": "c028e975-1e49-4c7c-b7e6-dade523c95f5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "08a752ef-53dc-46d9-bb5d-cb3f24411ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "b38e1411-41b7-47e7-9e02-de415edb9c73",
        "cursor": {
          "ref": "f71543f1-eabd-47d5-9aaa-e7fc4d058e8b",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c0e26899-13cb-47f7-a9f9-fa396d6cad65"
        },
        "item": {
          "id": "b38e1411-41b7-47e7-9e02-de415edb9c73",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d493711d-dbc6-4db0-a6ec-93fc6e09d7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 551
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "f96c34cb-440b-422b-849c-881c6af16e86",
        "cursor": {
          "ref": "097ac29e-9353-47b1-819d-2df49ed4040b",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ed4ee201-6cda-41ba-badc-e644ddd6ca11"
        },
        "item": {
          "id": "f96c34cb-440b-422b-849c-881c6af16e86",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d34b8422-918e-4c9c-b942-c76f9ce5661e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 470,
          "responseSize": 532
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "6c8433c6-2aaf-4544-8bb0-a0f89d25ee8f",
        "cursor": {
          "ref": "677dc2b5-0e40-43e9-868b-2337a66f6745",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0730a8cc-762e-4857-9b5c-60db6155720f"
        },
        "item": {
          "id": "6c8433c6-2aaf-4544-8bb0-a0f89d25ee8f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2641c5ca-cab7-4ab9-b9d0-6e4715dcefe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "a6b7b57f-af96-452a-9634-c8139585ec8d",
        "cursor": {
          "ref": "11730bc6-8c26-4598-bd5e-f3b5871904e4",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "68d4ea0a-7ec2-4395-8ada-91dec366b573"
        },
        "item": {
          "id": "a6b7b57f-af96-452a-9634-c8139585ec8d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0fddea3f-79cb-4a68-91eb-69086cf909b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 472,
          "responseSize": 531
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "8d704acc-ce65-4a05-87f6-51ad59e8bca5",
        "cursor": {
          "ref": "950e2075-169d-4de4-b8f1-ac0705a1ab52",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4fc415ad-b6c5-43be-8807-3ff64060a686"
        },
        "item": {
          "id": "8d704acc-ce65-4a05-87f6-51ad59e8bca5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5f44aa7e-7b76-45b1-9691-281494e6122f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "26733cfe-14fe-4ec2-92a3-90f6c60f7989",
        "cursor": {
          "ref": "188d0a88-2b0e-48b5-9286-9aade61930a5",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "18b8ed15-4705-4bc8-af6f-54404d8f792d"
        },
        "item": {
          "id": "26733cfe-14fe-4ec2-92a3-90f6c60f7989",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d47bd468-a476-40c4-8ff7-16a709a65c82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1113,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "a296b498-7074-476a-b9f3-bdbd387412ae",
        "cursor": {
          "ref": "42371290-83ad-48ab-bd25-a69097aacffe",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e1f8db6f-53c1-4487-be90-efdec4cfd2af"
        },
        "item": {
          "id": "a296b498-7074-476a-b9f3-bdbd387412ae",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3145dd47-f966-4d37-ab59-f8504252403c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 582
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "59cb798b-1e09-4401-a655-391b7be35c10",
        "cursor": {
          "ref": "77448aa0-0905-486c-a3a6-66bed08ae2fa",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8c4a5032-8a1e-4901-b995-8e04e87028ae"
        },
        "item": {
          "id": "59cb798b-1e09-4401-a655-391b7be35c10",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d8c0c58d-ce7a-49a6-8e2d-5c99a6ec13ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 459,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "5acf0a86-da53-4c46-a6ae-961e8cb92e57",
        "cursor": {
          "ref": "62bf9605-db6e-4ac8-9f32-f2b62c81e3bb",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "da80c8b1-0102-4381-88c9-24584c08812a"
        },
        "item": {
          "id": "5acf0a86-da53-4c46-a6ae-961e8cb92e57",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b0f1e01a-a3f0-49c6-97e1-f824eff20d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 556
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "6c926817-c464-406c-ae69-f1cf8fe567d8",
        "cursor": {
          "ref": "ab714a39-edcd-4f92-8ba8-168b80fa6573",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "17f55108-ea52-4a4d-bd4c-a741809b7c74"
        },
        "item": {
          "id": "6c926817-c464-406c-ae69-f1cf8fe567d8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ddef0562-611d-4aaa-bc1b-3516b0c2bd72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "9f315025-341e-4dbf-aa0b-593d48abf492",
        "cursor": {
          "ref": "33986ea1-8e39-4992-a737-58634243c820",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4b8a2577-a310-4a9f-9ab8-33da1c6b6f69"
        },
        "item": {
          "id": "9f315025-341e-4dbf-aa0b-593d48abf492",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8ee7d155-f6c0-4b92-a44f-066aed1b7deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 580
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "ccaca36b-c328-4b63-8f3d-7bc34309ceb6",
        "cursor": {
          "ref": "258660f1-7b6b-4f38-a357-4a13e5c78a9a",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0ba3e73f-5776-40e8-8aae-97427a934edf"
        },
        "item": {
          "id": "ccaca36b-c328-4b63-8f3d-7bc34309ceb6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "dbf486e0-7307-4ce1-bd75-f73ef6c2acd0",
          "status": "Created",
          "code": 201,
          "responseTime": 2081,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "5ee26b02-35ef-4266-93d6-6df9836cc022",
        "cursor": {
          "ref": "9028d985-1f31-4343-b41c-39442f0c97ea",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f84a415d-04d1-47e7-ae55-a86660b12e0b"
        },
        "item": {
          "id": "5ee26b02-35ef-4266-93d6-6df9836cc022",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "aafb6a99-1cbd-4ec4-a228-e32f46679e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 456,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "feb798df-cab2-43bc-ae52-03be76efa51f",
        "cursor": {
          "ref": "f4ecf385-bffb-4d70-bc72-ec6acc0722ab",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "24c02278-985b-4a30-afc4-050aa958c2e5"
        },
        "item": {
          "id": "feb798df-cab2-43bc-ae52-03be76efa51f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4a6d5675-4f39-490f-90b6-35d688267337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 476,
          "responseSize": 589
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "bc846138-38f1-4caf-80b5-7320f3d497a4",
        "cursor": {
          "ref": "9cb6eb56-a8d1-4a78-b259-5bb20d553d98",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7901ee10-a997-423e-845a-69d34a037be2"
        },
        "item": {
          "id": "bc846138-38f1-4caf-80b5-7320f3d497a4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "257bf91d-6e88-4cd4-b6b0-c6d9efa6f775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 527,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "266c6cef-e8dd-4e40-9b28-0e45770ee175",
        "cursor": {
          "ref": "a23c2283-a56a-43a9-851b-e1a88127629e",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "06df07d5-eff7-4057-87c4-97d36735a731"
        },
        "item": {
          "id": "266c6cef-e8dd-4e40-9b28-0e45770ee175",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "07aff54c-d02e-4d45-9571-c1b1733fdf00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 559,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "80e7d290-aa27-4daf-8522-75156678bd1a",
        "cursor": {
          "ref": "e1ee8939-6a6c-4da1-93d2-0aabe3186ff8",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3c59361a-b1a4-4a5a-87b2-6ca1ba7c09d3"
        },
        "item": {
          "id": "80e7d290-aa27-4daf-8522-75156678bd1a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "16a62f51-115b-4b5f-98b5-5a83a6e3fc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 799,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "62ec0ad1-45c4-4d55-a22a-69d26695b45f",
        "cursor": {
          "ref": "21b14ced-be31-4159-b922-f434f3042588",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "43982d5e-d761-4733-b434-10885171e469"
        },
        "item": {
          "id": "62ec0ad1-45c4-4d55-a22a-69d26695b45f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fb9ca732-f7e0-4994-a52a-0aab6f91eade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 927,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "d859ad69-58bd-4404-ad74-faa1f8d98613",
        "cursor": {
          "ref": "aa363ed9-ae58-4425-ad7c-22a8ee32bf3a",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fba3700f-63e0-4db3-aaac-08dd7087002e"
        },
        "item": {
          "id": "d859ad69-58bd-4404-ad74-faa1f8d98613",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e6e26425-ab59-4320-9e05-c23b9bc0e34c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "e903e4b6-2ef6-42c0-b4dd-19a15ea1504e",
        "cursor": {
          "ref": "671a2fd0-9f28-41ba-b2f0-f478a0e6e47f",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e82cd0b3-0b58-4d32-83a4-c47e952082bc"
        },
        "item": {
          "id": "e903e4b6-2ef6-42c0-b4dd-19a15ea1504e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "58bf682a-44e1-47e2-82d9-62ce6d18738a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 760,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "00f60f43-2486-488e-a492-cec6493e0dc1",
        "cursor": {
          "ref": "9d7a3dde-ab85-49b5-b3f3-241cb9fa0fcd",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "56c73ed6-f88f-4c14-a9f2-d41287a2ed45"
        },
        "item": {
          "id": "00f60f43-2486-488e-a492-cec6493e0dc1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "22a63876-8566-4874-ade8-44600b1a322e",
          "status": "Created",
          "code": 201,
          "responseTime": 2553,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8e16e9-7d1c-4caf-b9a4-6a320a426243",
        "cursor": {
          "ref": "f72f82a8-063b-4c0e-ad13-db5cb03e9aa4",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "98906e8d-1698-4183-976b-865e0f035be0"
        },
        "item": {
          "id": "ad8e16e9-7d1c-4caf-b9a4-6a320a426243",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "27f83f78-e265-4bea-86c4-4b94feaa6b6c",
          "status": "Created",
          "code": 201,
          "responseTime": 1560,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31057c6a-08fd-4fd9-8c31-71be46cf8cec",
        "cursor": {
          "ref": "2b74e1d9-f83d-42e9-9275-35432ba31114",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "888a9115-1801-4c4d-afbd-2b2c035cbb64"
        },
        "item": {
          "id": "31057c6a-08fd-4fd9-8c31-71be46cf8cec",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "56dd9858-5168-4dd5-b607-09b117b45101",
          "status": "Created",
          "code": 201,
          "responseTime": 1728,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f40f9d-d37a-4790-a245-00a5a049be97",
        "cursor": {
          "ref": "809dafc4-33b0-48cc-9438-be776b1949bf",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2bba709b-7566-4292-9293-751cb5230906"
        },
        "item": {
          "id": "f0f40f9d-d37a-4790-a245-00a5a049be97",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ff4e2142-6fa3-4f1a-8ab2-1c40e98896b2",
          "status": "Created",
          "code": 201,
          "responseTime": 1688,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "588c184e-9c26-48a9-9ab5-f5e38271490c",
        "cursor": {
          "ref": "e1fd9f35-4662-4a15-a3de-785579e28d70",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a80df360-fd9a-469c-8ae5-3c19e947b3f5"
        },
        "item": {
          "id": "588c184e-9c26-48a9-9ab5-f5e38271490c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7d5d14af-6406-4ef2-88d8-fd8da7eb330f",
          "status": "Created",
          "code": 201,
          "responseTime": 1693,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ecebb5-e5ff-4644-a4bf-427323dfba2f",
        "cursor": {
          "ref": "eebdc62c-937b-4985-b790-36ba34a9d197",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "02c606eb-68cd-496b-867b-690e957dbdb9"
        },
        "item": {
          "id": "d7ecebb5-e5ff-4644-a4bf-427323dfba2f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "698e0bff-6f52-441d-9a01-25d90953b2ea",
          "status": "Created",
          "code": 201,
          "responseTime": 2132,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73db1d25-0c0d-4ce3-a0e3-7b2073a1d9e2",
        "cursor": {
          "ref": "593ef95d-0f05-47cf-9bd0-2a288be10364",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "58cacfc7-e70e-478a-abfa-de1291468725"
        },
        "item": {
          "id": "73db1d25-0c0d-4ce3-a0e3-7b2073a1d9e2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5a41185b-e085-4944-9b7b-10c09f080403",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 461,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "73db1d25-0c0d-4ce3-a0e3-7b2073a1d9e2",
        "cursor": {
          "ref": "593ef95d-0f05-47cf-9bd0-2a288be10364",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "58cacfc7-e70e-478a-abfa-de1291468725"
        },
        "item": {
          "id": "73db1d25-0c0d-4ce3-a0e3-7b2073a1d9e2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5a41185b-e085-4944-9b7b-10c09f080403",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 461,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "63d5c963-bbb7-4e4e-a3e4-df1c3d4f0384",
        "cursor": {
          "ref": "d58411fe-aa68-474a-8a02-70e3a564f18b",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "49101452-a53e-45b0-8fc8-83df8fa8c218"
        },
        "item": {
          "id": "63d5c963-bbb7-4e4e-a3e4-df1c3d4f0384",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a07c71e1-bd35-4e4a-9cad-a5d2e686b6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 327
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "542c024f-5e26-45b9-938c-16af82399af3",
        "cursor": {
          "ref": "820adb50-cee1-4ceb-8868-e204bc33e840",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "29e438aa-afc3-43e5-ae1d-53a48bef0ae8"
        },
        "item": {
          "id": "542c024f-5e26-45b9-938c-16af82399af3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1f67a27a-ee10-432b-974d-5781c06e2eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "cf82580e-a696-4a39-97a1-9665a54846f5",
        "cursor": {
          "ref": "2bc91b84-869f-493f-b544-948aac1b4a19",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e4a0df26-70b3-4291-b69f-d63fd2c2c648"
        },
        "item": {
          "id": "cf82580e-a696-4a39-97a1-9665a54846f5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "af86c64e-ffc2-4c71-9f03-01d7eec2fdf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "325c6cfa-459c-427a-983a-1a672c6b7693",
        "cursor": {
          "ref": "46506069-97f3-484c-b11f-de850307db77",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5d587f0f-d967-4a50-b87b-d432093ff559"
        },
        "item": {
          "id": "325c6cfa-459c-427a-983a-1a672c6b7693",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e1dea175-fa45-4bea-8e88-1316922a0060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 282
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "048f191a-fa7b-4d2e-b788-ae34a495804a",
        "cursor": {
          "ref": "5d233317-e1d8-4142-a47e-66c2f39d885e",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7ccc64ae-f072-4ff7-a687-db7b1f962c13"
        },
        "item": {
          "id": "048f191a-fa7b-4d2e-b788-ae34a495804a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "afb1b738-09e3-41c3-a2c0-f010362c8a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 415,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5c2836ec-f7d3-4d8f-be57-ec832792978a",
        "cursor": {
          "ref": "f8f269de-9607-4979-a586-ee54fe1a6624",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3b406a5d-8ca8-44c0-99a0-73707e04f757"
        },
        "item": {
          "id": "5c2836ec-f7d3-4d8f-be57-ec832792978a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "eba258a2-df45-48ce-a393-b61a0a86128f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 434,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "4c6fc446-d928-4a9d-b291-71394fe94e3a",
        "cursor": {
          "ref": "dfefd7d6-fbf4-4939-8aef-6e789bd702b9",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fbf401bf-5c08-442c-b884-8fd2cfef0e56"
        },
        "item": {
          "id": "4c6fc446-d928-4a9d-b291-71394fe94e3a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9f2c46fc-7101-4a31-85c7-42810d783bc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 446,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e6ce71d6-77f7-4da8-ac91-fa0efee3c775",
        "cursor": {
          "ref": "feb9e6e4-a67b-4442-897a-177b97ae25a5",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1f627bcf-b1d0-4d00-8af2-9523a8d796e4"
        },
        "item": {
          "id": "e6ce71d6-77f7-4da8-ac91-fa0efee3c775",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c2bb31e9-4c3b-4ace-a7af-3a2aa7bef02b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 442,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "ec9a7225-8b91-4aab-9460-e60532c62e10",
        "cursor": {
          "ref": "d0add61b-1a16-4326-b2c6-4feed342e498",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "257bae02-2979-4591-822f-2ceb0b0ab8a3"
        },
        "item": {
          "id": "ec9a7225-8b91-4aab-9460-e60532c62e10",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "47f5f89b-9f18-49ba-a2bc-de0c2711b6ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 486,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "a223387a-09c4-479d-aae2-787cd8bed04b",
        "cursor": {
          "ref": "39ba396c-88eb-4f6b-96ca-3671e093a62c",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e568bec7-e786-4973-9982-df06fc321ee2"
        },
        "item": {
          "id": "a223387a-09c4-479d-aae2-787cd8bed04b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e635093d-d771-4699-8678-33f974e68ca5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 452,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "f57afc65-0699-4a8e-b5be-e0df41e4177c",
        "cursor": {
          "ref": "fb3db98d-0f44-4aa7-a9e4-d34355b5fbed",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3f0a2a68-9434-41a7-94da-02d7204156b9"
        },
        "item": {
          "id": "f57afc65-0699-4a8e-b5be-e0df41e4177c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b5edadb3-7148-4efd-8ea4-48679e61cc90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 484,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f0a587c9-3aef-43bd-9abc-27e1bb2967c7",
        "cursor": {
          "ref": "f726c0dd-e53b-4718-8bba-89ac52845cd2",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "446f11c0-71a7-4d1a-9688-bb8fdc78cf40"
        },
        "item": {
          "id": "f0a587c9-3aef-43bd-9abc-27e1bb2967c7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0cf496e0-1ad7-4881-ac0a-779592e89823",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 469,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f12bf1ef-1b56-4219-9dbf-447fd79a7e93",
        "cursor": {
          "ref": "5a208569-711f-4c99-99fc-f86a6d36035e",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "653cecfc-5dd4-44bf-a71b-832f207b3026"
        },
        "item": {
          "id": "f12bf1ef-1b56-4219-9dbf-447fd79a7e93",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b16231af-da3b-45ee-b926-1413e54422b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 448,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "6cb3ca8b-f70b-4f10-96b5-392889273c22",
        "cursor": {
          "ref": "f5715a2d-6a12-42df-9b7b-5c87358f11ce",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a390ec8a-0c2d-4fbe-9d63-37ea3529689f"
        },
        "item": {
          "id": "6cb3ca8b-f70b-4f10-96b5-392889273c22",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6b09f916-8cce-4f6c-a3af-e444076f005b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 612,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "234b5018-43f7-4655-b422-4ce7d619566f",
        "cursor": {
          "ref": "188155a0-ba24-4f18-ac65-539b468f8123",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4d504899-54e4-4c5b-8d7c-7f2c3f01eef2"
        },
        "item": {
          "id": "234b5018-43f7-4655-b422-4ce7d619566f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "636cfe8e-20ae-4466-a79b-13bb6c2ff850",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 414,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "7e980c7e-f0e3-4629-baf2-ee3624b08b7b",
        "cursor": {
          "ref": "9602085e-fdcc-4d98-b34b-07425a538376",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "79208440-f933-4831-a1a0-2b4e6ed7b063"
        },
        "item": {
          "id": "7e980c7e-f0e3-4629-baf2-ee3624b08b7b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8aabee25-30d7-4825-86df-f7b83b817c87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 428,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "4c791dce-2312-4c87-aac7-3a4728d664e9",
        "cursor": {
          "ref": "8427e5dc-ae88-47a5-9301-77000302f748",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4182e564-f0f8-41e0-97fc-b95e0f68cbe1"
        },
        "item": {
          "id": "4c791dce-2312-4c87-aac7-3a4728d664e9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "354d09ba-c7e2-4d82-af9a-87d6bbd02da7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 455,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b85e2f15-167b-4e6a-b72e-577cf310880f",
        "cursor": {
          "ref": "f56b63d4-da43-4a9a-bd7e-09ec818d5f87",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a9a94a5a-d4c2-4692-956a-cb3fd2bb33a3"
        },
        "item": {
          "id": "b85e2f15-167b-4e6a-b72e-577cf310880f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e276fcde-6d6e-4c7e-a8d2-c1c5afc4665c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 454,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "82a6ab09-d477-4ce3-94b1-934f44044218",
        "cursor": {
          "ref": "2dc3ad9f-e538-49cb-82f5-ab470f80ba80",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b324cf14-7fdd-4c7f-beb8-9e7f447cee1e"
        },
        "item": {
          "id": "82a6ab09-d477-4ce3-94b1-934f44044218",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3d792767-cac5-4478-a2ce-d3c1905e1478",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 423,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "021a7689-1ee1-476e-afb0-8279788a1e8d",
        "cursor": {
          "ref": "f1691355-1bce-48cb-b8a5-949d4291ee5c",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fad39564-fdc1-4e24-8800-cee4f904d192"
        },
        "item": {
          "id": "021a7689-1ee1-476e-afb0-8279788a1e8d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1a91b706-f8a0-46fe-bacd-9669f3d395a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 441,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "43adf5db-cfb4-458c-8df8-4832cffb40f1",
        "cursor": {
          "ref": "308079cb-3a80-461e-b1aa-d4bc9c175d75",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2e6f2a3e-6393-4db6-a925-7dee0330e872"
        },
        "item": {
          "id": "43adf5db-cfb4-458c-8df8-4832cffb40f1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7c4d1699-f7be-42f9-836c-b87a37d2a7ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 466,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "f9749367-419b-4991-8343-916e96461aef",
        "cursor": {
          "ref": "d74fed09-8dee-4a01-941e-1f92af4734d2",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ad5879e0-9e9f-4ebd-bc77-6980dc1cc320"
        },
        "item": {
          "id": "f9749367-419b-4991-8343-916e96461aef",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "55a2e023-5488-42f9-a9fc-6ab6537be7e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 501,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "bd812bb3-b852-4635-9177-e1ee3c202f5e",
        "cursor": {
          "ref": "35cdda25-a3aa-4027-a439-1d259c347263",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3b2360e2-c691-47f5-aaf1-97733df9097e"
        },
        "item": {
          "id": "bd812bb3-b852-4635-9177-e1ee3c202f5e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "54bcd586-b449-4fda-8721-c9d19edc81ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 462,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "195fa87a-c1e8-42d9-ae67-e805d6036bfa",
        "cursor": {
          "ref": "fecf6f56-e50f-4d71-a772-19c01207b292",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1aa77b59-2e67-45c6-b1e3-f4e133f9c24d"
        },
        "item": {
          "id": "195fa87a-c1e8-42d9-ae67-e805d6036bfa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0d135fb4-9ca4-4825-aeac-38fa448b654f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 478,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "297fa036-72f1-43df-aac6-33c02682e2b5",
        "cursor": {
          "ref": "3ec26391-ed80-4bd6-8770-d4481ec0e9ea",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "608d12f9-5a38-4a1f-a309-e7de2b3b1fbb"
        },
        "item": {
          "id": "297fa036-72f1-43df-aac6-33c02682e2b5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5bff3d5a-0532-411e-bbd4-edea1652b046",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 538,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "35a6612b-e357-4b97-895c-daa6bb46cd05",
        "cursor": {
          "ref": "25a2bb9b-1cb0-4484-81fb-f7ad45d0b3da",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e696ed49-c9ab-446e-b7fa-11e827d8c707"
        },
        "item": {
          "id": "35a6612b-e357-4b97-895c-daa6bb46cd05",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c0f38baf-fb96-422f-841f-bdc8c175540b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 585,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "37efdc43-13f2-4417-98d7-cb49fa74c915",
        "cursor": {
          "ref": "ded9d16b-927f-42e2-865b-06a3358c56e5",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "26413a7b-ed33-438f-8109-2ad59efa8344"
        },
        "item": {
          "id": "37efdc43-13f2-4417-98d7-cb49fa74c915",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "339cdc00-7048-4612-8631-d827935c45e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 922,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "349feaac-7ebf-4b29-82b4-30c37265d86d",
        "cursor": {
          "ref": "f5d589e5-b40c-487e-a613-aab474cf4c0e",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "76ef5f21-93d7-4303-ac07-5ef561ad8fb2"
        },
        "item": {
          "id": "349feaac-7ebf-4b29-82b4-30c37265d86d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "34ec048e-404d-4f15-9102-06170cdd206a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 874,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "d251ee9d-25e9-4b22-86e1-e7524c333ca6",
        "cursor": {
          "ref": "8d36974e-f837-4888-b170-758541702ec0",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "911ff0a9-c093-48ef-9dab-36d0df20fa19"
        },
        "item": {
          "id": "d251ee9d-25e9-4b22-86e1-e7524c333ca6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "adad1eff-1ff4-48e2-ba8e-ebacd5155200",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 598,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "9e96274f-38e0-4061-8e10-377e30850016",
        "cursor": {
          "ref": "1d38e5e9-13d9-4c58-8932-e495cf4492a5",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c58edccc-32d9-4df4-be2e-83083a2ed581"
        },
        "item": {
          "id": "9e96274f-38e0-4061-8e10-377e30850016",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "27415bf6-8b97-4825-89e8-63298ddee19c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 961,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "505a4ea6-58b6-4b5f-b307-22f2c13b136a",
        "cursor": {
          "ref": "8fac82f6-6718-44a1-bddb-9671586aa049",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f872482a-76c7-45d5-a0b4-d6a6df377d0e"
        },
        "item": {
          "id": "505a4ea6-58b6-4b5f-b307-22f2c13b136a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a95e132c-cf1b-459c-bc98-a51b98ac9aac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 876,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "65b22638-5417-4890-84e2-f2737d2dc8e2",
        "cursor": {
          "ref": "2726179c-3aed-46f4-90b3-5829edff03c8",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "983f9c8f-368f-4482-b1c9-ec4feafb4faf"
        },
        "item": {
          "id": "65b22638-5417-4890-84e2-f2737d2dc8e2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5fc316a1-0688-4d2f-b997-925abb88ba9f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "a3e59718-1a18-4c83-9e61-77cc0958078e",
        "cursor": {
          "ref": "07d69cd2-8173-4256-b4d7-b5a06766d6ab",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "35f23a7d-a444-4c57-bbf9-49aa0ed6ebb0"
        },
        "item": {
          "id": "a3e59718-1a18-4c83-9e61-77cc0958078e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "fb3e93c0-f0b9-47d0-b2eb-6b2485ec476d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 206
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "068487ab-3506-4a98-ac8d-90d21e149364",
        "cursor": {
          "ref": "30e545e4-ce02-47f4-b22d-0f6b958f6577",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "58c6f815-3047-4be0-b7d7-eb9e2abe50b4"
        },
        "item": {
          "id": "068487ab-3506-4a98-ac8d-90d21e149364",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cef87ddd-702a-4706-8e21-279925b076e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "068487ab-3506-4a98-ac8d-90d21e149364",
        "cursor": {
          "ref": "30e545e4-ce02-47f4-b22d-0f6b958f6577",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "58c6f815-3047-4be0-b7d7-eb9e2abe50b4"
        },
        "item": {
          "id": "068487ab-3506-4a98-ac8d-90d21e149364",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cef87ddd-702a-4706-8e21-279925b076e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "666c539e-2c5b-427c-a231-082e9c65183a",
        "cursor": {
          "ref": "3fc577dd-7d1d-41c7-ae94-4c50e9f4b70f",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "824ebbd7-bdda-4ee6-a9f7-77b243e66b91"
        },
        "item": {
          "id": "666c539e-2c5b-427c-a231-082e9c65183a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a4c2495a-bb2e-4914-9138-5745fe9231cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 229,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "ab289d75-1360-45fe-865d-a9848972864f",
        "cursor": {
          "ref": "375b11d5-17fc-4ede-894e-c0b008daed11",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "114f0ab7-43fc-4d3c-8019-363dcd213339"
        },
        "item": {
          "id": "ab289d75-1360-45fe-865d-a9848972864f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3ba38a15-4efe-40f8-a469-ce807fbc00e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "97a80e40-a521-4192-a599-5bfe0456bf72",
        "cursor": {
          "ref": "f80370e4-92b5-4cdb-8290-708214915d71",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d3b7a177-a94c-498d-85a8-f20be1f6247f"
        },
        "item": {
          "id": "97a80e40-a521-4192-a599-5bfe0456bf72",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "562e1bdc-37c3-4016-a12c-36f4cdfe68db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 540
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "864304f1-0433-443e-a788-5265191fe932",
        "cursor": {
          "ref": "97a735be-03bb-4d0c-bb37-62c25b80116b",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "800e93da-95f6-41a8-825e-b86b2c75c339"
        },
        "item": {
          "id": "864304f1-0433-443e-a788-5265191fe932",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b1e41623-6b41-4f6c-a07e-e59124e6b5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "88dbbf22-1b4f-4380-80c2-b2c79032e293",
        "cursor": {
          "ref": "6acc0adc-c2dc-4554-877f-81a08679dd74",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "62286a38-f27d-4141-a0dc-7d01435685bc"
        },
        "item": {
          "id": "88dbbf22-1b4f-4380-80c2-b2c79032e293",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "31975d65-a86c-4f0c-b80f-d466137da878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "f1712dc2-0a44-470c-9539-3b260ddfb3fc",
        "cursor": {
          "ref": "c53a7f3e-21c4-4ab4-9dfe-b8af39480c43",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "aad4aea4-7ab6-4ba2-9fd8-53d84f30aef4"
        },
        "item": {
          "id": "f1712dc2-0a44-470c-9539-3b260ddfb3fc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1e56c51f-a0c0-4063-b80f-3edc517415ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 1154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "370137bb-5c83-413c-9916-6b838cdd7464",
        "cursor": {
          "ref": "6dd5ad40-fd29-4e9e-94d1-8fe302104789",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "97e3499f-8ed3-4b03-bbb8-619b69564486"
        },
        "item": {
          "id": "370137bb-5c83-413c-9916-6b838cdd7464",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1fca11ce-84e6-4366-9354-87eb65846049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "4919ed64-5a74-4470-b313-a6da605cb0df",
        "cursor": {
          "ref": "99d6a661-7313-4c45-95e2-51d674902ee4",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bba27f4b-56f8-4fc9-8361-62e00261f61a"
        },
        "item": {
          "id": "4919ed64-5a74-4470-b313-a6da605cb0df",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "065904c8-cf6f-4758-82ad-083a8c87e4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 1699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "52433129-6c0e-419e-8278-7600d55830fe",
        "cursor": {
          "ref": "700081a5-c0c7-4f7b-a4df-4c452e4c5f22",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "14beac54-3419-4add-928f-566ad1303832"
        },
        "item": {
          "id": "52433129-6c0e-419e-8278-7600d55830fe",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "dfbc1d44-7f45-430e-871b-f2487f76b180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "46001132-b2f4-423a-b1e5-f78d689c4bc6",
        "cursor": {
          "ref": "8538c3d3-9746-4187-a5aa-994883cd584a",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a7032207-1a20-46d7-b13f-f2d66e085ebd"
        },
        "item": {
          "id": "46001132-b2f4-423a-b1e5-f78d689c4bc6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "01060a17-76c2-4480-8156-300617a701fe",
          "status": "OK",
          "code": 200,
          "responseTime": 277,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "41f961a8-8ed2-4c63-bc66-dce37aa09faa",
        "cursor": {
          "ref": "ad046968-fb24-4551-86ba-973d2f217fbb",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0d0787e7-aa0a-48d7-b029-cdc1bc2a1be4"
        },
        "item": {
          "id": "41f961a8-8ed2-4c63-bc66-dce37aa09faa",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9c44036e-4430-4bb3-ae6b-e97d35d498f0",
          "status": "OK",
          "code": 200,
          "responseTime": 297,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "2abaff23-69ab-4d21-9c1d-ceca5a8bf9eb",
        "cursor": {
          "ref": "dac0a0c6-5101-410d-b6f5-525b3f8feb6e",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3c160a3e-76c4-4c6d-9718-ddb80cc664d3"
        },
        "item": {
          "id": "2abaff23-69ab-4d21-9c1d-ceca5a8bf9eb",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "40f1591c-793b-4699-ba9f-ea9d84e9bf06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 2187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "f6954342-89fd-4987-a1d3-17a5ecebb16e",
        "cursor": {
          "ref": "dcc6a2af-3072-4768-bb92-ae84cd162756",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d63cb527-8c12-4424-bf2a-3d68fea116b9"
        },
        "item": {
          "id": "f6954342-89fd-4987-a1d3-17a5ecebb16e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d944a371-35ce-4ea3-b212-0d854f2d7e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "49c5c6df-c14c-4b88-9832-3dd17fc32365",
        "cursor": {
          "ref": "8dd975cc-7e75-4075-9e32-a1e08e52420b",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9300272c-2f47-4270-948c-928b9816e53e"
        },
        "item": {
          "id": "49c5c6df-c14c-4b88-9832-3dd17fc32365",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "92fabec4-7448-4998-ae4b-313eebf009f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 2176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "741a7c76-a73d-4b6e-aca2-3ad723bfe22e",
        "cursor": {
          "ref": "79c8b93e-d4f5-4da1-b16a-981193589648",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d2cf23b3-c773-40ce-9a60-bf8707bd56b6"
        },
        "item": {
          "id": "741a7c76-a73d-4b6e-aca2-3ad723bfe22e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "75a91348-42b1-4cde-9ac6-a25ac8d99d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "c9d0d879-a3d2-4aea-8aec-94675e020cf4",
        "cursor": {
          "ref": "b9f6d74f-927f-45e0-997f-7b23a554ec24",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "eb9eb4c4-32c7-4ebe-88cb-8338f49f8e7b"
        },
        "item": {
          "id": "c9d0d879-a3d2-4aea-8aec-94675e020cf4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "009adfd6-aaf0-4a3f-bef1-76fa141cdab8",
          "status": "OK",
          "code": 200,
          "responseTime": 285,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "9ed75e6a-0898-4134-829e-303029532187",
        "cursor": {
          "ref": "f58b70f9-8d16-4a88-9103-b734c86733e4",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "55b35682-da09-4a19-a96f-0331a1a98aca"
        },
        "item": {
          "id": "9ed75e6a-0898-4134-829e-303029532187",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3047b7b5-c87b-4558-ac3f-9821b0ef4718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 1235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "af1cd1e6-5fa1-4fe2-a94f-8855ec76664c",
        "cursor": {
          "ref": "21cf4689-0f54-478a-8aa0-2e9d6a79c7b6",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e29f5276-97f9-4f82-b455-9d1e0977e0f1"
        },
        "item": {
          "id": "af1cd1e6-5fa1-4fe2-a94f-8855ec76664c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "abca46be-1211-4ff5-86ba-5a627d1da31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 1191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f2b50f37-7a60-494b-bc3c-645a606f0c4e",
        "cursor": {
          "ref": "de8625f5-2d0d-40a7-afd4-3eeb2dcfdc0c",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7a056a9a-1646-46ec-ac79-967334f107b3"
        },
        "item": {
          "id": "f2b50f37-7a60-494b-bc3c-645a606f0c4e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8134c8e1-04f3-4de0-aa35-06cdd4c910fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 1189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "916f04d9-1739-437d-b40f-fce19ba14317",
        "cursor": {
          "ref": "45ce9637-3f78-47f2-b993-634ba752809d",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9487003a-faaa-40fe-b3ec-d956d45ecc72"
        },
        "item": {
          "id": "916f04d9-1739-437d-b40f-fce19ba14317",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2be909ee-d86a-4913-ad5c-e431b36a3804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 1190
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "940bdc89-7dc3-4a96-9475-cf9dda5d9dab",
        "cursor": {
          "ref": "73677ae4-d2d5-47eb-bd72-8fa84c7c960a",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "87a50fa3-4dd1-4018-9465-21addc32da76"
        },
        "item": {
          "id": "940bdc89-7dc3-4a96-9475-cf9dda5d9dab",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f3f31830-2f02-4520-a475-0d75707859bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 1241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "629fad13-d2b5-4bfa-ae52-64b927d10e71",
        "cursor": {
          "ref": "de43d6d3-0408-45a2-8f15-926040cb3f8b",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "53483858-87ef-4288-bb90-755f04e1a26b"
        },
        "item": {
          "id": "629fad13-d2b5-4bfa-ae52-64b927d10e71",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "aea29af3-d44c-4e2a-b62d-3ca49608a2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 1168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "d963dba6-fbc0-4f83-8ff0-554378ebbfa9",
        "cursor": {
          "ref": "1ba02d58-4304-49e2-895e-6a90c3304229",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a76208ed-2284-4248-ba44-52ef935ccac4"
        },
        "item": {
          "id": "d963dba6-fbc0-4f83-8ff0-554378ebbfa9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6155115f-f0ce-4577-8198-3c84ddb0ff05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "3a6320f2-500d-4020-b032-a226ae219adc",
        "cursor": {
          "ref": "1ea0e4e7-4ef8-44d0-b28a-610b245d4d30",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c7897754-f93b-4e1f-b260-7375683e99c6"
        },
        "item": {
          "id": "3a6320f2-500d-4020-b032-a226ae219adc",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "618ecb31-1ca0-4aa8-a1e0-b8c2718cff5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 1488
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "0af52c9a-3e99-4287-b7e3-5375e2259cf8",
        "cursor": {
          "ref": "a9317454-e13c-4630-8649-8c94e40ec89c",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e8ec5b69-b2c0-4ab8-b133-52c8d0908250"
        },
        "item": {
          "id": "0af52c9a-3e99-4287-b7e3-5375e2259cf8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "126bb11d-ac17-43b6-bac5-45fd2811803b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "2d267cf8-b89d-4bb3-bd4f-5bb1ff4f771e",
        "cursor": {
          "ref": "602d434c-a4fc-47d1-bb48-96eb2a0b135f",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "19f69a8a-d721-475b-b04b-78d5e50e0a53"
        },
        "item": {
          "id": "2d267cf8-b89d-4bb3-bd4f-5bb1ff4f771e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5af12e44-56b5-4aed-aeac-795400f35d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 1515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "87b7eba9-3e83-406b-89c0-02853ebae56e",
        "cursor": {
          "ref": "485a182d-79cb-4316-b392-7173933c28e0",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ffa08f11-1d75-42a7-94d6-3fe67ffbb1cb"
        },
        "item": {
          "id": "87b7eba9-3e83-406b-89c0-02853ebae56e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "835b4c80-e363-480d-9157-347c47a1e292",
          "status": "OK",
          "code": 200,
          "responseTime": 309,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "f14ab866-28e7-4eb5-99bf-a2e9825c573f",
        "cursor": {
          "ref": "53eb36f2-cf74-47a9-9239-0046e8fea375",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ffacecc4-bba7-4c54-93e7-d9c5abf52eba"
        },
        "item": {
          "id": "f14ab866-28e7-4eb5-99bf-a2e9825c573f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "343e1f55-03f4-4905-8a13-7d6c9a76040c",
          "status": "OK",
          "code": 200,
          "responseTime": 332,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "c53633a1-c155-4957-bc52-f80f7cc7b873",
        "cursor": {
          "ref": "6cfade4d-4262-44df-9af3-d5cbb9e61b26",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c88d0280-df5c-44c5-8ff6-9662e8e1f80a"
        },
        "item": {
          "id": "c53633a1-c155-4957-bc52-f80f7cc7b873",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f33ba790-9971-414a-bb5c-eb69a82fcc5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 1534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "191f72fc-bbff-45e9-8573-89bb8ae663e5",
        "cursor": {
          "ref": "e3ffaab6-2511-4f1e-bd58-f84204cb9bc8",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "40fb42ad-5b1d-4275-9808-c4091049a4e2"
        },
        "item": {
          "id": "191f72fc-bbff-45e9-8573-89bb8ae663e5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "916158e4-13c9-4851-bdd4-b09b6d97ac30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "e9c69cf5-ae13-457c-a88e-4c22311fdb8b",
        "cursor": {
          "ref": "1bd82466-2a7f-4c9e-9704-02c71fa5ebe2",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "81e0565d-d0d8-426f-ae25-fab30cf6ba14"
        },
        "item": {
          "id": "e9c69cf5-ae13-457c-a88e-4c22311fdb8b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6a57413c-a8a4-4196-a71a-6b906655ffe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "f84db6b4-7cb3-4ee7-861d-f576bc0da80f",
        "cursor": {
          "ref": "46eaa9d7-ce14-4edf-a497-0f44a718af5b",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "86261629-09b0-46ba-ac70-d9dbdf12f0a5"
        },
        "item": {
          "id": "f84db6b4-7cb3-4ee7-861d-f576bc0da80f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "97123799-6ef3-4cda-8e52-0c31325ef072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "c7133d05-2780-4cbf-acd5-cae498ed95f7",
        "cursor": {
          "ref": "97c4af10-38f9-4dc1-bc79-3f1539e41d2e",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b663cc32-9cac-4bd0-b986-dcd667b7d800"
        },
        "item": {
          "id": "c7133d05-2780-4cbf-acd5-cae498ed95f7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6db57334-9043-4111-9f15-03440ec40a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 1550
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "c4339eb0-c94a-44d2-9552-ac120c437ef1",
        "cursor": {
          "ref": "945c45ee-6686-432c-a54e-588fcf9c0b39",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "81357910-ca52-4ffb-afec-22f1db20ea2c"
        },
        "item": {
          "id": "c4339eb0-c94a-44d2-9552-ac120c437ef1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fcc65afd-b870-415d-95dc-07a6c2bd02d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 1136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "4cb352f2-c976-49b5-a444-0a62e7573a96",
        "cursor": {
          "ref": "ef597c3d-85a8-4016-a19b-ed2a6434d058",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8d223ee8-cf6a-4e71-8034-76511bf81eda"
        },
        "item": {
          "id": "4cb352f2-c976-49b5-a444-0a62e7573a96",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6aa0dbf3-8b3a-4cde-ae24-bd8f499f7c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 1445
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "c405bc7b-b6bc-45ef-b047-14d45f696b23",
        "cursor": {
          "ref": "bf4d7139-e760-4bbd-bdd8-38a3fcf737bd",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "60874009-195e-4b1a-a1ed-b82c824157b3"
        },
        "item": {
          "id": "c405bc7b-b6bc-45ef-b047-14d45f696b23",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9088172d-0d71-4dfb-9d70-54517c5cbd23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 1431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "c19e49ae-6355-4471-b939-6f8a7f0cc0a7",
        "cursor": {
          "ref": "4a884fb0-c379-47bb-b565-8ea95725b4d1",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a3b958b9-611f-4e82-9533-70b79694e6c6"
        },
        "item": {
          "id": "c19e49ae-6355-4471-b939-6f8a7f0cc0a7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e02d0df3-f9de-40e9-8e60-dbdcd35a62d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 666,
          "responseSize": 1429
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "12435e36-0714-4337-9d17-4eee084c6417",
        "cursor": {
          "ref": "3021df4a-c2d6-4d8d-8ff6-775d5907acc0",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "acf16259-6d01-4c7c-8cd7-575183de31e0"
        },
        "item": {
          "id": "12435e36-0714-4337-9d17-4eee084c6417",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5b91e228-e811-4554-8857-02118913835e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 754,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "3b3fe394-835a-4644-962b-341b82398e54",
        "cursor": {
          "ref": "edfb351f-756f-4de0-9ed3-4662df9e6af3",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1552b41e-208b-4c22-beec-137136e0f11a"
        },
        "item": {
          "id": "3b3fe394-835a-4644-962b-341b82398e54",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6fd54166-547d-4b42-9c81-b2937f42e881",
          "status": "OK",
          "code": 200,
          "responseTime": 557,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "73c25a30-7982-4457-a259-4cd6e4902413",
        "cursor": {
          "ref": "058d2536-54b2-4b06-87fb-f60e0d44b723",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "511729a5-d937-4231-8d95-ce11fa600e5d"
        },
        "item": {
          "id": "73c25a30-7982-4457-a259-4cd6e4902413",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "18082b1f-3fa7-4e64-a64f-4dbc2c6ad42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 528,
          "responseSize": 1470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6473daea-a493-4fac-bc99-edf36e1b3d61",
        "cursor": {
          "ref": "32688d82-5748-4ea7-bf1c-5251a55cc100",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "06bceb7f-2d47-4182-b357-3d92879d0fdc"
        },
        "item": {
          "id": "6473daea-a493-4fac-bc99-edf36e1b3d61",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "888d2554-5d64-487d-ba2a-b5fb25623029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 415,
          "responseSize": 1456
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "90527924-2e0f-469f-94e2-0b662b6a65d8",
        "cursor": {
          "ref": "b6d11109-4071-4c24-a070-d421b5ea67c4",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9eff9017-ed17-4560-8b55-bc1e9b38a257"
        },
        "item": {
          "id": "90527924-2e0f-469f-94e2-0b662b6a65d8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9cecd093-b3f8-4e9f-89e9-327335be3f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 517,
          "responseSize": 1454
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "e99e5e5e-9bc3-4902-89d4-e4bf581a769e",
        "cursor": {
          "ref": "9074371a-bbcc-478f-abfb-38c216dd1163",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e1e43c9f-1cb9-4c5e-b147-ecac890604a2"
        },
        "item": {
          "id": "e99e5e5e-9bc3-4902-89d4-e4bf581a769e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f8ed22af-a583-4056-b716-34e2ff2a1d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 466,
          "responseSize": 1455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "cc6c1e57-2e71-4735-9d7d-2c4fc66b697a",
        "cursor": {
          "ref": "cc1fc03e-3438-4d2f-8094-3bc1da0a6f5a",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9c8bdb78-bf9a-4a3b-86ef-677c302d799f"
        },
        "item": {
          "id": "cc6c1e57-2e71-4735-9d7d-2c4fc66b697a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "62bf0bbb-84f5-40d5-b329-0c17abe186d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 667,
          "responseSize": 1476
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "51504a6b-5f9e-4e6a-b9b6-bc246b706cdf",
        "cursor": {
          "ref": "a344f5d1-def4-4cd5-b1fe-8a35a64e624a",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "84b56b73-98aa-4ced-877f-8473f3526f85"
        },
        "item": {
          "id": "51504a6b-5f9e-4e6a-b9b6-bc246b706cdf",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ea53dd84-3db8-47a0-81a2-87ea80fff238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 372,
          "responseSize": 1178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "ca66af1d-5f64-4832-93af-b3cf9da7d214",
        "cursor": {
          "ref": "68ebaa3b-6091-40f1-9069-9320a3905135",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "68e79e54-ffc1-4940-9c3f-e0b79770bbfb"
        },
        "item": {
          "id": "ca66af1d-5f64-4832-93af-b3cf9da7d214",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fcd3f64e-6688-4997-940a-3ab85cef4ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 1202
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5a75f77b-5e3e-4734-9f2a-ea213fc8cf25",
        "cursor": {
          "ref": "147146df-92c5-4f97-9ed7-434e11531e0b",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b38db959-8aad-4683-8579-133da51265d6"
        },
        "item": {
          "id": "5a75f77b-5e3e-4734-9f2a-ea213fc8cf25",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "215be12c-ce05-4c69-8346-d8a782d2a19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 1183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "61c4bc1f-18c9-4e8c-a6c7-9e1fb1862ef7",
        "cursor": {
          "ref": "20ee9512-87c4-4921-9fd0-12696669e961",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a4f17ac1-5ff2-4f71-96c7-edea0d9752a0"
        },
        "item": {
          "id": "61c4bc1f-18c9-4e8c-a6c7-9e1fb1862ef7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "01768b9d-c692-4f94-a317-8957ee73c6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "a5623f33-6fec-4a83-988e-e7c0bb3d1932",
        "cursor": {
          "ref": "5c91aa3d-dc06-4744-8d45-acd24042f0c0",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9c7abe61-bd03-47ca-858d-29d215b67c0e"
        },
        "item": {
          "id": "a5623f33-6fec-4a83-988e-e7c0bb3d1932",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a2b0aa84-d1e9-4340-8b7a-08c260665acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 1182
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "601a0282-5d6c-4a8d-8079-b793e39a6fc9",
        "cursor": {
          "ref": "6dfa21e5-76f2-4e1b-be6e-97faeb07b308",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d25eeeee-5330-48af-a56a-c19078c55f6c"
        },
        "item": {
          "id": "601a0282-5d6c-4a8d-8079-b793e39a6fc9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c5f6d2e2-6698-4901-b52e-b8eb619d166c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 1208
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "a76e6bff-857d-4446-9688-1fbf30838c32",
        "cursor": {
          "ref": "1da7b7ba-1f83-4893-8bdf-eeebc27cbc3a",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "35a89e32-2129-4eb3-96fa-f55caaf82f8c"
        },
        "item": {
          "id": "a76e6bff-857d-4446-9688-1fbf30838c32",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "78a67147-a486-4f9d-a6bc-10d3b4398712",
          "status": "OK",
          "code": 200,
          "responseTime": 316,
          "responseSize": 333
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "ded29112-3436-4a10-a0ef-3c8109cde78e",
        "cursor": {
          "ref": "07a0be63-94d9-414e-847b-1da977ea5e25",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3fde8fe6-0608-474e-91c4-c6312f52bdfc"
        },
        "item": {
          "id": "ded29112-3436-4a10-a0ef-3c8109cde78e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e1a4c03f-3fcc-4e7c-b82b-bf29a1a7d9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "a17c61ca-a04c-4803-8ef9-e9cd261a1741",
        "cursor": {
          "ref": "bcf64b5b-8750-45e7-93c8-7f42ecf52322",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "aa49f184-47c1-4f1d-8821-86e4a9f7403f"
        },
        "item": {
          "id": "a17c61ca-a04c-4803-8ef9-e9cd261a1741",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b3dd50a0-29bb-40b8-9851-db6f1f8c8c18",
          "status": "OK",
          "code": 200,
          "responseTime": 326,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "197fb4c7-1dfc-4150-b09d-b9853faf5057",
        "cursor": {
          "ref": "e8741cc3-a7c6-4ebf-afe6-ffe54536e1bc",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "212564bc-a836-4f2a-8c32-e712fed4fec7"
        },
        "item": {
          "id": "197fb4c7-1dfc-4150-b09d-b9853faf5057",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "06ba62ec-81a4-473d-b947-60ef306791c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "8ed63b06-7fec-4b83-9133-869b24db9fc6",
        "cursor": {
          "ref": "90471f53-b46e-4f82-99e2-5785b7b52005",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cf4a89c0-0750-4c06-8f66-6a711a66bbdf"
        },
        "item": {
          "id": "8ed63b06-7fec-4b83-9133-869b24db9fc6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2eb3583f-3b68-4089-a98a-27e4e36caa2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 1654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "57159ade-6855-4825-8681-38fa07d060b2",
        "cursor": {
          "ref": "a1b85c92-8f26-407b-82ee-273a3a7a332f",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f800e4ca-daa5-4d0f-a605-9b83e542d2a5"
        },
        "item": {
          "id": "57159ade-6855-4825-8681-38fa07d060b2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e6821552-cc8e-46cf-a887-1d587ca31d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 1655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "1e3855c1-d181-448d-a0e5-040d52189513",
        "cursor": {
          "ref": "deb676ef-8f2d-49aa-9f61-b062f69bd0ac",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5cc6093a-d4f1-4cc6-90f1-431c6b995b22"
        },
        "item": {
          "id": "1e3855c1-d181-448d-a0e5-040d52189513",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dd2cca68-3687-4dca-9b4a-5fb5663d2fae",
          "status": "OK",
          "code": 200,
          "responseTime": 373,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "46526013-2b12-47ca-9ca8-8651886f09aa",
        "cursor": {
          "ref": "436342ee-7951-4b03-97cb-854089713d28",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a5328d97-f2f6-479f-8e59-26bbbbec18ee"
        },
        "item": {
          "id": "46526013-2b12-47ca-9ca8-8651886f09aa",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "effe5291-a9ee-47ac-a06a-3db941e199ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 2014
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "926e8c2d-cb04-40aa-a705-727f77a7cc11",
        "cursor": {
          "ref": "8661c4e2-fc46-45aa-97ba-b26bd2c2bbc8",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8df085a0-99dd-4c0f-875e-89b3d132cd73"
        },
        "item": {
          "id": "926e8c2d-cb04-40aa-a705-727f77a7cc11",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f3c504fe-99e5-4b2f-b648-ba5f286534a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 2000
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "94efa1ab-c299-4d4f-a49b-9a2b18acf661",
        "cursor": {
          "ref": "1f4e8cd5-a035-4656-9ecb-f2b0cb951774",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ef287a97-e4f7-42a4-b6aa-be7b63c2541b"
        },
        "item": {
          "id": "94efa1ab-c299-4d4f-a49b-9a2b18acf661",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fb01c918-eb91-4180-a8f8-fc491476aa87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 1998
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "57fed841-c1b6-4e8c-82ee-c0078cbff701",
        "cursor": {
          "ref": "b68d8477-d7bc-42ec-be30-d4c1e9fc6375",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "63682e22-fa1a-4cf8-9aa4-f00b0822f726"
        },
        "item": {
          "id": "57fed841-c1b6-4e8c-82ee-c0078cbff701",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5242c1c6-1c13-432b-9cbc-4f89f085636a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 1999
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "f9fecef1-11b3-4d90-ace9-5e2667a3db82",
        "cursor": {
          "ref": "9152f643-60df-4f47-9f44-d30fd42ba4f9",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "dbab9ff7-3e48-4fff-bc5b-c56f775a7ae1"
        },
        "item": {
          "id": "f9fecef1-11b3-4d90-ace9-5e2667a3db82",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c0c38f63-37e2-4dc7-80cb-5be644147502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 2020
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6cd55bff-aef9-4853-aae9-bb4b3070836b",
        "cursor": {
          "ref": "6266bafb-8b05-4c7e-8b66-86e17819d228",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2296449d-f9cf-425f-bcaf-9e172e4124e3"
        },
        "item": {
          "id": "6cd55bff-aef9-4853-aae9-bb4b3070836b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "85f67d32-cc8c-49fd-95d0-13fb788a032f",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "2c345ddf-b574-4a2f-a317-05a211476c3d",
        "cursor": {
          "ref": "77082fdf-9862-4d0d-a198-e2e52d74cf7d",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e33a6111-25ee-467d-b88a-01656f6475ef"
        },
        "item": {
          "id": "2c345ddf-b574-4a2f-a317-05a211476c3d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e1fc559e-e9c9-4418-bbdd-bda1287bc3af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 217,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "db8438f8-ab3c-436f-a5d9-562c1e327434",
        "cursor": {
          "ref": "fcda7e86-38fa-40cb-9753-d364f955c5bd",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e40fd6b8-aa28-4a8a-b3eb-0972c01a28d6"
        },
        "item": {
          "id": "db8438f8-ab3c-436f-a5d9-562c1e327434",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5fa934b2-eae1-4121-b4cb-ac80d0d5465d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 256,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "edd7a612-bcb9-46b5-922b-1867bcc07e52",
        "cursor": {
          "ref": "c604d2ce-dcb4-4563-bd3e-6cb0fcfdd0e1",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "36185f1e-7824-4e3c-9607-0e85b34beaf7"
        },
        "item": {
          "id": "edd7a612-bcb9-46b5-922b-1867bcc07e52",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0a0186be-c581-4603-b172-5559b77127ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 215,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "a894fb0f-a864-499c-855f-680e82df2bac",
        "cursor": {
          "ref": "6fb9ef90-9899-42d9-8fce-3a578b54e8f1",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ae4782a8-5556-49d8-9009-7c3e07786b11"
        },
        "item": {
          "id": "a894fb0f-a864-499c-855f-680e82df2bac",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "51a320bf-2056-42dd-8b92-d543574128c8",
          "status": "OK",
          "code": 200,
          "responseTime": 207,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "6c6cd8e5-a9bf-4a99-91f8-3ff495509f59",
        "cursor": {
          "ref": "5215a67c-88bb-4173-8f20-974a457be920",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "15571fa7-6e03-4214-8e9d-c9094c128f09"
        },
        "item": {
          "id": "6c6cd8e5-a9bf-4a99-91f8-3ff495509f59",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4dc64642-e1d3-4cff-9d2c-103b81f064f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 213,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "76cb29cb-b1e1-40f7-82e1-5f651299bd81",
        "cursor": {
          "ref": "04c8c304-056f-476c-badd-0c180538d709",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a3ce5a92-cc91-45d1-a16c-eccf944e15d6"
        },
        "item": {
          "id": "76cb29cb-b1e1-40f7-82e1-5f651299bd81",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0449c1c2-237b-4dd4-b22c-4c5589d1fddc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 238,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "777ecbc0-c097-4a1b-a861-2ce519ca6cb6",
        "cursor": {
          "ref": "8a77d5a2-6920-47b4-a38f-1745ffa81191",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3480d57a-2a61-426f-bb2c-a98b8b2f3082"
        },
        "item": {
          "id": "777ecbc0-c097-4a1b-a861-2ce519ca6cb6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7e3b19d5-9fb7-4d5b-a2ea-759bd0f54e2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 213,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "d4916f48-47ae-45fe-8cd3-be1e9771402e",
        "cursor": {
          "ref": "2d7c2e44-ac03-49a6-ad0d-bb7a0174ca53",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "89d314a5-f428-44d9-a3d2-ad483e78f7c6"
        },
        "item": {
          "id": "d4916f48-47ae-45fe-8cd3-be1e9771402e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "73f4541a-cb79-4908-89a3-0f66372cd938",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 210,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "80d02470-d39a-4261-a026-6c568f7dcf8d",
        "cursor": {
          "ref": "c2de49d4-b285-420d-bdd1-f4fc291f30bb",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8666446d-4c28-4cfd-a396-5b5e6d4ded49"
        },
        "item": {
          "id": "80d02470-d39a-4261-a026-6c568f7dcf8d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7b7a123a-db1a-40a7-b799-dae4be325465",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 306,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "aa96bfc5-406d-422a-9118-b5aa50c41147",
        "cursor": {
          "ref": "92921fe2-7be8-4889-a628-6d22ff3dd26c",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c49274af-9b03-4ef2-ae0e-89ec1fa095c7"
        },
        "item": {
          "id": "aa96bfc5-406d-422a-9118-b5aa50c41147",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5d693bcf-6f57-40a4-ad17-3142238e777a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 439,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b8071f3a-06e2-4a75-b253-b4bdc28a3fe1",
        "cursor": {
          "ref": "ba3b523d-f71c-4e2e-a542-fdc96027f626",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "db3e7a25-7ac1-462b-b7a4-09898c0da832"
        },
        "item": {
          "id": "b8071f3a-06e2-4a75-b253-b4bdc28a3fe1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7a74d78d-b2e9-4140-a812-d3b4c61292b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 348,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "36c57aad-0366-4dd7-9510-aefff7b3b0ac",
        "cursor": {
          "ref": "1c4fc843-0294-4306-afa4-7d8bca7a89ca",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "db6ab9c0-7376-4436-8af9-56f2c3a1300a"
        },
        "item": {
          "id": "36c57aad-0366-4dd7-9510-aefff7b3b0ac",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "766a1462-3c38-44b9-8523-ba6b74f52f9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 328,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ee747c3d-3f2b-4e71-ad88-1d8139e7df98",
        "cursor": {
          "ref": "afb52946-5e58-4239-96f4-0df6177e9d66",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e510c149-a5e0-47aa-bcc4-91cdb2a6d121"
        },
        "item": {
          "id": "ee747c3d-3f2b-4e71-ad88-1d8139e7df98",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2c0c0e26-d4a6-4946-a757-9c5aaf2f9149",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f3a4e9a7-53e5-4894-87dd-45eb0b053fce",
        "cursor": {
          "ref": "9ff4c56e-86bd-4377-8791-033a21916d4a",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f502655d-2af9-4ae4-a559-a68d87300f13"
        },
        "item": {
          "id": "f3a4e9a7-53e5-4894-87dd-45eb0b053fce",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ff4d93f7-1c76-4033-b746-e9737cf07a45",
          "status": "OK",
          "code": 200,
          "responseTime": 363,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "68e61293-c519-4127-8d3d-3acf87e3d21b",
        "cursor": {
          "ref": "94f8ee48-3aeb-49f9-965e-f7c633428821",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ec8ad578-a4bf-4d6c-aa5a-1723a75b813a"
        },
        "item": {
          "id": "68e61293-c519-4127-8d3d-3acf87e3d21b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1fbeb3d2-f41c-448b-9581-4abdf8c3e54c",
          "status": "OK",
          "code": 200,
          "responseTime": 281,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6570e805-371a-4077-bac3-3f35427261cc",
        "cursor": {
          "ref": "0f8ff504-d16f-4894-a27e-2b473291f439",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ba4edf55-b80e-492e-873f-0be120ba202d"
        },
        "item": {
          "id": "6570e805-371a-4077-bac3-3f35427261cc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "39406f39-3a98-48a3-bad5-fa0a9ed5e086",
          "status": "OK",
          "code": 200,
          "responseTime": 236,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "5242ab83-8619-49ee-a809-36bca40fdc93",
        "cursor": {
          "ref": "0306a664-ddd6-499c-ba20-8c54ec2afab6",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8869cc9b-a4f1-4a35-aa56-9ca6d9c9dc57"
        },
        "item": {
          "id": "5242ab83-8619-49ee-a809-36bca40fdc93",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "43b1d427-cc5e-41a0-8988-b4c58425e242",
          "status": "OK",
          "code": 200,
          "responseTime": 253,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "022c467e-d4ea-4e5a-bfa7-6cbbdb24fa18",
        "cursor": {
          "ref": "f0a42b48-f3d7-466e-bc4a-5b414d601173",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "263d2013-6688-4b0d-8381-3f369559c17e"
        },
        "item": {
          "id": "022c467e-d4ea-4e5a-bfa7-6cbbdb24fa18",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c85ea78e-6041-4e89-9fe1-b8836352dd11",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 303
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "6f57753a-6583-47c1-bebb-3b0daba91d9a",
        "cursor": {
          "ref": "8b163c28-9682-4569-821d-7e3232cd6701",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f45f84bb-ac1b-4e6c-b95f-fb7ca760b6a1"
        },
        "item": {
          "id": "6f57753a-6583-47c1-bebb-3b0daba91d9a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "03b9d116-3604-46cf-9779-aea3dff2ae40",
          "status": "OK",
          "code": 200,
          "responseTime": 225,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "6107e8e2-a58c-4626-8555-822b9320a47d",
        "cursor": {
          "ref": "2595402a-6e84-47eb-a542-999a6bb46bc1",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "97169c73-ed76-4fb8-b66c-0bab7125fc3b"
        },
        "item": {
          "id": "6107e8e2-a58c-4626-8555-822b9320a47d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fc543ab1-a54f-4c86-bc50-bf3e4af2e69f",
          "status": "OK",
          "code": 200,
          "responseTime": 220,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "db44d328-0c68-48d3-bf9e-da6405142e3e",
        "cursor": {
          "ref": "7228c70f-6694-4761-9f45-efe7d923161e",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "aeaad656-dd52-4d16-8b4f-93416828ca20"
        },
        "item": {
          "id": "db44d328-0c68-48d3-bf9e-da6405142e3e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e7c4a64b-e50d-4b11-8697-d18f77e2d106",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "f1276f85-f0a8-4590-ae91-a8fe95b9cc45",
        "cursor": {
          "ref": "2d707f0e-9c03-4a7f-9b7a-aca8c527f9be",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "74be41a8-e851-49e2-9ef7-435ca7d5ff7a"
        },
        "item": {
          "id": "f1276f85-f0a8-4590-ae91-a8fe95b9cc45",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f0649971-54d4-4bee-b9c0-7cd831890079",
          "status": "OK",
          "code": 200,
          "responseTime": 226,
          "responseSize": 309
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "be6e0436-6de0-4acf-b199-dbbc650a17e0",
        "cursor": {
          "ref": "6267fb31-b0d2-41af-8dbc-ff608242d5f1",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ec01f088-1ac9-454c-8fa2-0a94dfdf7c22"
        },
        "item": {
          "id": "be6e0436-6de0-4acf-b199-dbbc650a17e0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "375f8553-ce6b-449e-b1e0-f82cdad89d67",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "aa4c58be-3e58-49cd-a263-7182e52f7619",
        "cursor": {
          "ref": "7cf7bc3d-604c-424c-aab3-50dab32c8266",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7dfcf0a0-02af-47f4-848a-7b28de81dbfc"
        },
        "item": {
          "id": "aa4c58be-3e58-49cd-a263-7182e52f7619",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d1ec172d-4342-4aee-870d-3d811d224a30",
          "status": "OK",
          "code": 200,
          "responseTime": 250,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "0f036853-669e-4253-b85a-aba878959eee",
        "cursor": {
          "ref": "622c9001-dc20-40a5-a194-d1c3f3f3b5d3",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e2d4c379-9cd8-4da2-a28f-64b7b3d9f4e9"
        },
        "item": {
          "id": "0f036853-669e-4253-b85a-aba878959eee",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "20e51f0d-1063-4a09-948b-0225c9cf54e5",
          "status": "OK",
          "code": 200,
          "responseTime": 247,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "67b302f1-b80b-48aa-9848-a26173f33198",
        "cursor": {
          "ref": "6c8121f1-949a-47a7-8cb6-08bb83e78709",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d96583c6-a603-4a35-b38b-2e630cbd08bd"
        },
        "item": {
          "id": "67b302f1-b80b-48aa-9848-a26173f33198",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "13b72668-ecdc-4956-955c-2795c55127e9",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "48257016-a9bf-42d5-8a16-3a1c1729fddc",
        "cursor": {
          "ref": "1bfc84ab-4a2e-484e-a276-26e6245f47ec",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "382e8913-35ba-483e-a45a-69443be457a8"
        },
        "item": {
          "id": "48257016-a9bf-42d5-8a16-3a1c1729fddc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "07eedeee-808b-485e-aa3a-2729d03daed9",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "1dcb0c88-b7ff-4c63-a1c8-19e2c93120e3",
        "cursor": {
          "ref": "be5e15b8-2b7b-4dae-9119-0a0473eeb109",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9dbc7ca3-4c30-473c-a2c2-b37f7bb9db30"
        },
        "item": {
          "id": "1dcb0c88-b7ff-4c63-a1c8-19e2c93120e3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8494e00b-7f3e-4995-a55b-92231fe8f8ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 216,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "aa5c5699-41a9-49aa-8bcd-36bd4275d35e",
        "cursor": {
          "ref": "4f9d1c2e-da43-4aa9-9ef8-7e79e717de1f",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7adcc626-a4f8-4322-ad06-5e5aa54c1b73"
        },
        "item": {
          "id": "aa5c5699-41a9-49aa-8bcd-36bd4275d35e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "47e7f424-cb86-4188-bd23-8da4009c09ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 219,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "9fa5b4bd-d7e2-4f72-97d5-c374332a1f25",
        "cursor": {
          "ref": "04910597-5393-4c7e-8405-54a66726f288",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "77bee7dc-5892-40c6-9ec7-bb3ce774f2b7"
        },
        "item": {
          "id": "9fa5b4bd-d7e2-4f72-97d5-c374332a1f25",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9153ed71-8bf7-4cef-8bbe-b696b436108e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 229,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "c1cd2d18-5616-4957-8237-7f111d7070e2",
        "cursor": {
          "ref": "a750b86a-01a1-4574-ab59-101c3262d05f",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fa69a27e-ad08-423d-a18f-624ce1dd2e35"
        },
        "item": {
          "id": "c1cd2d18-5616-4957-8237-7f111d7070e2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "34086f7d-fe08-4dd8-92b6-9d7e8c5819d3",
          "status": "OK",
          "code": 200,
          "responseTime": 236,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d0f410e3-c5c7-4e7c-bbe0-6243a6aa9f8f",
        "cursor": {
          "ref": "31040d63-6989-46fa-9ce9-bc175027222f",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e36c69af-b2f7-49a3-afd3-3c1485c1913e"
        },
        "item": {
          "id": "d0f410e3-c5c7-4e7c-bbe0-6243a6aa9f8f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "10ccd391-ad0d-4533-aed6-35400daee171",
          "status": "OK",
          "code": 200,
          "responseTime": 226,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "daa0f273-b47d-4c3b-8e85-2cba3cd053e6",
        "cursor": {
          "ref": "8bea691b-136a-44cc-bb4c-a583b83ff095",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1c61a867-f84e-4331-b7f8-88c804031dc2"
        },
        "item": {
          "id": "daa0f273-b47d-4c3b-8e85-2cba3cd053e6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "56616bb5-47ae-4d3b-8792-241d7dcec04f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 213,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0c45054f-60e7-4d2e-9659-86b01d53f271",
        "cursor": {
          "ref": "2420a1e8-a5a6-4e77-b680-8b9607f47664",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "05be0c81-13e2-4387-b1d0-9723cfc7c229"
        },
        "item": {
          "id": "0c45054f-60e7-4d2e-9659-86b01d53f271",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4ae89711-8f00-4bb8-8c4b-d3cd720c4cf6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 50,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 403",
              "stack": "AssertionError: expected response to have status code 401 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ab96e8c9-fe7f-481e-a30e-0c2d0d417fa3",
        "cursor": {
          "ref": "e7fb93c2-8a7a-4138-a793-65430ed92c9b",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "36eb7953-7f08-4d1b-8aab-efed5ed895ab"
        },
        "item": {
          "id": "ab96e8c9-fe7f-481e-a30e-0c2d0d417fa3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8efcc904-87a3-4766-87e5-d3c803888d3b",
          "status": "OK",
          "code": 200,
          "responseTime": 310,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c819bcc7-3010-4b61-b0ca-4cbafa693f57",
        "cursor": {
          "ref": "efa981a2-fca0-4b25-a9e0-88c4d91f83fc",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ac8806a6-03d5-4bd8-9819-991c51a14ba2"
        },
        "item": {
          "id": "c819bcc7-3010-4b61-b0ca-4cbafa693f57",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9295289c-4ab6-4b1c-97f8-178979cf9133",
          "status": "OK",
          "code": 200,
          "responseTime": 311,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "d8eab586-c31b-4795-8d3c-284767a9d708",
        "cursor": {
          "ref": "99a7b91e-be68-497b-8551-b4b615249004",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "005a3e51-a171-4f3d-84f5-d5ac29e9de20"
        },
        "item": {
          "id": "d8eab586-c31b-4795-8d3c-284767a9d708",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "53ef735c-d870-4740-9064-e7f10ef3573f",
          "status": "OK",
          "code": 200,
          "responseTime": 278,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "2317863a-780b-4865-b93d-f17d0d7293ac",
        "cursor": {
          "ref": "7e7f3350-6b80-4641-9373-010fd611c317",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5c9e316c-b25d-4b37-bb6d-1181e9ec8f3a"
        },
        "item": {
          "id": "2317863a-780b-4865-b93d-f17d0d7293ac",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "030d0e34-89d1-49e8-82d1-0efa9df913b7",
          "status": "OK",
          "code": 200,
          "responseTime": 295,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "6f84eb57-09c9-4adc-9ec6-5a25d27fafe1",
        "cursor": {
          "ref": "f2e51d0f-a972-4594-99de-dc1eddeb5c3f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "28390288-273c-4d09-b636-e2b8369ec858"
        },
        "item": {
          "id": "6f84eb57-09c9-4adc-9ec6-5a25d27fafe1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d9d0c09d-617d-4c0a-bb21-3102ed891801",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "6f84eb57-09c9-4adc-9ec6-5a25d27fafe1",
        "cursor": {
          "ref": "f2e51d0f-a972-4594-99de-dc1eddeb5c3f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "28390288-273c-4d09-b636-e2b8369ec858"
        },
        "item": {
          "id": "6f84eb57-09c9-4adc-9ec6-5a25d27fafe1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d9d0c09d-617d-4c0a-bb21-3102ed891801",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "6f84eb57-09c9-4adc-9ec6-5a25d27fafe1",
        "cursor": {
          "ref": "f2e51d0f-a972-4594-99de-dc1eddeb5c3f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "28390288-273c-4d09-b636-e2b8369ec858"
        },
        "item": {
          "id": "6f84eb57-09c9-4adc-9ec6-5a25d27fafe1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d9d0c09d-617d-4c0a-bb21-3102ed891801",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "4a9c4ce8-3c63-40cb-9b50-83b3bab59ff7",
        "cursor": {
          "ref": "3cd32e7c-e0c9-4c9e-984b-a9f3eda53df6",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "60edd3bb-2649-4ada-9979-d65a21b24fdb"
        },
        "item": {
          "id": "4a9c4ce8-3c63-40cb-9b50-83b3bab59ff7",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "255d39f0-1d2c-4efc-a85e-ef53e825669b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "6afa880b-53b9-49b1-9fde-f2f9e30f9b37",
        "cursor": {
          "ref": "bc25329b-cde6-49f9-b200-abc59493c973",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f57c19f7-e193-48c2-85ba-8b2f03658d77"
        },
        "item": {
          "id": "6afa880b-53b9-49b1-9fde-f2f9e30f9b37",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3d0a5cea-1135-4e6f-a0cf-7b665db84d4b",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6afa880b-53b9-49b1-9fde-f2f9e30f9b37",
        "cursor": {
          "ref": "bc25329b-cde6-49f9-b200-abc59493c973",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f57c19f7-e193-48c2-85ba-8b2f03658d77"
        },
        "item": {
          "id": "6afa880b-53b9-49b1-9fde-f2f9e30f9b37",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3d0a5cea-1135-4e6f-a0cf-7b665db84d4b",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "80f45dac-0333-4bf2-9b33-eedb0cc36c5a",
        "cursor": {
          "ref": "41146116-e181-48d5-8e77-4afc932c6363",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cc81c0ab-dbc1-4f51-97e3-8b1ef8b2213f"
        },
        "item": {
          "id": "80f45dac-0333-4bf2-9b33-eedb0cc36c5a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e0702618-17f2-47e2-94bc-7f2a90ffa226",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1b6efe41-c051-4dab-9362-4631c112ef3f",
        "cursor": {
          "ref": "8fac7d0d-0105-4e4f-b6bb-34de49d690a2",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a21f4a4b-59fb-4e1f-bb22-240f4db5cb84"
        },
        "item": {
          "id": "1b6efe41-c051-4dab-9362-4631c112ef3f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c2355c2a-5ef7-4ea2-afd6-13349c12e1e7",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1b6efe41-c051-4dab-9362-4631c112ef3f",
        "cursor": {
          "ref": "8fac7d0d-0105-4e4f-b6bb-34de49d690a2",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a21f4a4b-59fb-4e1f-bb22-240f4db5cb84"
        },
        "item": {
          "id": "1b6efe41-c051-4dab-9362-4631c112ef3f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c2355c2a-5ef7-4ea2-afd6-13349c12e1e7",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e4a59a68-bd17-42b1-b15d-3633ae5a3538",
        "cursor": {
          "ref": "280db025-6f03-487c-a0be-ab17f7aba081",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f3e0828d-5616-4193-bf59-2e8a4deef3b4"
        },
        "item": {
          "id": "e4a59a68-bd17-42b1-b15d-3633ae5a3538",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "11ab71a8-4fc8-49d4-b5c6-656b65764040",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}