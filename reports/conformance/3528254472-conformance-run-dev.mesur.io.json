{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "df9cc030-046d-4cca-a8be-75f2b0bf7dd5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c7c04825-1721-42e5-9621-da8c3087255c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42ca65a4-e2f6-4556-addd-aad99fb9ea6b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6e294992-c861-4fbc-8723-bb2dd127197c"
                }
              }
            ]
          },
          {
            "id": "13821fd8-13c8-4367-86da-3a3b8c31d386",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1923ac14-ca1b-4e60-88ca-e10e6d8c1107",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a261cf46-9105-4247-863b-aa703d280885"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "752d6394-1c33-4cfd-90b9-ad8f81746945",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "819f7d5d-f8b9-43f1-ac79-e54807f7fa2a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "21deb0d7-f494-4f03-aef1-febef81282f0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c22b002-ffd8-45a7-b31d-6e4ea671372e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd038ccf-a58d-4517-aa26-9ba70be6cefd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ef2ec4b-c013-4d89-9fce-5f4219bce9b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec95dc3c-d6e3-4e80-988a-3a4472934494"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "31ab23d3-d76d-4bcc-91b3-545fb25ddffd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4a3cdbf4-91cf-4e2b-a25d-55e3265cc520"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98777e42-0198-4bfc-b7e6-07890085e30d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5b6294bf-5bf0-4abb-aac7-e4ba1081fd95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf6a5f23-a7f7-4a11-8472-3e90838015a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7808bb7-ba7e-4bcf-88e5-0d0c74654d53"
            }
          }
        ]
      },
      {
        "id": "2bdf484a-28f3-481d-a0bd-0f3cccc0ca39",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5a8fb5f6-1f6a-4e3c-a553-554adce3a455",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84b0fc3c-5ce8-418e-97d6-db5cf84bd5b4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "df90d216-8f24-46e3-9e3f-d3c7bb5bab56",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd20395b-d563-448a-a1a2-2f4b8d27dc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64d82bd1-3104-4695-8ea6-50c1cf3232a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbac3839-3e5c-42a1-84d4-e828dad6708d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a87cf38-7d23-49d8-bf49-5abaadb22325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92c9dc53-754e-466b-b286-8352425c2dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334dc572-b39f-470e-9d7e-51f579401705",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8302e92d-a61a-431e-8b04-c82dd02d64fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a031fb6-e02e-4acb-b30e-51b6ac73886f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "296963a1-a757-4a02-a116-c7e022d62f51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62d6aac3-c293-40fa-ba62-eba99ecea406",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154860cc-0079-4e12-8f76-b995560c9443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81b14f65-9a8b-404c-aad6-eb62d23ff863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2006b237-3d99-4a91-8126-795dc9a7550f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689ef3b7-25a8-4799-ae70-e9013a391ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c980a6d-101d-47f2-9096-3b87bf8abe18",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c469563e-2f43-4d88-85eb-60cda53a5156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23edf477-1e66-43a6-bbca-d79caf0cba3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca103850-f108-4f41-80f5-825d317b2905",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "046d564c-0598-48e2-a76b-241750d533d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ce0e0f3b-82ac-40fd-9838-d42ede2a0b60",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f90ff70f-6955-47c1-83a2-631f97c1a5d3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50687992-891a-485f-af66-8b3adafbe6dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c05e5abf-d9c6-49dd-8345-b8eda39d2117"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f8f0823-e922-49b1-a8d9-f3001eb5c951",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "00f70110-edfc-4b32-92b3-b14e4f62a39b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0069fe8a-4164-4a89-b0fd-77209e0645db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16780d18-9cf7-42a4-bc87-227b3fe409b0"
            }
          }
        ]
      },
      {
        "id": "48d918d3-2c21-4ccd-adf3-c3e27f691c50",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b30ef180-ec05-491c-9c5a-e0c6f43cb577",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e84d26bf-b2dd-4461-9dac-5c982a985837",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0b236be9-4cc4-43fc-8432-49b0d0b40ada",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c695f32b-e351-4a01-b7e7-f60f85663c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3860ec75-e33a-4b80-a6a4-5f51c237760d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f561aeef-6ba8-4a3d-bb8a-f9f0dea31e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f599dc50-dea5-4e8b-8330-14d100358709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39513a1-cf78-4696-bfb3-b8c8ea29e9d8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12427f6-7a48-4560-9ef1-d0183837efab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1808a836-0dc5-4f6d-a0a8-d7affc8adea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a28321b-a961-4155-a42b-e38a72dae440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18f42fb2-970a-463e-b091-2c9ff24a23ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0120fef0-5e3d-4b28-ad27-f5fd95c4098f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1a4671-58e6-4671-8cba-2e398683c539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0533737a-7086-4480-be15-98ac6afdefc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6343d0a4-fae5-4d46-aef4-cdec609ec2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fa487af-336f-4279-8ba6-9fd944174e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2001a49a-cbf2-4135-a4fa-a2616e85b317",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecd2459-467a-4c55-b766-9c79a82209c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f27188-31dd-4e1b-8d08-79b015931074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415a4bb2-ffc1-4920-97bf-dde7437f9c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f9d84f8-099e-4a38-80a4-18da46611c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a2e584-cad4-4ab2-8e3e-3c4be278e5f6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62c404d-741c-43ab-9270-f3328962b2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7388f120-0c21-4a5d-86a3-6b042b0dee30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41652a9f-fb05-47f1-8a8f-9fba0ff63094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8531dc18-2fe5-4348-b4b1-be1d5692582a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4c4fee-a663-4323-802c-e05dcf61fed5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ece5bdf-90bc-4de0-9fdf-88c1cbadb82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c675f70f-36cf-4ad1-b87d-69406f172c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540eb6f9-ca7d-48a1-88da-441a976474db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5651831d-4875-4619-be26-0e741c528800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e44a63f-ef6e-4962-91f2-e01d1bc8d0d7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fd6eaf-fb1f-419d-be3b-b75fa822d7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e2326df-cd72-4f81-bfe4-b6469c4ed82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013bc2d6-f256-42da-872d-b628484fdcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffb9df10-7d39-4c7d-8e03-3d916691abb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe61fe4a-508d-4bdd-8e14-67da9cea6590",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fc312a-a117-47af-b214-1972e316487b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2f7a5c-d286-4af3-b9da-e6972fa8f0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941e92e8-2e28-4faf-94a5-40e1adfc58c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cccc57e-7cbb-448c-a254-9080394dd79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16400ec5-6272-40ce-bd98-03c0dd4f5d26",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258bec91-1b31-4117-b160-a27f5f9abf08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f89d5ad2-da7c-4fa3-8bde-6e8f605aa043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f28193d-22e8-4e4f-b7d2-a32d32b7f41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18e1e07a-0f41-4051-a5a8-e58989e26689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d11bff9-cc51-4df6-baf2-b23e3d74ca3c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e363d1-d67c-4c06-a9c9-b704d6d0019a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9d780b-7b24-4de6-baab-3ddd5266d916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ba0266-1501-4acb-9991-6e42d04b6de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "456adbf4-44c7-4c52-ac9e-fd2732ce4492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfad2a5b-80c2-40ad-a722-58d03e5d6f7f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbce2e1-e326-47ee-b7ea-fad576b3d251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb271c15-8849-4137-b899-e03424ff052a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1591b40-6476-426f-9592-c787ef08d574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2feff471-e77b-4b44-a1be-3a3720abba6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567e7908-1dec-46e6-aff3-1a2fe691472d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a81be0-bd1b-44c1-8357-92ab8e2d6c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d9e756f-f80e-4d77-baf6-2242affe5b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83829bb6-94af-4a74-9bd6-0573b718fbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dc9e0b0-5bbd-4994-a416-a66e011be6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e22403-ea36-466f-ba64-dc349efdee8d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb893ef9-f93a-414a-92b8-d2ccd7950ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca0c428-2f0b-4985-84db-52ddf6fa4855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9575bf70-7107-41d9-a883-6beea430129d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da18ce0c-7e7a-4c70-a104-42177c09aeeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf61016e-2815-49b7-89aa-5dfc63706b1d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcffd61-c7dd-4d96-a2e0-d71e477a63a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0046392-9c3c-445e-88a1-d82256cafeb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623fd4c1-4122-4ece-bc6f-c31532fbdfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d43373f-d299-45e5-9541-b06f24a45141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36deb61-1879-4b18-acc4-9b3c2cad29e4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c554ed-1c52-4733-8dc4-c96792199d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e6dfdcf-abeb-476e-a939-38225bf45b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775bb9f8-1d7a-4bf5-8327-12b5c8e9d8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5519363-3009-4d93-bf1c-8d899ea51a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd7f33b-dfde-4690-9083-732fc789b922",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab97b4f8-dee5-4fd7-a228-40274444062c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5586f8ed-8d8c-4957-bed0-64fbc9fade97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68172ee0-8f37-4847-9e75-31f72883f86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "129ea471-dc6e-434e-8e32-89b2bb1c386e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe94386-f6f6-4df8-90a2-5dbfe4907068",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bfb641-0b5f-4134-82fc-def269d08ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da72a63b-3ca1-44be-b265-150fcfdff4fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc4bf43-0973-46b0-a1e9-10bd9b404745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51759db6-a509-44d3-a9d5-19c6aa7d2da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51fd0df-ef91-430f-989e-423a366b941d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c4dc78-9316-4258-853d-7870f8896443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88c3009-971f-4d26-ae45-287b2d5526dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b8b0db-45af-499b-a4ab-98e814349f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d91ea5-e818-47f1-893a-5f5a31ef28e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0367ec7d-4016-419e-ab79-1c9ebfaabfca",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0930a7a6-0c08-4a05-b59c-8d161a20e2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f16d86ab-40f4-4bc3-9ee7-eba6e83ad364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93c610d-2bfb-4f90-a230-c5490d9f0595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee10b5f-c7a8-47e8-a87d-adcd0503768b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3329dc-8bed-4a4f-899e-4a9980467c45",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3adb2789-d6f2-4098-9718-d007e7ff86ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de61db31-7922-4861-8bd5-73b2b149db3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce9a726-ed57-400c-b246-2600e803324b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e31da870-36eb-4d51-8a00-abca81005235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd89cf32-9d5c-497a-b7d7-39df8e0c9953",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed86ca2-a94c-475a-b1d0-91a6f1f75710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455ac5e1-9132-4e14-b576-9d68ea4a1109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f99713c-78f4-475e-831e-17777368f2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "369e3b65-f089-445a-adfc-d3d91782c5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78457ed2-1bb3-4c67-a425-26532b257117",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db338462-ef20-4832-95f6-c03799bb9029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69bacd9e-cd01-4bfb-973c-b44929ede5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c8c8ec-c7fc-49a8-9a9d-e77e6757642e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f78feed-24bd-4b08-aad4-f59472d0681f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde957d9-313d-415e-b5b7-8e37b58912ec",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0410ffe8-2d9b-4326-b392-33d16cf14031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9e72e7-8dfc-4403-b1cc-344f9e566266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4c8d89-c0b5-497d-9b45-074be6dfadcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1826d7a-ce29-4047-a8aa-a232b5f7cdcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77eaf4a-5e33-4e99-a40e-8ade8c5b310c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8d631b-efb2-4c28-a5b0-69c82b0877cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b9caa9b-4ace-4b27-94b8-75ed8b218be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7faad0-2c6b-4401-95a6-434ab572e883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f09e29fc-4ade-4549-83a3-e0d7dd8d4cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fa6a37-b640-4313-b423-428b71f16f2f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06b2a2e-afe5-4191-a6b8-6ed342787f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83784239-7852-4796-bb24-cbdae23c2fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b7a186-e70c-43e5-98ed-d1ddc5e0f17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "45ce431e-801c-4acc-aaa9-fa558f5a18e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01611ede-f665-4faa-a9a3-9e9bad7a5897",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2f6656-5552-4efc-abb6-482ff6de2600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f76024-cd68-4cfe-9b2b-fb6c4110fc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e2e01a-cf08-4882-a3db-688805f32381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "485493a3-6464-4e42-856b-ecdf72637c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e7685b-0a84-443a-826e-7ad5113570c1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36139bf8-bcf8-4db7-a8ba-2202a2edef07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dcd9aef-cdd7-405c-993e-7bb0a5980eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac67363-b615-49e7-8116-92fe586b45e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f05995c1-9370-4e4d-b9c0-4fa1ac7972b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820f2d26-2d60-4436-a315-31ecf0b67898",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67cf403-e15b-4cb4-94df-786cfa139728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "392ca1d2-d06a-4f0a-8570-677160fc6ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16909e4-e0b6-43cd-96c3-b2347e36debb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "909d13ce-483b-4b04-bed3-597b3b0c36ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309c6498-9e00-4b2b-a19c-47c8438f0dd6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98395d96-8230-4153-840c-c71347788c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5ad490-a3fc-4ead-bb0f-c31fee310eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3d2be7-0e1a-4add-8670-7ee42639397d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "93c178d0-e347-42b6-9561-f0379520046c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39444438-ea47-4319-b444-f95df1585688",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b5af54-7a6e-49ad-b969-813cf70bfd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb5b8ea-1df0-4fdc-95dc-0ef70359d428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c502c38-2872-4918-9f6f-2d7218ede5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3b1c1b-a098-41e5-aade-6be8d8b8e8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b831ac4-e8bb-4cb8-b67c-80ad947e7519",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79397a29-8ce8-48b2-b941-009b7202ca89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36c4df5-c27a-46a3-9f40-3324b8f55da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7878989-5bb6-4d6c-aa56-ec07aa78bad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8496643-d9fd-4c92-a28f-fb9ab9829c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ced05c1-878f-473d-85d6-7c22cf1bcd62",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d40f6b-8827-47d0-99c1-f534ed71322c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5907a023-58fe-4a2a-8832-68228e8c88c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17366f7-3494-47d5-88e8-a26150c566e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6dfad6e-e256-44b2-8b6d-a185ed36b373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe8d6f1-2019-4afd-9aea-61226136d021",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733dad68-767e-422b-a5e9-74389ba491af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48dd0a6-4ae5-442e-abad-6a2e8a27cfc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ac4f75-321a-4291-ae14-e4cf7aa3ddd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47d1ef24-7bd1-403d-bee5-2d7f78ae5c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedb39ff-ad7d-498d-8c9a-c212e899cb43",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3190227-e70d-4244-9213-848562add33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18b98fd-f684-4aab-8c30-59f7c2bc7add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bb4efb-e12b-44a8-b3d4-2290f3018496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66dfbb90-c056-4560-8cb6-b11ef7049d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414aea3f-fc4d-4cd9-b8f8-6d23ec525d49",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b230604d-fef8-44ef-b9b3-fcc0409e5572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c4035e-6277-4ec5-b6f9-13a85163e0fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecbabc9-7400-45ae-9658-de478cefb1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ca8eac9c-a09b-4a06-908f-8f0d4596ec01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295b8b33-ca0e-40b6-9dbc-d2d86ea8ab5b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca27dd3-669a-46bc-a6d8-4094c1f2b033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6dfd644-3b5d-4c3e-963f-1667ea39284b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b902b00-6aa2-4386-83ce-9c4c5e5ae41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "162c89df-c3a8-4f1a-b879-6973ff45f6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff7a0a2-3674-4ce8-9391-a8ed831fa765",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee72b8d-7dd3-42d7-bc3f-ada6a3165cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b58f203c-dc39-4170-a5ea-5e3e1b048cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c3d504-5c99-4cd1-99b8-189ca7a324ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f935ff7a-fa98-435f-b081-46ac0bc51bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e55ff0b-3246-4276-9c4b-8d6bf7e58aa4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44cf1a0-2e94-4100-b16c-52248070d3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a6d32b-04ef-4457-b9c1-c2a93fa35424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c7e5b2-c590-48d3-8b89-aace733ebe87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bed298f4-d591-4826-b021-31a851c903d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc52683e-e2a6-4fae-9ca9-1ea01f424167",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcc59f9-c623-4c07-ab54-a63da6b5565a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24b2310-e434-42ae-8957-32e126ab11eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826aa41f-3b6a-4f7e-82a7-569dc2557291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "edf30411-c71f-4996-b710-ad6cc7caf9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547cc1ba-be07-4ad6-8c38-693201bb29bf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0d40f2-73fd-49da-b45f-0944fcd22ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895375f7-27e0-4ad8-9846-b608ba22983b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0962d4-d00d-49be-8ab3-abe89814526c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8030adbc-8fe9-49c4-a2fa-630cdf5172d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48792b1-6d4a-4905-8a25-a72e6272c6ea",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c22935-0e40-4dea-b636-14f05bebb8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641ec24d-5642-4546-be2e-5a24cf548b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7129c5-fb28-406e-be69-9d1dec201dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "20b9a4e9-f8f1-4b57-8bb2-e8090a49a56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78e93c2-0208-491d-8874-906928dc6fc4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62d94ff-4a52-4ee7-a733-6fedf41077d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf3ba20-b27c-4fa5-ab90-d306c3d50576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cd3057-27d3-463c-a559-d279856724f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b1194646-44c3-4c55-a399-ddff59d61a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e603f2-edd7-4132-b01c-43fa47aedd9a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c315068-2829-4a1d-9273-17cee23774fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc619a1-c4d6-4b86-b7d9-c97157e98e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec99ff4-bd1d-4b29-b709-95c5b9d8d5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6fe3fee-2539-48f2-854f-eeb897272056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33c948d-e34c-445a-b836-16b9b5b176c7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd584a8-d563-416c-934a-1293674bad26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea73537-5a28-4ec0-906b-4b8be98d1fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4913bfaf-eb25-4eee-afae-ecaffbfb8e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc47a33-d0aa-46aa-9cb0-e539dda594f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a49a0d-f15c-4aa1-b41b-5059efdf3eb4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61ddd2e-d5ff-4d13-ae6f-eb0714128b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6def2940-8048-4284-bfa8-4312eb478dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179d4e11-8c18-4f85-b356-7d812ee2d80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b74c35d-5b01-4c19-a7f6-87bf3088081d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feee3dfd-6a6a-4146-902f-2af6677b512b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa0e6ff-d7ad-4913-8afb-597620fb8f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4540ad75-115e-4481-a550-8ba804895a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bb66ed-e050-4fbe-aa38-a9b95e553f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e85fbc95-6993-45a3-b388-f10e0fc3d1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56a6045-c966-4901-be1e-79e4040fec70",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844921ea-01eb-4c6a-ab90-ca5f250ff598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50387d29-8ea3-416c-bffa-1dde25ee33f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab45b1a-d094-4b05-99a6-397c15799bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3f490e-ed5e-4971-b25b-07be543febcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ee04c1-4068-409d-bffb-0099c3a4d3b8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892ccdb8-4c22-4fb1-8019-265cd13b9084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2063b8f-f27b-462a-bd92-7bdb8e000df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23aa0f7-0405-46ff-80c2-11631e9b84d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "454577f2-a24e-4e55-a6e6-5751d4c2201e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e23d75-e0bb-48d3-b379-495b7b814f49",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bf5528-1ec3-4023-8f26-b0aae19b6227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56287e86-9788-4887-96fe-e6a60bb492bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea0ddfb-b0a4-4805-b3ff-5f4a16815493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f2287b-f634-4404-af32-0acbbd0c283c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9e8a48-197f-4ebf-a120-a07b14761af1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d453b0-c375-4a38-ac39-4a7db1200314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dcadc01-33e4-471d-8da0-60fe3a315fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bd4dbc-942e-4e61-a63f-e8f3280890c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "260b2d18-3c93-425e-8dd5-7c29be6eccd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f2f292-6645-4456-867a-31931529f888",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c033906-f628-4b75-b4ae-fb504b4ef819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c7c641-4508-4ed6-ad5a-fd6bc05bfee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fdcdae-39ea-4e7a-8c31-d95dbd2db487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8511893b-7438-4953-9035-f0b9e2bb9e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a60c82-9811-497d-8450-22b5acd80db5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b95a3f-1237-4594-b8e9-97466da25b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d72aaeb-d99b-4bc2-a57a-00b70bb09965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77467971-59cc-4107-8cfc-b445b6c4b315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e823e2a0-5dae-4725-8871-2e32d023da7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e26d5c9-3caf-42bd-8cd9-6288d9e166c6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d55fda-7c14-458e-8d3a-036fb65894e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc466b1-4cb5-4830-8906-c2af428053a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647e7620-5cf8-4ae9-b200-969c553600f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2434cefe-3ce1-4ec2-919d-35e0940e4c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37271b41-dd57-46b8-9610-7dfe98db636e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459f4a7c-868e-4f7b-877f-d4443d97c4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400d0058-a00e-4f47-b3b6-677da4116720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e01f63-b9f5-4c76-adbf-8bf270935820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "890cc49d-a12c-4f3b-9869-f02a206c706f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9082a09a-baf8-4ae4-a2a1-309dc30e2de0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e42579c-8a14-4a41-a7b9-5de75d778799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60a3a68-f961-490a-bd6b-e8f3d286e87d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55002028-49e4-4f32-8072-d5c5765fdbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66153854-82c3-4600-9151-9804eb039b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb9ce05-c6cd-4598-9eba-71abfab1fc95",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "296662d6-dbc0-456b-ac64-778a9b58fc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5935cff-d8ad-4796-be46-c44208c25c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b71ae5e-a694-4c90-9fcc-bb2e1fd08a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "27013dec-bc9d-4b6f-bd76-be459b9687a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd8e967-c84b-496d-92f0-9e1a97b29045",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7386ea33-4e28-44de-9c07-84b549cbee3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5de27ea-456f-46b4-a8f4-745d47ba99a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8a5338-0996-437e-9450-c0f87d8c5a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45fb13c0-6c7d-4177-b582-4c097f2857a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbdb5b2-afd4-4aa8-965f-3e31674dd909",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e441c2-5b05-4aba-b03a-a3acc54368db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e61a67-115c-4a5d-9651-0d8513447c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e08f735-aa54-4aa8-9ccf-b154e34afeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "afdb8d96-62e4-4f9f-a233-255ce56e8cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e36971c-1409-4aba-8931-a088a8f8638e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50695e61-c713-4a16-9d87-7101524066cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18e585f-dd8a-4025-a857-cb528580b5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f324b2-b00d-490d-89d1-507a81ee432f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7f982f6-131a-410f-b505-4524e47187c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43770f22-2091-49ba-ac92-f6cd7b507344",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0922e11b-89f5-4f02-93a0-8558ab70f590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569c1e34-a81d-497c-9b2a-ab81d1cb645a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ae78d8-80bd-4cb0-8afd-ad76979ab81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "49283bb5-8029-4d63-b68a-4b0d1b5101d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2466ad9-70dc-479e-ad9e-0816265b7da7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a33b09c-652a-4899-93c6-990d3fcc42a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6af1402-7414-43e8-9d8e-5fddcd515d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80840d6-3066-4f58-a38a-cc87f39429ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "29b87419-3d27-434e-bffc-c5f50954d055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bba6a90-13ad-4679-b821-b3fe29299ab1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f6a174-f32c-4d46-877c-00bc3f947859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77367abd-861c-400f-aabf-1b9efdf71c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41704a5c-b6fb-4198-9b71-191629a664b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa6cf8b-9ee6-4dcf-8592-5d86690ae1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc77f08-d8f9-423a-aee8-c1615dd9384a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11489a61-59c6-488e-bc82-5c62635aecf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54497ddc-d739-468d-8634-2f26145fb72b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1950f438-10bc-491b-8752-3064264a685e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a041fc00-bfc7-411c-a5ee-f9d8a63ae9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3da9a8-944b-41bb-a9a0-436f0efc6a2a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4deeba1f-d0e8-400b-97aa-a7aa50192cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c8dac0-e5dc-4c54-b135-6e8eea9bf49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e188a4-88c0-48ee-9a7f-99e7074ab6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84e6a5dc-6880-4008-8ffe-45ad59511113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c83224a-e559-4e7c-8c0b-ba3b61293e85",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3af210b-1d0c-41e6-923f-768f268dfb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66978e8-c8ae-4686-8f6e-3e607a4dac76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0903467e-46b4-4f7d-a49e-20e862e62da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1acb35f7-1aff-49d5-abc6-fc177a5add3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cc7a0d-eee4-4386-a058-ceba0924c244",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995f6f75-1534-43fe-8110-d221c94449bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81f9b4b-4e37-48df-8603-33639dab7244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9460231e-5f9e-42c0-93be-683a22d0cc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "203802dc-d683-4822-915c-51f0bf307539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccaf01f-fd4b-4199-9671-1c9b81f6dd27",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c462bf4-8d86-44b1-8cca-06e7aeda9ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e75ca65-f03a-4d44-999e-bfc65370c73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6886d72b-e8ac-4f3f-a99c-40a08387e17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "772cc005-9dde-4735-9789-c3b6624e9748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65baa810-2da2-4372-8f8a-595a03fc263e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89179403-8b3e-42b9-9539-00665aa02937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d465f0-2f92-4c70-9e0d-27cfbc308f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4565c7-6b10-4649-aca9-e1341e8d5153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "49f3f018-7199-476d-8f74-1d6c99dbe3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbb8cc8-a1e2-4e23-bd66-3ce415f757f8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc9a810-8ed0-4cd2-94a9-2c93bf0d47ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa4e596-5d82-4d07-8c53-34f0ad23df37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed8d2f5-dad4-41ba-b03f-f86a9cc42076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "876fa6d6-75a9-4f80-abe3-ae18b0850022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c87cc3-8fe6-4af8-83cf-a16f19b8f7d6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbd5511-8fab-4785-86a3-5614dfffc826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b7ae58-cdc1-4d4e-a931-417044667ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a8f698-3deb-499b-a4a9-0fe2eb8dafb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4574e891-5baf-44d6-9baa-788d1b7a5227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8172dd48-c967-43fc-806b-ea137121a400",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e93211e-8e8b-442f-829c-592dd535f562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d9b15b-d1e3-49d0-a0a7-9bb2beac490b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe65e7d7-b81e-40fd-855c-4076f86cd9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e47058ea-36aa-453c-84a5-a256b592fff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efba8029-d8c2-4dc4-9595-2654400dce7c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2b9554-6ec7-4736-9b8a-74a3e303ad5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f32972-ac45-4a00-97be-b440edef2ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401cc57c-09e0-4e5f-8c1e-4252050aeba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cddeead2-ab3c-4de2-b5c7-2383f72060d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03855c1-ab6e-4b1b-9419-5f4ae285f13a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082454bc-7895-4684-8fbe-35b6885a8d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485d7c86-6c1d-4628-8ce2-b4c407f06c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f01ad7-e697-4c06-a41e-a3dfed12a7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d49d930-1b15-4f46-a018-b02d7f310868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c870e6-3c6d-4f9b-be99-d2f47be67af5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfcf76f-3942-42bf-be09-be40bc3f5aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a861959e-4854-4ff1-a45b-79d6292f2cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddad453-15ad-4339-b3d2-1cd552bf9043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "392bdac5-552a-4189-b092-5bf3c009a097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d7aa2a-6697-4ed7-adb1-e24adb897b9f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a12189-652e-4174-aac0-a32c3bd11b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d0a046-56a5-4fa6-b31a-4799b6d971bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52f2f08-150d-45cf-9ac7-df802910ff62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "27ff8ffe-9de9-4bb1-b62a-674e4824d6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107b5a8d-088e-46ab-aedf-a42b19c2f1dd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c3aae2-1093-48c1-a429-22cce5c77347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6bfdbe-2b8e-4195-8d1e-85d9f745fc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681d479c-669e-4447-88c0-d7906f86e60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1cbc46-2924-4a85-8cb0-ebcb491d60f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628ed638-433d-4abf-8236-0e2d40b534db",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e779d1cb-3130-4ecd-b31d-7a747e47a844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008e20a9-6829-41d8-8bf6-72a19df5043b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab05f9d-8809-4de9-af78-1ea437520c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "75584bb2-584a-4c97-869d-64465446b5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4ff11c-6fe1-40ec-9789-4f573cb28cca",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8bfdf90-1876-4493-9942-e562299ffe87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15825691-d287-428e-bab3-526d5dfe75ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c2249a-f344-45ba-b6df-eaf24d8e7f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31d05bfe-9f81-4b4b-806c-2303bceaf8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beaba7dc-08d4-429a-9878-ded59bc5adb5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b34e70-5643-450b-bdc8-5d0350e3c2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1313ca20-6b0b-432e-bfc5-2fbd6f992267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ddfe11-c5bf-41aa-9563-7fb67ef70f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92b6a89c-e7d0-4803-b899-ead315d6a367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b4fa61-5cef-435c-be67-437fdce53f43",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e5f5e0-b9e0-4770-befa-97baf3c24e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd857f06-113e-447b-ad62-9fa12bbe727f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10efe07-47fa-42cf-beec-d79c64691271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d30de59-e40f-46af-bd5a-98ec516e7dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40394ff2-461c-4fa5-8b24-e9029508d966",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb2e9ad-343c-47a0-8078-7fff8e18621c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b44b606-46d1-4f24-9189-6e5ed78464e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ff30bb-b92d-4dc3-a365-c4c950f3f6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "78390307-05a9-44b6-a13e-3fc64539496a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7a83f7-b8e4-4db3-ae74-ec018b0e8a09",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cca273-dd3e-4b8a-a8ad-4f681a9aec40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b079acbf-f049-4b96-a426-5f64566666cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef4a53c-cd4b-4dd6-be67-df0b94b9df9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec05aba-7a50-4d95-9be9-0b7971dc09c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b336fcdf-38bc-4e17-98bf-2fe3fe302ace",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9073229c-3b93-4ddc-a691-0fefe0c041e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0128d93-4313-491b-9345-11b286f94d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0efc00-f42f-4c94-a8d6-f4e3e2d46088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d70595a-5df5-4197-8e3e-c2da99bad942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00f2846-4118-4d47-ae38-7f217058a235",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b33b681-f617-46c2-9041-6fbd7da6fe09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8fa0e8-4857-42c1-9015-b24c40bc9591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93f4da9-d5b5-471a-a3b6-1a4a5575cf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c96aea4-736a-4a6e-ae55-23885c66adef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc37d4b8-8abe-4d07-9a46-f2a49eadcf1d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2050f7e0-7400-4e02-bf63-24e8a8f78e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfbae79f-7931-45a7-8856-cb20e8fd4d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588efe44-6e34-4324-a445-c791bcab291d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18effbac-5b06-41df-81f3-205b60d1117e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6025adc5-8d07-485c-9157-6ea6587118cf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16ee89d-47d0-4f7f-b0be-129383a495ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560c19f5-ff5b-42b6-b633-649395882406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b1c045-5f27-41dd-b743-6eea7cac5aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe03901-a3fa-48ae-a016-1ca39192f7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9733139-b099-4534-b209-11391663d38c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91cf8a3-c8fd-4580-9e16-d271c246e97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad883531-fcf4-40c9-98c0-a9fe52e8bd95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ed5f0c-9b1e-473e-8474-00e2cb40cf8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e583e35-6da9-42a4-bf54-114fff1b17ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084b2aff-d200-4273-bbb5-013ad8eb7c72",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c2782e-4d30-472e-8a57-b59edd5b5a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589553cc-620e-4ed3-94fd-bec2b1883c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144ca1e3-c655-4b36-b2a5-4c1f244bf884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf98dc3-4d04-4561-a688-e0d5ff4f751a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6265843c-384d-4c4c-9888-3c21ebf54b05",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746f6d34-01a8-4377-a683-ff3b1cb6a5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af33f9bb-51b3-4a87-b1ab-1397dbb619e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf97e45-8731-4d7e-ab80-85d5b6584774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb5c2f3-58ea-45e6-83c1-8a0844da3091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836edf1c-bc64-4e4e-a81f-e56a1d275456",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d435d5b7-48d2-437f-953c-1448cf222c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824e53fd-458c-45ab-bdb7-872d0ad46be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0944b33-eaa0-438a-a79a-4754fb3b7011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "40bec81c-c625-4b98-91e2-d4afe9312c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8ed8cb-4f16-4f64-bbcb-3914b4e58b18",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e138377-b7fc-4ecd-bd93-1d79087f5aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d13f1f-e215-4a7a-af40-f5904c381721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8107f5-0672-4af8-b68c-f3f3653d4281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bdb8e0b-976c-4935-82fb-eec81ad233b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c5bd1e-6c44-41f8-b052-42bd702b790e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1aa02de-8e11-4fdf-8255-daa7fa6ce319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cadb0e8d-afbc-4fcf-9836-1fc163cc6856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4592da7b-6bcd-4af7-a2da-93637ed6d988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7740e55-68fa-4d6e-9b62-148d66f4ed36"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6208a936-8420-49a8-bd9e-faadba8e4273",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b134d96d-e756-4341-8530-cf878524d1a2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990a0151-a9ab-4e80-b211-7502e414d6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51f4c69f-6ea9-4ed2-8bba-f1dc62a38616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2584cf6d-b02b-4004-b8d0-46c6601a97a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0c4c008f-5b65-4dc2-90bd-6ab9abc61bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95134a11-7ca6-4fe5-b172-d8f7bccbb0fb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9ac842-886d-4188-a9a2-5b4d1b8f2238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e31401b7-cdb9-4679-b0cf-a5d8b4eebee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068ff1de-a405-4460-9e90-4cf066ab05c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "99fc279b-02b4-4ab3-baf3-d4485e58c038"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f78326f-c7ff-42bd-9f42-831ecfaf1fcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f126474a-777d-42ef-9cf1-818f697e2c8e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afa26082-af6e-4681-a0de-62e81dd797b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdcdb7c2-b4cc-4cff-9aa9-c05d9deee768"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e927909-0ab6-4c11-b8a2-ada2e11304ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab182a60-024e-4314-b728-487e4aa00624"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b67af553-7779-40a0-9e4a-b13bfdac03ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9105047e-18da-4d57-97b1-d31384d69082"
                }
              }
            ]
          },
          {
            "id": "045d3dba-e7e4-4189-9913-4cad2fb29c0a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b4a3b77d-67ff-43f3-9e2d-736fb2136055",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "050cc9e6-aa45-466c-9fe4-012f5326c554",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c9ef064-4435-4335-9375-fe8a0a60bf47"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "caf5cfb7-2522-4f7a-8d37-dd111315c519",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "053d086f-ca7c-42ba-8a48-803360229b6d"
                    }
                  }
                ]
              },
              {
                "id": "aa81ebdd-da8d-43da-97dd-bb28bcf20f5b",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28dba88d-c41d-4a78-af2e-0af9857a3d2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "acb3a62e-9990-4bc8-b3d0-11d729eb394a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d5b09a9-7846-47a8-b00a-ab4124ebc6c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "83cc3bc0-dacd-4c51-9377-252b1aad4b11"
                    }
                  }
                ]
              },
              {
                "id": "839b6526-709d-4027-9e7f-8cd09834dff8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4e33262-3853-4184-be53-68d00556c92e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e192c783-ec70-4b92-94cf-e59b3b91be31"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63e60f5f-a44b-4d52-ad5d-c206ea1ebe2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd47e7f0-079e-43c1-9d03-650285ce005c"
                    }
                  }
                ]
              },
              {
                "id": "2d4b583a-5e9a-4294-9d22-c04c81fe928a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc77a2df-5f59-457f-b18f-04b085c69946",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60192a0a-90bd-4829-aa0c-a8c726bae441"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df85ff5e-57f5-4993-8bd7-ee45ecf8a6b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "378f3552-0877-4961-9c8d-87a35294fd95"
                    }
                  }
                ]
              },
              {
                "id": "64eb0c3f-f247-4720-a2b4-0b49bfcca676",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d69064de-4651-4376-bdf9-12c94cdc05f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "189fe125-ad78-41c2-af6d-a373ee7015fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93b624d8-342b-46bf-8a30-bbe07cff8ec8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e2b42843-9b5f-467f-8e94-350155cdc2bd"
                    }
                  }
                ]
              },
              {
                "id": "82bce366-3053-452f-86ec-75791c5fbb39",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a49bfb85-42d2-4ef0-b070-4db526a1f256",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a51c348-d205-4bd7-b49d-ad2648691826"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91cf62ca-709b-4ec2-962d-a26ba4141820",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "27d8eac7-5123-4c19-aff2-8093a2c3f063"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79d66a0b-0ca3-4967-baf8-cdaab150a81c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dfd0cf75-d1ee-4a57-bf31-f97b1f433943"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "abea364e-e431-4ddf-9afe-fb02d0a5b48c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87466619-bdfb-463a-9243-8f3541cc9e33"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "841a410d-b4d0-46fa-ab0e-a4c015f662dd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "726151b9-9b35-4040-ab11-a3715e6351a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f7f9d8c-5afd-451d-a253-8b1b0d3c6d5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba0ebdbb-fa45-4b7c-861f-77446819d5fd"
            }
          }
        ]
      },
      {
        "id": "c654b2fd-b0d7-4a9f-958d-354b4d8eaf1a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ff4b2ebb-9785-4edd-bfde-9705a85c6cf2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "713559dd-f8b5-42a7-8b08-5ee9d695cab1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9a4386d8-41b3-43c8-af0c-619196b238bc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb122c42-ccbc-4745-93e4-005989142ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479af39b-e508-45e0-9f2f-9ba5b233d53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d634809-8fae-4c16-a71d-1f27f35e374b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fca7016-2719-4b9e-8255-4e431b7caea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde4e501-1741-4fc7-b4d5-8f42fd9106fa",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2da82a-e92b-4f1e-a32d-48957fc635b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e4e911-1920-4099-b85d-23bc83b855a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a81f0ca-ce3d-4179-bcea-101771e7b102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d34d9a57-e0aa-4bab-b656-b2b6f234f80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c1c39e-36e1-432c-8795-26d5731a53ad",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a42af1-4392-48f4-b617-d672bd8c701b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8aef25-1761-4b7b-8986-bf55b40b7cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad534f7-584c-4a56-aade-e93af81caa0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ccb5f2-f74b-46cc-bdd0-05bb64866fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7da338-af29-400e-9658-8a363fda8cdb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563311d7-f509-4588-a14f-69f586e43c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c73a4a1-e7ca-4b33-b5ad-ed2ee42097dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6201149e-e1d0-4f37-9699-d26fca9b24c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0467af9b-7b98-412f-a055-35351d96fb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8914ed0d-0db1-4dca-9da4-83d2b586fe62",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7db63e-d99a-4c8c-9fd5-fc5257179b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa2d048-9f7d-4e5d-9da7-1cca8f62a76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae05659-ce56-4e55-a362-360e6cdda129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08a93fbc-85d8-4adb-bb59-5394fa6808fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27b4165-93cd-461b-a8ac-f135616a3edd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66319a06-4037-4ed9-a1ce-3778dd2bfec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0a9b04-f3ac-46ce-8a75-67d64ef0384e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51f1a12-cc18-446b-8001-bdd936d92853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a09f6c-b88e-442b-af0f-ad2ff581b4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f802924-82e9-4ae3-8afc-a961446d2896",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3c8eff-b682-4867-b9b6-4af6ea3765a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8740935-2274-4f4c-92e5-4d6b3b0f7733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4eecdc0-c7c3-4200-a64e-43456cf1fed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c07f638-fcd5-41fe-908c-0e436ae0a877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061c2836-8292-41de-8a4a-ca219731ce26",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc45b0d-6329-4980-a513-47eb92bdbbf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed5b113-03e7-4738-9654-105223183c05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285c835e-c129-469f-9dca-3d5fce28d162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8dfa72-393a-4ca9-ba13-6bd8114f83f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8c093b-4d8e-4f4e-aa23-ef0bfba756bb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018bbc00-98d9-490a-9d88-3a96450dae74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea746f75-b429-47de-8390-8904e1d6e857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d87a9f6-a291-4cc6-bbd2-b8c14db82169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "704d8904-0f01-4f9a-ad20-070d308de3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24500dbf-8a11-4d28-9f32-94557d3109ed",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3909334e-d52a-4dd2-bfc0-a50b2bad54af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad9c021-ef1c-45e7-8638-33d38ed15c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4d14ec-7394-4440-98fb-af64f2c35104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "475c2b63-c2a7-4197-aca9-fca922ffcf61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8dba67-003e-4d09-b47a-8632b95a5e69",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759b0b56-81f1-4504-8d95-fae38bf01d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c306164-893f-4ec5-a553-6bac558eb684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75e75f3-fe13-4d3e-9c02-d1b63157747f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "62c91af5-2fc4-4fe1-be6f-d5abb6c6585b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5de6ed-f9f9-4441-a3aa-ffb31bfbb530",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675d964f-873d-4928-86c3-81798bac3bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eddb468e-cfdc-4a8d-aa77-54737b7bac24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d41079c-1474-4c5f-970c-efe54c39ba56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7033985-4587-4698-9ae3-c8ae0fceefa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce404c70-37c5-49fa-a984-b45ab5b0996c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8026213-dcf7-4a24-b806-1de8cdec0b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605aa30e-6dc3-4b5d-9c4c-b3826184fde1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce631a33-498c-49b9-8466-cce17337e6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83e119ce-20fa-4866-92c9-70174a42f796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429ca72a-76da-412f-ac63-07f33029a1e7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc806e17-6b72-472f-bfe8-8681ae09c00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e81b876-edf6-4c85-91c9-539c82560624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4f2db3-3e6d-44d3-94fb-6ab75c0c2e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ee489c-92d4-47ea-a4cd-c235cee68b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c33f837-63a0-4d00-a79e-d8d53a47c8ba",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080676ad-239d-45ae-ae95-ae4b667b3ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6411818a-5e68-4222-ad05-960e603a7e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f881a0c-c7f3-4ace-99e4-10c3f37d9a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "de57c243-aa46-4b49-9149-3508fde4e071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c6b822-3a31-4560-83d8-d9df876c3896",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ae7b96-a183-4f9f-b1be-76e1e81e9ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc60a26b-617c-4116-ad86-e769679e6136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86a4bfb-f7e2-40e8-86fa-5145f6ae1d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "09c0587f-1bf3-4104-9ca9-7f8f46c0dd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96108353-2a12-43ac-a93d-d1fef98f969e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "127f7ee4-89be-402c-9599-f552bb06b447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e77ae1-e735-486f-b6f9-0598f653f76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bfdc76-1ec0-4a11-91eb-c862d4dda049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ee49371-241b-4c31-a572-4909f2e81440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6327875-d712-4252-b8d8-02e44b5c1dbc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b0594b-5342-45f4-8ddb-10e89471b9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f29b75-784e-497b-87fd-3ad3a50aec53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94345cdf-9a19-44e9-876b-1da732434239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0065380f-aeab-40f6-9041-9393efda97cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c656ad-33c4-44ad-bc03-e179ef136f9b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1bb6fa-d56e-44d6-bf62-5218789a3834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4d49ce-5dc7-4e1f-af04-77b49475cf14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4f2fc5-0f37-46d7-9376-c41582d93e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca6366f-55b6-4fee-8949-fec2f229ba11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8315713c-3e31-41c0-a1f7-75443251b8c1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7fbc14-e88c-4ea5-b651-d27bebc8a0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8acb2da-ba04-47fc-8c9b-25e716776f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654367b9-690f-4e02-8a8f-ef6fc5932e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20693c62-1f02-4805-b146-0c4bce4f080b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6928b6b5-7bda-4c22-8de6-7d9055bcfa9a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec376b62-b637-4d1d-a132-08d940b36c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6b4b59-9c85-49ca-839d-b048916dd6ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccc2095-9272-4a78-8ab2-7fa1c4c9c87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d73275-21e1-491a-ab1e-681a3a835e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77729f78-e286-4067-9d7a-e190dd8fa9be",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb92680-0e1e-4591-9181-048b037a5a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7ee7b6-c193-4456-bbec-4aff831d864f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1511dd09-695f-47db-b34b-7813c34d372c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43786ff7-6e0b-42b0-9a04-05d83567cdd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9932bb6-765b-4264-b1be-3b5a32c5fdac",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc505ff7-cec8-45bc-9da9-d9635b640597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502ce447-841f-42c3-ae84-f1455867face"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21f6b54-3c4b-4c02-a6b1-ffcf32f3535f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf54220-fa8d-44e2-a5bb-e19b293700f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe86544-defa-478d-8be6-f2bda67bcf98",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e018e5b-a656-4da9-988b-948d79a0fbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0d114d6-c350-4c56-b732-fc8f33331dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fbe587-2f58-489a-b7ac-3a6eeb58110c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5758f89-5754-451e-8be7-296984297cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08546b6f-e3fa-46e5-9e7e-bb0f867f3ce4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c95a12-6084-4b11-825a-1c374a6bd5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b4270b-abf4-44b3-8d10-0d0f3d40ec89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8499f6ed-8545-404a-9af8-ad41c41e643e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "617aef6c-73f0-4e09-bf63-9c01df164eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789370a1-fc36-4dd5-86e0-363435763e9e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120d7faf-5744-459b-9f93-58ed2742f1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5971b8-e09a-4bed-8fe0-26e8842ac5d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ff4a05-6a62-40fb-810b-f1f8b78f714a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f7a189e-c102-4440-a1e3-a8644cd0550b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9ef229-6c17-4d2a-a42d-8cadea7bddc3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7608b2a7-dbab-4965-b41e-55ed6ae85800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08f617b-b2a4-474e-8b4b-e2c1c5777ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfa49bc-96c1-46c7-a1c7-1cf38af5a2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51e21239-f4c9-48e5-b572-418bb4a99654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2f2df5-0dbe-4dbf-92c9-86c778e42f9f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5468324-6837-4564-a205-c5cc3f815c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffa9079-c68c-4bf6-836d-2786c5ac671e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71541c48-4a15-4bda-9b95-c2e25e11c3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "360aa538-4445-4024-b3ea-390bbb1fa89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d9ae59-95d4-498b-8c15-977087acb968",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5e7141-a959-4d12-bce7-4a1e28015fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca7fc15-c4ff-48b1-a423-9bb6755a645c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0d742e-dfd5-4fd6-af99-617aa2633a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79439277-81f2-404e-91b5-b2bdcc96ba1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e084110-1d00-4d80-a0fc-9fa4a3c722e0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7508e116-35aa-41de-9d2b-039ca62d45e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fde003f-c8e2-4893-b712-a7d46c44fab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95893152-cd28-4ce4-b059-a73b20c506cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04a72349-1059-4c3f-b3c9-89badba37483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c70cc53-0190-4cc0-8e4d-a782b3de8343",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f20371-ed8f-46e3-a1b4-40915c7206ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f2322f-a411-4b9f-a4e7-5db3fb4627c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae39624c-532b-4e7d-9017-e69b6ad40d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce7c2675-1413-40ad-b012-873ff96e6ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4971b721-69c6-48a2-aa24-539b68d5f16d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba58f4af-1be5-4324-b98a-e20439a84d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a701f386-4c2e-4b38-95c1-22ea3582dfa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b4a9fc-369d-4fe2-9682-b22056b093a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35996b9c-3ab3-4473-b17e-a96ef6f2b020"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "20b33505-40b6-4c03-ae7b-1f6119ad3b42",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "002f7cd4-7bf2-49a3-9098-121ca9404c3d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332dba2f-4631-4936-8f09-bfcdfccc3753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0047229-bd46-43cb-b846-d6b546caa80c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "865ddb32-6565-4516-ab75-6871b70c722d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b073cde-47d4-4a04-ba35-9e8d901678f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e85c99-dd84-4690-97b5-e3f9a1ac8eeb",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8069f7e-e948-4411-a3bb-f1aa4a9104c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "73e319e8-2c72-4ea2-8f7b-c03ab4d9d96a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef4a982-714e-4144-9f5b-06cf44c75339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eaddda0c-2854-4609-a31e-e0fc7b1e3f4f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c6e74c9-9be2-45d6-b3b3-983a2e3752ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ed62208-6714-4f0f-914d-2f7800640dda"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69a168b9-e78c-4db0-9bde-dfdd87151462",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abebf23d-8bd6-4787-b1bd-b788e922781a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0aa0cd45-b883-4985-9332-45602f6b9ee2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e4b413a3-1ab4-43a7-b8b9-d1057c72700c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3dcf3f50-7303-4668-a1a0-02e39349743d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "541c1fb9-7416-4d9b-a638-f37f1e3953ab"
            }
          }
        ]
      },
      {
        "id": "cf148d22-1fe1-4691-b32f-ff4e01841aa0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "30be7a9e-9acc-4d90-a4a2-c65a239f9abb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7633a267-d8f9-4a28-adbd-73e97e75ed13",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "782f8a4c-df48-42d2-ab06-ce75d5961774",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe26e93e-3fad-4788-b7e2-9e32e04250d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b00b4c-8686-4c4c-bb34-1d7e6a091b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71df6b4-e372-4cc3-8c3f-d9bbf1d7c327",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b95b5c9-e893-4551-bfb4-a9caebe8982d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5e2832-2627-47e8-845b-efe9dde7f4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e56c90-67a6-4ee0-b430-6deb5e0cf7c4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588acd74-5ace-4e14-aa66-137022d32828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf631c2-e7d1-444d-9d66-2f29eb0a8481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486d7cc2-cec0-46f4-8722-5611f9819180",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2931e88b-3787-4c6f-aafb-9e79dbba1bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0368c73-b150-4e68-b1a4-afacb28fb4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99ed828-3f07-445c-8864-9e0bb831b811",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34bef04-c2ec-4c44-bed4-4acd9dca42e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ceeb60-9d1b-43fb-9878-4ea52213a9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1a9e56-1e3e-403f-b89a-913ec0151802",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58513a2c-5315-45a7-815d-c60424e34f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b659bff-7d39-4826-b8e2-25699d4427d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae6da19-c15e-4747-b847-3df17b10078f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c335b6f-f3a0-4029-a35a-06866b9193f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ff576d-724f-4eab-9991-02c5f42a2e33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89eb4437-bf66-44a4-91e5-912fe976d8f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9297accd-c2b7-4d77-9904-0ee0bddc71ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d20d8a5-5121-48e4-935d-a398e0a86228",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f801b0-d1a8-4d87-a8b6-2a60bd2102db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db52cb78-a36a-449d-9c46-077daa291351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b05a3c9-fc0d-42f5-b7ca-c4db6e6470b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4dd02b0-ec62-431d-a7fb-e17f569b0a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0657d3b-c6b6-42e0-b54e-d5d0163471a2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f093734-ba34-4eaa-b34a-87aea5c3536f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b785219-e55e-4b09-8513-bdecbd925572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9095e2-513f-4a46-a72c-d9f63f851c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c5d178-c62f-4c25-8595-b3929f7a7866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ac4f78-7149-4254-bb73-dd03e4b473b9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3639a716-36b7-4aa7-b5f5-c5da4f1e910a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fd909c6-e920-4bfe-a906-ed7f58c43816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d460482-3575-4f46-a3e8-03ac68100916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17bf492-bda8-4048-ab8b-4ad69cd9d809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f27ec8-5ca2-413f-b607-dad132612b8e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52e2730-1dac-4167-8ec6-90d2cf6227c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14fe679-2c4e-4dc5-9a3e-de0ef03d9efd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92914f69-4c16-4591-9e54-fcc0d742e22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ab02a9-13d3-4c99-a30c-add76555bac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b88312-9294-460a-a72d-98eff43a7781",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e5f27d-465d-4d0c-887d-7b2a37d82284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45c246b-62e0-4429-87ab-cc9c9ab0330d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c1376b-87d7-4fef-929a-d2cecff062c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f28b8b-d3dc-4c3b-9ede-abd6579621a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff68c35-e7f3-4edd-89d6-0dc452cec287",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a81abb8-4a4d-4857-8b36-7903faef8524",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90c895bb-da4f-40c3-8d09-27f85447c5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f294c0c-7eb0-457e-945f-5c36b93d4e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa7481d-41bd-470f-a0c0-2d25a12294c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995c335c-2a23-4a4b-85ce-5747a6d1c9f1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c4c27c-4d98-4c0d-9f58-6aa8288d3151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df16cd7-e8f5-4372-a157-5a098fde2e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "495f4285-d548-4673-b388-6ff612b50624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ccb05bc-c17b-44a3-843f-d6522ad391e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1390a9d-c0ba-49c0-90d0-1684a4daf2d7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee28afb-3cba-42ea-a642-a37faea2b78e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22106c06-b406-469a-ace6-9a343ccf625d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "255cabb4-0c66-4e76-8511-103df308ad9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ea9487d-5f88-47de-babc-71c00fd5688c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e073aa43-3b3f-4e0e-abda-27aadde22644",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca0d781-f17a-46d3-ac58-6033cecf58ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c201adb-37ba-48e9-b037-2ad24a290abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a151bb60-6f7f-4bd8-a461-eaf4c9789589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c39925-27a9-480d-ad5c-ad74496ed0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f750e6b-7bfb-45bf-97df-0dbeb2be7fde",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a092080-cf2a-4b3f-bf6f-c50ab9519784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8b734c-d56f-4f2a-ad6a-e0603e7ba46f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfdcf25-fc8c-4656-967e-9b44e763d8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b7c0fd-5e0c-4bad-bc12-591d2db14a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b48b906-25fd-486d-8855-e18d0d4f37b4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663473bd-a748-4383-bea6-36ea9430ccee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f8b4d6-735f-4d65-8de7-eea5c8832e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a876fc-b071-414a-8589-c203e599d354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9429e38c-499a-4705-85a0-5f84cda79d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6763aae-a038-4846-9509-b07eae23ed8c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7feab5-933c-4e6f-b1fb-32b7a4917779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3ecefe-f5fd-4d3d-a4a8-577ac278ee6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee967be-3723-4930-9031-0b9f5ee5b063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75f633d-dcf8-462e-aa1b-b80b6414ca06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ff2bc5-e57a-4551-bc40-2ffa622621a0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1317245d-8965-40f0-99db-efa43ce78c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20704ea-8c94-4dfb-b993-c85f565085bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2984e43d-886c-4130-ba6c-92b669ef5d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a3e5fe2-0e49-464d-9fc9-fab351187117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2662a376-fc30-46b2-a089-527c7f36a59f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94d6cd0-edde-43c8-9ac1-0c678cd439c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77622ace-8cfb-4d68-b20c-2ecb4a80c070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2389417b-f79a-465f-b19e-dc050f64051b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371cca5c-7790-47c9-a6e5-fff47d07580b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2237cb0-7bdb-4890-9694-7e795e1f970d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319752af-313f-4925-b991-1d653efb19ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce9c1d85-a716-461f-a90f-7a91ec2fd1c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b89e96-f055-4931-8af4-6f52c9c48e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20719e61-d17c-44b7-9d7c-ac114627d179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b1d28c-a9f4-4b2c-a506-ab72e180942c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaca3b73-66f3-4a2d-8d64-d708017d0e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4526ca-60c2-479d-bca4-d936eaf15d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e2a038-84b4-493c-a424-87c0d1991a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063cee9f-0272-48f9-acef-e8cef9c787ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f447f277-90ec-4761-996d-9ef87b23e1e7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5828b0d-9b32-449f-8ec1-28c3cde1f523",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "085c07a7-0aa0-41c6-a160-7a4b11e7daa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffcb4a4-d72b-47f7-aaf6-706a8ba1f35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c9d811-8274-4333-aa75-576b0fadf3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ae7269-1a54-409a-b489-206bf63a1a34",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e724e46-d2f1-4eaf-90cc-7b363dbb1fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fba11847-82e3-4499-b7cc-4c543f14e411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae0b992-a109-4e42-b4e2-974e09ad8eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8c4d81-6230-457f-b509-ab18fdb51d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b99964-e34a-43a3-aeae-20dde0f7e8ac",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da5e9c5-e4fb-4a66-93f0-b7bb2e22e00b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7996c47e-54de-4c8d-bc26-bc88a0030182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa49327-7887-4b99-b43c-117fa28e8dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144a34a7-f167-4e89-93fa-4ae8f8824be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a040c3e-801a-42c1-9e9c-72e871e833fc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c71c79-a8ff-463f-86f4-c1b669c56fdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3d59b53-6c94-412d-ba00-df7420e4e02f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1fd0eb-d9bc-4cfe-8e38-67001cd889e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0666500-f83b-4261-bbf3-26d4ecc68a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbed935a-eb33-4427-b94d-92a295de2b4c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96130e7-28e7-42c8-9a0f-4a827a04e8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b1f1db-901a-44e2-802f-f0e1e1e17a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557ce6e0-c69c-418f-801f-13316c72b056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c9a36d-2617-420a-9156-a5de11ccd9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca47a2b-0bcf-4308-89bb-113b5b64cc9c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508d0c63-ed8d-42ec-9c5c-08a28b343e38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce90e752-5118-4d04-bdc7-bcbc781a15c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca405d9-ab20-4c58-b079-fafd38156ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5b44e3-31cb-4982-b9d9-10cb11d6c0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855e0037-a22b-4e02-a252-e8fed3f1462e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e84bb0-4d53-4416-b051-21329fbef81b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b3c2b7e-e306-48f5-b45c-622facb3e7f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd59d4a-6e8b-4680-aab3-e40b73c31db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16191e48-f562-4ec9-a173-6bdca2cb7531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1693727a-524b-4599-86e8-c2bdda0836d8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf453766-5198-4891-9d79-43f10bf8bde6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c7c0615-6f34-4ba5-989d-066ef2a04ed0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b982fa7a-1abd-4d96-b9be-6477f7572ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbff0f83-c112-40a0-91bc-f1c5393804f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61ec206-54be-4d74-8b94-fd335de43ccc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19d00f1-c000-4d1d-b264-c12e4512d85e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d945d2c0-1ecc-40a3-bba4-f607d1fc056a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "491d9435-945a-4c31-859d-4c33e0331895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027ea825-ca36-4405-97f1-8c3e0c88a249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180decec-07e9-40d1-81ed-efacfb94da9a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b225aae-d49a-48bb-a0be-6fec612262b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "159a942d-90e1-4566-8ded-74911ee684e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bdb73a-f3e5-4831-8d2f-b70b15cb8248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a001ef4e-e5d9-4db3-95f5-15b4a3797781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163674c3-3b70-45a2-a751-d9802ceaa0e2",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f276889-3de1-4022-b75c-aee0db5c1877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37d14f76-8070-477a-9295-ca0ffc96bc30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f7ca5d-829f-4c73-abab-a8d6ff34a25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ada0dd-4754-4e38-be57-86400365cb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796a8767-05f1-4e74-b0a3-e54e90d33d0e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a90d72a-0bb0-48be-b492-5f9d676d6cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cab4481-6cfb-4fe0-8b69-e531a99797a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf7e545-7026-4827-bc5d-058e7ada6339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50485fcf-4f62-42f3-a15e-bb8b5579a772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2be41a-eeb9-4b07-9437-29f57c271de4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4af50e-d8c5-4244-832a-854c03db3dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f796889-4962-4e80-9abd-0ab2cf1aadc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe3cf81-52e7-416b-8d40-372c5d0c5876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c51ce96a-1b5e-4727-9b7c-34049e703e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6bbb95-a628-4373-bf1b-4f1feed51b45",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2b5c79-1d67-4bd5-a904-51a067200db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce7ddca3-073c-49cb-ab65-fca9cd4efffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4154c280-4a20-4ad2-a144-8797611b7d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f9800d-d8df-40f2-bd9e-8c9be99da216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4388f81-102d-46c0-8d86-767915ea69d2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cdd3cfb-f330-43fb-a6a9-a7b317cbb750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931bafdf-b219-45a0-ae55-fe2fe47a8481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "908e6c66-e7d0-40db-90a2-7ed7de4b1841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8494b971-6631-4a2c-9632-0b322cc97bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5e749b-b1ff-45fe-86c0-e0a340b8edb6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affc8faa-1557-4614-8382-be5cce6bc3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0609f253-01f3-4903-b524-418573c8acce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab70be25-fa5b-46f1-b53d-23233c00ff73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed7b5f9-1396-489f-af97-5d3b32fbb586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c289b595-5241-4bcd-9a81-c4400c7b4d28",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14dcbe51-1867-4f6f-846b-925e0f06ff2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b05ab1-11ce-4586-907e-f1915c9c7e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf94d1c7-848d-4cd5-b352-a02ae9b3a293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99fc603-a6b2-48bf-96d2-00b401fe9dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b86320-dfaa-4285-bd0d-8133b241fba9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f0d055-a8d3-45b7-8ff6-f51d109bee73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "110a6b53-b8bb-417b-9c88-51e43f332182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc48aa2-0341-461f-9bdd-cba6a5a0623a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f8ed96-70f9-4bba-a0df-682cf7ae1811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7136dcac-f744-4bc6-96e4-34d75313a185",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c64a0b-d3c1-4a43-8910-9db73a5416c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc5c247-e551-487c-b5ce-fbdccb734a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2a64ab-624c-4917-8bd0-c6cce887e007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a60206-83ee-4e35-abec-40e9d893ebe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a291978-5be0-49dc-9fd5-1643866a8f02",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72de661-178b-4fd7-8d63-809dc9cbde7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a4ee2e-606a-4b30-a08a-8f7898748021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c48dde-1444-4e1b-b930-a39825c180c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986de262-95c8-4ad5-9076-6d23b87bd20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe7a377-270f-42fa-af2b-6a360549445d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4e5ca1-d4fd-485b-9270-9c29ffb28007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224faca9-d790-488e-bce0-22450f8d9ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc85c710-5e1f-48c0-91b1-ada20e7b877f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30975ab5-d728-411b-affe-c7aafaa84aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbff454-4dfc-42ef-be56-2625c10dbe85",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177691b4-fc84-40d3-a604-4b8560342038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99dfc435-6038-4a7c-9d8c-21c39808044f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65123c94-89ba-4ce5-9ace-c844eb2b4a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "375ee548-16c4-4bcd-9790-55a3ff52e57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e383421f-8d20-4ab3-8db4-156aee845ce7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba12c21-21f9-4e14-b526-d32184f9b638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9647e2a3-af26-403c-95b6-7e6cede6cf77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb8100e-a109-4710-a952-ce3be78300da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2743431-fe9e-4341-8014-adca6f3d12d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83976f5-b9b2-4a79-974d-9d96471c2c02",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4e53f3-7231-4637-89ab-5124abb8aafb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737f1c35-e014-4806-9842-d413acf1b9e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2241eb5-9ff3-414e-bd30-a8276ee42892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "624ac2cc-265e-4168-8d66-a074978a1db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267ef342-1a00-41c5-a4ec-0d5c6a7819ba",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aad9f97-c9e7-4126-b36b-97f43f4f46c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed6badc-1270-4591-a8f7-6db68f0ab2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486cf74d-c7c0-4186-a983-78ea3e635817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d17b41-129b-4abe-ad22-6f6835906219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a540ee99-4a2b-489c-b39f-b2c33a90e838",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8c1c63-f248-492b-bb3b-90949242d315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6878a99a-f190-4f83-848f-2fe87bf52345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53936e7b-0757-41b2-a1e4-5ca78665e2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86460305-aaeb-4eb0-8e8e-faad0ec8ae71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a6b196-c085-45ba-8687-bd9a9c61c46a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21c16c5-6d4d-400d-b7c2-f28a115a640f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94114f8b-2dca-4485-8f4e-8e9c5e1ef288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b3fd4a-5c8b-4a27-9510-6c68cb637e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf0f24e-571a-40c3-aeea-684af11ea98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30eafd72-d378-4a17-87ed-c647cf5b7c9c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63957254-c642-4cb0-8e95-ebd225ecd355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c9033e-6ac6-47af-95d1-a1d5ea0850b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d329b1-8226-4f25-8de6-d311f20f55e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad1dacd-cb94-4512-ab59-01893d059d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e561ed-19a2-4de3-bbae-e51809773a8d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd3b183-fca9-4b42-a1ae-3e4f3b614173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76dfd52e-a0c3-4961-bd56-b3fe71338a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d3c249-fb6f-4332-b848-7fbf26fe51a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "249bc4af-0e3f-4bd5-8b4a-b8508e6a70e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0886a82e-75b6-4ec6-8623-24512d855194",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f2093b-54a2-4f15-9755-0ea267016037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374508d8-728e-45ef-945f-fb2fa974734e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef57992-3995-4dfe-a6d1-4ce88796cd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9ad005-8faf-43b0-a5e5-46754ddac5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d93fcb-6f0c-4945-ab72-fbac43a84f66",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af05795f-3282-4564-994a-3efa591c41cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b6ccbe-7af8-4774-8ebd-d93831ea06c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060f208d-ab31-4fbb-8699-fd5c66b02995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ffc4e8-9a2a-4ca5-bf8a-384a8fab81c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db00fdd-73ad-4ff4-b2a7-71a4e9749c6d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485d6e84-ba42-4748-a13d-fa30843ede97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe5c8e1-e997-4f0d-80d4-370845fcb31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbd5439-b108-4008-85fe-b14dd726f1b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec6b1217-4d19-42af-a39c-a660b6d2b5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23667bde-df3f-4467-98c5-7c8d57add642",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9900f75-39a8-499e-8dba-b3feee8ab4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3517178-74ca-4998-8888-8691250e9a14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "578c36b1-04f8-4bbd-93c8-ffd6c9f917ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac09477-52bc-47d5-9426-782afe400a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b5b9e5-c458-452e-bf07-f515f7494455",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b283ef-297f-4094-84a7-73b529709b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0eb72f-0699-4b10-94da-98cf4e831c86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252d88bd-2394-4b1c-9a19-26fe7c140257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "683d40b5-818d-4396-a33e-4300a5bab404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccc47b0-279d-4209-a261-29819566b61f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca94aaa-3960-4889-a5a0-7cc76f162988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b81e6a0-e6d7-4f01-a087-4529a252afb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f13387-17d9-472b-b31c-7d3abfb9042c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a628cd53-76f1-40e2-9a77-a6b596d7cc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29f4bea-d27b-4fc5-bd38-3a1cf06f2092",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff6ffff-ee40-42e7-abd5-dabd306af7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "773945ac-69db-4654-aeab-330b29b95ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6bc5da-2676-4351-bb64-945cd01a3538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b73c46-e557-48ab-9d18-7c9017d9ba8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1652ee5-e8d8-4810-b40a-383f0529c1be",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916efa3d-7e93-4d1a-a6fa-f0e3f639a0e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a01323-25f3-4404-8f34-d1547395c28e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f40b99-ef1d-41ad-a20e-cb7832d3ed28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02aad8e9-c13e-4fe0-888e-8496bce16a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a946b9ac-d31a-4af3-9890-d290b4862924",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a7c8d8-5165-4ed9-91ab-bb6463f08189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe7227f8-af95-4247-b3ba-bd3fb7ad0d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f85ebec-8c1a-407d-af48-6b7fd095e005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bdfbd7-3144-409d-8048-f55f98ef69f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d4080d-53b6-4bd5-b40f-baaecb877424",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862f1d39-bb45-46a6-a005-4d197880229e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76604cc-c6a2-41a8-85eb-97be11f9c15d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e0dda3-80c9-47b1-8c5a-6095bdc34cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722ca644-a6c1-429d-9b24-e3551237842e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fb9ac8-36bb-4220-8de4-f51e47779668",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bccea18-fd09-4e67-b0d9-a30a4f9aa8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50b817e-e3e7-4805-997e-ec1d8f26a2a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbe1650-a93b-4469-b379-d20a2eecf71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da4a312-1324-40b5-aa37-0522ec9758b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb65f46-078a-44ac-9ee1-1310e9e18025",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9338f576-cfb7-4755-8eee-c352363dfd5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d228061-6d4b-4e27-afe7-d6277c3a4fec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dda73c8-1daa-40f5-9180-027aa6750b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f59f15-8721-4682-ab36-64deb2a0fbe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e10dd58-393f-457d-b1b6-497d109dbeb6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b37d94-b7ca-43dc-920a-ef76071564bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10881bf7-0a0d-4481-a5d2-96ed6f14206e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38fc7d7c-34b9-4be3-a852-756e147d9fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b39649-b17d-4177-955a-ea81dbab5d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd20e28-cbe7-4192-a784-e05e16c4fe6a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f3fb9e-5293-44e0-880b-16d01da13cfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ed7f6b3-2685-46fa-83af-76a2f80dfd37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1034bb9-b6a6-4783-9e50-d8f0595e3d8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8419f0fe-8ffd-47fd-ae30-36706969013b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c627d2dd-ee78-47ae-92ce-930ef96f6e44",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9517c36-32c3-4e12-a61b-3b3fdfffbeac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ad8d04c-59be-4a18-b76b-faf2bffe2e93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457707bf-6342-494a-bf98-9e7aec23ee51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fbfe225-e247-4ea3-a6b1-e66593b9a07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fab045c-5232-4964-86e5-511099179dae",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b0582e-cdcd-4015-9494-0a6a78731941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a268087-4230-40f8-932f-25b9f30c1dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4b4a42-3559-4717-80f2-54928b94c9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4949fa9-510c-4779-9fbc-ff69ae871498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c4762e-191f-48cc-a31f-187aa80b87f9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29ace2b-cff8-4304-a25e-2d92b7fe2476",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0575b99d-f702-47ea-9454-00cb45e0fcc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5dbe584-989c-4126-8f6f-a3979610f606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d276bc9e-6c09-4593-8dd8-0fe690042250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb4def3-7289-4323-8a78-9267d46cf275",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e609ba-6c89-4c0b-8a3c-0511f487103f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a802ce6c-fdf2-4000-9a23-8efe3c029906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f70b657-3ef5-4c84-949a-3db4282449f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6315335-cbd7-4138-8f13-0a8f77ee6f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361ebb35-1238-40db-9a89-512d4fb04db9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ace4c0-0214-4420-93e0-094f837d608c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40cb8d51-4189-401c-8221-6afff186d070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755f6f7a-aa7a-4aec-9cdf-82e551762a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76fa23e-49d2-4473-b0ff-affe669b98d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d47757-9a55-4e04-af60-e98a5a1a3ed8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc63123-6852-49a8-9945-4e1ba272f029",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8abdb432-84b0-4871-9563-00e53e268c8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c280bd5-c089-453a-a346-52d3a9672076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1030485-b3e3-4daa-9e16-f5e1d9e5e930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c179c0d-f200-4575-b45e-7f3dc376ae8a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f8bbef-1aba-445b-a16c-fb19a83f24af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90596ac0-28e3-4dd3-9f69-55a304cb1ac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5637a153-9bef-4a4a-8085-7514487a0d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61cf6527-ee5c-4ffa-b17e-5e7da104b168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8acba3-87e8-4e56-afcf-f6935cd55b09",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0a41a9-24ae-4e72-ac98-4fc11b44b120",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afb4bea7-8d12-4e99-ad43-7b2ebb30e64c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf7a6c8-bb3b-48b3-a8b1-c6031718be2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c912f7d-3fac-4eed-a4de-583f85636038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2243bbe-1bf8-4def-9277-e05fbfb527ef",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e761606a-11aa-4a39-870d-1e919a2168e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3500197a-66c9-422b-861a-c92fef8c8692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351bb19d-96b3-4135-a8b0-e3f9b2ceaf12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0f8512-77c4-4f3f-871c-92fe2b14a458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2747c4b-ead5-46eb-8151-e051d809ece5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af5674e-aabd-4cb8-a656-6b9d5a598f7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f534127-c609-4134-ab91-f949532af7d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8952bf01-9d39-4e43-bb6f-df2e7d0f6c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27327919-43eb-42ee-9a53-36cfadcefe9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767cfeee-72dd-49e3-9169-9d6e5581374a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2baf3cb-8018-4d9d-bac4-1d752b1e8ed1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b822a6fd-52f8-49b4-92ec-759180f01694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44858379-e1d5-4216-a840-b467fc0fc4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9acf7f-fd01-447f-bb8d-3a90a452f1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328a95db-fb8a-4194-8ff1-bc5259840792",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a6fe1a-e35b-4df9-8773-981a042b63ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b770c26e-6ddc-4912-ae34-78cbc63d6c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab62053-53bf-44fe-8fef-62ed630aa797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5de21b-86da-4642-9ce4-f2b5678772b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ac1541-60f2-42c4-b35f-ab7fb00fee4b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab765a2-ad8d-4a66-9c20-34df8dd19f64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a618808-ac72-4e8f-a69b-6ad80fb8cb02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825196bb-fa7c-4ca2-b11b-34f09976d404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f9c3e4-73eb-44ef-a7b5-64087de8e4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60326f42-0e09-450f-a4e0-2ad0b4b17473",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d195c6-d9b2-41b4-a0d9-6b2b33dc45ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "226ad5c0-9908-44ca-8a14-cc82dae65396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9838c05-cf6c-4bf5-b491-078e2b33dd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6133c0e5-4878-446e-a90b-354d8b08af3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94b9625-e9f0-4248-af93-398df8abce17",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f6cf2e-80cc-488d-91ec-4bce9e8a1781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "578794a2-e616-4684-8cfa-cd535353fc06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c1f000-fdd4-4c3f-a6ce-3de3daff1f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b20219-eebf-4a1a-be4d-c0203e0b702a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517d9457-0779-4979-b823-cbc00b3cddc7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533a5997-356e-4d8f-b95e-13b5b4986eff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38ebd29-370f-402d-9abb-b6ebc1d49851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59d203c-b3dc-4c57-9a11-ce228b08605c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f23953-8cc9-4a5b-9ec5-f6b16a4efe49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb176b5f-6fb1-4d90-b15b-56d890dcb100",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168c5e52-607b-4378-b939-a992bc722a97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35f7c7b7-6a6e-40e4-a602-e9cfd65a7e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce91fe60-4019-4cf0-8e2e-dd2dbe8cf52c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a0407f-127e-441b-85ea-60c5e5a1ea86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fb3733-39e8-4b75-82fc-edd1d3dd1632",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cfc8b6-33d3-495a-a6ec-4c468e0997c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf33b379-ec67-4d5a-adeb-2ba5db190895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42f3254-e231-441b-af82-0dbb0510f82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64988901-0d34-4ec9-93e7-8db03bac08f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7969ffd7-3fe9-4929-8ab6-c12dc7dba4bd",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe8a6a7-b0a4-4157-a296-7cbc50782228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91cd0413-293a-4306-94ab-d43ffbe57a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e582ec-1a24-4efe-a887-74041d9ebd6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a40c529-777c-4e75-b3fa-62d41a0f8b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a5f652-bb5e-43ec-a381-f2b5613c418a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c206d0-a99b-4bdb-9787-b90a995c18fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d05a929e-f7d5-4a5c-b15d-2b6bfb79992d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f3be70-88e6-42b4-adab-1f8635dab4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbcc32e-cc00-4943-9429-41cd667625b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8958cc-82c9-403f-9bf0-b00aaf3c6456",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ad329b-5df3-438c-a414-281ad407a938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0964ca21-ee27-4513-99f3-af7c888d6422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78607ad-d276-4114-8864-a42fcaa24671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aad9d95-1150-4adf-8682-c85dd5278f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7368f8e-467b-4f8b-93b6-19bbe6fd181e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b31ebc3-fa90-44a6-9336-77e9a58e7501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07b63a49-ee4c-4b60-b2f5-8f823e72a0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7fbc1b-261e-497a-92ef-de4a74ce841d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80cbb301-b658-4f4d-99bb-6d8710e1dd7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae642a41-b4cd-40f6-b298-ab49c0f6a03f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9946bd-71a6-4bd1-90a8-9199b5222e0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f08c1fd-24a8-4232-b06e-ebd0748453c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb4ab20-fdf5-4d7a-b38a-efe914c9913d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf85026-b590-4b85-b210-6ee8ff3cf262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f639ad35-62f5-4b2a-b37a-19e4f6391848",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322820da-f420-4855-9409-96b99b3c28e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6794cc32-ba1d-49db-8c3c-45a4fc216d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7943ed4-c160-49c1-b9bf-1b1ca471e560",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c960a8-6053-4bc8-abbe-6e11cffee2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29e200f-1b6b-4927-a228-40f6a772e8b1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d34bab-722d-43c1-82b1-f6fdb23b6b6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d34a349-8a1d-4e06-bd2e-a77e1c5696d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e362c93a-b6fe-4452-9e9e-fae2471b136c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c9e7bb-05ea-4af6-b1ee-6f2ca2c32661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf08781-c639-49fe-b80a-47dbe768debb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f82f455-002b-401a-aec7-d7273b0e3f8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "431a71bd-575b-4b52-afba-a7df26647782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79dd504-d3cb-4536-8fa2-dcf6f2b1469c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88567da3-7efd-4509-bd09-45d43ec8e200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbda704-1bdb-4dd0-8bff-e7ab1eea020f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28e5726-6cad-466d-ad18-b52f6d67e2b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dc0cf62-e6c4-46d1-a4a7-ffd3a2effbda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c60f1d-9af7-47f3-a284-6028b60b07c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4e7b87-e339-490a-a71b-91fa7d4417d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09a414e-cedf-46ae-88f9-43864e887c64",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1977f592-1ff1-4291-a74c-be4278ed38af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb88fd9e-c323-4d1d-9df7-566b8416b695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091d3c59-2e9f-490e-81bb-381b72fa932e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f27635-30e7-44f4-b344-791110ea21aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5c17dd-533d-4c45-8248-539544601f41",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4926b995-a608-451c-95c8-c270afbdb047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a964b23a-8e7c-48c0-966d-4af6e0e39402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74fea6b-a40b-46c1-9e96-86eabdb569a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8656b42-bb7f-4b0d-b209-5f27f4e94997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b57c179-06a3-4304-90e5-4f7d03d4688e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc61e7d-7291-4bfc-a173-6ed4908ab2f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac6124a0-7f65-4fd3-8237-0d7be9250546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f360379-9c24-45b6-b5cf-cff3b1558042",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c5ad95-cb1a-4140-b345-bb897c8e14b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496f981f-6ff0-4d2c-a2c7-032b92d72cad",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab940f64-10bb-4d3c-a180-a6a472d97ad4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60198e8d-488f-4398-a613-a50ea81146ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e3f02d-d3d9-4ffb-9376-d0cad44a6295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eafc5612-3a59-4d97-8db9-9e68f63b79da"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31b2b6ff-e813-4eda-98c0-5622112aa547",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05fcf9e3-3c6e-4391-8d5a-44edf4a3369d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86bd0f5f-99da-4613-b24d-cb456a9795bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c663938-81e8-4b7a-9218-f2c485225b27"
                    }
                  }
                ]
              },
              {
                "id": "743848f3-eac4-4614-bf55-0c2ebfb171b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4b36d7d-a6cd-4534-9f9f-5fb38c4022fc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cd27dd-359e-48d1-8e13-6566ed0e9df2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7c48abc3-7db7-4167-a8b2-c0227832e8e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b2870d-c1cb-4716-960f-f2352ace0842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22b41fb9-b75b-4081-a6fe-47fcf67fa105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209b27c6-2e49-4f8a-aeb3-73a4b529dbeb",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee30376b-da62-4791-a291-c5d449a3002c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d1504aac-6dc9-4b39-a0cd-dddf7cda1c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "401152ec-719c-4f87-a826-9ddab9801b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7db6530-ef3e-46fe-9353-31116d202fc6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b85aa214-c77f-4be7-b1a4-a04b0e654d7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a011a41-80f9-479e-9028-be706a6ca974"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91d6c3b4-3c29-40b8-85df-f4cb41faacf5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8032c83e-8043-475c-8dd0-e7b67b414292"
                    }
                  }
                ]
              },
              {
                "id": "00cc7d4f-64d3-4396-9415-7b14a23a71c7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "abac9f64-7d22-427a-bd0f-e0698d61bf84",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9addf599-4479-4692-8ec4-0ad8e30e11f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "804165f3-309b-4750-a026-0ba6ce3f08d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2c9f3c-931d-4c16-a381-362885eb9ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623d802a-0860-4981-9a73-bf3b192cf7ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "aa872b12-4306-4646-8925-4e2ded567f07",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9dd32739-1e65-4d8c-8070-9064da06c0cb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "963f04c2-1531-47c8-a64e-c017eb7b5047",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b78ecdb6-dc62-4042-8abc-f6561dbefc23"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c11fafc6-b00c-4b61-9dd5-0e9994f7eb33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b458ae6d-37a8-4925-b964-b3f233d6b267"
                    }
                  }
                ]
              },
              {
                "id": "fb141d2e-d316-47af-aafd-364034c97dde",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb975642-8e7f-4c3b-9f05-7a058bd22de9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "53146bcd-e2ce-48d7-8534-2ae5e98af691"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20eac7ef-ab8f-47f3-a924-6314ab5dde48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8392701-143e-4d19-8646-6526a559a90d"
                    }
                  }
                ]
              },
              {
                "id": "e043b17f-8e2a-4e6e-aeab-a754c6408d69",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bdfa1c1-bd77-479b-aec0-194159b820df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a454c658-8a66-44c6-8ee4-74ab211d0f81"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a782ed1-2c19-4ebe-bfba-d8a491d1f094",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fef3779-b7f4-41c5-ae73-4f902becc54e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfe1b998-4290-4483-9b05-e15170a457fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "27e6477c-6d3e-4cfe-8abf-472f9089b002"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c54f318a-8cf8-409c-bf86-cf25d7bcb78e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d685c813-7f79-4c94-bccc-1031ee8b9e88"
            }
          }
        ]
      },
      {
        "id": "3e8cebf0-e8bc-4ad7-b3a7-7e2bf947988e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7745e3b3-d282-4def-bcdb-7d7e9f173fdc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f1313c10-e462-4081-bbc9-e8128a8e13c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d17213b-5d7f-4a11-8d29-e56def14993a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44c3e50-096c-44ab-8e6e-79e7d1223121",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "380ba545-c3e0-4f3a-bbf2-f702dd56a97c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb5c7f7-cb4f-47eb-b78f-9528bb2f2379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36070326-8c11-464d-8dd8-a6b8c6216ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa975cf-306a-43af-bfde-a62380a8c4ae",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd659b3e-93e7-4880-b8e3-3e45050a3148",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8a57eac2-f66f-4784-86bf-da09248d92f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c2168a-4fd5-47d4-a370-fad86a02a89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9ee0124-3dbf-44ea-b865-60cba7ef3f77"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0ff9b2f-952e-429e-a144-c620a613f941",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea0d7e11-5e69-477a-a8d7-025cce0b6433"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e0b1d60-648e-446f-b435-b20659e034f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7739956-a9fe-47c6-a60e-ab894de89664"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "923a2f4b-9611-4641-a955-eccdc9b16694",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "67ebced9-eac5-4819-9558-fb8fa3ed9bf5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0359cf89-c8dd-4a97-b351-6087b5ce83a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0769c570-50c2-4892-a916-a8e3461f4a8a"
            }
          }
        ]
      },
      {
        "id": "26ab4ea6-f6b4-42a7-b3a1-8394d6a4269f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "778195ad-5a9e-4d75-82d2-43224d5e119c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "120fde82-f0a5-48cd-a0a6-37f5b75d3994",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3a40245-2bad-4a74-aa1a-fdd526c135c5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01c0de6-c809-41bb-a7ff-c0497696c8da",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a3473e13-5a04-496b-adb9-664ed7fc00d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49994f49-209d-4c54-8c11-ea3b6bf7e0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76448eff-42d0-4086-b982-6b9c61cbea32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0304896b-c60e-4551-84b8-d7e545688670",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b1c3da-b53e-4568-b958-4690e1e68e79",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b2861f2a-bfc5-4cc3-b2ea-bc268f0f8858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62fcd77-06e7-4ac7-b7c8-4b6f8268d191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1228788-9bb4-4905-a238-89cc77c24c8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08bff123-e10f-45b1-8144-daf354081170",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21573576-66d7-4f39-91ef-0d446f637a37"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf9945fc-dcf0-4e7b-9a90-27bc333fddf2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f720e862-2b50-45c0-989b-69c770e88a6d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f62e6bdf-ee24-4c67-9f2f-27345578cf00",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f9c7c74f-f97a-4fa5-b284-2c1a29ad28a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "106069ae-337e-4290-a781-9d95cd49c221",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "05d065ce-3b3c-469a-9f1a-821056d15da1"
            }
          }
        ]
      },
      {
        "id": "b8b8b5d6-29e0-429a-be9d-f3ae25d22dfb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5f2c2506-63dc-4d4a-b7ca-670ca8bc0703",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a7a52c0-c823-445a-bde2-b1a4da172370",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d666e22-bd7a-48d6-840d-15e3f729ac29",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de302a5a-8618-41a6-ac02-e514588643c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c5540853-4713-41ea-987f-01f3e2d905d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8be016-207e-43ce-9cb2-e0a0d30149d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "449a1b28-530e-47af-bbf3-ca85ad5100ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773c207a-424a-46cf-9cdc-521d1d5a4cf6",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41743de3-0066-47a0-b632-c27b96dedc49",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3f82152d-e899-4a14-a51c-17810fd7454e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcb6c04-223b-4114-b981-c3412ef3d3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52b1f6f4-c479-48e6-ad8b-0db2bce56d46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c84fba5-f6bb-4e1a-a371-06a5b07de1d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ae7d205-a2e6-4fea-b67a-48df85781d79"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5937ad22-7c13-4b4e-af30-39713dc1dcdb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "522da480-6bc2-492d-a3f0-f630dded0aa5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "def625c7-54c7-497b-832a-858a5ae7f6fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8422957d-ef25-4a90-be15-7aa1c20583ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a9bb61e-f0f4-49c7-abba-14ef692efd74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb66ead7-6812-426b-8cf9-16bec48ba06a"
            }
          }
        ]
      },
      {
        "id": "08297e44-e78d-4c42-869d-5ab179d9b41a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35ffd353-a485-44c1-950b-253796e5ad41",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "edf4c24c-c5ac-4a61-af00-060aa9a26c75",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9cad435e-c796-4b4d-8de2-ccf412db9c0c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "587edb14-a654-494b-9aec-0610228e242a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed08cb5d-ffd1-45ef-bb7e-d8e8d9f0bbdd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 121.8735632183908,
      "responseMin": 8,
      "responseMax": 649,
      "responseSd": 101.94087437405264,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669163980828,
      "completed": 1669164027283
    },
    "executions": [
      {
        "id": "c7c04825-1721-42e5-9621-da8c3087255c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b26bd06a-870f-403a-972a-29a33d0fcf63",
          "httpRequestId": "20ad7913-fd87-4777-a97c-1f2edf2e4959"
        },
        "item": {
          "id": "c7c04825-1721-42e5-9621-da8c3087255c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8a6104c7-0f3d-4140-87e8-ca025e8512ea",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "13821fd8-13c8-4367-86da-3a3b8c31d386",
        "cursor": {
          "ref": "7e4c646d-a6b3-4627-97b6-7d2db05e33b3",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "98757a05-7866-4e04-985a-03e122a8bcfd"
        },
        "item": {
          "id": "13821fd8-13c8-4367-86da-3a3b8c31d386",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e2c3174d-f0b5-4975-971c-ecd3b99e90f8",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "21deb0d7-f494-4f03-aef1-febef81282f0",
        "cursor": {
          "ref": "c6cbf574-41f9-4212-9d56-6c11fe616991",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "91030255-c04c-4c65-b597-9fa66038349f"
        },
        "item": {
          "id": "21deb0d7-f494-4f03-aef1-febef81282f0",
          "name": "did_json"
        },
        "response": {
          "id": "0f6f83d3-ee80-4c58-925b-b5b7f64a3410",
          "status": "OK",
          "code": 200,
          "responseTime": 317,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df90d216-8f24-46e3-9e3f-d3c7bb5bab56",
        "cursor": {
          "ref": "97807d55-e1e6-49c8-ab70-3f6836203fba",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "43ef0fcf-034c-46f6-a04e-d43a201a0b30"
        },
        "item": {
          "id": "df90d216-8f24-46e3-9e3f-d3c7bb5bab56",
          "name": "did:invalid"
        },
        "response": {
          "id": "8017f179-5715-4d8f-b385-458368f66de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df90d216-8f24-46e3-9e3f-d3c7bb5bab56",
        "cursor": {
          "ref": "97807d55-e1e6-49c8-ab70-3f6836203fba",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "43ef0fcf-034c-46f6-a04e-d43a201a0b30"
        },
        "item": {
          "id": "df90d216-8f24-46e3-9e3f-d3c7bb5bab56",
          "name": "did:invalid"
        },
        "response": {
          "id": "8017f179-5715-4d8f-b385-458368f66de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbac3839-3e5c-42a1-84d4-e828dad6708d",
        "cursor": {
          "ref": "3db68234-5351-440f-8a44-7ec6032d6b56",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ba1e46e9-2e8f-4af7-b9a8-994a3c8f83b7"
        },
        "item": {
          "id": "fbac3839-3e5c-42a1-84d4-e828dad6708d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "60043356-7216-4898-b8e9-07bd3cf89c61",
          "status": "Not Found",
          "code": 404,
          "responseTime": 203,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334dc572-b39f-470e-9d7e-51f579401705",
        "cursor": {
          "ref": "3fd0e595-f454-4b61-a12a-e4b0605f9d15",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f0d2da39-3a0d-4fa1-a296-6a88a9949601"
        },
        "item": {
          "id": "334dc572-b39f-470e-9d7e-51f579401705",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "269bc88e-021d-4a83-811c-3e0ce55b66c2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d6aac3-c293-40fa-ba62-eba99ecea406",
        "cursor": {
          "ref": "de553638-2238-49eb-817c-0e201edce1b0",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9e3aec0b-77ac-4bbb-b1e9-8b03a25440e5"
        },
        "item": {
          "id": "62d6aac3-c293-40fa-ba62-eba99ecea406",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b29f4323-c99b-4261-bd4e-517c1afc4b14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c980a6d-101d-47f2-9096-3b87bf8abe18",
        "cursor": {
          "ref": "277e1a5b-818a-4377-b6ac-273ed2029c3a",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a0a86261-8679-4a1b-a87b-fc23c546c841"
        },
        "item": {
          "id": "9c980a6d-101d-47f2-9096-3b87bf8abe18",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1db36635-a910-4b0d-bb99-b611e53d800f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c980a6d-101d-47f2-9096-3b87bf8abe18",
        "cursor": {
          "ref": "277e1a5b-818a-4377-b6ac-273ed2029c3a",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a0a86261-8679-4a1b-a87b-fc23c546c841"
        },
        "item": {
          "id": "9c980a6d-101d-47f2-9096-3b87bf8abe18",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1db36635-a910-4b0d-bb99-b611e53d800f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90ff70f-6955-47c1-83a2-631f97c1a5d3",
        "cursor": {
          "ref": "9001068c-b1b5-4217-aad6-fd36fe1f09c6",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b531868a-9eb5-4d1d-a559-545c7b114a35"
        },
        "item": {
          "id": "f90ff70f-6955-47c1-83a2-631f97c1a5d3",
          "name": "identifiers"
        },
        "response": {
          "id": "9ced0c27-a177-4961-9fd2-ee5505cca2e3",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b236be9-4cc4-43fc-8432-49b0d0b40ada",
        "cursor": {
          "ref": "35e86441-f56f-408d-9d3e-299b16b3c044",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b8452966-b805-4081-9467-a1ee93eec6aa"
        },
        "item": {
          "id": "0b236be9-4cc4-43fc-8432-49b0d0b40ada",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b5042d28-cb4f-4322-975e-386eb13aa9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b236be9-4cc4-43fc-8432-49b0d0b40ada",
        "cursor": {
          "ref": "35e86441-f56f-408d-9d3e-299b16b3c044",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b8452966-b805-4081-9467-a1ee93eec6aa"
        },
        "item": {
          "id": "0b236be9-4cc4-43fc-8432-49b0d0b40ada",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b5042d28-cb4f-4322-975e-386eb13aa9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39513a1-cf78-4696-bfb3-b8c8ea29e9d8",
        "cursor": {
          "ref": "62a2b718-2a71-49b5-badc-793cf40eb702",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d31b967c-6056-4dbf-82c0-17047742cac9"
        },
        "item": {
          "id": "e39513a1-cf78-4696-bfb3-b8c8ea29e9d8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7e54dfab-436a-42c8-bc5a-3ac6d206193c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0120fef0-5e3d-4b28-ad27-f5fd95c4098f",
        "cursor": {
          "ref": "825218ff-d8d0-4c3d-b030-b7100b2e4f50",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "554c4788-7498-414b-b781-6bc2fd293345"
        },
        "item": {
          "id": "0120fef0-5e3d-4b28-ad27-f5fd95c4098f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1636d059-980c-411e-82d2-b860065877a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2001a49a-cbf2-4135-a4fa-a2616e85b317",
        "cursor": {
          "ref": "937aea46-3ff9-47bc-a0ce-e677d3c99ce1",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5656940d-c4fe-47ac-8c29-2f3b11c5affc"
        },
        "item": {
          "id": "2001a49a-cbf2-4135-a4fa-a2616e85b317",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "99f6e71b-4cec-454c-863d-421623ea42d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a2e584-cad4-4ab2-8e3e-3c4be278e5f6",
        "cursor": {
          "ref": "1325fe48-0b76-4ace-94e3-515027610027",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1b57d05f-d351-45ca-8ff3-12f3b1866913"
        },
        "item": {
          "id": "20a2e584-cad4-4ab2-8e3e-3c4be278e5f6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "77e57dd2-ab5e-4e56-b8e8-711c4047a340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4c4fee-a663-4323-802c-e05dcf61fed5",
        "cursor": {
          "ref": "dc980769-5c50-486f-9052-3613cc405964",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "33f453b9-bf65-445a-b2d3-0caa11869814"
        },
        "item": {
          "id": "8b4c4fee-a663-4323-802c-e05dcf61fed5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "840d1417-5e89-446c-9a50-aadbcf6364ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e44a63f-ef6e-4962-91f2-e01d1bc8d0d7",
        "cursor": {
          "ref": "8ebe03ea-b212-4058-bd9d-258aa77fb28a",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5714e231-db5f-4c17-9432-44e3c72cb472"
        },
        "item": {
          "id": "3e44a63f-ef6e-4962-91f2-e01d1bc8d0d7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5f96ac52-7b69-41c5-93bb-397f760fde14",
          "status": "Created",
          "code": 201,
          "responseTime": 486,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "fe61fe4a-508d-4bdd-8e14-67da9cea6590",
        "cursor": {
          "ref": "bb439244-9582-4cb9-9cf7-39e23fd12cf0",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ee91239a-766f-4cff-bf73-121350cbd657"
        },
        "item": {
          "id": "fe61fe4a-508d-4bdd-8e14-67da9cea6590",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "04a5f39a-6b4c-4690-a162-cf0606d62984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16400ec5-6272-40ce-bd98-03c0dd4f5d26",
        "cursor": {
          "ref": "e85b74c0-0090-42c0-8253-eed8744959d0",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a23d1d36-51bc-472a-9e64-80e3d5409f37"
        },
        "item": {
          "id": "16400ec5-6272-40ce-bd98-03c0dd4f5d26",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "827bf0e7-1011-4c43-82a4-3a47eec1a428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d11bff9-cc51-4df6-baf2-b23e3d74ca3c",
        "cursor": {
          "ref": "a5f465cd-537c-448a-983c-70cefadd5d73",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "50ded67b-b1dc-48a2-b37d-a2c42fb54f65"
        },
        "item": {
          "id": "4d11bff9-cc51-4df6-baf2-b23e3d74ca3c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4f77c52c-8b1e-442d-968d-19576e4ffeca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfad2a5b-80c2-40ad-a722-58d03e5d6f7f",
        "cursor": {
          "ref": "0f25be7c-538b-49c9-8cbd-34cff7b8947c",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ebb10086-9f04-41ea-b676-d177925d013b"
        },
        "item": {
          "id": "bfad2a5b-80c2-40ad-a722-58d03e5d6f7f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "cee34d86-4ff6-46e0-a979-f2549b704290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567e7908-1dec-46e6-aff3-1a2fe691472d",
        "cursor": {
          "ref": "14b4516b-c3ef-4f46-99b8-21712c4af773",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8bcfe123-d54f-41d0-b503-bae9e2208542"
        },
        "item": {
          "id": "567e7908-1dec-46e6-aff3-1a2fe691472d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f1030b73-8031-4f85-95a1-66ec391cbe0d",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "30e22403-ea36-466f-ba64-dc349efdee8d",
        "cursor": {
          "ref": "59f265b9-54b7-49ba-998f-e845adb437d0",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "41c21515-8888-41a9-b319-6a0f49e177b8"
        },
        "item": {
          "id": "30e22403-ea36-466f-ba64-dc349efdee8d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1c08e634-b367-4646-867b-4ee04fe041a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf61016e-2815-49b7-89aa-5dfc63706b1d",
        "cursor": {
          "ref": "8b1cf061-727e-425e-89ac-5aad94ff1117",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e7849d95-40b9-42a1-a1d1-8c75b5745d6f"
        },
        "item": {
          "id": "bf61016e-2815-49b7-89aa-5dfc63706b1d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a2708e78-1216-4020-ab48-484582953c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36deb61-1879-4b18-acc4-9b3c2cad29e4",
        "cursor": {
          "ref": "c9c21eb6-648e-453e-a05b-378643e3a3e0",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9c605c87-6480-4ad1-bdcb-f2697811debc"
        },
        "item": {
          "id": "e36deb61-1879-4b18-acc4-9b3c2cad29e4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "533a1a88-0b26-4879-bf81-d114248bf416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd7f33b-dfde-4690-9083-732fc789b922",
        "cursor": {
          "ref": "97402242-d2e8-42aa-8178-32613dc3e731",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "49006ed9-994e-40b8-a962-f2f7a49e40ce"
        },
        "item": {
          "id": "9dd7f33b-dfde-4690-9083-732fc789b922",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b3c08cdb-60d8-4640-b59f-2a5fcb973a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe94386-f6f6-4df8-90a2-5dbfe4907068",
        "cursor": {
          "ref": "e7c09be0-1b70-444b-96b3-1d6fa33e3b81",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d7d87476-cc17-4b18-baa1-b2290857e3f2"
        },
        "item": {
          "id": "3fe94386-f6f6-4df8-90a2-5dbfe4907068",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c2801c01-261d-4fd6-8a7e-af29021a36ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51fd0df-ef91-430f-989e-423a366b941d",
        "cursor": {
          "ref": "cd1a3fab-f74f-4f22-adce-021eed7e679d",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6b115acd-0285-42e1-be1a-ed3cdfc4a94e"
        },
        "item": {
          "id": "a51fd0df-ef91-430f-989e-423a366b941d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "78c600c8-6628-49d1-8871-9f1816c19531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0367ec7d-4016-419e-ab79-1c9ebfaabfca",
        "cursor": {
          "ref": "c2b8b860-4c09-4562-9f6d-045247c77377",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "73244602-3381-4599-8a05-6d3f6ec1e5ee"
        },
        "item": {
          "id": "0367ec7d-4016-419e-ab79-1c9ebfaabfca",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1f34f01e-f3bc-4714-a3e2-db1737817025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3329dc-8bed-4a4f-899e-4a9980467c45",
        "cursor": {
          "ref": "c8c0c6d1-5f01-45e8-8fd8-e1feff3e3a5a",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "577970ee-30c3-4756-bff6-dec927cbac0e"
        },
        "item": {
          "id": "4d3329dc-8bed-4a4f-899e-4a9980467c45",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f6fd0995-967b-4fc2-a94e-81a3b4f1aee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd89cf32-9d5c-497a-b7d7-39df8e0c9953",
        "cursor": {
          "ref": "ec59bb95-f7f9-4f9c-979c-da6841517bcf",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b249b2d4-1ee4-4236-8bcc-2ed922772a51"
        },
        "item": {
          "id": "bd89cf32-9d5c-497a-b7d7-39df8e0c9953",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6d7a349c-28c9-40fd-bc39-daf32dba81b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78457ed2-1bb3-4c67-a425-26532b257117",
        "cursor": {
          "ref": "b6e93ce9-8ecc-4ef2-bea2-c62c7c181c6b",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7f072f80-b32d-4aa2-a9e0-bcfaad3397c6"
        },
        "item": {
          "id": "78457ed2-1bb3-4c67-a425-26532b257117",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "41dadc72-b6db-4d51-b750-a9c161eb260c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde957d9-313d-415e-b5b7-8e37b58912ec",
        "cursor": {
          "ref": "fe0584d3-8c64-48a2-b227-c1f473b5740c",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "76f0350b-a9e7-4955-bfef-b4ec639f597e"
        },
        "item": {
          "id": "dde957d9-313d-415e-b5b7-8e37b58912ec",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "341e4f20-6349-401e-8246-bd9423e155b9",
          "status": "Created",
          "code": 201,
          "responseTime": 455,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d77eaf4a-5e33-4e99-a40e-8ade8c5b310c",
        "cursor": {
          "ref": "9cf52d70-e689-4915-82d8-495651550e0c",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9fdaa120-b8b2-4598-94c4-c5b34f866d12"
        },
        "item": {
          "id": "d77eaf4a-5e33-4e99-a40e-8ade8c5b310c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2ce4bab1-dc30-484c-b749-024443484f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fa6a37-b640-4313-b423-428b71f16f2f",
        "cursor": {
          "ref": "c78febf7-0bfc-435c-ba59-622448b17469",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "85c97a18-eee9-4df8-95be-9b02c558556f"
        },
        "item": {
          "id": "d4fa6a37-b640-4313-b423-428b71f16f2f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "89510071-6c4f-4f79-b00f-568d02164671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01611ede-f665-4faa-a9a3-9e9bad7a5897",
        "cursor": {
          "ref": "358ba639-ded9-4389-a53e-a1f7a9dbd989",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "878543ae-0bd2-479f-abfd-a7749e20ac42"
        },
        "item": {
          "id": "01611ede-f665-4faa-a9a3-9e9bad7a5897",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4f5d6aa8-ad31-4dfc-a6e0-ab13ba8bb5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e7685b-0a84-443a-826e-7ad5113570c1",
        "cursor": {
          "ref": "18675bbc-19db-4055-957d-5b1e01a02a3e",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d44c8732-6bcc-4ce9-ac55-6c50f5bb899b"
        },
        "item": {
          "id": "03e7685b-0a84-443a-826e-7ad5113570c1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d31c4d49-f112-4342-8a79-bdff23674c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820f2d26-2d60-4436-a315-31ecf0b67898",
        "cursor": {
          "ref": "7ce96bac-9cec-4306-b55f-8e3e0db7a0ae",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cab7f002-7efe-4d74-99a5-a3749f8d90f3"
        },
        "item": {
          "id": "820f2d26-2d60-4436-a315-31ecf0b67898",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "80dd0da2-4900-4d68-bced-ffa0cdefc037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309c6498-9e00-4b2b-a19c-47c8438f0dd6",
        "cursor": {
          "ref": "25289774-ed12-46e6-aeca-eff932499569",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5a8309fb-00e3-4f0a-b0d8-e207bfeb70d9"
        },
        "item": {
          "id": "309c6498-9e00-4b2b-a19c-47c8438f0dd6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2edad0bc-38dc-4d76-ae6f-46076b5aa433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39444438-ea47-4319-b444-f95df1585688",
        "cursor": {
          "ref": "8368dd51-fb36-4d99-b3cd-673196d60bb7",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f0374f89-b7ba-4226-bd92-1eea171e01e5"
        },
        "item": {
          "id": "39444438-ea47-4319-b444-f95df1585688",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "83cb56c9-36e6-4806-91e5-2deccf4803c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b831ac4-e8bb-4cb8-b67c-80ad947e7519",
        "cursor": {
          "ref": "75750e65-0674-4e18-86bb-98ea4118fcdf",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b9501c3a-dcfb-4b4e-854c-12666fd14ae3"
        },
        "item": {
          "id": "6b831ac4-e8bb-4cb8-b67c-80ad947e7519",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c97a8724-bf58-4e0d-9a8a-cbaeffb35d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ced05c1-878f-473d-85d6-7c22cf1bcd62",
        "cursor": {
          "ref": "717cd3c9-f86f-4cee-ade1-60d83de75e20",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a41fbaf1-b2ad-4b41-ba67-8fe6acb6a3ae"
        },
        "item": {
          "id": "8ced05c1-878f-473d-85d6-7c22cf1bcd62",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "282e59de-dd8b-4764-81ca-25bd1a6de645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe8d6f1-2019-4afd-9aea-61226136d021",
        "cursor": {
          "ref": "ca18e656-e10f-490d-8a3a-23ea1f43f4cc",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e93374f2-d7e6-42b1-a7cd-25fb1a526cfc"
        },
        "item": {
          "id": "1fe8d6f1-2019-4afd-9aea-61226136d021",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f6d15350-0538-4ad8-9e43-747c17185c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedb39ff-ad7d-498d-8c9a-c212e899cb43",
        "cursor": {
          "ref": "b8913747-a749-4a17-9ac4-da75f32383a4",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8d82d3cf-137f-4bc4-b87f-82f4539c995d"
        },
        "item": {
          "id": "bedb39ff-ad7d-498d-8c9a-c212e899cb43",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c40690ce-5e2b-463a-8e73-7727370977d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414aea3f-fc4d-4cd9-b8f8-6d23ec525d49",
        "cursor": {
          "ref": "f1b3ae13-bf7d-4302-b379-5e4f01bbf45f",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a4b71ea8-1842-42d4-9da3-4758a580b6d3"
        },
        "item": {
          "id": "414aea3f-fc4d-4cd9-b8f8-6d23ec525d49",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4811c8e0-a3de-4ae3-baf9-abaa9ea22d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295b8b33-ca0e-40b6-9dbc-d2d86ea8ab5b",
        "cursor": {
          "ref": "44689149-e2fa-4ec3-8011-8b3f8f4a190b",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1efdcad9-e8c9-4967-acc5-b9806cf1054a"
        },
        "item": {
          "id": "295b8b33-ca0e-40b6-9dbc-d2d86ea8ab5b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cc7109d2-f6b9-41c4-b65c-87c747477456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "fff7a0a2-3674-4ce8-9391-a8ed831fa765",
        "cursor": {
          "ref": "49838176-0959-48e1-8192-5e8339db385c",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ad784835-29ba-41ee-9940-2671babf9db6"
        },
        "item": {
          "id": "fff7a0a2-3674-4ce8-9391-a8ed831fa765",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cfcb5e2d-358a-4fbc-bd8a-47b398579c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e55ff0b-3246-4276-9c4b-8d6bf7e58aa4",
        "cursor": {
          "ref": "81a04e1f-6c95-422e-a737-d94c3d1260d7",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3c261ea1-391c-4b64-a96b-a77b078d211a"
        },
        "item": {
          "id": "0e55ff0b-3246-4276-9c4b-8d6bf7e58aa4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f49f5593-de9c-4aa0-a963-2769b6796700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc52683e-e2a6-4fae-9ca9-1ea01f424167",
        "cursor": {
          "ref": "d6fb5b18-dfee-4264-8814-c63008898bec",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1fb51d94-0092-4688-a792-9e80a0620415"
        },
        "item": {
          "id": "cc52683e-e2a6-4fae-9ca9-1ea01f424167",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a313f19b-af55-433b-8395-b11b081d3dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547cc1ba-be07-4ad6-8c38-693201bb29bf",
        "cursor": {
          "ref": "ff66d735-9767-4c50-b462-c1ae8d893311",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "769e403f-59d1-433f-b90f-6cf8dbc979b1"
        },
        "item": {
          "id": "547cc1ba-be07-4ad6-8c38-693201bb29bf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9f0fd7c2-4e14-4038-a0a5-14f41d2f8d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48792b1-6d4a-4905-8a25-a72e6272c6ea",
        "cursor": {
          "ref": "613e73a6-5fc9-47ef-bf01-9f67d8a62ac8",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "23f57b13-fed1-45df-8092-eaacc502fd14"
        },
        "item": {
          "id": "e48792b1-6d4a-4905-8a25-a72e6272c6ea",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "16edb2a4-5db1-4859-bb86-3cfad1abfd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78e93c2-0208-491d-8874-906928dc6fc4",
        "cursor": {
          "ref": "d05b164e-bb8a-43d9-b769-a61c736cae55",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1b4b9166-d834-4b73-8b6b-3178e29e963f"
        },
        "item": {
          "id": "d78e93c2-0208-491d-8874-906928dc6fc4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f3f534ba-2eb0-4dd2-bf04-710a4e5d3ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e603f2-edd7-4132-b01c-43fa47aedd9a",
        "cursor": {
          "ref": "aba58c5f-04be-4a34-8cb5-3ee94cbd358c",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "215f979c-7f21-475a-928c-7ebdb754acba"
        },
        "item": {
          "id": "47e603f2-edd7-4132-b01c-43fa47aedd9a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0dd5c21f-162c-4489-a277-8915b19a4e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a33c948d-e34c-445a-b836-16b9b5b176c7",
        "cursor": {
          "ref": "da96f3b1-5a27-4d33-bb34-791ff29f3d56",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7d4b9a9f-69ad-483f-ab8d-364155dfee7f"
        },
        "item": {
          "id": "a33c948d-e34c-445a-b836-16b9b5b176c7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cad237a6-b706-4678-afea-d58475a62692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a49a0d-f15c-4aa1-b41b-5059efdf3eb4",
        "cursor": {
          "ref": "0368a8a9-2ca5-472f-ba11-801c6cd0e6f8",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2d4f4ecc-f8f8-43e0-8a71-42f69d83b815"
        },
        "item": {
          "id": "30a49a0d-f15c-4aa1-b41b-5059efdf3eb4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f49c1444-85e1-4245-a323-bc9b728e3af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feee3dfd-6a6a-4146-902f-2af6677b512b",
        "cursor": {
          "ref": "12b0fa64-f0d2-42e4-8d21-c9aae2014a8f",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "01778f32-8cdb-4330-9482-3fdf614cb828"
        },
        "item": {
          "id": "feee3dfd-6a6a-4146-902f-2af6677b512b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c856f50e-3dfd-4ddc-b818-f2fa92764e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56a6045-c966-4901-be1e-79e4040fec70",
        "cursor": {
          "ref": "b8572f30-37c5-42a4-9bb1-71a1eb74285d",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b4bfdba6-37b6-42f1-a517-bb239f1ec6fd"
        },
        "item": {
          "id": "a56a6045-c966-4901-be1e-79e4040fec70",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "62e96f3b-b714-4e80-9037-206302aeee1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ee04c1-4068-409d-bffb-0099c3a4d3b8",
        "cursor": {
          "ref": "e8ab9dd0-fc0b-4ff3-92b0-bd6ad8f6f2c4",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b863bde5-2fa2-4dd5-8906-f2e79c9240ef"
        },
        "item": {
          "id": "21ee04c1-4068-409d-bffb-0099c3a4d3b8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4021b523-2521-42fd-9efb-50b091ee1694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e23d75-e0bb-48d3-b379-495b7b814f49",
        "cursor": {
          "ref": "f46fb58f-3217-467e-86ac-139ec3fcb6d7",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "60a1491d-db08-4bdc-bea3-e5640054f250"
        },
        "item": {
          "id": "f8e23d75-e0bb-48d3-b379-495b7b814f49",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d04f48da-61ca-45aa-9e59-498fea89a838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9e8a48-197f-4ebf-a120-a07b14761af1",
        "cursor": {
          "ref": "ac53c0aa-da6f-4f65-a699-144c441d7702",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "195a4737-e7a8-4227-8025-e0aa0127711c"
        },
        "item": {
          "id": "db9e8a48-197f-4ebf-a120-a07b14761af1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8fb3fad7-aa61-45d6-ba26-99078c3e04bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f2f292-6645-4456-867a-31931529f888",
        "cursor": {
          "ref": "22ded921-28a3-4fd8-8c00-7a6f95c5163e",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ff1c108f-9ae9-4b1f-b15d-f579d56a68cd"
        },
        "item": {
          "id": "a0f2f292-6645-4456-867a-31931529f888",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b15a10b4-3c1f-4741-beff-ef4a67f290c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a60c82-9811-497d-8450-22b5acd80db5",
        "cursor": {
          "ref": "02183e7e-2ef8-45f5-91ac-b80900425851",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3797aee1-fa2c-4ae6-881d-48121fdcc480"
        },
        "item": {
          "id": "93a60c82-9811-497d-8450-22b5acd80db5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "20d81d71-a307-4740-a63f-92c676f20f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e26d5c9-3caf-42bd-8cd9-6288d9e166c6",
        "cursor": {
          "ref": "f66faa2c-1070-4609-a8b2-9044bc881525",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6e42a5c2-f22f-44d1-93fa-01944a68aa6c"
        },
        "item": {
          "id": "9e26d5c9-3caf-42bd-8cd9-6288d9e166c6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fb914b96-7785-4f24-a47f-efbd5f5e0c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37271b41-dd57-46b8-9610-7dfe98db636e",
        "cursor": {
          "ref": "f71d667f-0542-4748-ace3-5672551405c2",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e3023398-8f0f-4ced-98b6-03da9876a031"
        },
        "item": {
          "id": "37271b41-dd57-46b8-9610-7dfe98db636e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c1148c71-4835-4ed7-9314-5e9fc6612838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9082a09a-baf8-4ae4-a2a1-309dc30e2de0",
        "cursor": {
          "ref": "d05f296f-2822-4e3b-89aa-d5ef8a719ac0",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bfe1a4be-9ff4-4969-bde4-8a0c045d48a8"
        },
        "item": {
          "id": "9082a09a-baf8-4ae4-a2a1-309dc30e2de0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "14d7fc47-9bb6-47a5-8fcd-35a57b678280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb9ce05-c6cd-4598-9eba-71abfab1fc95",
        "cursor": {
          "ref": "4a5b76c4-64e5-423a-b7c2-4433c4ae6967",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f7384620-4004-4fa7-bfa3-d542dedb4e9e"
        },
        "item": {
          "id": "2cb9ce05-c6cd-4598-9eba-71abfab1fc95",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ee9aee43-5c2e-4446-a488-37ceca2a683e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd8e967-c84b-496d-92f0-9e1a97b29045",
        "cursor": {
          "ref": "25d73ef5-3bbb-490c-b33d-7eeb203d8419",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cb8d3394-131c-43f7-9e0e-a0bca7d7de32"
        },
        "item": {
          "id": "bdd8e967-c84b-496d-92f0-9e1a97b29045",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "17b2c76f-58cb-49c5-ac48-e590f987153a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbdb5b2-afd4-4aa8-965f-3e31674dd909",
        "cursor": {
          "ref": "91c901f3-e3a6-4763-adf5-a373e72aefad",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d0ac2f18-4e3c-46f8-b0bc-5057b0726a98"
        },
        "item": {
          "id": "6cbdb5b2-afd4-4aa8-965f-3e31674dd909",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1d3a8c80-4b3a-4a0a-aaa7-6988c1aade59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e36971c-1409-4aba-8931-a088a8f8638e",
        "cursor": {
          "ref": "3a010012-e3db-4483-acf0-ec5e06c8183b",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5da1e209-08b8-4422-9068-9556cdfb3d06"
        },
        "item": {
          "id": "0e36971c-1409-4aba-8931-a088a8f8638e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fcfef185-2d7e-4439-8b08-5dde0f1c833f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43770f22-2091-49ba-ac92-f6cd7b507344",
        "cursor": {
          "ref": "8ae0b2bf-630c-4b4d-b733-2dab805de6cc",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5ff8f2d3-d15c-420f-8892-0e9de8ce6733"
        },
        "item": {
          "id": "43770f22-2091-49ba-ac92-f6cd7b507344",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "567b1bd0-fb59-4796-87e6-a0e92d9e8972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2466ad9-70dc-479e-ad9e-0816265b7da7",
        "cursor": {
          "ref": "9178efdf-9888-480a-bbf7-33ca41142c88",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1fcf55e8-886a-4ec0-946c-36bc8b71f3a0"
        },
        "item": {
          "id": "a2466ad9-70dc-479e-ad9e-0816265b7da7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "74617b46-bb92-452b-92dd-bedeb6d0878d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bba6a90-13ad-4679-b821-b3fe29299ab1",
        "cursor": {
          "ref": "8afd8027-22ab-4f24-a25d-ff0772eecfb1",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5c686d66-e26a-4a4c-a2e6-c1df19c4791f"
        },
        "item": {
          "id": "9bba6a90-13ad-4679-b821-b3fe29299ab1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "15810b13-07b3-427c-aa92-af6c2c04009c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc77f08-d8f9-423a-aee8-c1615dd9384a",
        "cursor": {
          "ref": "c75ad555-d227-467a-888a-3cf873272d17",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6c549771-e734-4539-98ba-cb9fc6ac41ff"
        },
        "item": {
          "id": "afc77f08-d8f9-423a-aee8-c1615dd9384a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "410213a6-01d1-4d76-b21e-9bf6dadb91d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3da9a8-944b-41bb-a9a0-436f0efc6a2a",
        "cursor": {
          "ref": "37b0069c-449b-455d-802b-6250fdb8ecb5",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b357c06a-c365-4ced-a85b-4d677c870a69"
        },
        "item": {
          "id": "5b3da9a8-944b-41bb-a9a0-436f0efc6a2a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "98024fab-724f-4650-880c-ebbf50fa9c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c83224a-e559-4e7c-8c0b-ba3b61293e85",
        "cursor": {
          "ref": "68490022-d04e-4c6f-ad7d-c4b0242f5c3c",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "dda948a7-694d-4d4a-8882-6f03075ab38a"
        },
        "item": {
          "id": "3c83224a-e559-4e7c-8c0b-ba3b61293e85",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "44ef6eae-274a-4717-b326-b7568e0a087c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cc7a0d-eee4-4386-a058-ceba0924c244",
        "cursor": {
          "ref": "44c7cdc0-0f33-44a7-ba7a-ca2774824d20",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "38778842-081e-4e5f-bd5c-f9e39bedfe04"
        },
        "item": {
          "id": "29cc7a0d-eee4-4386-a058-ceba0924c244",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6d926161-a277-4faa-987d-77194a00ab01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccaf01f-fd4b-4199-9671-1c9b81f6dd27",
        "cursor": {
          "ref": "4ca71415-ce79-4f34-9230-426641a4f1af",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "527078b4-7957-41fd-a890-8797d054661c"
        },
        "item": {
          "id": "fccaf01f-fd4b-4199-9671-1c9b81f6dd27",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2a553650-fdcb-400c-8c02-bd2c0872c8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65baa810-2da2-4372-8f8a-595a03fc263e",
        "cursor": {
          "ref": "0e361a3e-4098-49a7-9105-85fa4cc577a6",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "729c1f10-e2de-49e0-90c3-c8e877691e1a"
        },
        "item": {
          "id": "65baa810-2da2-4372-8f8a-595a03fc263e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e9d890a2-01de-4171-bd1e-5a0432c540bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbb8cc8-a1e2-4e23-bd66-3ce415f757f8",
        "cursor": {
          "ref": "f646b91d-4e9f-4692-ad76-98751a4695fb",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "339abe90-2f49-46cd-8f4e-574fc28c8e9e"
        },
        "item": {
          "id": "bbbb8cc8-a1e2-4e23-bd66-3ce415f757f8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "52dc58a6-3b6d-4972-b607-98c9ff8f82e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c87cc3-8fe6-4af8-83cf-a16f19b8f7d6",
        "cursor": {
          "ref": "364c49db-a60e-4eb4-b8a3-e22ab8808088",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4dcf90b7-acf2-49d1-9aad-5410638a9cd7"
        },
        "item": {
          "id": "05c87cc3-8fe6-4af8-83cf-a16f19b8f7d6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a311bae5-a813-46be-8179-b8f6b720bb1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8172dd48-c967-43fc-806b-ea137121a400",
        "cursor": {
          "ref": "1d430a88-75b3-4abd-a064-52d75bd3c01c",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5511c42a-f144-4232-bbef-74b179090666"
        },
        "item": {
          "id": "8172dd48-c967-43fc-806b-ea137121a400",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "666b8a80-01da-4674-93dc-09f4c03aaa36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efba8029-d8c2-4dc4-9595-2654400dce7c",
        "cursor": {
          "ref": "cd9870af-2f41-4852-ae05-4573bda9d17f",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f1c3f574-b903-4ddb-ac5c-b21ae9c1f185"
        },
        "item": {
          "id": "efba8029-d8c2-4dc4-9595-2654400dce7c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4f572e00-fa42-48e3-b3de-4355d14a24f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03855c1-ab6e-4b1b-9419-5f4ae285f13a",
        "cursor": {
          "ref": "b58b671b-4a07-4dda-b864-f04a8d51f04a",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9927b516-a33f-4ab8-b83d-315d6c0ea62c"
        },
        "item": {
          "id": "f03855c1-ab6e-4b1b-9419-5f4ae285f13a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "da98c9ab-c2e5-4754-bfbf-631e22c0689a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c870e6-3c6d-4f9b-be99-d2f47be67af5",
        "cursor": {
          "ref": "00da7b6d-22ab-4a85-ae4f-4d184b5e7673",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "12663079-e9c2-4548-bdcb-e19681ca7963"
        },
        "item": {
          "id": "d7c870e6-3c6d-4f9b-be99-d2f47be67af5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "214884b8-367c-400b-bd78-9c67caaabc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d7aa2a-6697-4ed7-adb1-e24adb897b9f",
        "cursor": {
          "ref": "d769a464-fadc-4efb-acf2-1b6e32cdf0da",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "12ef0a5f-70dc-48c9-aa19-42b5c92407cc"
        },
        "item": {
          "id": "74d7aa2a-6697-4ed7-adb1-e24adb897b9f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b56a62d4-7761-477c-9a7e-cfa552e933ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107b5a8d-088e-46ab-aedf-a42b19c2f1dd",
        "cursor": {
          "ref": "e109a01d-503f-4152-92cd-8acef2f4ad2f",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "24598384-ebe6-4e96-9f0d-fccb5972cfc8"
        },
        "item": {
          "id": "107b5a8d-088e-46ab-aedf-a42b19c2f1dd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fdea5db1-b85e-4893-9f19-eb7b09a10873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628ed638-433d-4abf-8236-0e2d40b534db",
        "cursor": {
          "ref": "1a6787a9-2b96-4217-b834-b1037adff594",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4f552026-af09-4d54-9b85-4abac43122d1"
        },
        "item": {
          "id": "628ed638-433d-4abf-8236-0e2d40b534db",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6735e351-8662-4788-b723-95085cea3a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4ff11c-6fe1-40ec-9789-4f573cb28cca",
        "cursor": {
          "ref": "4494ef16-2d24-4951-afc9-7ac63eb4e914",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0b0f0434-dd2d-4dea-9aa8-23e94b6d5780"
        },
        "item": {
          "id": "9b4ff11c-6fe1-40ec-9789-4f573cb28cca",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "de8786c0-e16d-4d58-933d-eea1574dd79b",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "beaba7dc-08d4-429a-9878-ded59bc5adb5",
        "cursor": {
          "ref": "daf71eed-bd67-4fa5-aa51-79d82c84614a",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7b3acf09-e7f3-4b9a-ba63-1654c0f4ddd8"
        },
        "item": {
          "id": "beaba7dc-08d4-429a-9878-ded59bc5adb5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c662b0eb-8671-4121-a354-18486acf6e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b4fa61-5cef-435c-be67-437fdce53f43",
        "cursor": {
          "ref": "420f8ce4-359e-42ac-b361-2b5fcc88f17f",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c7f6a366-b378-482a-bcd7-0bd1ebac0361"
        },
        "item": {
          "id": "d2b4fa61-5cef-435c-be67-437fdce53f43",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3db874a3-e7b3-4491-adfb-cf1bf6d4a3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40394ff2-461c-4fa5-8b24-e9029508d966",
        "cursor": {
          "ref": "9fbc11a9-3cb1-43c1-a644-4092446389ed",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bbfec7b3-b4d1-477b-b5fe-036f5788afd4"
        },
        "item": {
          "id": "40394ff2-461c-4fa5-8b24-e9029508d966",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0ad8caae-c484-4de6-9504-f5a812f66c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7a83f7-b8e4-4db3-ae74-ec018b0e8a09",
        "cursor": {
          "ref": "ef2352db-24b8-4c30-89f1-8959ae3d3cd0",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "de06703e-9b0f-4db6-8b8b-028ed65b3fcc"
        },
        "item": {
          "id": "ef7a83f7-b8e4-4db3-ae74-ec018b0e8a09",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4ea74bf5-d2b4-4849-a7b1-d8a50a06bff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b336fcdf-38bc-4e17-98bf-2fe3fe302ace",
        "cursor": {
          "ref": "9b94ff92-8023-420e-8c2d-65fd744bbdcd",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "63ae87fd-d5d5-4119-82a6-1921f28eeb34"
        },
        "item": {
          "id": "b336fcdf-38bc-4e17-98bf-2fe3fe302ace",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9673a855-1f34-4dcb-8cba-24c0c6dff7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00f2846-4118-4d47-ae38-7f217058a235",
        "cursor": {
          "ref": "cdc9920f-16c1-4b76-a6a7-013267955fd8",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "21dfa1cf-9220-4dc0-b798-20babb8a95f5"
        },
        "item": {
          "id": "e00f2846-4118-4d47-ae38-7f217058a235",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ba03168c-3d9b-472b-afff-75806e56e391",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "bc37d4b8-8abe-4d07-9a46-f2a49eadcf1d",
        "cursor": {
          "ref": "ca61f5ff-a394-4da7-8509-5bb0105803ef",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f70af1ac-57c7-46bf-9f13-fbb5dc1c1b7c"
        },
        "item": {
          "id": "bc37d4b8-8abe-4d07-9a46-f2a49eadcf1d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b7a114bb-3c78-4da0-ab07-a80a848b8321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6025adc5-8d07-485c-9157-6ea6587118cf",
        "cursor": {
          "ref": "14906426-0b21-45e1-b5b3-2cfb2ea7efcd",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "039028b5-5af2-4e60-a25f-9366a14ad9d8"
        },
        "item": {
          "id": "6025adc5-8d07-485c-9157-6ea6587118cf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f227a313-e9bd-41b1-9adf-d4b6931fa120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9733139-b099-4534-b209-11391663d38c",
        "cursor": {
          "ref": "4ec232e6-a17f-4b1c-90f2-5ab0ce539786",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bbfeafd1-8d99-4878-bbdd-bf6ebb29faa1"
        },
        "item": {
          "id": "d9733139-b099-4534-b209-11391663d38c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "611125f4-8e4c-4964-842e-f9444cb23c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084b2aff-d200-4273-bbb5-013ad8eb7c72",
        "cursor": {
          "ref": "906dbc53-08fa-4379-9426-fde586926a83",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "801bd4eb-4abe-460f-ae7b-3f46f0359b9f"
        },
        "item": {
          "id": "084b2aff-d200-4273-bbb5-013ad8eb7c72",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f7c9ec21-4821-4326-b44b-944252eed87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6265843c-384d-4c4c-9888-3c21ebf54b05",
        "cursor": {
          "ref": "d638c227-634f-4e20-9b38-749898f4dd21",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6ccde26d-cdb8-4b7f-981a-578dab55e5e9"
        },
        "item": {
          "id": "6265843c-384d-4c4c-9888-3c21ebf54b05",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ffab4a44-5389-4196-a659-8c1d9ebfa50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836edf1c-bc64-4e4e-a81f-e56a1d275456",
        "cursor": {
          "ref": "b1b92e62-e9a0-4cd2-8179-fbd13845c8a8",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5f4468c5-3530-4a60-b324-e120fc5fdc6b"
        },
        "item": {
          "id": "836edf1c-bc64-4e4e-a81f-e56a1d275456",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "be4135bb-c2e4-41c2-9210-67ea8f1ce841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8ed8cb-4f16-4f64-bbcb-3914b4e58b18",
        "cursor": {
          "ref": "1368a50c-1991-427c-817e-7a2a241cb33b",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a9dc558e-87ee-42ce-80b8-2be18999d7bb"
        },
        "item": {
          "id": "ee8ed8cb-4f16-4f64-bbcb-3914b4e58b18",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ce3e0d70-e1e4-45dd-b5c0-909e056ff4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c5bd1e-6c44-41f8-b052-42bd702b790e",
        "cursor": {
          "ref": "4fa35a50-7982-4d17-968b-1251ff5fc344",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bc78af8b-37c0-4baa-aa77-40d21c883eb2"
        },
        "item": {
          "id": "78c5bd1e-6c44-41f8-b052-42bd702b790e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "43d1e6f6-9c46-42cc-98d7-9379efa1b3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b134d96d-e756-4341-8530-cf878524d1a2",
        "cursor": {
          "ref": "a87f7875-426f-4e61-bf3c-862f249a3c59",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d6d032da-da10-48f2-888a-4c1d1753551c"
        },
        "item": {
          "id": "b134d96d-e756-4341-8530-cf878524d1a2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "420f4dea-0917-4bca-ad28-21061b2090e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "95134a11-7ca6-4fe5-b172-d8f7bccbb0fb",
        "cursor": {
          "ref": "6f19dc0a-177e-4773-acf0-67b2c94118cf",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "69ea7e82-74ca-4c12-b346-b9c807d2948e"
        },
        "item": {
          "id": "95134a11-7ca6-4fe5-b172-d8f7bccbb0fb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e2f1516b-197c-4ffe-b2c3-bd1d33ac9e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b4a3b77d-67ff-43f3-9e2d-736fb2136055",
        "cursor": {
          "ref": "e6921841-7e85-4a44-a778-8579a19bbf90",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5052bffc-d164-47db-acb6-3903b3837f3b"
        },
        "item": {
          "id": "b4a3b77d-67ff-43f3-9e2d-736fb2136055",
          "name": "credentials_issue"
        },
        "response": {
          "id": "14e58f16-484b-4808-b762-6c5ab1600af6",
          "status": "Created",
          "code": 201,
          "responseTime": 459,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa81ebdd-da8d-43da-97dd-bb28bcf20f5b",
        "cursor": {
          "ref": "59d5d04c-e8fe-4ffb-a2e1-7a8f3e8d0071",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0d2a603e-2abc-4e7c-b68d-361456a4b2a3"
        },
        "item": {
          "id": "aa81ebdd-da8d-43da-97dd-bb28bcf20f5b",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "a135f61c-bbfa-40e2-a590-48894e615231",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839b6526-709d-4027-9e7f-8cd09834dff8",
        "cursor": {
          "ref": "d8aca166-bb3d-4f7d-819c-2eb03c422d14",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "187de3f3-18b6-4b07-add3-7feea1a779aa"
        },
        "item": {
          "id": "839b6526-709d-4027-9e7f-8cd09834dff8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "eb2efaec-7c26-46bb-9948-f53ef4e96e4b",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4b583a-5e9a-4294-9d22-c04c81fe928a",
        "cursor": {
          "ref": "b37f24e3-be59-4deb-bc0d-7522720f036f",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4122caab-2285-400e-a374-84e188f028a3"
        },
        "item": {
          "id": "2d4b583a-5e9a-4294-9d22-c04c81fe928a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1760ec75-303d-4e17-8965-d674890994d3",
          "status": "Created",
          "code": 201,
          "responseTime": 372,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "64eb0c3f-f247-4720-a2b4-0b49bfcca676",
        "cursor": {
          "ref": "304e5efc-454c-4f86-b9ee-a50127b198d9",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f29af11f-6016-4d34-a372-4a2cf7112af3"
        },
        "item": {
          "id": "64eb0c3f-f247-4720-a2b4-0b49bfcca676",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5e7d8a13-94df-4a4d-899f-018a67ce2f42",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bce366-3053-452f-86ec-75791c5fbb39",
        "cursor": {
          "ref": "dd411960-5e9d-41e3-884d-7887310a9570",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "058a929a-e88f-4ffc-b021-5d208cc45fd4"
        },
        "item": {
          "id": "82bce366-3053-452f-86ec-75791c5fbb39",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "73ec96b2-1ad3-46fb-bee1-2acd47e19328",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4386d8-41b3-43c8-af0c-619196b238bc",
        "cursor": {
          "ref": "c4da017c-b62f-4422-99d2-6a6c9ad297d1",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3b54c8fc-27e4-46c0-aa6a-5275f28712b0"
        },
        "item": {
          "id": "9a4386d8-41b3-43c8-af0c-619196b238bc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6d3a9596-fbf6-41bf-9009-26ecdd1b2fa7",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9a4386d8-41b3-43c8-af0c-619196b238bc",
        "cursor": {
          "ref": "c4da017c-b62f-4422-99d2-6a6c9ad297d1",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3b54c8fc-27e4-46c0-aa6a-5275f28712b0"
        },
        "item": {
          "id": "9a4386d8-41b3-43c8-af0c-619196b238bc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6d3a9596-fbf6-41bf-9009-26ecdd1b2fa7",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "cde4e501-1741-4fc7-b4d5-8f42fd9106fa",
        "cursor": {
          "ref": "21bccde7-45b0-42d5-b517-75928d7fc328",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "31909eed-9b86-4745-a5a6-915c245cda3f"
        },
        "item": {
          "id": "cde4e501-1741-4fc7-b4d5-8f42fd9106fa",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a910e854-65c3-4e6a-bef5-f16569134673",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c0c1c39e-36e1-432c-8795-26d5731a53ad",
        "cursor": {
          "ref": "227435bd-2cbc-46ae-b482-23294ab703ef",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c846049b-d1c0-4e43-b0d2-f24f279eeca3"
        },
        "item": {
          "id": "c0c1c39e-36e1-432c-8795-26d5731a53ad",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9a15ab71-5480-44f9-a284-7001cab1574d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9a7da338-af29-400e-9658-8a363fda8cdb",
        "cursor": {
          "ref": "9799716f-dce3-4025-9a0e-263ade532c23",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f23c4962-c900-468e-9f4b-928834afd8a8"
        },
        "item": {
          "id": "9a7da338-af29-400e-9658-8a363fda8cdb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3816fd54-caee-483a-8b5d-911edac9532a",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "8914ed0d-0db1-4dca-9da4-83d2b586fe62",
        "cursor": {
          "ref": "cc33b3bb-e41e-477d-bbef-42856feb729b",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2cbf672a-7da0-4151-9134-79289a07fac4"
        },
        "item": {
          "id": "8914ed0d-0db1-4dca-9da4-83d2b586fe62",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "119f91b2-969e-452d-abc5-0a267ff7c0b1",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d27b4165-93cd-461b-a8ac-f135616a3edd",
        "cursor": {
          "ref": "b9d3c023-6d68-475f-b17e-de3b4470d9f7",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a923413a-2087-4161-84ce-217c27829d81"
        },
        "item": {
          "id": "d27b4165-93cd-461b-a8ac-f135616a3edd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6d5ec4b8-c271-4291-897e-b9aa062249a7",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5f802924-82e9-4ae3-8afc-a961446d2896",
        "cursor": {
          "ref": "aed2a166-a3f6-4497-8cb6-776afcc18f6c",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fcd9af5c-0404-4adb-a10d-513e46d39b91"
        },
        "item": {
          "id": "5f802924-82e9-4ae3-8afc-a961446d2896",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2ba3594f-cd44-4529-86a4-fcdf6c57707e",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "061c2836-8292-41de-8a4a-ca219731ce26",
        "cursor": {
          "ref": "03f929af-b4ea-437b-8f42-b642dbb799f4",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "016d2d88-5c4e-4a76-960d-b750501107dc"
        },
        "item": {
          "id": "061c2836-8292-41de-8a4a-ca219731ce26",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2fcf833b-2a09-4d92-aa2f-fbbf703a5bfc",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "6c8c093b-4d8e-4f4e-aa23-ef0bfba756bb",
        "cursor": {
          "ref": "8368d892-4125-475b-927e-de598ff2f2c4",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "be89492f-e223-46bf-b297-478045342dc7"
        },
        "item": {
          "id": "6c8c093b-4d8e-4f4e-aa23-ef0bfba756bb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8f83910b-2e15-4a4b-bd12-7b1ed4f87b0a",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "24500dbf-8a11-4d28-9f32-94557d3109ed",
        "cursor": {
          "ref": "a36e7018-c373-411d-a7fd-498ee89abe76",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3750797d-b39f-465e-9566-a5b0ea129956"
        },
        "item": {
          "id": "24500dbf-8a11-4d28-9f32-94557d3109ed",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "77f0c04a-4868-401a-89cd-d3b62160ef46",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "9c8dba67-003e-4d09-b47a-8632b95a5e69",
        "cursor": {
          "ref": "a53ddf12-4d30-46b9-aad4-fd378709e89d",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fc386441-eacd-4d69-a45a-09c62118a340"
        },
        "item": {
          "id": "9c8dba67-003e-4d09-b47a-8632b95a5e69",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "35b375e3-5d49-4414-9205-5b5082014dfe",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "3f5de6ed-f9f9-4441-a3aa-ffb31bfbb530",
        "cursor": {
          "ref": "f2094643-7f36-4b3e-af3b-00ad19af1c9f",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "27f8cc5a-fca6-4158-a9c6-d866b59506a9"
        },
        "item": {
          "id": "3f5de6ed-f9f9-4441-a3aa-ffb31bfbb530",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3157877b-226e-451e-b68e-0019ae26b3b6",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ce404c70-37c5-49fa-a984-b45ab5b0996c",
        "cursor": {
          "ref": "3b9e3211-1bca-47f3-8d12-23644ccb149f",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b68815ce-22db-405c-acd5-bf8f26dc805e"
        },
        "item": {
          "id": "ce404c70-37c5-49fa-a984-b45ab5b0996c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7142767a-4bf0-4b20-9d8d-a3aa39cefe43",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "429ca72a-76da-412f-ac63-07f33029a1e7",
        "cursor": {
          "ref": "4393b5e4-5be9-481e-abf7-d5279add4548",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dd53d9f8-7797-44d0-9f60-01f65766f39e"
        },
        "item": {
          "id": "429ca72a-76da-412f-ac63-07f33029a1e7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "88ece675-f58c-4226-b068-0f8010d134b7",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7c33f837-63a0-4d00-a79e-d8d53a47c8ba",
        "cursor": {
          "ref": "41cdf981-7c64-4df9-bcf7-83f3117e1ce4",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ca03b46d-c6dd-4dbd-aeb2-c992fa6d8137"
        },
        "item": {
          "id": "7c33f837-63a0-4d00-a79e-d8d53a47c8ba",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "59bdff95-ff99-4b04-bb5f-de1fc675bf31",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "95c6b822-3a31-4560-83d8-d9df876c3896",
        "cursor": {
          "ref": "ec4e8272-52ca-4bee-8ec2-301083ce2fb8",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bb5a1c17-7ecc-4c67-98f3-43d37c12f9e4"
        },
        "item": {
          "id": "95c6b822-3a31-4560-83d8-d9df876c3896",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6c86655d-94c9-4de7-8543-6520a166a655",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "96108353-2a12-43ac-a93d-d1fef98f969e",
        "cursor": {
          "ref": "9b8ae925-2b10-4179-8720-9d88ba4d7dc9",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bf9556e3-3d35-4a90-b9b9-517c1453a943"
        },
        "item": {
          "id": "96108353-2a12-43ac-a93d-d1fef98f969e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e8fe2b36-92aa-437f-a076-b78ccd019fc2",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "a6327875-d712-4252-b8d8-02e44b5c1dbc",
        "cursor": {
          "ref": "50e6adab-988f-4e92-b0fe-ff4f93d7ba2a",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "53340c4b-80d6-4a17-a43c-42d409257f9c"
        },
        "item": {
          "id": "a6327875-d712-4252-b8d8-02e44b5c1dbc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3d752e98-96d4-4fec-84d3-c61557123e99",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "64c656ad-33c4-44ad-bc03-e179ef136f9b",
        "cursor": {
          "ref": "ef1e1a9b-31e8-440c-b5af-2271fae22839",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "370b5827-61d5-489d-a212-d71f58dfda0e"
        },
        "item": {
          "id": "64c656ad-33c4-44ad-bc03-e179ef136f9b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "62669221-1614-4fab-ada0-d7c579073fe6",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "8315713c-3e31-41c0-a1f7-75443251b8c1",
        "cursor": {
          "ref": "2bef45d4-bccc-4eaa-b304-ee9cc61691ab",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cfd6e0e7-45d0-4e05-bc13-2f347fb5ddcb"
        },
        "item": {
          "id": "8315713c-3e31-41c0-a1f7-75443251b8c1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1f353818-3c26-4bcc-b1e9-e55a340acc04",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "6928b6b5-7bda-4c22-8de6-7d9055bcfa9a",
        "cursor": {
          "ref": "5cbc9e42-c47e-4ad7-b4b0-00af5ed73ba1",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "33f0ae31-a5a5-4a26-998a-259199e4b566"
        },
        "item": {
          "id": "6928b6b5-7bda-4c22-8de6-7d9055bcfa9a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "db7a3642-0fd0-4cb7-bff8-afaeed31fb71",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "77729f78-e286-4067-9d7a-e190dd8fa9be",
        "cursor": {
          "ref": "3a43d107-ec6a-4f7b-a91c-ea70f5631e00",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0b8e3a81-c8e4-4d0e-a071-6d850ade3f63"
        },
        "item": {
          "id": "77729f78-e286-4067-9d7a-e190dd8fa9be",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a3ddd841-0eb8-4887-acaf-9fa60a2286f1",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d9932bb6-765b-4264-b1be-3b5a32c5fdac",
        "cursor": {
          "ref": "58372829-9e7a-46df-bc8d-9891bee33194",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "47c45a34-5ce9-4634-bbbc-96770fa735d2"
        },
        "item": {
          "id": "d9932bb6-765b-4264-b1be-3b5a32c5fdac",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "130ba5a0-5b65-4411-b365-d3f4453f257c",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "2fe86544-defa-478d-8be6-f2bda67bcf98",
        "cursor": {
          "ref": "c407ec96-ef9a-438c-abef-bd16c72ebbd8",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7a6d5b4e-91f6-4c4c-95c6-44a95cf91508"
        },
        "item": {
          "id": "2fe86544-defa-478d-8be6-f2bda67bcf98",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "64e838d5-bd5c-42a8-b273-21c5bb5ef688",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "08546b6f-e3fa-46e5-9e7e-bb0f867f3ce4",
        "cursor": {
          "ref": "66e9b081-502a-4a75-aa87-fe4d6e378334",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fd6f19db-632d-4371-9f75-0d9b65afb7d4"
        },
        "item": {
          "id": "08546b6f-e3fa-46e5-9e7e-bb0f867f3ce4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "92394dd8-0555-4d77-a426-1b1d1afe47ef",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "789370a1-fc36-4dd5-86e0-363435763e9e",
        "cursor": {
          "ref": "d9c52487-d8c3-4ea9-ad73-763af4653f33",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4c20fb07-2e5b-472e-82d4-dfad2d30348f"
        },
        "item": {
          "id": "789370a1-fc36-4dd5-86e0-363435763e9e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "677e56e6-6436-43bf-a1d1-1ecc8e0ee22d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1f9ef229-6c17-4d2a-a42d-8cadea7bddc3",
        "cursor": {
          "ref": "ba53a1fe-fb01-4c28-865b-58d5065dbf23",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "39f571d3-278a-4870-9adb-d8aeacb716e4"
        },
        "item": {
          "id": "1f9ef229-6c17-4d2a-a42d-8cadea7bddc3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9d74b930-d39c-4180-a82e-d31d3496c809",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "eb2f2df5-0dbe-4dbf-92c9-86c778e42f9f",
        "cursor": {
          "ref": "7f670164-1d31-40f1-bfc8-37daac5eec5a",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b9979252-5dc7-49e8-b0c9-0e870fec2959"
        },
        "item": {
          "id": "eb2f2df5-0dbe-4dbf-92c9-86c778e42f9f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c98d8d4a-90ff-475c-afdc-899e1274b205",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d1d9ae59-95d4-498b-8c15-977087acb968",
        "cursor": {
          "ref": "42dc8978-a823-4df7-8673-4574e6867ad5",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "73a9eae7-977d-44aa-8c68-7943e4089914"
        },
        "item": {
          "id": "d1d9ae59-95d4-498b-8c15-977087acb968",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "58731425-40d1-4e84-85b1-9aec60fabf7c",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "3e084110-1d00-4d80-a0fc-9fa4a3c722e0",
        "cursor": {
          "ref": "cf8fdaaf-2cc0-4796-be84-99823543df4a",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a5e03e2f-3322-47cb-a875-567732d60a31"
        },
        "item": {
          "id": "3e084110-1d00-4d80-a0fc-9fa4a3c722e0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8f97fa3f-f146-480d-9dbe-92a124400cd3",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "5c70cc53-0190-4cc0-8e4d-a782b3de8343",
        "cursor": {
          "ref": "211e51ec-f873-4f76-85fa-153fc8d05a90",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c3ed05b4-8335-4bb1-b023-d3a213011dc7"
        },
        "item": {
          "id": "5c70cc53-0190-4cc0-8e4d-a782b3de8343",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9371b2dd-6370-4f6f-9cbb-14241e3a0b37",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4971b721-69c6-48a2-aa24-539b68d5f16d",
        "cursor": {
          "ref": "761bb220-da37-403c-a0e1-413bf99d6660",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "263aff89-68a4-4786-b08f-8dc94eae366f"
        },
        "item": {
          "id": "4971b721-69c6-48a2-aa24-539b68d5f16d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "acc9e1cb-46f3-4176-a140-75d90b68e62d",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "002f7cd4-7bf2-49a3-9098-121ca9404c3d",
        "cursor": {
          "ref": "6364abaa-ffd9-4ec7-84a5-fca9b7d31c6d",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f63aa0aa-7bd6-4663-9584-0ca04d647b13"
        },
        "item": {
          "id": "002f7cd4-7bf2-49a3-9098-121ca9404c3d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6c843d4c-c2c3-460f-937e-aac535cda108",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e85c99-dd84-4690-97b5-e3f9a1ac8eeb",
        "cursor": {
          "ref": "ac634b64-b9ec-4d1e-8729-5708ecf1231f",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d71bd2f3-8402-441a-80e7-df09376bebd9"
        },
        "item": {
          "id": "89e85c99-dd84-4690-97b5-e3f9a1ac8eeb",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "66aa2be6-b9a4-41c9-9de3-7eda6d1b90a5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782f8a4c-df48-42d2-ab06-ce75d5961774",
        "cursor": {
          "ref": "d004e561-c8b6-4e02-a486-9aaf7e9e44ba",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8cf00bcf-6880-4ebe-9bea-057f28988c0c"
        },
        "item": {
          "id": "782f8a4c-df48-42d2-ab06-ce75d5961774",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "de800b2f-7fae-4571-908d-29ca85e5f5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782f8a4c-df48-42d2-ab06-ce75d5961774",
        "cursor": {
          "ref": "d004e561-c8b6-4e02-a486-9aaf7e9e44ba",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8cf00bcf-6880-4ebe-9bea-057f28988c0c"
        },
        "item": {
          "id": "782f8a4c-df48-42d2-ab06-ce75d5961774",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "de800b2f-7fae-4571-908d-29ca85e5f5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71df6b4-e372-4cc3-8c3f-d9bbf1d7c327",
        "cursor": {
          "ref": "59cce307-8fb1-4818-a59d-fb8dbe0b5036",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "60a18d6c-cb84-47ab-8061-23bdf60824cd"
        },
        "item": {
          "id": "a71df6b4-e372-4cc3-8c3f-d9bbf1d7c327",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "77c4f198-6909-47db-9808-9c1bcc0cdfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e56c90-67a6-4ee0-b430-6deb5e0cf7c4",
        "cursor": {
          "ref": "97800e41-ca80-4494-a078-af012007fa80",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "08dc20c8-449a-45fb-b47b-b847af5b8754"
        },
        "item": {
          "id": "30e56c90-67a6-4ee0-b430-6deb5e0cf7c4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ca722a1c-d192-4652-9eb8-bbd6f865d26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486d7cc2-cec0-46f4-8722-5611f9819180",
        "cursor": {
          "ref": "84cda60e-6237-4f87-adff-0196c20d3d69",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bee2a8fa-b384-49a9-9a26-841e01e52bd7"
        },
        "item": {
          "id": "486d7cc2-cec0-46f4-8722-5611f9819180",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0c88ac05-b353-49a7-b888-43d1d8ecdfed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99ed828-3f07-445c-8864-9e0bb831b811",
        "cursor": {
          "ref": "50e10ac6-aa1c-455e-a14c-7d3fdf5c1e6d",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "64d2c0cf-35a0-48d7-ac22-70a0e90dfa66"
        },
        "item": {
          "id": "f99ed828-3f07-445c-8864-9e0bb831b811",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a7fd272a-45bc-45a7-8ceb-603065033e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1a9e56-1e3e-403f-b89a-913ec0151802",
        "cursor": {
          "ref": "d898834a-d931-4fbc-a107-e9cda156338e",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f697b1af-8e9e-4719-a78f-0ef5651340ce"
        },
        "item": {
          "id": "cb1a9e56-1e3e-403f-b89a-913ec0151802",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a49aa29e-4d49-46db-9fd7-7bdcd7f2c340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae6da19-c15e-4747-b847-3df17b10078f",
        "cursor": {
          "ref": "875e6e9c-cb24-4c43-823d-4cb0b98a9f76",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c975cea6-8773-4784-bc58-fd89624dfdff"
        },
        "item": {
          "id": "8ae6da19-c15e-4747-b847-3df17b10078f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9a24e7c3-5002-4dc5-ab7f-e10e4e28d9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 649,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d20d8a5-5121-48e4-935d-a398e0a86228",
        "cursor": {
          "ref": "e16e3720-ead7-4399-9b60-355518067a11",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "697ddaa5-9ce8-42bf-bf88-d1056906fea3"
        },
        "item": {
          "id": "0d20d8a5-5121-48e4-935d-a398e0a86228",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e330630f-ad21-4ad0-a16b-226c8322cebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0657d3b-c6b6-42e0-b54e-d5d0163471a2",
        "cursor": {
          "ref": "b9b70d2c-8e0e-4236-a793-ec651b03bdb1",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "18e295b2-b626-4e9b-8bbc-eacc6958c696"
        },
        "item": {
          "id": "a0657d3b-c6b6-42e0-b54e-d5d0163471a2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0fd7de49-4286-497c-b109-0a189001047c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ac4f78-7149-4254-bb73-dd03e4b473b9",
        "cursor": {
          "ref": "500e6854-3c2a-4ae4-82e7-e2c3ac47fbf1",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d92be846-b7d0-4f39-b2f6-f4fb34629c12"
        },
        "item": {
          "id": "34ac4f78-7149-4254-bb73-dd03e4b473b9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "69b98984-6078-46eb-a489-dfcb63abd810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f27ec8-5ca2-413f-b607-dad132612b8e",
        "cursor": {
          "ref": "70650e49-4810-45cc-a473-6614df37b24d",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fa05033d-371e-4524-b80b-a4018bc26e37"
        },
        "item": {
          "id": "96f27ec8-5ca2-413f-b607-dad132612b8e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "32b2dd85-9896-4859-9c12-5f9be0d50d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b88312-9294-460a-a72d-98eff43a7781",
        "cursor": {
          "ref": "32bace33-60d6-4dc0-a9ad-15011f21ef00",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7788de48-dfbd-487f-85c7-51bb61902faa"
        },
        "item": {
          "id": "00b88312-9294-460a-a72d-98eff43a7781",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c0a3b8dc-2c38-4aeb-84b3-6289be7c79aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff68c35-e7f3-4edd-89d6-0dc452cec287",
        "cursor": {
          "ref": "88cbb46a-31c2-4d25-a997-735cb70a5525",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4c97c456-cb7c-452f-ac82-e8c956c807da"
        },
        "item": {
          "id": "cff68c35-e7f3-4edd-89d6-0dc452cec287",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a52f1642-d26e-48be-be54-0c84db3130a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995c335c-2a23-4a4b-85ce-5747a6d1c9f1",
        "cursor": {
          "ref": "eb2e6db0-924a-4229-b2cd-1617c0423343",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9f9c24a0-34d4-4a3c-a323-c798d6028c74"
        },
        "item": {
          "id": "995c335c-2a23-4a4b-85ce-5747a6d1c9f1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "95f8f98d-bfee-4637-997e-7d87c88aab18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1390a9d-c0ba-49c0-90d0-1684a4daf2d7",
        "cursor": {
          "ref": "db1cdf92-214b-482f-a9b5-16ee13a19d3d",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d6dd68db-5447-40f4-8a4e-ab8ae93e58c4"
        },
        "item": {
          "id": "c1390a9d-c0ba-49c0-90d0-1684a4daf2d7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c20b60f8-85dd-49d8-a8e2-f6afe7b4056b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e073aa43-3b3f-4e0e-abda-27aadde22644",
        "cursor": {
          "ref": "d7444012-123b-48e6-88f2-c80cc2c57095",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c567bbe7-f4fd-4b6d-b204-9b7fee23d3ee"
        },
        "item": {
          "id": "e073aa43-3b3f-4e0e-abda-27aadde22644",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "aa7f63bf-b98f-4eb8-a1d2-80ccc211b91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f750e6b-7bfb-45bf-97df-0dbeb2be7fde",
        "cursor": {
          "ref": "91b89b79-b2cf-45b2-9f9e-f2ad4a588d01",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ca86b7b9-ea05-4b7c-a53c-c224d19e25eb"
        },
        "item": {
          "id": "3f750e6b-7bfb-45bf-97df-0dbeb2be7fde",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5af7ccbd-f8ff-4a70-b94c-71e3466a9caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b48b906-25fd-486d-8855-e18d0d4f37b4",
        "cursor": {
          "ref": "ad177117-f9d3-4f6a-9624-0e878c80d732",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1f4d5bc5-fc1a-476b-ab14-d0d4cad68002"
        },
        "item": {
          "id": "5b48b906-25fd-486d-8855-e18d0d4f37b4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "18c9e0bd-c118-426b-bcc1-b3df2caf742a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 341,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6763aae-a038-4846-9509-b07eae23ed8c",
        "cursor": {
          "ref": "b25a94d4-8e64-469b-9a15-bf7db7680f27",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "425ec6aa-b7de-471a-a07b-3ac806b2ec42"
        },
        "item": {
          "id": "c6763aae-a038-4846-9509-b07eae23ed8c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "61c2ab89-4e8a-43c2-a98d-b7c43970159c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ff2bc5-e57a-4551-bc40-2ffa622621a0",
        "cursor": {
          "ref": "6bccd384-f2b9-44bb-a69d-6d6870f9c712",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7c95550e-be03-48b8-a87f-7f10d6b52af1"
        },
        "item": {
          "id": "20ff2bc5-e57a-4551-bc40-2ffa622621a0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a467b37e-7397-4165-93f5-d08a052b0048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2662a376-fc30-46b2-a089-527c7f36a59f",
        "cursor": {
          "ref": "819cc2d7-1d4c-46b6-b8c4-287262f19e2c",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0be16dcc-85de-40b2-865a-82b56463c742"
        },
        "item": {
          "id": "2662a376-fc30-46b2-a089-527c7f36a59f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fac2b0f9-acaf-444a-9290-98d32e64d3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2237cb0-7bdb-4890-9694-7e795e1f970d",
        "cursor": {
          "ref": "db2fe0a8-d0ca-4c6c-9e0c-3af1a3c9ec63",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d2393b0e-e370-4ad1-8918-2fea858f8707"
        },
        "item": {
          "id": "e2237cb0-7bdb-4890-9694-7e795e1f970d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ee079606-a62d-4395-890e-3c2eedb46757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b1d28c-a9f4-4b2c-a506-ab72e180942c",
        "cursor": {
          "ref": "3896a912-0e68-4e1e-a41d-ba0597310d31",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "39bd0f59-df29-47bf-99ef-19dff42ed735"
        },
        "item": {
          "id": "64b1d28c-a9f4-4b2c-a506-ab72e180942c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "76801588-6317-48d7-8bf5-6e116c1c0a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f447f277-90ec-4761-996d-9ef87b23e1e7",
        "cursor": {
          "ref": "9153e5f5-9834-4dbd-9386-c37738b2b349",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "36745748-58f8-4168-9aca-6e437a15459e"
        },
        "item": {
          "id": "f447f277-90ec-4761-996d-9ef87b23e1e7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "006abd27-db19-498e-82fb-64d3c9d17486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ae7269-1a54-409a-b489-206bf63a1a34",
        "cursor": {
          "ref": "a9e714c1-28cd-4f8d-b9e4-b4f0b4eabb39",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "596f77cf-3335-4f36-991c-f19ca8369cbc"
        },
        "item": {
          "id": "e3ae7269-1a54-409a-b489-206bf63a1a34",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "98fc7f65-b7f4-426d-b5f4-a038a3b2062c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b99964-e34a-43a3-aeae-20dde0f7e8ac",
        "cursor": {
          "ref": "5d3045d7-5095-4483-a2e8-86c652f797b6",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9acda6c9-a677-41fd-98a7-e0963001f9de"
        },
        "item": {
          "id": "58b99964-e34a-43a3-aeae-20dde0f7e8ac",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ee9db1d1-31f6-4e92-ad24-1b884fcdda64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a040c3e-801a-42c1-9e9c-72e871e833fc",
        "cursor": {
          "ref": "2731e188-c773-4485-a969-bdadb72c970e",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6391ee6d-a3f5-4ada-9555-905e1944132d"
        },
        "item": {
          "id": "4a040c3e-801a-42c1-9e9c-72e871e833fc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c8df6df4-96f5-43a3-902b-5a7b31a855c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbed935a-eb33-4427-b94d-92a295de2b4c",
        "cursor": {
          "ref": "a8810389-50e0-4dc2-87ad-f15425d85063",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "17dc1abf-9a75-4c2b-8bc3-b89065ed9888"
        },
        "item": {
          "id": "fbed935a-eb33-4427-b94d-92a295de2b4c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "713bdb30-b92b-4818-84b4-cb2b781aaac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca47a2b-0bcf-4308-89bb-113b5b64cc9c",
        "cursor": {
          "ref": "7db9fc87-0386-4245-b53d-770a2af722d8",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "627b0807-f13f-4f5d-a715-69f4ad1e9406"
        },
        "item": {
          "id": "aca47a2b-0bcf-4308-89bb-113b5b64cc9c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "700d01b6-b341-4f0b-8f73-f900a484ea3a",
          "status": "OK",
          "code": 200,
          "responseTime": 236,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "855e0037-a22b-4e02-a252-e8fed3f1462e",
        "cursor": {
          "ref": "360f4b20-fe38-4148-a0d1-0e4be4cf6720",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c59d89c7-c393-43c0-9509-182c19201ce7"
        },
        "item": {
          "id": "855e0037-a22b-4e02-a252-e8fed3f1462e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e0576db3-64ca-4974-8748-7f0e268bbc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1693727a-524b-4599-86e8-c2bdda0836d8",
        "cursor": {
          "ref": "11c8e90a-5245-4617-a7d4-6d0e02f0d467",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a31fae48-c40e-488e-b63d-4557f82a4b45"
        },
        "item": {
          "id": "1693727a-524b-4599-86e8-c2bdda0836d8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3d876841-ba94-40f2-a20c-47094a3d1c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61ec206-54be-4d74-8b94-fd335de43ccc",
        "cursor": {
          "ref": "569af74f-3428-4ef1-8ecc-e92bb52a590c",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "aab01cf5-e1e6-40d9-9606-562262b148d4"
        },
        "item": {
          "id": "a61ec206-54be-4d74-8b94-fd335de43ccc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8272897c-19fe-4cf0-929f-f551d217b693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180decec-07e9-40d1-81ed-efacfb94da9a",
        "cursor": {
          "ref": "cbce62f0-7b3d-465a-ab23-59928c35a4e1",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "efcf74c3-2970-4aab-a241-b636918b6a88"
        },
        "item": {
          "id": "180decec-07e9-40d1-81ed-efacfb94da9a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9d86321e-c60c-43c3-b25c-76fb00dc2965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163674c3-3b70-45a2-a751-d9802ceaa0e2",
        "cursor": {
          "ref": "546ef142-13f2-4f12-9baf-d83a3b47cda0",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1e4b7b55-4fff-4233-9dc8-b1fbf816d317"
        },
        "item": {
          "id": "163674c3-3b70-45a2-a751-d9802ceaa0e2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5e87ce46-39d5-4edb-acf5-da4a6f09a0de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796a8767-05f1-4e74-b0a3-e54e90d33d0e",
        "cursor": {
          "ref": "f52908eb-fecc-41d0-9835-609b5d476da3",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b17ed6dd-e7c7-4ca2-bb81-0ac05a21783f"
        },
        "item": {
          "id": "796a8767-05f1-4e74-b0a3-e54e90d33d0e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "071724ac-ca2f-48e8-a320-0fa3ec3a85c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2be41a-eeb9-4b07-9437-29f57c271de4",
        "cursor": {
          "ref": "58b98751-dd97-4fb4-abd7-5ae19f3552bb",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "96650323-d4a4-4c5e-acd1-49bfb15c59ef"
        },
        "item": {
          "id": "8a2be41a-eeb9-4b07-9437-29f57c271de4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3ef219c3-231f-4602-bf58-41855cbd9bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6bbb95-a628-4373-bf1b-4f1feed51b45",
        "cursor": {
          "ref": "9d10b937-a664-4bda-a807-25836f76d13a",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "40aca58a-fbd2-4429-bad0-1dd03de98d71"
        },
        "item": {
          "id": "fe6bbb95-a628-4373-bf1b-4f1feed51b45",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "abc4531a-3bec-4d51-bad0-83660c86f751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4388f81-102d-46c0-8d86-767915ea69d2",
        "cursor": {
          "ref": "28bd4f19-580b-4533-880a-80e1c7b68016",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a4b39879-62f0-4468-bf01-a262495049e1"
        },
        "item": {
          "id": "a4388f81-102d-46c0-8d86-767915ea69d2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "66a59f58-5451-41a4-bf17-ec1d11c35923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5e749b-b1ff-45fe-86c0-e0a340b8edb6",
        "cursor": {
          "ref": "36b74408-70a2-486d-afce-8f83c0551602",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a7023199-1cc4-4f7b-9104-d985cfc48324"
        },
        "item": {
          "id": "4f5e749b-b1ff-45fe-86c0-e0a340b8edb6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "54a7f4f8-fd02-4ee9-8a5d-d74b78f2dcd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c289b595-5241-4bcd-9a81-c4400c7b4d28",
        "cursor": {
          "ref": "baa47f5d-da67-4a6a-a217-afc4e7abfcfa",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "37b7fa8d-0cf6-4b8a-adaa-37c3a6cf00b3"
        },
        "item": {
          "id": "c289b595-5241-4bcd-9a81-c4400c7b4d28",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a3aa56fa-1631-4b09-81d8-1cb196758a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b86320-dfaa-4285-bd0d-8133b241fba9",
        "cursor": {
          "ref": "d8bf214e-85e4-4b7a-984d-28249e5713cc",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "940d4071-177c-48af-869a-7e8c11eb930c"
        },
        "item": {
          "id": "e1b86320-dfaa-4285-bd0d-8133b241fba9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "db4c4010-0cf2-4024-a264-de8a97fad1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7136dcac-f744-4bc6-96e4-34d75313a185",
        "cursor": {
          "ref": "e449154f-e76a-46ac-8b59-520d9718c8a2",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "14378a2c-b610-4106-b805-841f748d9cbd"
        },
        "item": {
          "id": "7136dcac-f744-4bc6-96e4-34d75313a185",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3acd2b2d-1673-4845-b742-be92850f3acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a291978-5be0-49dc-9fd5-1643866a8f02",
        "cursor": {
          "ref": "62139260-9d2e-4383-8f97-1d1e947a0e66",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e5a37688-34a0-402d-8db5-e369ebb897c9"
        },
        "item": {
          "id": "4a291978-5be0-49dc-9fd5-1643866a8f02",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b218c7f7-b0c0-4632-a4ae-ef852955bc10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe7a377-270f-42fa-af2b-6a360549445d",
        "cursor": {
          "ref": "883de7c7-a51d-4495-a049-43555b7eeafe",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "69669cf8-7081-4d7a-a4eb-9dfbb0819af8"
        },
        "item": {
          "id": "bbe7a377-270f-42fa-af2b-6a360549445d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "be71deb1-1295-40fb-90fb-306ad81c4c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bbff454-4dfc-42ef-be56-2625c10dbe85",
        "cursor": {
          "ref": "a0edf614-3ae3-46cf-9e7b-7dcc6835537e",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "99443936-e15a-45f4-834a-ffca55e52e04"
        },
        "item": {
          "id": "0bbff454-4dfc-42ef-be56-2625c10dbe85",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bd8e3221-d2a7-430f-ac30-acf4c902a67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e383421f-8d20-4ab3-8db4-156aee845ce7",
        "cursor": {
          "ref": "0391c531-b8d0-4c83-a4a7-1f1deca34fa3",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5038b70b-b017-449b-95d2-00aac9c904b7"
        },
        "item": {
          "id": "e383421f-8d20-4ab3-8db4-156aee845ce7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fcf0f38d-3fec-4c80-8d6e-71e9aee702a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83976f5-b9b2-4a79-974d-9d96471c2c02",
        "cursor": {
          "ref": "6803fc51-05fc-4d74-a401-1aa77e83be9d",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "052ce728-0fe7-4ebe-b18c-f4dbf68071ce"
        },
        "item": {
          "id": "e83976f5-b9b2-4a79-974d-9d96471c2c02",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d772f8c7-ba52-4312-a1e8-268c7518dfd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267ef342-1a00-41c5-a4ec-0d5c6a7819ba",
        "cursor": {
          "ref": "ded400b6-9563-406e-870c-1ac47497b62c",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e8904566-5374-4234-8039-c61b674d2a4b"
        },
        "item": {
          "id": "267ef342-1a00-41c5-a4ec-0d5c6a7819ba",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9cebc99b-856f-4ecb-9c6e-06c1cd001558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a540ee99-4a2b-489c-b39f-b2c33a90e838",
        "cursor": {
          "ref": "629bb770-2ac3-4b31-b94e-bf8c9bd54ead",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6baa7ae8-d643-446c-a6b2-bd58f93425d6"
        },
        "item": {
          "id": "a540ee99-4a2b-489c-b39f-b2c33a90e838",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "99af39da-49fd-4215-a37d-42fa9bb00c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a6b196-c085-45ba-8687-bd9a9c61c46a",
        "cursor": {
          "ref": "37e21e59-8fdc-4a77-b896-6dad160b0bb2",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "94e9aac3-71a5-40d2-a2f4-6f2372cb3cf7"
        },
        "item": {
          "id": "e3a6b196-c085-45ba-8687-bd9a9c61c46a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f6175467-8736-4a7f-a0ec-3d1602b404df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30eafd72-d378-4a17-87ed-c647cf5b7c9c",
        "cursor": {
          "ref": "9047fa57-0d30-41b6-9047-6c1c3dee89a0",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "75738545-29b2-44e0-9c99-59fe7c196157"
        },
        "item": {
          "id": "30eafd72-d378-4a17-87ed-c647cf5b7c9c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8bdb777f-d1d0-4e2f-b41a-1399e2ae5692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e561ed-19a2-4de3-bbae-e51809773a8d",
        "cursor": {
          "ref": "80eb7588-2653-4062-9c5e-beb5c61e1062",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a928b82f-2a52-4aaa-a46a-fe53cf7a016d"
        },
        "item": {
          "id": "83e561ed-19a2-4de3-bbae-e51809773a8d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e5325105-80c8-41d7-b8fa-5f1cb833259d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0886a82e-75b6-4ec6-8623-24512d855194",
        "cursor": {
          "ref": "abdce9c6-388e-4dc8-9c12-94d3ddf76fda",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ce5d9d6c-8e20-43a4-a4ae-003bced1d0cb"
        },
        "item": {
          "id": "0886a82e-75b6-4ec6-8623-24512d855194",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cce727cf-aa76-4dcc-b341-ef5e43248f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d93fcb-6f0c-4945-ab72-fbac43a84f66",
        "cursor": {
          "ref": "654bb9cf-44c2-4599-b96c-9931f54af929",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "dca14dd9-1a3e-406e-9303-63e7f39eabcd"
        },
        "item": {
          "id": "68d93fcb-6f0c-4945-ab72-fbac43a84f66",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e0bd18f7-3dbd-4fba-8e82-a99643d0539c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db00fdd-73ad-4ff4-b2a7-71a4e9749c6d",
        "cursor": {
          "ref": "0b96cbf5-a875-4c79-866d-8d23cd395efd",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "730bd0b7-e817-4ebd-8140-a5eb35219127"
        },
        "item": {
          "id": "7db00fdd-73ad-4ff4-b2a7-71a4e9749c6d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8fc47d25-a000-4ca1-a060-372042293333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23667bde-df3f-4467-98c5-7c8d57add642",
        "cursor": {
          "ref": "bf2355c1-4314-42b5-906d-1ab6df7909b4",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a2ad2d30-2856-4442-96ee-0716536382f5"
        },
        "item": {
          "id": "23667bde-df3f-4467-98c5-7c8d57add642",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "98464e9e-e8d6-4aeb-b7e0-3c488850f321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b5b9e5-c458-452e-bf07-f515f7494455",
        "cursor": {
          "ref": "4d79d95b-5330-4127-9fe4-8c0a6336e08c",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7ea9d0cc-a459-4729-bc06-f1e81d7f236d"
        },
        "item": {
          "id": "64b5b9e5-c458-452e-bf07-f515f7494455",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "97f91772-6594-4035-a03c-41567a5c9284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccc47b0-279d-4209-a261-29819566b61f",
        "cursor": {
          "ref": "da242c91-db0a-41b5-a70e-952aace7e298",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cd0ba60c-c7e8-4ee7-8460-58ee9c7f723b"
        },
        "item": {
          "id": "eccc47b0-279d-4209-a261-29819566b61f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "747f6557-2430-4138-8d40-e0ece2b0dbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29f4bea-d27b-4fc5-bd38-3a1cf06f2092",
        "cursor": {
          "ref": "606e7393-6dc7-4a3e-85e3-bdcf4afb2b9b",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8aa2a19f-fcf5-4b86-bf02-82d300f8e0de"
        },
        "item": {
          "id": "e29f4bea-d27b-4fc5-bd38-3a1cf06f2092",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6ea83808-9dec-4070-a7b1-78287447f964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1652ee5-e8d8-4810-b40a-383f0529c1be",
        "cursor": {
          "ref": "406a09c0-73f7-48b3-9110-32b54d97c8f8",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "26bd00e8-c9e5-4015-b17b-9f305e1e62f2"
        },
        "item": {
          "id": "c1652ee5-e8d8-4810-b40a-383f0529c1be",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8b0d8cdd-95fc-4429-9a22-61852a3aca5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a946b9ac-d31a-4af3-9890-d290b4862924",
        "cursor": {
          "ref": "f23299db-820f-4bbc-ac88-45df2259d3c1",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d480d7d7-9d9f-4f20-a4af-0a4bd5fe87dd"
        },
        "item": {
          "id": "a946b9ac-d31a-4af3-9890-d290b4862924",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ceae5131-0dfb-4292-ba52-8c0ad4d2d522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d4080d-53b6-4bd5-b40f-baaecb877424",
        "cursor": {
          "ref": "56931f1b-62a0-4ffa-933f-45654346c761",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "004a9b85-eecb-45d4-9ff1-45ada57d7816"
        },
        "item": {
          "id": "13d4080d-53b6-4bd5-b40f-baaecb877424",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "81cb9cda-0903-4058-b28c-8ef4baa85666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fb9ac8-36bb-4220-8de4-f51e47779668",
        "cursor": {
          "ref": "6fba5980-13a9-408e-9bc0-a939bbc07bfd",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d1604a6d-5723-40f6-8085-546d556a4a59"
        },
        "item": {
          "id": "b2fb9ac8-36bb-4220-8de4-f51e47779668",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "44b7acad-6f64-40f7-b5f3-f8d87c94b8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb65f46-078a-44ac-9ee1-1310e9e18025",
        "cursor": {
          "ref": "a284e349-155d-4d35-82e2-297bd013e505",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6c4f50c5-47ad-4a6a-8ce4-a1738688b9be"
        },
        "item": {
          "id": "9eb65f46-078a-44ac-9ee1-1310e9e18025",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "07f581ff-0a88-4c3a-bd72-a6ad52c69421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e10dd58-393f-457d-b1b6-497d109dbeb6",
        "cursor": {
          "ref": "924991ee-5f18-4f29-88bb-d19166eb5373",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1c9f6fa6-f44a-40de-a660-f81c815c0361"
        },
        "item": {
          "id": "7e10dd58-393f-457d-b1b6-497d109dbeb6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d0182297-cbaf-4d92-829e-f557b36af805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd20e28-cbe7-4192-a784-e05e16c4fe6a",
        "cursor": {
          "ref": "715cccd7-a641-4d8e-8c20-1a92d838ed50",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fb8e8791-ba40-417f-83c4-5ef4157e4039"
        },
        "item": {
          "id": "3cd20e28-cbe7-4192-a784-e05e16c4fe6a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d15ae70c-9f7f-4cab-9aad-7f335d5d9632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c627d2dd-ee78-47ae-92ce-930ef96f6e44",
        "cursor": {
          "ref": "57d36175-f369-4620-aae4-d31ab0a3d435",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9296d597-fd0e-4304-a583-2dfa215f37c8"
        },
        "item": {
          "id": "c627d2dd-ee78-47ae-92ce-930ef96f6e44",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "14b68be2-34ec-43f3-b1d3-5cfc06a51400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fab045c-5232-4964-86e5-511099179dae",
        "cursor": {
          "ref": "bde89800-fbd6-498e-95ed-3389608bc06c",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6cbd561c-ac5c-4bee-ae49-46cfc0d9a79a"
        },
        "item": {
          "id": "3fab045c-5232-4964-86e5-511099179dae",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4e245866-9342-4da9-b0fd-63b068e770c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c4762e-191f-48cc-a31f-187aa80b87f9",
        "cursor": {
          "ref": "f494d8a9-1321-4c52-a221-827e6440bd8e",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ff59081b-ee78-4e29-b59d-8152c2f39840"
        },
        "item": {
          "id": "c1c4762e-191f-48cc-a31f-187aa80b87f9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b19ccc3b-4705-4381-b519-186f715b6897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb4def3-7289-4323-8a78-9267d46cf275",
        "cursor": {
          "ref": "33fb69c5-a6b6-4a23-b40d-bea51d66f307",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6a99f3a2-9de4-4ff9-950c-797b30769388"
        },
        "item": {
          "id": "3fb4def3-7289-4323-8a78-9267d46cf275",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d0923958-3702-44ab-8df2-b2109e4a996f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361ebb35-1238-40db-9a89-512d4fb04db9",
        "cursor": {
          "ref": "27356949-7c9e-4d9a-becc-7171ca9f1139",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4e11b5b3-e215-4876-a763-0169d4afc5d9"
        },
        "item": {
          "id": "361ebb35-1238-40db-9a89-512d4fb04db9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5ec59d4a-8af2-401e-b762-a7299ccbacba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d47757-9a55-4e04-af60-e98a5a1a3ed8",
        "cursor": {
          "ref": "ece33c0c-86c1-4944-aa42-2fb1a75b33ef",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "78f50d29-74a8-4556-b1af-46aafbb7c095"
        },
        "item": {
          "id": "79d47757-9a55-4e04-af60-e98a5a1a3ed8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "573421a7-faca-4617-ba4b-4a3aef5f87f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c179c0d-f200-4575-b45e-7f3dc376ae8a",
        "cursor": {
          "ref": "5086afae-9589-4326-be02-858b52bc2661",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "36c61c14-70fb-41ce-923c-7a962eb30233"
        },
        "item": {
          "id": "4c179c0d-f200-4575-b45e-7f3dc376ae8a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6959782a-a0ba-465f-8d1d-32f12ef5893b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8acba3-87e8-4e56-afcf-f6935cd55b09",
        "cursor": {
          "ref": "6e909c01-ddd3-49d1-94a2-afe9dc287576",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "848055da-0f5d-4fa7-a8bb-7b4c3bc4d714"
        },
        "item": {
          "id": "ff8acba3-87e8-4e56-afcf-f6935cd55b09",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "39649eb5-0f5b-4e0a-835a-c7f2c830e21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2243bbe-1bf8-4def-9277-e05fbfb527ef",
        "cursor": {
          "ref": "4295323a-b8b8-4546-a2ec-de5f27a9a290",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "61621dec-c37e-47f3-9c56-ce8c320fe924"
        },
        "item": {
          "id": "c2243bbe-1bf8-4def-9277-e05fbfb527ef",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "173cc074-5922-4b95-98ff-23c6c9222b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2747c4b-ead5-46eb-8151-e051d809ece5",
        "cursor": {
          "ref": "88e37a84-967c-49cb-9375-2de002ec61e3",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "053e794f-bc7a-463a-84b1-401d5abc7e76"
        },
        "item": {
          "id": "f2747c4b-ead5-46eb-8151-e051d809ece5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "de2e536c-813f-4aa1-96da-0420c253a946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767cfeee-72dd-49e3-9169-9d6e5581374a",
        "cursor": {
          "ref": "38d210e1-a9c9-40f0-8286-baeeddd15b0e",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "30280218-bd6c-491c-a8b3-25af4ca78396"
        },
        "item": {
          "id": "767cfeee-72dd-49e3-9169-9d6e5581374a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "df60ebf6-3a04-4d7c-ab3f-2527a1220264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328a95db-fb8a-4194-8ff1-bc5259840792",
        "cursor": {
          "ref": "fc70d429-2cff-4a4a-96b2-b5cc267db87d",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "32e7dc56-8330-48fa-8131-ee9870ef6785"
        },
        "item": {
          "id": "328a95db-fb8a-4194-8ff1-bc5259840792",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "52156d2f-161a-44e6-b73a-bff0fb3f7506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ac1541-60f2-42c4-b35f-ab7fb00fee4b",
        "cursor": {
          "ref": "d3e83065-fa67-43a3-99ac-4e2a16f1c141",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f9f878cf-0f12-4ba3-9cac-4bd46ff06f7a"
        },
        "item": {
          "id": "88ac1541-60f2-42c4-b35f-ab7fb00fee4b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bbc7ada9-930a-4f20-ace1-b8a0d396217c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60326f42-0e09-450f-a4e0-2ad0b4b17473",
        "cursor": {
          "ref": "e6b695a7-b4ac-4583-b5a3-072852126228",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "26d4e05d-0d59-4133-b417-86f2e77ad190"
        },
        "item": {
          "id": "60326f42-0e09-450f-a4e0-2ad0b4b17473",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2295a73c-ae42-4351-a526-234eee03acd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94b9625-e9f0-4248-af93-398df8abce17",
        "cursor": {
          "ref": "7e30f907-482d-47ac-a434-0aa885cc46dc",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a193edf7-74dc-4647-9def-e8359deba70a"
        },
        "item": {
          "id": "f94b9625-e9f0-4248-af93-398df8abce17",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a55229a0-1142-4519-8d8c-2b7f65827db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517d9457-0779-4979-b823-cbc00b3cddc7",
        "cursor": {
          "ref": "8e1b1647-751f-4c97-9d71-8f00cdf9bc63",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "128b3a31-4180-4537-b1d7-a5e6f470629d"
        },
        "item": {
          "id": "517d9457-0779-4979-b823-cbc00b3cddc7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ae140c50-fd78-403b-b627-8506d666dbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb176b5f-6fb1-4d90-b15b-56d890dcb100",
        "cursor": {
          "ref": "e72aa0c8-8322-4ed5-a26b-ad5fac834f29",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d04e18aa-199b-480e-b76f-62bdc802ba26"
        },
        "item": {
          "id": "bb176b5f-6fb1-4d90-b15b-56d890dcb100",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1c1b00d8-5056-4e4d-8b81-17c919edf93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fb3733-39e8-4b75-82fc-edd1d3dd1632",
        "cursor": {
          "ref": "3c3765c3-a56b-4fac-bc1c-57550ca54aeb",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3a5284e7-ecee-456c-97c5-8522f3246ee8"
        },
        "item": {
          "id": "14fb3733-39e8-4b75-82fc-edd1d3dd1632",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ba4abd44-f805-4fd7-a5c3-474465d4d289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7969ffd7-3fe9-4929-8ab6-c12dc7dba4bd",
        "cursor": {
          "ref": "04e9e1cc-90d3-40fe-85a9-aac4ef71e66a",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a8a46889-ea97-4d07-8cd7-a34d19d42404"
        },
        "item": {
          "id": "7969ffd7-3fe9-4929-8ab6-c12dc7dba4bd",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d490ee04-294e-4e75-b992-65f8c9b4d05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a5f652-bb5e-43ec-a381-f2b5613c418a",
        "cursor": {
          "ref": "ed20f77b-842d-4157-8b30-e93fbf1386a1",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4e29c42b-4b2e-4906-8f0b-99603e5ec10b"
        },
        "item": {
          "id": "a1a5f652-bb5e-43ec-a381-f2b5613c418a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b53ff0a9-3dec-404a-9cf0-bed43c2faaac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8958cc-82c9-403f-9bf0-b00aaf3c6456",
        "cursor": {
          "ref": "59682138-24b5-47a4-8b1b-ccab195547a0",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "788c7396-1ccb-4483-bd74-af6939955313"
        },
        "item": {
          "id": "cb8958cc-82c9-403f-9bf0-b00aaf3c6456",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "015644c2-b15b-4f48-9532-45a21cfa2c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7368f8e-467b-4f8b-93b6-19bbe6fd181e",
        "cursor": {
          "ref": "99c88dd4-ba2f-4a21-8869-dfc3855ce1f5",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "725f4195-ad6c-4532-856d-733350feb2f1"
        },
        "item": {
          "id": "a7368f8e-467b-4f8b-93b6-19bbe6fd181e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c37b9c75-5677-4c4e-b3c9-b6e9f2225b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae642a41-b4cd-40f6-b298-ab49c0f6a03f",
        "cursor": {
          "ref": "e6c19f39-9968-44e0-8f0b-52545895026b",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f3fde70d-fcdb-404b-b935-6c4724a803ed"
        },
        "item": {
          "id": "ae642a41-b4cd-40f6-b298-ab49c0f6a03f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "187083d1-8f26-438b-8041-04d0e726fd7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f639ad35-62f5-4b2a-b37a-19e4f6391848",
        "cursor": {
          "ref": "c9588f03-1632-4e6d-9222-dd82dc69d3fa",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1446494b-9c60-492f-a754-0f82871f9b06"
        },
        "item": {
          "id": "f639ad35-62f5-4b2a-b37a-19e4f6391848",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "579a36e6-f428-4017-bd7b-0c16c2100c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29e200f-1b6b-4927-a228-40f6a772e8b1",
        "cursor": {
          "ref": "fecac197-e643-4c68-a94e-8bbff7239156",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1189ffe8-01ae-4310-9760-9b65e3b76f09"
        },
        "item": {
          "id": "f29e200f-1b6b-4927-a228-40f6a772e8b1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4bc4ff1d-c094-4de2-8311-8226da837f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf08781-c639-49fe-b80a-47dbe768debb",
        "cursor": {
          "ref": "a455563d-2fe0-46a2-9742-96147142e9ca",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b9d223b4-a238-4146-8d84-3ace93caa9f0"
        },
        "item": {
          "id": "cdf08781-c639-49fe-b80a-47dbe768debb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "99f668f8-e660-4664-bf85-9f5187af71c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cbda704-1bdb-4dd0-8bff-e7ab1eea020f",
        "cursor": {
          "ref": "321b1005-0d7e-4b0f-8970-1730ec8b25f9",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b7fb04cd-41e3-44c7-9f5c-e41ddbc23bc5"
        },
        "item": {
          "id": "2cbda704-1bdb-4dd0-8bff-e7ab1eea020f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "01f03ff9-706a-44b5-9334-54e35978998e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09a414e-cedf-46ae-88f9-43864e887c64",
        "cursor": {
          "ref": "397b955b-e73f-44ca-afa4-9a0de398f75c",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "457a79b6-8be9-4c62-b1d6-e22d6cb4e8c9"
        },
        "item": {
          "id": "a09a414e-cedf-46ae-88f9-43864e887c64",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4275088f-4715-477a-9f4c-22c72a128b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5c17dd-533d-4c45-8248-539544601f41",
        "cursor": {
          "ref": "00e509cb-b7a4-4aa9-9ea9-600a3206a9ea",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f33e3c38-6690-4889-86c4-ea2facaff717"
        },
        "item": {
          "id": "1a5c17dd-533d-4c45-8248-539544601f41",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8ad0aed1-2380-41a4-abd5-849783c62f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b57c179-06a3-4304-90e5-4f7d03d4688e",
        "cursor": {
          "ref": "c2a7a3b6-f9d6-49f3-aaff-e30104361787",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "50d16b5b-5bc2-4443-a38b-3786c865504b"
        },
        "item": {
          "id": "0b57c179-06a3-4304-90e5-4f7d03d4688e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e97b8c50-466a-4c07-9344-166d6bf6d21f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496f981f-6ff0-4d2c-a2c7-032b92d72cad",
        "cursor": {
          "ref": "4dd9de35-435d-41fe-a343-f9605ebb39b8",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f41e1dd7-b43c-4868-ab0b-5aac02dc9752"
        },
        "item": {
          "id": "496f981f-6ff0-4d2c-a2c7-032b92d72cad",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a165853a-bb80-4c7a-9ba7-3dd043cb1eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b36d7d-a6cd-4534-9f9f-5fb38c4022fc",
        "cursor": {
          "ref": "ca147fb9-d3f6-4624-b14e-afb6dbcb321b",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "efffae6a-7bbf-439d-8a53-474979da49c1"
        },
        "item": {
          "id": "b4b36d7d-a6cd-4534-9f9f-5fb38c4022fc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "94ff8312-0800-486c-baf4-c5db61b33b37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209b27c6-2e49-4f8a-aeb3-73a4b529dbeb",
        "cursor": {
          "ref": "7ac9cab2-d8ed-43f5-b03e-1bb6dabf5d1b",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "acd0202a-7467-4261-af87-62b198dc7e5a"
        },
        "item": {
          "id": "209b27c6-2e49-4f8a-aeb3-73a4b529dbeb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2a92b71d-1052-4297-875d-4807fd91f561",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abac9f64-7d22-427a-bd0f-e0698d61bf84",
        "cursor": {
          "ref": "429d0ab9-9472-42fb-8c1b-37f5b830a61d",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "58a241f3-3392-42dd-8634-728bc28e471d"
        },
        "item": {
          "id": "abac9f64-7d22-427a-bd0f-e0698d61bf84",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e47a88b4-0954-4533-bb8b-0ce58eadc92e",
          "status": "OK",
          "code": 200,
          "responseTime": 531,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd32739-1e65-4d8c-8070-9064da06c0cb",
        "cursor": {
          "ref": "d222b97f-2229-42bb-8a81-fc9828b2333e",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d785188a-3120-464b-977d-72f6cd035593"
        },
        "item": {
          "id": "9dd32739-1e65-4d8c-8070-9064da06c0cb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e5189b25-b165-4880-b5ff-7b469307c57f",
          "status": "OK",
          "code": 200,
          "responseTime": 369,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb141d2e-d316-47af-aafd-364034c97dde",
        "cursor": {
          "ref": "340c8a55-7eaf-4a17-aafd-50b14a563ec1",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3d296a59-c62d-4ccd-a1e7-69df8e79b3fe"
        },
        "item": {
          "id": "fb141d2e-d316-47af-aafd-364034c97dde",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "18254cf1-f2e9-4b41-a1ce-fffb9c470b49",
          "status": "OK",
          "code": 200,
          "responseTime": 438,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e043b17f-8e2a-4e6e-aeab-a754c6408d69",
        "cursor": {
          "ref": "49e95d10-ba4f-4c2d-97d7-f3bd27880410",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fa247820-df04-4e9c-bcd1-763c9c69e882"
        },
        "item": {
          "id": "e043b17f-8e2a-4e6e-aeab-a754c6408d69",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1c8471d2-d075-4b96-954d-16060227c257",
          "status": "OK",
          "code": 200,
          "responseTime": 379,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d17213b-5d7f-4a11-8d29-e56def14993a",
        "cursor": {
          "ref": "f8f966ef-ff28-4e2c-8c91-c0aa1ce8994f",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f7b93d4f-d033-4158-9480-092fce6eea87"
        },
        "item": {
          "id": "7d17213b-5d7f-4a11-8d29-e56def14993a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fccf8105-fb1b-49a8-9977-77270e2d6cad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d17213b-5d7f-4a11-8d29-e56def14993a",
        "cursor": {
          "ref": "f8f966ef-ff28-4e2c-8c91-c0aa1ce8994f",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f7b93d4f-d033-4158-9480-092fce6eea87"
        },
        "item": {
          "id": "7d17213b-5d7f-4a11-8d29-e56def14993a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fccf8105-fb1b-49a8-9977-77270e2d6cad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d17213b-5d7f-4a11-8d29-e56def14993a",
        "cursor": {
          "ref": "f8f966ef-ff28-4e2c-8c91-c0aa1ce8994f",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f7b93d4f-d033-4158-9480-092fce6eea87"
        },
        "item": {
          "id": "7d17213b-5d7f-4a11-8d29-e56def14993a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fccf8105-fb1b-49a8-9977-77270e2d6cad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa975cf-306a-43af-bfde-a62380a8c4ae",
        "cursor": {
          "ref": "1ae43c40-fd81-4457-827c-a968a8ccf454",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "31181b8d-4316-4612-9171-c5b081b15ff1"
        },
        "item": {
          "id": "7fa975cf-306a-43af-bfde-a62380a8c4ae",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c76f0bd5-7da5-4e4e-9a31-d8a4b05c3cd2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a40245-2bad-4a74-aa1a-fdd526c135c5",
        "cursor": {
          "ref": "80d6b5aa-62dc-431c-b83b-ed3e9f76a28f",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0914cc73-26d0-4613-b68b-d5c306a32e08"
        },
        "item": {
          "id": "a3a40245-2bad-4a74-aa1a-fdd526c135c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b17ae5e1-5469-4a78-a789-86426ff147ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a3a40245-2bad-4a74-aa1a-fdd526c135c5",
        "cursor": {
          "ref": "80d6b5aa-62dc-431c-b83b-ed3e9f76a28f",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0914cc73-26d0-4613-b68b-d5c306a32e08"
        },
        "item": {
          "id": "a3a40245-2bad-4a74-aa1a-fdd526c135c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b17ae5e1-5469-4a78-a789-86426ff147ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "0304896b-c60e-4551-84b8-d7e545688670",
        "cursor": {
          "ref": "0586f148-0e96-40b9-9f54-d715e810624d",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2d3ae56f-2d2f-4b76-8f37-2c6be829c452"
        },
        "item": {
          "id": "0304896b-c60e-4551-84b8-d7e545688670",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0448ba75-5b58-44bc-a408-d7afde95a375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6d666e22-bd7a-48d6-840d-15e3f729ac29",
        "cursor": {
          "ref": "66ee2b97-d3fe-41e7-b7b5-cb5ec9d54cdd",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "27c9013f-f338-4cbe-b284-880709004e5b"
        },
        "item": {
          "id": "6d666e22-bd7a-48d6-840d-15e3f729ac29",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ae31f03d-0cb5-4813-8ed4-1260f09fa8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "6d666e22-bd7a-48d6-840d-15e3f729ac29",
        "cursor": {
          "ref": "66ee2b97-d3fe-41e7-b7b5-cb5ec9d54cdd",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "27c9013f-f338-4cbe-b284-880709004e5b"
        },
        "item": {
          "id": "6d666e22-bd7a-48d6-840d-15e3f729ac29",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ae31f03d-0cb5-4813-8ed4-1260f09fa8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "773c207a-424a-46cf-9cdc-521d1d5a4cf6",
        "cursor": {
          "ref": "0abceef1-2dfe-437c-a617-475de211fc14",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b93652d3-8243-4c5a-be16-7bf10f0d427f"
        },
        "item": {
          "id": "773c207a-424a-46cf-9cdc-521d1d5a4cf6",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c9661550-c2c1-4a46-a3c9-504e6e48f886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}