{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a1da51c5-0eb7-4d6c-b2f1-f609e5db353b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "92ff8566-c083-4272-a84b-2f860d59b961",
            "name": "Positive Testing",
            "item": [
              {
                "id": "571b1126-3173-4963-b1a7-af952dc90869",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78313060-2f55-4b65-ac74-811d690de65a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f6c1895-c85a-431b-a1a7-ad05115facaf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "492c31d1-858c-48ee-bf42-aa3cb03470dc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b6a07ff7-d4eb-479d-b4cb-c598e5417653",
            "name": "Negative Testing",
            "item": [
              {
                "id": "175f9bf5-bf1c-41ef-ab58-ac29ec5e64a0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6fc438f6-5abc-4b9c-9abc-42160bf0ccd7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3948dd8-cf8b-409b-b0e6-77dbe91e58e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab1e094b-4af4-43de-965b-402e3b48be04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa8a8d2-6a02-41f7-9134-7a21a66f2038",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee42ba90-93fa-447a-97c5-5cbb5054f9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65476b1e-81d2-4cb6-a793-d8d4c8618548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e760e034-d360-4ea2-ae49-9fa50803e39a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58262995-6fcc-4476-a016-dc8b5ca29101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf1fdcb2-05be-407c-a85b-235c22e87920"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f3e4d2de-c77a-43f6-8a8e-78cb6afc49e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d7fa488-75dd-4878-9e16-14008df03ba8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2d6e7c-04f8-49b2-bf00-8575a74505e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad2af337-6273-4a0d-9124-229fe783302a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c2615e-e293-4d67-a2a1-84d32925fe88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac0a110-7b5b-4275-a38b-4e6fa35bd509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7dcbe00-9021-4309-90b7-56e2d0b0ca4f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473c40e1-e6ae-4891-bc69-4e8434d5f5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a525929-454b-436e-a254-fcceb0b485ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a61e6fa-a9d0-4c80-b531-22d1a7a6a0a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9f439726-b108-4cde-bf03-1cf5e188a50b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6bc7ea7e-c937-4934-8d47-169b9725f3f8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e2a5b01d-7a75-4032-b8ed-b6431dcb92ba",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc19cf60-d70e-41cd-8c40-c541889d37e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2541fe0b-da0f-4710-8ce2-13898309bef5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3cda530e-4445-42df-8ed0-ad25ef9b9247",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "284b038e-17b3-4947-8fa1-169594641b36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fda331c-2133-4b8b-bf35-b1a5e1254129",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f556794-3baf-4ab1-ba78-7daa4374117e"
            }
          }
        ]
      },
      {
        "id": "fd3ad211-59d3-48f8-bf48-448c016a57c5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9cb35584-030d-4508-ae9a-cc97654bd126",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69013cbe-0e16-453f-ae1e-0dfceb9eb9d0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bfdf58f8-144d-44d8-af47-a29759d4db01",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8919f82-91b1-43c3-b5f9-81278e7d94bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d3450b-1223-4a3c-979d-3ae6d02ce098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f33651-cf80-4499-a1d0-1d8cedc164b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a625ac9-714e-4959-b15d-169299ed753d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cc5831-6234-4a8d-b49d-4c9d87c1ac2b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2dfacf-1374-4b65-93bd-0a7e7d9bf312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b992beac-4ff8-48b9-95ed-b9f5d10ffe94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a12ece-8cce-4847-bbc6-92c0462c1750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c54d6a79-29f3-4664-97ac-913704470d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e50dfb-e638-4f88-b6c7-c0c19f267ac0",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1cb91e-724a-45d0-b7f2-bdb20abdb4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed909102-6249-4a01-8584-f840db6d97b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db95ea3b-9104-4fdf-916d-bfc0e977adfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d586be10-a85f-45e8-8ea0-9c1038de3359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37a48fc-a765-4c29-8e9c-c3e5faaafea3",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99c6ab9-6ff5-4d80-8f33-73479b223f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ba4878-b8ac-48ef-bea5-b7b35d6db26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec67d27c-5f79-41c3-8d9e-94e684f8fe74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "139a8617-ead5-413c-b919-7cb2c35bbc8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3ae33a-edf5-474b-8333-6c8d39b02413",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1f3247-a775-43f1-a493-85baa11bfe14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7244ce18-4625-44bb-8cee-82a768edd2f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd60e1a6-7b43-4704-b5a2-8e365bfe61a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f75393b2-394a-45a2-aa6f-7b0b10cdb6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98863298-d284-451f-ab68-65c1efdc5d94",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7282153a-e53a-4585-9d6f-bff02984b8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4a83d6-49d4-40ae-b97e-39a809cf35a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0126970-58fd-4c2a-a9f2-f3a227c20560",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe1dcafe-3382-436c-980d-2193f88fe07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea270df-e454-4b36-9735-9d2fba55846c",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc2b59b-4da5-4e41-b37f-85e78a35d5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d337188f-5c3e-4903-a66d-e8a96ed61764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03046070-75ea-4d19-82e6-8558d9ddfd38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e353dc24-4e6a-4daf-8f02-e1ed2ee0d798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93230894-cbeb-4d01-8fae-4c199d4236de",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "163d0906-6e72-476b-9508-1864e3657535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d5860c-03de-44a0-b5a7-27faa1854815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fb1240-b564-4da3-a535-2b4b917c0965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80eaaf1a-b17b-4ffb-98a2-05a73111d140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ecc5ca-fffc-4a22-b55c-83cfc436cdf4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17273c24-dd9d-4599-84c2-7dd60721f635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a11944-c110-4d2a-84cb-ba5a5b656a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cf4fa9-4e54-4bf3-8700-7243691b7294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc509fee-8e91-4f88-ab08-ab7bc7ea5362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbead608-5199-4c44-8950-697125d5cc69",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7df556-6f0e-4740-bd75-4e2aebdaa99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a84c9a-8a7e-45e3-b444-d2636107a309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8eccbb-20e9-4c22-a046-7f5ff6fc01d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "078ce573-4fc0-403b-9f80-253842f5bfa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c717e0-98bf-445a-8c24-078cac3986b3",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c40ccc-1246-42fc-876c-37fa1c1d27bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a534f866-d5a9-42ab-81b2-5113a7857bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad7af42-cf8a-47bf-adde-877bd33029d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "0d0f68cb-9c69-437c-a873-61f32b6e5c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07793b46-3050-4fc7-9782-0df21b41749e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9a7caa-941b-494d-a357-cd2d21e59eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e969dcf2-0e1a-4fdf-806e-998d176aa1af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902f90e7-af14-4269-a6c1-5dae7d4c6c01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "6b295388-f7b2-4537-b24d-e350dde6a8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a141cadb-32dc-4843-abac-a4b5b557083a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3d82ab-8a20-4289-811c-53b18783fdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b61e1db2-feeb-4e2f-9007-a53bb47f6ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f4582a-56c9-48d2-93cd-ea03510a3b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0887de2a-90a6-4385-aeb5-8648b7bcaaa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5853d63-8f8b-424d-b96f-7c5bb1871908",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc194bc-280a-4572-817f-ad32fab3eb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325dabe6-52aa-431c-a1d0-0a6da138e2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebc63c3-e822-4a22-922a-fbe5e4bf382a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b50f52d3-831f-4e84-b0fe-d821a5ba4e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322c17d0-de23-4a23-a9c6-97db9880f405",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf0c73f-4a25-4053-bd2c-3780dd962067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cb094a-495f-4d2c-bf3e-1d0785ed2cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47598a8e-22e5-4f04-b3c7-3f2801c19e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "1f788282-e9f7-4752-bde9-1113cf3ea032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4a1d90-4e01-41a9-b79c-8df39bc73c8b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1be0f3-fc4a-43f2-a23b-57d584871bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa99fae-726d-49fe-b633-46df122652d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b723306f-fde6-4952-bc11-8979a1025d21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "bd68fbc6-8e3c-4c38-8161-3d03528523c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e61be7-8291-44c8-812d-6f46bd4f60a1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edfdc7e-e460-45a8-afb2-50a512a0c741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac3774f-f4ad-4f76-9f02-d03beb35d0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab06898-fe7e-480d-92ca-4f59c335d3d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfeb2446-8e19-46b3-89c6-c247b24f9f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a7194d-45a9-4adf-9ad9-3d91ac21358f",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf71dddd-472c-4e59-a3ac-61d04c72c06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff1afeb-e94d-4d0f-b9dc-ff2f90054477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a91c0c-cf35-4f51-8556-a1bab62ba327",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bc89cbf-c12e-4efd-bbea-1bb5439b5ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8a8891-141d-4692-bb12-9ed05791ead3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2485b4f3-eaf9-4855-9ba3-a1b6f3d8d6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf7505ef-9315-444e-8446-d2667fdc93b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985aafc9-2ac5-43a6-8cc8-7af3cb0fa258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5526072-d8eb-477d-8ff1-b277e8f7588a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b324433-d1c4-42ad-9036-efa22d1125d0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74245478-e6ad-4f5c-98bf-2f9a5959d363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f60ac01-59cb-440f-adca-3b403972ac4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b484e2-d337-4ec1-9c49-bc441e9f63f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5abd5754-189f-4120-9796-9cc18013616e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78971549-9372-44e7-b1f0-dbcfeae27b7e",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3976b1-b8d9-4fdf-be50-e12be9f8c2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c17da66c-339b-4b38-8671-0815dadc64b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c480b5-7171-4e58-be63-a101e9a92d35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26383dc6-043f-4c39-9d41-86db5338823a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25a2c49-0512-499a-94db-def91d73b914",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad342447-391e-4166-9df6-ff8e15cd7302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a13797-38e1-45f2-a8fe-15a9a9a57e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654a33b2-9408-412e-9d0e-7d58fe0f86d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6914ce8-97c5-4bb9-a223-7b6a90a832da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a09ba3-8e69-4908-a5c3-d5bd47cf4690",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89323d5-ffab-435e-9379-d905b40e349c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44946ede-fc5d-4d66-b78e-e96bef991a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079e338b-73fd-4c7e-af85-136f312fd288",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2845dda4-2177-4bd4-93fb-3910b15cc282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271a52d5-1a38-4f22-ae0b-4c10e3e0c988",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcc8975-4e85-4546-ac15-dd9617164f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9004042-8359-4340-bdca-571b125098eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb77be1-8804-42eb-ac0d-d2f1cf9f8bc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d3840fc-efbe-4067-9915-c3fc4a9df19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6f474a-f945-47ad-ae0b-d4201a04f6a6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9facb70-7f31-4e35-8e46-0a356dd20eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde0efca-6612-46aa-93a0-233939963d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6293c3b3-2d3e-42da-b163-51d6e637728a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "447b2b8c-5e0e-4f08-b7c4-bb4cbbd27f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7544f74c-3bdc-4d18-9f11-c8ca1e206c90",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2680eb24-d319-4a0f-9443-3ce2c6fdef84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e49f9f7-dc19-4893-92c9-c0b52cb44b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddaa7a07-6d58-474f-914f-9e94868c7fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f78a5e81-d29b-4cb5-a125-b9cab46cb8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1598096-f131-43ce-b296-a21ebcb1cc2c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186f2d7a-fb6d-42f0-ab58-1a2f80f44169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08344b8-8ab2-4997-95de-0f9f3df5ac0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a92c1f2-3e8a-427e-8123-806ae9ae6edf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f4747a1-c3f5-49be-9734-223acbd40035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800048ca-b895-45ed-9d00-063043471244",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62a29af-5068-454e-938c-19f8bb18dd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4aa41c-f7d7-4db2-a74c-8a11f9c0b8f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b429fa2-985e-4c19-8d13-4d5de98a452a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d887060-7c1e-4e85-96e0-246ca7c57bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f7a270-514f-4564-a20f-285e6be43148",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eaeba3c-8190-4153-9bc4-0585854f260c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d247838-8fc2-4817-aeac-38c7d55d1f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c63e1c-4aad-4965-a8d0-7388d48cb903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba1344ae-4db9-46d7-a2e6-638db3a30f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf24bf2-1254-4cfc-ac12-3fd22a9b4e18",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4e7cda-9a97-4f92-a3ce-82be32b48c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9b3ae1-9eb1-4312-9bd0-5129f5cd5b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b6c036-cd9f-4812-926b-1149f68ba446",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dc9219c-34d8-4f8a-95b6-013b5e809653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465409b0-1824-454e-9955-e90fecb737d0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d1cc38-2688-4cf7-b0e8-a11925061aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7853db0f-c968-43a7-b521-289ec6626d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d95c53a-20ab-407e-9554-5d763c466259",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5f892fd-98b4-4d74-abda-b0497b016798"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf5d9cc1-4ff7-4b07-bc53-1dc02ecc966d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "420061d1-dddb-4890-8891-95f9495ca957",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d52e66f-f496-496a-9de1-db83ce571893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58ca2d5c-e5f5-47dd-9e32-47429d78fb3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708c2911-2443-4685-8a25-9c3e2a8bcb5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1be0671f-4252-4487-9943-2706776596f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834ec2e2-e9b3-41e0-97f9-a1ab5cfc7001",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f3789a-5b7b-453c-8770-51f178179eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2514083d-278f-49eb-8d98-0455dd1ac01e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6340cd5-aa71-457f-bc40-f646e2d5cf38",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "49252a2d-d116-45f9-a052-86626f28e39d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adb3890d-1df1-41ae-addf-9daa86839f2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "476d5a50-79b3-49cd-b9a7-36273e542b4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebabbc3f-a381-4d52-97b7-ea38393d58cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dba71239-b2b8-4083-b73f-7ff05e1441a5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd09bdd8-819e-4950-9051-6502fe405e63",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c654bf6c-552c-455f-b4d9-390a60100dd5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "363f0a93-c3b8-4da0-94f8-b3bfdcc32627",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fdf8dd8e-6266-403d-bdf4-9268a780e4e4"
                }
              }
            ]
          },
          {
            "id": "9d85a9dd-9e24-450b-a307-b626ac7bec72",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8f724a9-3eda-44cd-ba23-eb074c22e4dd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc6e4ce1-8a60-4e85-8928-84a865e1e5a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dde3313a-766f-4945-8bc2-1a440be98483"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1da1d47f-64f4-49ec-b71e-fa1b32929f90",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0694e7a6-eb07-4a70-ac24-d486c197430f"
                    }
                  }
                ]
              },
              {
                "id": "b31e04f0-3f4d-4e79-a077-b399a15aac4e",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df8bf7be-6700-4590-b89d-27101f02a0f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f642081-8335-4de4-a035-d1b38b28f488"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af192c3e-3910-481f-b767-5a9842c5e481",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "40b60dbc-8767-4ad9-894e-514d34b3426e"
                    }
                  }
                ]
              },
              {
                "id": "b9e0645a-f0e8-43e7-84e7-4327b6be9027",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a69e387c-8ad6-482a-91ca-418f92f47ae0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3ac25392-c534-43c1-9a91-18fa7395e7b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1bee220-4bbe-46ba-b360-cfff6eef4fd9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e8641602-f996-4e28-8950-6eab5e08745a"
                    }
                  }
                ]
              },
              {
                "id": "2ce4bb89-9570-4a39-b83e-e61de2ea2789",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8995298-ff3e-48de-ab3d-902a59eb128b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13a6f3ba-2207-40d0-acfa-209ed1752fbf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "231155e2-06c7-482c-93af-a48e7539d7c1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "dd718651-bd3f-41a8-80ed-30b4ccf63ea5"
                    }
                  }
                ]
              },
              {
                "id": "3b211779-9953-47b6-b85a-57cf99057e30",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed6519a2-ff87-41eb-ade9-36175de924e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "3df33e02-4df7-458b-99df-3b57ebe2aff4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1635714c-f5b6-47a4-acca-8df621937781",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "05d2436b-7b15-4b86-8db4-ddeda4dbef95"
                    }
                  }
                ]
              },
              {
                "id": "80c72273-1a1a-40c6-b7b4-d215a912f1fa",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce43f2dc-c042-4e0e-ac3b-6b0a9690e6d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3da1f315-8155-4c56-afb6-0e8d42b66a40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7309b537-80e8-4345-8856-2f1bb02119e7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3c67d621-36a2-4fe6-abd4-2094abeb3e39"
                    }
                  }
                ]
              },
              {
                "id": "ca5049d2-9e45-4dfc-af78-2505b7e0fc57",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b31f892-8736-42aa-b030-33e6226edfd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8cc01b4e-53c9-41bc-b513-d91e1cb5e127"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08fee53c-8b36-42f8-ac84-7eed26343e02",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e6c77385-c37c-48ae-9162-4732a008d2a0"
                    }
                  }
                ]
              },
              {
                "id": "a1b60cc1-4ed4-45c3-9211-80112535bfda",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec11154b-efe0-4041-a462-bf203117ab93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "afa87514-659b-4281-9c9c-81e8a06b70b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ef6f8be-fd38-44e4-865d-4510306bf8dd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7d958c3a-83ae-465b-8526-c15f6369e5bc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3514b3b0-bc11-4b6c-98ed-8be8a8094f66",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6608a625-9b9e-4b4c-9631-607cda2bcb30"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "273960fe-0d73-47ab-ab74-0a3e9b7e084b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "12ae208a-b33d-4e71-94f9-7625b3bdbcc5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd36fcee-4c72-4640-a2f9-454ff2268008",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {",
                "            \"id\": \"{{credential_subject}}\"",
                "        }",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "66b4ff7d-d869-42a4-bae3-6ae190470c7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c37bee6f-fe4c-4b24-8e56-5ef8af4b45b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f1c8115b-0864-4f9f-b66f-db50dc65b92c"
            }
          }
        ]
      },
      {
        "id": "27816e1a-7cda-4f3e-a1b8-4dedc685bc02",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1ab436f7-2883-4dd3-a61e-66e8f0bc6ad4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "754c8e3f-8a5b-4433-a436-de84ad17b462",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b905e0d7-86eb-40a6-971d-1af37e9f5f37",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d8c0bf-0783-413d-9814-8d78c14742c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef61dc79-a137-46df-a4de-5f05c9f1961c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e24f92-374e-4099-9bbd-1f40f99a2e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ecf1959-5e17-4099-b6ae-764c17481857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef88f1b6-d55e-4ec4-b598-4edcb8437a00",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29184e4a-cbcb-40b9-904e-6dced308ab98",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "aa80e9e9-3d76-4cc5-86eb-7d39bcd1cec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1c381d-d0af-45c8-9dd6-e683e08194ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d653ab4-e51c-400c-a357-22249df7ed6a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4de1b4d-d2dd-403e-b037-51620a561be8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0138dda1-8a79-414c-ae18-3d299e660263"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b9f610d-6188-4d88-bf9d-bb05db7b08d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e78eb1f9-250d-4d3d-afad-a22df5155e05"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5a214ba-fa59-4c55-9576-d849f8218021",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "2eb4f1dd-97d4-4547-8a39-3aadbcb341dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5bf27dc9-3bba-4a85-8bf1-4496715525f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d61bcc6-c6c5-43de-a515-bb542db75c7f"
            }
          }
        ]
      },
      {
        "id": "202aae11-55a1-4911-9483-0e82b97c6af3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fc2c7b0e-5915-4c05-a683-3ddce89d606d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5af82244-7ca1-402f-b064-53e85b15dba4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "86073361-1c75-4029-b605-69960d836a51",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd489f40-26fe-4ff6-89dd-52145d554712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab7a08d1-8f9e-4536-bb14-bfb2d306a1cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5f98b9-9cbc-4d64-91a2-3e895d9d57da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe3625f9-d607-44a3-a825-b68482a0e5d8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "030d5506-7994-4e8d-b640-49cb0aa7fd59",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd629668-7706-4067-806e-236e2731305d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48e27ab-ac60-4d8f-8873-77870f3ca1e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "458c5366-00d8-485b-8ba6-a15dd9f4310f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "812c1297-96da-46be-8406-907d2305e64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3448306-fb71-4166-a1e4-649c9c768ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b8d74d-80de-4ed8-9872-fb08c103bdaf",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab84906-2fdb-4365-85eb-349701c37d87",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "8810cdf6-6476-49c3-a1b5-b16eb3000713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4899a36c-9367-47a4-889c-efd26bfa4263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6ab7d08-d517-4409-bb3c-2a1117e9507f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95639e07-f14d-4ea8-9844-c08b6098074a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8891ead-dcc6-41ec-934e-e4004eaab670"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bac8e581-9c8d-4262-8046-3f50e6bc8ffb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "934eff4f-ae66-450b-aa7b-8769a258715f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13f97790-4479-4977-afa4-6f274f16eb0e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "de2feb5d-cd91-4dbc-aa6a-653540d34bab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc6e8bc2-dca0-4395-82d2-f4036fe6c336",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2351d106-dbb6-4629-a862-d74773cbb15d"
            }
          }
        ]
      },
      {
        "id": "1b52658f-d102-4e78-88d8-2f56e6139eb9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "927cf75b-bde4-4e72-8815-fc72a5b7436e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e86245a-c49a-411c-aa93-a5fffcf52aa6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0be2a6e7-f6af-4f77-84a3-01c49105893f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634cc07e-0e07-41a9-8698-1e81937c4f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1171670-85cc-4f4c-94a5-87e37922f8e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a96e4bf-0e3c-4158-9cbf-59dbba582c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cfa2af3-7ea8-4cbb-ad60-91a332a4ccc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9add3d-7dbb-4a1e-8ea6-64617b978575",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fe3f4b-f417-4c0b-9908-70137b8561b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6af3561d-9c73-40b0-8013-1e01888c6f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4749d66-2934-4df3-b952-d411294b53a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d0ed482-049b-44cf-810e-726f3b9362d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12166c4d-efba-4dfb-a6cb-9f5f50181086",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5226bf1d-c31f-481e-bae6-c5e515c1d04c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5601e3d-8c34-4ceb-97ee-4ae37c1c0ff7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0846a157-4b8c-4a25-b468-b61cfe26558e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc9ec763-b9f6-4a0c-b603-694ab2448bfd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "94a118bb-3b39-4f94-a123-0d049d0932de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c080aee-cc6a-4fc7-a0c8-0683eaa0d746",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6c8bd40-44ac-4b51-ab0b-53d08e27a221"
            }
          }
        ]
      },
      {
        "id": "3cdec4fa-f029-4644-96ba-6293e2274a0b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a70be5a2-476c-48e5-93c7-2493be7368df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7020313f-8321-4968-9f3f-f133703e7918",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8d3aa0e-660a-4244-bfe4-3f27c3696727",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bdd3cc-f33c-4300-84f0-5966f0176677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04c00ea-8ff5-4b44-896a-89788876d605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d4fed8-151b-4d0d-9d59-a481c917f745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37acd9a0-a7d0-4a1f-814f-e6d63d48905d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2cb2eb-f19e-4633-a35b-6c86f7136dde",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12885540-b38b-4a04-a374-42d2eb0e5c9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e220d4ce-1e69-4bc5-8c36-5db8f96dcec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a5c078-a317-40c8-b10f-7dae21b867fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5561a4b3-3c78-420b-b5f0-5a3a753e4241"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62b248f0-726a-454c-af28-4c513dd3a128",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de7efb23-cab1-4574-8af8-d23bf38f4d98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdf9822b-59d0-4395-9395-5756edd00940",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45c31ed4-9e40-40dc-9fb0-35958fb7c0a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8b6a73a-7f5c-45ff-8262-5af35d89ad8a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "79a512b0-7467-4611-a20c-33ff9775df86"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "180930fa-db4a-49c4-beb6-b722f6cfc875",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31801758-f9ba-4fb1-b7c1-37a30f10aab3"
            }
          }
        ]
      },
      {
        "id": "763ab7f2-8c21-4979-ac8d-f92bb6bc82e4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e57079ee-b374-4dc9-8523-80602020b30a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0408805-5f84-449b-b4e2-62781a805fde",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2cff2201-f245-4243-9b19-e836685687ae",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e730f3-21cc-4f7c-8bbb-ba2bbcc12b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b851b132-f04a-4e8a-9496-e176021ae6cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a497be9a-ccc0-46c8-979c-edfd09572d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b5aeff2-c01e-4173-a107-ff5ce0f74c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e797cddd-e70c-4a3d-88ae-3732c3445ab5",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91164f27-3c9e-4ba2-9e82-e37103819f96",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d7bafb97-ba10-4639-bf6a-87c0fc68045d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e50182-653f-4125-9cd9-6a3a368a3b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73ac7727-4db2-4ea1-aac0-840d05291db1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12fa4b52-5976-47d9-a298-e6216d922fee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2735f4f7-d768-4260-aea1-f381c55999f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92f2fcdc-23e9-4378-9b13-6286c64d4854",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7b17ac7-9453-4c36-adc8-e1bbf7a4e2f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b612f9ea-783f-4778-b615-3d307c9ca2a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "ea23da2f-46d7-42fb-acda-c470bb2cb849"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "076d245e-86b4-4d7b-ba48-131280e7144f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50dd293f-c1f1-4de4-a230-e16d1b47ef51"
            }
          }
        ]
      },
      {
        "id": "1993d383-188a-489c-84b2-a3a1ec20da86",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "11c5fcea-5dc1-4c0f-acd1-c52291cec70a",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 453,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 108,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 123,
        "pending": 0,
        "failed": 15
      },
      "testScripts": {
        "total": 229,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 224,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 49.407407407407405,
      "responseMin": 4,
      "responseMax": 735,
      "responseSd": 106.10887464516642,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662684826056,
      "completed": 1662684834509
    },
    "executions": [
      {
        "id": "571b1126-3173-4963-b1a7-af952dc90869",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 59,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fbdcee1d-9fa9-49ae-abd1-53633cc85b6f",
          "httpRequestId": "cd22b4f5-5b98-4549-8b03-d096e09ebe26"
        },
        "item": {
          "id": "571b1126-3173-4963-b1a7-af952dc90869",
          "name": "did_json"
        },
        "response": {
          "id": "54b254d5-5c7b-46ac-a41f-c46a3a242e40",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc438f6-5abc-4b9c-9abc-42160bf0ccd7",
        "cursor": {
          "ref": "5905e607-76fb-49df-baeb-663dfc307902",
          "length": 59,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d9ae5232-4d27-41e1-896f-948bfdb3ec82"
        },
        "item": {
          "id": "6fc438f6-5abc-4b9c-9abc-42160bf0ccd7",
          "name": "did:invalid"
        },
        "response": {
          "id": "6a4e206c-d376-46b9-ab22-6eb6c7660393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc438f6-5abc-4b9c-9abc-42160bf0ccd7",
        "cursor": {
          "ref": "5905e607-76fb-49df-baeb-663dfc307902",
          "length": 59,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d9ae5232-4d27-41e1-896f-948bfdb3ec82"
        },
        "item": {
          "id": "6fc438f6-5abc-4b9c-9abc-42160bf0ccd7",
          "name": "did:invalid"
        },
        "response": {
          "id": "6a4e206c-d376-46b9-ab22-6eb6c7660393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa8a8d2-6a02-41f7-9134-7a21a66f2038",
        "cursor": {
          "ref": "7d438d06-5f6c-47c8-bedb-a9ed59e5b28c",
          "length": 59,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e2ddffc6-c8d1-468c-903c-e5e0326898f2"
        },
        "item": {
          "id": "afa8a8d2-6a02-41f7-9134-7a21a66f2038",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "64498e55-c2f4-4433-a6e1-58e5681644a9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 129,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e760e034-d360-4ea2-ae49-9fa50803e39a",
        "cursor": {
          "ref": "9affc613-d9c5-4a46-a463-35e0b5f9ea4a",
          "length": 59,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "92f38bc6-99de-4dd3-b91e-5f77f6856e5d"
        },
        "item": {
          "id": "e760e034-d360-4ea2-ae49-9fa50803e39a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7e82ad05-bc91-4960-ba56-44f8c3702787",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7fa488-75dd-4878-9e16-14008df03ba8",
        "cursor": {
          "ref": "23bb248a-3455-447c-8d0b-6883c4a91508",
          "length": 59,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "df03e35f-8cc8-4b9d-ae6b-2200fdc0198c"
        },
        "item": {
          "id": "4d7fa488-75dd-4878-9e16-14008df03ba8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "16984c0d-2b05-43e3-8f84-6e44575784b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dcbe00-9021-4309-90b7-56e2d0b0ca4f",
        "cursor": {
          "ref": "1d27b873-22b5-44d0-8dd4-3a783176ac91",
          "length": 59,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "04c239a3-c7b3-4c2b-b88b-63dadb76059a"
        },
        "item": {
          "id": "e7dcbe00-9021-4309-90b7-56e2d0b0ca4f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1f54b190-1d16-4d3b-bd9e-1e989c05191a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dcbe00-9021-4309-90b7-56e2d0b0ca4f",
        "cursor": {
          "ref": "1d27b873-22b5-44d0-8dd4-3a783176ac91",
          "length": 59,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "04c239a3-c7b3-4c2b-b88b-63dadb76059a"
        },
        "item": {
          "id": "e7dcbe00-9021-4309-90b7-56e2d0b0ca4f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1f54b190-1d16-4d3b-bd9e-1e989c05191a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a5b01d-7a75-4032-b8ed-b6431dcb92ba",
        "cursor": {
          "ref": "5f46b01b-9482-4ff8-9bbd-c208b8192a2d",
          "length": 59,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "66b6da70-9715-4f7d-8809-a23f92e896e6"
        },
        "item": {
          "id": "e2a5b01d-7a75-4032-b8ed-b6431dcb92ba",
          "name": "identifiers"
        },
        "response": {
          "id": "bbceda9f-8bf4-49fa-9721-8e49ef9be704",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdf58f8-144d-44d8-af47-a29759d4db01",
        "cursor": {
          "ref": "8682c04f-fbe4-49c4-b7ac-5e7800da33dc",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "805b052b-dc12-4444-b736-e6c842eb27f6"
        },
        "item": {
          "id": "bfdf58f8-144d-44d8-af47-a29759d4db01",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d03a513c-a715-4cdb-97f1-72a5526c10f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdf58f8-144d-44d8-af47-a29759d4db01",
        "cursor": {
          "ref": "8682c04f-fbe4-49c4-b7ac-5e7800da33dc",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "805b052b-dc12-4444-b736-e6c842eb27f6"
        },
        "item": {
          "id": "bfdf58f8-144d-44d8-af47-a29759d4db01",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d03a513c-a715-4cdb-97f1-72a5526c10f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdf58f8-144d-44d8-af47-a29759d4db01",
        "cursor": {
          "ref": "8682c04f-fbe4-49c4-b7ac-5e7800da33dc",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "805b052b-dc12-4444-b736-e6c842eb27f6"
        },
        "item": {
          "id": "bfdf58f8-144d-44d8-af47-a29759d4db01",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d03a513c-a715-4cdb-97f1-72a5526c10f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cc5831-6234-4a8d-b49d-4c9d87c1ac2b",
        "cursor": {
          "ref": "0879006f-99eb-421b-b002-85e22b795ea5",
          "length": 59,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "13561851-d587-45cb-842b-5b4b7710ab72"
        },
        "item": {
          "id": "90cc5831-6234-4a8d-b49d-4c9d87c1ac2b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "97c4a54e-3a4d-4c19-9322-cf1ad40713cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cc5831-6234-4a8d-b49d-4c9d87c1ac2b",
        "cursor": {
          "ref": "0879006f-99eb-421b-b002-85e22b795ea5",
          "length": 59,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "13561851-d587-45cb-842b-5b4b7710ab72"
        },
        "item": {
          "id": "90cc5831-6234-4a8d-b49d-4c9d87c1ac2b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "97c4a54e-3a4d-4c19-9322-cf1ad40713cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e50dfb-e638-4f88-b6c7-c0c19f267ac0",
        "cursor": {
          "ref": "a189f9c9-36e4-4c8c-9fe2-b325b0660f21",
          "length": 59,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5acce833-9b86-4058-a5af-cee7a301cfe1"
        },
        "item": {
          "id": "a0e50dfb-e638-4f88-b6c7-c0c19f267ac0",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2c95b973-36c2-4d6f-8b85-653930af5701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e50dfb-e638-4f88-b6c7-c0c19f267ac0",
        "cursor": {
          "ref": "a189f9c9-36e4-4c8c-9fe2-b325b0660f21",
          "length": 59,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5acce833-9b86-4058-a5af-cee7a301cfe1"
        },
        "item": {
          "id": "a0e50dfb-e638-4f88-b6c7-c0c19f267ac0",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2c95b973-36c2-4d6f-8b85-653930af5701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37a48fc-a765-4c29-8e9c-c3e5faaafea3",
        "cursor": {
          "ref": "9746d497-df31-4b0e-bc52-d6f451cfc3f2",
          "length": 59,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "13fcddfb-888c-43a1-b17c-9e984c0eba59"
        },
        "item": {
          "id": "a37a48fc-a765-4c29-8e9c-c3e5faaafea3",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "da8b9196-c4ea-471f-abf4-98f95b2111ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37a48fc-a765-4c29-8e9c-c3e5faaafea3",
        "cursor": {
          "ref": "9746d497-df31-4b0e-bc52-d6f451cfc3f2",
          "length": 59,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "13fcddfb-888c-43a1-b17c-9e984c0eba59"
        },
        "item": {
          "id": "a37a48fc-a765-4c29-8e9c-c3e5faaafea3",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "da8b9196-c4ea-471f-abf4-98f95b2111ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3ae33a-edf5-474b-8333-6c8d39b02413",
        "cursor": {
          "ref": "b1a2da51-8dd7-49ab-a41f-7094f0178451",
          "length": 59,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "370ec024-1368-4401-8e44-8c6fe1d35f9a"
        },
        "item": {
          "id": "af3ae33a-edf5-474b-8333-6c8d39b02413",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "b9cc4c5e-4879-46de-89ac-d2e638f95c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3ae33a-edf5-474b-8333-6c8d39b02413",
        "cursor": {
          "ref": "b1a2da51-8dd7-49ab-a41f-7094f0178451",
          "length": 59,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "370ec024-1368-4401-8e44-8c6fe1d35f9a"
        },
        "item": {
          "id": "af3ae33a-edf5-474b-8333-6c8d39b02413",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "b9cc4c5e-4879-46de-89ac-d2e638f95c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98863298-d284-451f-ab68-65c1efdc5d94",
        "cursor": {
          "ref": "e4678b58-3c2e-4e42-9891-95453881a8f2",
          "length": 59,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fa8b3c46-da0e-4cd2-b1e4-654b1d228891"
        },
        "item": {
          "id": "98863298-d284-451f-ab68-65c1efdc5d94",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ba500662-975d-45e3-b6a6-4edc5f802a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98863298-d284-451f-ab68-65c1efdc5d94",
        "cursor": {
          "ref": "e4678b58-3c2e-4e42-9891-95453881a8f2",
          "length": 59,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fa8b3c46-da0e-4cd2-b1e4-654b1d228891"
        },
        "item": {
          "id": "98863298-d284-451f-ab68-65c1efdc5d94",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ba500662-975d-45e3-b6a6-4edc5f802a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea270df-e454-4b36-9735-9d2fba55846c",
        "cursor": {
          "ref": "78041a19-1a22-49e1-9914-c7fd45fe5b11",
          "length": 59,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "be51d4d1-5d20-49ba-8107-76ecd621b399"
        },
        "item": {
          "id": "8ea270df-e454-4b36-9735-9d2fba55846c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "d55fa8fb-d540-401b-a4bf-7ace6b8410b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea270df-e454-4b36-9735-9d2fba55846c",
        "cursor": {
          "ref": "78041a19-1a22-49e1-9914-c7fd45fe5b11",
          "length": 59,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "be51d4d1-5d20-49ba-8107-76ecd621b399"
        },
        "item": {
          "id": "8ea270df-e454-4b36-9735-9d2fba55846c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "d55fa8fb-d540-401b-a4bf-7ace6b8410b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93230894-cbeb-4d01-8fae-4c199d4236de",
        "cursor": {
          "ref": "6487a93e-a8ce-4e9b-8011-3ed570cc4bee",
          "length": 59,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3e623aca-fc4d-4e2a-b684-c0a1e4fb918f"
        },
        "item": {
          "id": "93230894-cbeb-4d01-8fae-4c199d4236de",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "475c52a5-e37b-46ee-83c4-b7da57ed6674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93230894-cbeb-4d01-8fae-4c199d4236de",
        "cursor": {
          "ref": "6487a93e-a8ce-4e9b-8011-3ed570cc4bee",
          "length": 59,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3e623aca-fc4d-4e2a-b684-c0a1e4fb918f"
        },
        "item": {
          "id": "93230894-cbeb-4d01-8fae-4c199d4236de",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "475c52a5-e37b-46ee-83c4-b7da57ed6674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ecc5ca-fffc-4a22-b55c-83cfc436cdf4",
        "cursor": {
          "ref": "e3428528-1056-49c9-8d54-40f877f7ef78",
          "length": 59,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2770ca5b-7787-491e-9ddc-ee595df00768"
        },
        "item": {
          "id": "25ecc5ca-fffc-4a22-b55c-83cfc436cdf4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "68ec6d2b-2838-4c90-b5eb-eccea247fac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ecc5ca-fffc-4a22-b55c-83cfc436cdf4",
        "cursor": {
          "ref": "e3428528-1056-49c9-8d54-40f877f7ef78",
          "length": 59,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2770ca5b-7787-491e-9ddc-ee595df00768"
        },
        "item": {
          "id": "25ecc5ca-fffc-4a22-b55c-83cfc436cdf4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "68ec6d2b-2838-4c90-b5eb-eccea247fac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbead608-5199-4c44-8950-697125d5cc69",
        "cursor": {
          "ref": "3baf197d-9bda-4c49-81eb-363f7d7746e6",
          "length": 59,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "70cd2d9d-8b2f-4658-9fc2-c261b17d52b6"
        },
        "item": {
          "id": "bbead608-5199-4c44-8950-697125d5cc69",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "d50af7d6-8693-4505-a092-1e2055a703c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbead608-5199-4c44-8950-697125d5cc69",
        "cursor": {
          "ref": "3baf197d-9bda-4c49-81eb-363f7d7746e6",
          "length": 59,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "70cd2d9d-8b2f-4658-9fc2-c261b17d52b6"
        },
        "item": {
          "id": "bbead608-5199-4c44-8950-697125d5cc69",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "d50af7d6-8693-4505-a092-1e2055a703c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c717e0-98bf-445a-8c24-078cac3986b3",
        "cursor": {
          "ref": "54b8a011-0695-4e18-9bfe-f06a8116a843",
          "length": 59,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "647ec027-ed59-49d0-aebe-5ade5bfcca77"
        },
        "item": {
          "id": "39c717e0-98bf-445a-8c24-078cac3986b3",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "96477a05-c884-4c0a-a2be-980ee0912ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c717e0-98bf-445a-8c24-078cac3986b3",
        "cursor": {
          "ref": "54b8a011-0695-4e18-9bfe-f06a8116a843",
          "length": 59,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "647ec027-ed59-49d0-aebe-5ade5bfcca77"
        },
        "item": {
          "id": "39c717e0-98bf-445a-8c24-078cac3986b3",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "96477a05-c884-4c0a-a2be-980ee0912ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07793b46-3050-4fc7-9782-0df21b41749e",
        "cursor": {
          "ref": "cae840b5-7902-4b73-8ef0-bb16b6d87794",
          "length": 59,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "615b7577-19d6-4b7f-a387-8f2b69e6ab6e"
        },
        "item": {
          "id": "07793b46-3050-4fc7-9782-0df21b41749e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "38bbfebf-6001-4e32-96c7-1bcd8799dc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 735,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07793b46-3050-4fc7-9782-0df21b41749e",
        "cursor": {
          "ref": "cae840b5-7902-4b73-8ef0-bb16b6d87794",
          "length": 59,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "615b7577-19d6-4b7f-a387-8f2b69e6ab6e"
        },
        "item": {
          "id": "07793b46-3050-4fc7-9782-0df21b41749e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "38bbfebf-6001-4e32-96c7-1bcd8799dc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 735,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a141cadb-32dc-4843-abac-a4b5b557083a",
        "cursor": {
          "ref": "afbbf432-3f4b-43c8-8d0c-071c6d1fcdb0",
          "length": 59,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c79ed4ca-3de7-4df5-933e-3883adb844cf"
        },
        "item": {
          "id": "a141cadb-32dc-4843-abac-a4b5b557083a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "26084ef3-42eb-4db4-9260-d149c39bbc55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a141cadb-32dc-4843-abac-a4b5b557083a",
        "cursor": {
          "ref": "afbbf432-3f4b-43c8-8d0c-071c6d1fcdb0",
          "length": 59,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c79ed4ca-3de7-4df5-933e-3883adb844cf"
        },
        "item": {
          "id": "a141cadb-32dc-4843-abac-a4b5b557083a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "26084ef3-42eb-4db4-9260-d149c39bbc55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5853d63-8f8b-424d-b96f-7c5bb1871908",
        "cursor": {
          "ref": "bd710f75-fb59-4687-b3c0-04e4777ba559",
          "length": 59,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7792a7de-528a-4bce-9d66-a2bf82a2f3d8"
        },
        "item": {
          "id": "e5853d63-8f8b-424d-b96f-7c5bb1871908",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "bd08f41f-0691-4844-86c9-cbc693ed51d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5853d63-8f8b-424d-b96f-7c5bb1871908",
        "cursor": {
          "ref": "bd710f75-fb59-4687-b3c0-04e4777ba559",
          "length": 59,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7792a7de-528a-4bce-9d66-a2bf82a2f3d8"
        },
        "item": {
          "id": "e5853d63-8f8b-424d-b96f-7c5bb1871908",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "bd08f41f-0691-4844-86c9-cbc693ed51d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322c17d0-de23-4a23-a9c6-97db9880f405",
        "cursor": {
          "ref": "5e528c52-0394-4ad6-82fd-f8ba1fb1095d",
          "length": 59,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5e535a06-c89a-4e6b-93d6-e584080059a0"
        },
        "item": {
          "id": "322c17d0-de23-4a23-a9c6-97db9880f405",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "103fa103-01d8-47a3-8f8e-4df5c5a9bd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322c17d0-de23-4a23-a9c6-97db9880f405",
        "cursor": {
          "ref": "5e528c52-0394-4ad6-82fd-f8ba1fb1095d",
          "length": 59,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5e535a06-c89a-4e6b-93d6-e584080059a0"
        },
        "item": {
          "id": "322c17d0-de23-4a23-a9c6-97db9880f405",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "103fa103-01d8-47a3-8f8e-4df5c5a9bd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4a1d90-4e01-41a9-b79c-8df39bc73c8b",
        "cursor": {
          "ref": "fe55630f-416c-4965-a0a9-5f85bc301053",
          "length": 59,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c18444ac-3e48-4b2f-a769-b7d805807c34"
        },
        "item": {
          "id": "2a4a1d90-4e01-41a9-b79c-8df39bc73c8b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "08facc4b-c8e0-4c5a-9f82-e7e901957446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4a1d90-4e01-41a9-b79c-8df39bc73c8b",
        "cursor": {
          "ref": "fe55630f-416c-4965-a0a9-5f85bc301053",
          "length": 59,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c18444ac-3e48-4b2f-a769-b7d805807c34"
        },
        "item": {
          "id": "2a4a1d90-4e01-41a9-b79c-8df39bc73c8b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "08facc4b-c8e0-4c5a-9f82-e7e901957446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e61be7-8291-44c8-812d-6f46bd4f60a1",
        "cursor": {
          "ref": "1d4335c4-518b-471b-b314-89158a6ef229",
          "length": 59,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c796e8cc-7f2a-4e99-aba0-30f1c774c551"
        },
        "item": {
          "id": "89e61be7-8291-44c8-812d-6f46bd4f60a1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2c76e5c5-9626-4c83-9dc1-e822aa5d3718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e61be7-8291-44c8-812d-6f46bd4f60a1",
        "cursor": {
          "ref": "1d4335c4-518b-471b-b314-89158a6ef229",
          "length": 59,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c796e8cc-7f2a-4e99-aba0-30f1c774c551"
        },
        "item": {
          "id": "89e61be7-8291-44c8-812d-6f46bd4f60a1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2c76e5c5-9626-4c83-9dc1-e822aa5d3718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a7194d-45a9-4adf-9ad9-3d91ac21358f",
        "cursor": {
          "ref": "4cb45450-d68f-47ab-9ae8-d052bdc696a6",
          "length": 59,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cd9a15d1-2e87-4025-aa20-a9e6ba9b5e0e"
        },
        "item": {
          "id": "a7a7194d-45a9-4adf-9ad9-3d91ac21358f",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "62640de0-e8e4-48db-a4c1-2e2db311b2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a7194d-45a9-4adf-9ad9-3d91ac21358f",
        "cursor": {
          "ref": "4cb45450-d68f-47ab-9ae8-d052bdc696a6",
          "length": 59,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cd9a15d1-2e87-4025-aa20-a9e6ba9b5e0e"
        },
        "item": {
          "id": "a7a7194d-45a9-4adf-9ad9-3d91ac21358f",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "62640de0-e8e4-48db-a4c1-2e2db311b2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8a8891-141d-4692-bb12-9ed05791ead3",
        "cursor": {
          "ref": "bc204a36-99da-4772-9966-c858c25995be",
          "length": 59,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "08c39393-496e-4d9c-b820-b54b6987b74c"
        },
        "item": {
          "id": "bc8a8891-141d-4692-bb12-9ed05791ead3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b43f4ba1-7d01-47c4-8da2-d19787dd76f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8a8891-141d-4692-bb12-9ed05791ead3",
        "cursor": {
          "ref": "bc204a36-99da-4772-9966-c858c25995be",
          "length": 59,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "08c39393-496e-4d9c-b820-b54b6987b74c"
        },
        "item": {
          "id": "bc8a8891-141d-4692-bb12-9ed05791ead3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b43f4ba1-7d01-47c4-8da2-d19787dd76f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b324433-d1c4-42ad-9036-efa22d1125d0",
        "cursor": {
          "ref": "7332c1ce-d3a7-4a19-9522-e6b9f75b2821",
          "length": 59,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0c5a0c91-94bb-4ed3-8814-68ca33114e63"
        },
        "item": {
          "id": "8b324433-d1c4-42ad-9036-efa22d1125d0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a9c0fa62-1d0d-410d-9c54-95dddb23dc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b324433-d1c4-42ad-9036-efa22d1125d0",
        "cursor": {
          "ref": "7332c1ce-d3a7-4a19-9522-e6b9f75b2821",
          "length": 59,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0c5a0c91-94bb-4ed3-8814-68ca33114e63"
        },
        "item": {
          "id": "8b324433-d1c4-42ad-9036-efa22d1125d0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a9c0fa62-1d0d-410d-9c54-95dddb23dc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78971549-9372-44e7-b1f0-dbcfeae27b7e",
        "cursor": {
          "ref": "066c08a4-7ec1-460b-947e-64aaac0803a7",
          "length": 59,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "24e1812c-4d29-4f37-9110-ac02d01a6d0a"
        },
        "item": {
          "id": "78971549-9372-44e7-b1f0-dbcfeae27b7e",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "86cdcb1d-69ae-4c12-b607-6ad99e32ea1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78971549-9372-44e7-b1f0-dbcfeae27b7e",
        "cursor": {
          "ref": "066c08a4-7ec1-460b-947e-64aaac0803a7",
          "length": 59,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "24e1812c-4d29-4f37-9110-ac02d01a6d0a"
        },
        "item": {
          "id": "78971549-9372-44e7-b1f0-dbcfeae27b7e",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "86cdcb1d-69ae-4c12-b607-6ad99e32ea1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25a2c49-0512-499a-94db-def91d73b914",
        "cursor": {
          "ref": "06c8a3c7-c23f-4414-a386-91bef4a3695a",
          "length": 59,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c60c771f-654b-4f53-abad-a204065f05c4"
        },
        "item": {
          "id": "a25a2c49-0512-499a-94db-def91d73b914",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "6139c2f4-5906-43c9-8ed4-18632b3def26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25a2c49-0512-499a-94db-def91d73b914",
        "cursor": {
          "ref": "06c8a3c7-c23f-4414-a386-91bef4a3695a",
          "length": 59,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c60c771f-654b-4f53-abad-a204065f05c4"
        },
        "item": {
          "id": "a25a2c49-0512-499a-94db-def91d73b914",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "6139c2f4-5906-43c9-8ed4-18632b3def26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a09ba3-8e69-4908-a5c3-d5bd47cf4690",
        "cursor": {
          "ref": "bc479ca8-5c60-4381-a5eb-725bc37753e2",
          "length": 59,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e8d53df2-e296-441e-8f07-9ed252c38519"
        },
        "item": {
          "id": "b8a09ba3-8e69-4908-a5c3-d5bd47cf4690",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4a2ce8b6-ed1d-4077-85fd-794fc1625490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a09ba3-8e69-4908-a5c3-d5bd47cf4690",
        "cursor": {
          "ref": "bc479ca8-5c60-4381-a5eb-725bc37753e2",
          "length": 59,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e8d53df2-e296-441e-8f07-9ed252c38519"
        },
        "item": {
          "id": "b8a09ba3-8e69-4908-a5c3-d5bd47cf4690",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4a2ce8b6-ed1d-4077-85fd-794fc1625490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271a52d5-1a38-4f22-ae0b-4c10e3e0c988",
        "cursor": {
          "ref": "e6226a6c-d137-4dcd-93a7-db73a990cf8c",
          "length": 59,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6017e3ae-3481-4d4d-b691-1d28adb291b6"
        },
        "item": {
          "id": "271a52d5-1a38-4f22-ae0b-4c10e3e0c988",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c2aff995-98ef-4eef-91a5-1ca1c1584477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271a52d5-1a38-4f22-ae0b-4c10e3e0c988",
        "cursor": {
          "ref": "e6226a6c-d137-4dcd-93a7-db73a990cf8c",
          "length": 59,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6017e3ae-3481-4d4d-b691-1d28adb291b6"
        },
        "item": {
          "id": "271a52d5-1a38-4f22-ae0b-4c10e3e0c988",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c2aff995-98ef-4eef-91a5-1ca1c1584477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6f474a-f945-47ad-ae0b-d4201a04f6a6",
        "cursor": {
          "ref": "c5ca9ad6-340f-44ed-9f73-38d35254b1f0",
          "length": 59,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0e8d9000-96ed-4610-ad0b-e16c99adedf9"
        },
        "item": {
          "id": "8c6f474a-f945-47ad-ae0b-d4201a04f6a6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6c2416a9-c033-4010-b2f9-cc667540e3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6f474a-f945-47ad-ae0b-d4201a04f6a6",
        "cursor": {
          "ref": "c5ca9ad6-340f-44ed-9f73-38d35254b1f0",
          "length": 59,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0e8d9000-96ed-4610-ad0b-e16c99adedf9"
        },
        "item": {
          "id": "8c6f474a-f945-47ad-ae0b-d4201a04f6a6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6c2416a9-c033-4010-b2f9-cc667540e3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7544f74c-3bdc-4d18-9f11-c8ca1e206c90",
        "cursor": {
          "ref": "160b1ecc-edd2-4923-b588-a6291b5db82d",
          "length": 59,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b88e14a2-108b-4601-9550-448ead5c4621"
        },
        "item": {
          "id": "7544f74c-3bdc-4d18-9f11-c8ca1e206c90",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "c74a9c0d-5b01-4ab9-9dbf-c5c519c0edcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7544f74c-3bdc-4d18-9f11-c8ca1e206c90",
        "cursor": {
          "ref": "160b1ecc-edd2-4923-b588-a6291b5db82d",
          "length": 59,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b88e14a2-108b-4601-9550-448ead5c4621"
        },
        "item": {
          "id": "7544f74c-3bdc-4d18-9f11-c8ca1e206c90",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "c74a9c0d-5b01-4ab9-9dbf-c5c519c0edcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1598096-f131-43ce-b296-a21ebcb1cc2c",
        "cursor": {
          "ref": "10740e2a-717c-41ba-b750-5475d5213db1",
          "length": 59,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "16dd9fd3-9310-41a2-afd5-3f7d3beec896"
        },
        "item": {
          "id": "d1598096-f131-43ce-b296-a21ebcb1cc2c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "77be335f-cb62-4bcf-87f4-414d06ba7c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1598096-f131-43ce-b296-a21ebcb1cc2c",
        "cursor": {
          "ref": "10740e2a-717c-41ba-b750-5475d5213db1",
          "length": 59,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "16dd9fd3-9310-41a2-afd5-3f7d3beec896"
        },
        "item": {
          "id": "d1598096-f131-43ce-b296-a21ebcb1cc2c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "77be335f-cb62-4bcf-87f4-414d06ba7c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800048ca-b895-45ed-9d00-063043471244",
        "cursor": {
          "ref": "317130a9-3090-4913-9b31-2b83946db48b",
          "length": 59,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2530fbc0-0a85-4625-9506-7e9e78b31ca3"
        },
        "item": {
          "id": "800048ca-b895-45ed-9d00-063043471244",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "302a59a0-8851-492b-994e-99c5be29d5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800048ca-b895-45ed-9d00-063043471244",
        "cursor": {
          "ref": "317130a9-3090-4913-9b31-2b83946db48b",
          "length": 59,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2530fbc0-0a85-4625-9506-7e9e78b31ca3"
        },
        "item": {
          "id": "800048ca-b895-45ed-9d00-063043471244",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "302a59a0-8851-492b-994e-99c5be29d5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f7a270-514f-4564-a20f-285e6be43148",
        "cursor": {
          "ref": "56418f05-0415-4e09-977e-54601ba7db88",
          "length": 59,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bc1aba91-1261-46e5-b1eb-0feacfda5114"
        },
        "item": {
          "id": "35f7a270-514f-4564-a20f-285e6be43148",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "2176ae16-1896-4af1-9bbe-4f1f8490156a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f7a270-514f-4564-a20f-285e6be43148",
        "cursor": {
          "ref": "56418f05-0415-4e09-977e-54601ba7db88",
          "length": 59,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bc1aba91-1261-46e5-b1eb-0feacfda5114"
        },
        "item": {
          "id": "35f7a270-514f-4564-a20f-285e6be43148",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "2176ae16-1896-4af1-9bbe-4f1f8490156a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf24bf2-1254-4cfc-ac12-3fd22a9b4e18",
        "cursor": {
          "ref": "c0f0f397-ae2f-418e-a22a-9c09f59dd011",
          "length": 59,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c9acac6e-6ff3-4a0c-bc04-477943a7542f"
        },
        "item": {
          "id": "7bf24bf2-1254-4cfc-ac12-3fd22a9b4e18",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d8322c6a-3b4a-4292-b7dd-9ed84952c0cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf24bf2-1254-4cfc-ac12-3fd22a9b4e18",
        "cursor": {
          "ref": "c0f0f397-ae2f-418e-a22a-9c09f59dd011",
          "length": 59,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c9acac6e-6ff3-4a0c-bc04-477943a7542f"
        },
        "item": {
          "id": "7bf24bf2-1254-4cfc-ac12-3fd22a9b4e18",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d8322c6a-3b4a-4292-b7dd-9ed84952c0cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465409b0-1824-454e-9955-e90fecb737d0",
        "cursor": {
          "ref": "6389f0e0-1714-402e-b1be-3188b4c19320",
          "length": 59,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ee6fd21d-ebc9-4c6a-8638-ac6cbbd151c7"
        },
        "item": {
          "id": "465409b0-1824-454e-9955-e90fecb737d0",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "51137784-d4b9-42bf-af8d-3520008d0e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465409b0-1824-454e-9955-e90fecb737d0",
        "cursor": {
          "ref": "6389f0e0-1714-402e-b1be-3188b4c19320",
          "length": 59,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ee6fd21d-ebc9-4c6a-8638-ac6cbbd151c7"
        },
        "item": {
          "id": "465409b0-1824-454e-9955-e90fecb737d0",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "51137784-d4b9-42bf-af8d-3520008d0e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420061d1-dddb-4890-8891-95f9495ca957",
        "cursor": {
          "ref": "56cb1881-bc8f-4c5b-b80e-20772e68ea25",
          "length": 59,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cb65bb7f-dc0e-4be0-82a1-050bbd2d8003"
        },
        "item": {
          "id": "420061d1-dddb-4890-8891-95f9495ca957",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2f4be6f4-3561-4148-b8ac-83e2fe332ccd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420061d1-dddb-4890-8891-95f9495ca957",
        "cursor": {
          "ref": "56cb1881-bc8f-4c5b-b80e-20772e68ea25",
          "length": 59,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cb65bb7f-dc0e-4be0-82a1-050bbd2d8003"
        },
        "item": {
          "id": "420061d1-dddb-4890-8891-95f9495ca957",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2f4be6f4-3561-4148-b8ac-83e2fe332ccd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834ec2e2-e9b3-41e0-97f9-a1ab5cfc7001",
        "cursor": {
          "ref": "b4f026aa-353f-4fd3-a754-12f630d7a0dc",
          "length": 59,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "41f79b11-e71e-41e0-b5a8-334f41c6f5fe"
        },
        "item": {
          "id": "834ec2e2-e9b3-41e0-97f9-a1ab5cfc7001",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a7c45083-6fb3-4eb6-ab5b-e943a5f4ec22",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834ec2e2-e9b3-41e0-97f9-a1ab5cfc7001",
        "cursor": {
          "ref": "b4f026aa-353f-4fd3-a754-12f630d7a0dc",
          "length": 59,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "41f79b11-e71e-41e0-b5a8-334f41c6f5fe"
        },
        "item": {
          "id": "834ec2e2-e9b3-41e0-97f9-a1ab5cfc7001",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a7c45083-6fb3-4eb6-ab5b-e943a5f4ec22",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f724a9-3eda-44cd-ba23-eb074c22e4dd",
        "cursor": {
          "ref": "5a710a8e-8a8c-4d29-b554-fd0bd956d388",
          "length": 59,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a75cca93-e5d9-470f-b178-2685e364124a"
        },
        "item": {
          "id": "d8f724a9-3eda-44cd-ba23-eb074c22e4dd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d34c81f2-9a0d-4615-94e8-75160b6215cb",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected { id: 'did:example:123' } to equal 'did:example:123'",
              "stack": "AssertionError: expected { id: 'did:example:123' } to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f724a9-3eda-44cd-ba23-eb074c22e4dd",
        "cursor": {
          "ref": "5a710a8e-8a8c-4d29-b554-fd0bd956d388",
          "length": 59,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a75cca93-e5d9-470f-b178-2685e364124a"
        },
        "item": {
          "id": "d8f724a9-3eda-44cd-ba23-eb074c22e4dd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d34c81f2-9a0d-4615-94e8-75160b6215cb",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected { id: 'did:example:123' } to equal 'did:example:123'",
              "stack": "AssertionError: expected { id: 'did:example:123' } to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31e04f0-3f4d-4e79-a077-b399a15aac4e",
        "cursor": {
          "ref": "dc61f928-da4f-4ea6-917b-a6ee86a49aa0",
          "length": 59,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f716b992-ddd1-45ce-9f9a-316bf6637a69"
        },
        "item": {
          "id": "b31e04f0-3f4d-4e79-a077-b399a15aac4e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "75718fc8-e7eb-4d7d-aefd-0b024e1d133f",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 629
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b31e04f0-3f4d-4e79-a077-b399a15aac4e",
        "cursor": {
          "ref": "dc61f928-da4f-4ea6-917b-a6ee86a49aa0",
          "length": 59,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f716b992-ddd1-45ce-9f9a-316bf6637a69"
        },
        "item": {
          "id": "b31e04f0-3f4d-4e79-a077-b399a15aac4e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "75718fc8-e7eb-4d7d-aefd-0b024e1d133f",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 629
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b9e0645a-f0e8-43e7-84e7-4327b6be9027",
        "cursor": {
          "ref": "8a8fedb0-1829-4027-886c-a6628b338faf",
          "length": 59,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f431d8cd-638c-41ce-a5b0-902aef8a5bca"
        },
        "item": {
          "id": "b9e0645a-f0e8-43e7-84e7-4327b6be9027",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cb5a6eac-0a92-417f-b25d-680ee6e12e6c",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e0645a-f0e8-43e7-84e7-4327b6be9027",
        "cursor": {
          "ref": "8a8fedb0-1829-4027-886c-a6628b338faf",
          "length": 59,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f431d8cd-638c-41ce-a5b0-902aef8a5bca"
        },
        "item": {
          "id": "b9e0645a-f0e8-43e7-84e7-4327b6be9027",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cb5a6eac-0a92-417f-b25d-680ee6e12e6c",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce4bb89-9570-4a39-b83e-e61de2ea2789",
        "cursor": {
          "ref": "3503bb68-98a6-4999-a7a6-0c07260f5acf",
          "length": 59,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bf7c9d26-48fe-40ac-893f-77c21ea92e7c"
        },
        "item": {
          "id": "2ce4bb89-9570-4a39-b83e-e61de2ea2789",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "b42bc666-12ad-4dd8-aa73-3afff311623d",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2ce4bb89-9570-4a39-b83e-e61de2ea2789",
        "cursor": {
          "ref": "3503bb68-98a6-4999-a7a6-0c07260f5acf",
          "length": 59,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bf7c9d26-48fe-40ac-893f-77c21ea92e7c"
        },
        "item": {
          "id": "2ce4bb89-9570-4a39-b83e-e61de2ea2789",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "b42bc666-12ad-4dd8-aa73-3afff311623d",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3b211779-9953-47b6-b85a-57cf99057e30",
        "cursor": {
          "ref": "b3581a4a-0b3e-427c-8f7f-ea948c2f7aa0",
          "length": 59,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2780ae4b-f2ea-4b22-bb20-f35d606086a5"
        },
        "item": {
          "id": "3b211779-9953-47b6-b85a-57cf99057e30",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "706e0e49-b3c1-4d3e-aed5-a9954146f576",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b211779-9953-47b6-b85a-57cf99057e30",
        "cursor": {
          "ref": "b3581a4a-0b3e-427c-8f7f-ea948c2f7aa0",
          "length": 59,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2780ae4b-f2ea-4b22-bb20-f35d606086a5"
        },
        "item": {
          "id": "3b211779-9953-47b6-b85a-57cf99057e30",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "706e0e49-b3c1-4d3e-aed5-a9954146f576",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c72273-1a1a-40c6-b7b4-d215a912f1fa",
        "cursor": {
          "ref": "21627e35-67a2-4949-baaa-cb98bcc405a5",
          "length": 59,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0c2137d5-8961-488e-8ec7-1b8c593d7dbb"
        },
        "item": {
          "id": "80c72273-1a1a-40c6-b7b4-d215a912f1fa",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9c2fb43e-6580-4353-a5de-c7d90bb45fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "80c72273-1a1a-40c6-b7b4-d215a912f1fa",
        "cursor": {
          "ref": "21627e35-67a2-4949-baaa-cb98bcc405a5",
          "length": 59,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0c2137d5-8961-488e-8ec7-1b8c593d7dbb"
        },
        "item": {
          "id": "80c72273-1a1a-40c6-b7b4-d215a912f1fa",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9c2fb43e-6580-4353-a5de-c7d90bb45fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ca5049d2-9e45-4dfc-af78-2505b7e0fc57",
        "cursor": {
          "ref": "0df7893e-6551-435a-9fdc-b3c54c2053e9",
          "length": 59,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e0d5a9dd-0ac1-400d-9a05-69b00bb27cf2"
        },
        "item": {
          "id": "ca5049d2-9e45-4dfc-af78-2505b7e0fc57",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "13794958-5e0b-4cf5-a904-b4a87ea86905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ca5049d2-9e45-4dfc-af78-2505b7e0fc57",
        "cursor": {
          "ref": "0df7893e-6551-435a-9fdc-b3c54c2053e9",
          "length": 59,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e0d5a9dd-0ac1-400d-9a05-69b00bb27cf2"
        },
        "item": {
          "id": "ca5049d2-9e45-4dfc-af78-2505b7e0fc57",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "13794958-5e0b-4cf5-a904-b4a87ea86905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a1b60cc1-4ed4-45c3-9211-80112535bfda",
        "cursor": {
          "ref": "c8ed8357-eb2e-40d0-994b-49fa5d430f74",
          "length": 59,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3807d37e-2ed3-4355-b80f-4135300e5a5c"
        },
        "item": {
          "id": "a1b60cc1-4ed4-45c3-9211-80112535bfda",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "cc0c6628-d441-45da-a1c5-2d50451a1252",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a1b60cc1-4ed4-45c3-9211-80112535bfda",
        "cursor": {
          "ref": "c8ed8357-eb2e-40d0-994b-49fa5d430f74",
          "length": 59,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3807d37e-2ed3-4355-b80f-4135300e5a5c"
        },
        "item": {
          "id": "a1b60cc1-4ed4-45c3-9211-80112535bfda",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "cc0c6628-d441-45da-a1c5-2d50451a1252",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b905e0d7-86eb-40a6-971d-1af37e9f5f37",
        "cursor": {
          "ref": "f388d773-29cf-43b1-976e-b72c8b07c0af",
          "length": 59,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "93e9cc8f-7c5b-4acd-87e7-18d24eab2781"
        },
        "item": {
          "id": "b905e0d7-86eb-40a6-971d-1af37e9f5f37",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c67179d1-de53-4723-bfbc-e20d4e28f0f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b905e0d7-86eb-40a6-971d-1af37e9f5f37",
        "cursor": {
          "ref": "f388d773-29cf-43b1-976e-b72c8b07c0af",
          "length": 59,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "93e9cc8f-7c5b-4acd-87e7-18d24eab2781"
        },
        "item": {
          "id": "b905e0d7-86eb-40a6-971d-1af37e9f5f37",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c67179d1-de53-4723-bfbc-e20d4e28f0f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef88f1b6-d55e-4ec4-b598-4edcb8437a00",
        "cursor": {
          "ref": "918ab987-9a25-462b-b531-1c7f00261b95",
          "length": 59,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "039a7f6e-755b-456b-8fa8-c17e36dee867"
        },
        "item": {
          "id": "ef88f1b6-d55e-4ec4-b598-4edcb8437a00",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6e0cfb4f-0296-4e25-9825-2455560b1b57",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86073361-1c75-4029-b605-69960d836a51",
        "cursor": {
          "ref": "99da6fa7-d020-4a91-a7f1-3fc33c3e3b3c",
          "length": 59,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b6cda248-f42b-4a7d-91cc-0993b2844b56"
        },
        "item": {
          "id": "86073361-1c75-4029-b605-69960d836a51",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "41d14ed5-8be7-435a-bdc5-4f33644bd1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86073361-1c75-4029-b605-69960d836a51",
        "cursor": {
          "ref": "99da6fa7-d020-4a91-a7f1-3fc33c3e3b3c",
          "length": 59,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b6cda248-f42b-4a7d-91cc-0993b2844b56"
        },
        "item": {
          "id": "86073361-1c75-4029-b605-69960d836a51",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "41d14ed5-8be7-435a-bdc5-4f33644bd1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd629668-7706-4067-806e-236e2731305d",
        "cursor": {
          "ref": "4b6fbfff-38b5-49d2-8b09-a4cd6597053e",
          "length": 59,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dae959c8-7030-43ff-9800-97c2693f0cce"
        },
        "item": {
          "id": "dd629668-7706-4067-806e-236e2731305d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "952ef527-0832-4d96-9292-695c4dd49317",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b8d74d-80de-4ed8-9872-fb08c103bdaf",
        "cursor": {
          "ref": "c998eb9b-cd2a-42d3-885e-c8270607b3c2",
          "length": 59,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6faf3a35-53c3-4506-9911-818859c0b9d1"
        },
        "item": {
          "id": "98b8d74d-80de-4ed8-9872-fb08c103bdaf",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "89573ff8-3a95-4bfc-8d5d-2a12d12da64e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be2a6e7-f6af-4f77-84a3-01c49105893f",
        "cursor": {
          "ref": "fb47c274-94d2-4b66-9653-ce46c944e103",
          "length": 59,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3a091bfc-f844-48b5-b1fa-5417670c584e"
        },
        "item": {
          "id": "0be2a6e7-f6af-4f77-84a3-01c49105893f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "36d44cf8-7422-4828-afcd-47c46167392b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be2a6e7-f6af-4f77-84a3-01c49105893f",
        "cursor": {
          "ref": "fb47c274-94d2-4b66-9653-ce46c944e103",
          "length": 59,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3a091bfc-f844-48b5-b1fa-5417670c584e"
        },
        "item": {
          "id": "0be2a6e7-f6af-4f77-84a3-01c49105893f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "36d44cf8-7422-4828-afcd-47c46167392b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9add3d-7dbb-4a1e-8ea6-64617b978575",
        "cursor": {
          "ref": "7254b2cd-7415-4066-919e-510caeaaec3a",
          "length": 59,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "130b5d51-0daa-42b7-a344-24fd1c028230"
        },
        "item": {
          "id": "1d9add3d-7dbb-4a1e-8ea6-64617b978575",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "9ddee61a-13d9-41dc-b3db-a3c1c6b70623",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d3aa0e-660a-4244-bfe4-3f27c3696727",
        "cursor": {
          "ref": "399554ea-e44a-4e63-9c30-47d1233be8b9",
          "length": 59,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d977b092-7303-42a8-b8dc-828cbf263072"
        },
        "item": {
          "id": "e8d3aa0e-660a-4244-bfe4-3f27c3696727",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "83f62f5c-7908-4520-a200-b6bbd4a03297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "e8d3aa0e-660a-4244-bfe4-3f27c3696727",
        "cursor": {
          "ref": "399554ea-e44a-4e63-9c30-47d1233be8b9",
          "length": 59,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d977b092-7303-42a8-b8dc-828cbf263072"
        },
        "item": {
          "id": "e8d3aa0e-660a-4244-bfe4-3f27c3696727",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "83f62f5c-7908-4520-a200-b6bbd4a03297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "bb2cb2eb-f19e-4633-a35b-6c86f7136dde",
        "cursor": {
          "ref": "40a87be7-972c-46cc-a2e1-d47c179fd591",
          "length": 59,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b039fc89-1942-4918-9612-dd46d0335bb7"
        },
        "item": {
          "id": "bb2cb2eb-f19e-4633-a35b-6c86f7136dde",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "68d1be37-a7e6-4fed-b24d-1844a1073800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "2cff2201-f245-4243-9b19-e836685687ae",
        "cursor": {
          "ref": "3377d82a-2aad-4d1a-84aa-8b4216cdefd4",
          "length": 59,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "03153eac-f4b5-43bf-88ec-6f72ec329c42"
        },
        "item": {
          "id": "2cff2201-f245-4243-9b19-e836685687ae",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "38e65cf6-e777-4305-bbcf-687cb6f38aed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cff2201-f245-4243-9b19-e836685687ae",
        "cursor": {
          "ref": "3377d82a-2aad-4d1a-84aa-8b4216cdefd4",
          "length": 59,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "03153eac-f4b5-43bf-88ec-6f72ec329c42"
        },
        "item": {
          "id": "2cff2201-f245-4243-9b19-e836685687ae",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "38e65cf6-e777-4305-bbcf-687cb6f38aed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e797cddd-e70c-4a3d-88ae-3732c3445ab5",
        "cursor": {
          "ref": "8819d34c-85a5-46a5-9b2e-ea4c9b849d54",
          "length": 59,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d2aebde4-e297-4195-8c89-396b4140db90"
        },
        "item": {
          "id": "e797cddd-e70c-4a3d-88ae-3732c3445ab5",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "e09f398f-24e6-40e4-b6f9-4ab53b84d844",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}