{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1fc819b0-2c51-4cb1-b42e-fc8fcfdcdd71",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a4478799-98d3-47be-affd-a8a543e921fd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fa739c11-84c1-4f85-899b-16b34c850af2",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af3fc9a1-f502-42df-8409-a68b12d55c06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e3c9b70-0897-480a-a852-d1412d55698e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "746d6b32-16e9-498d-a902-71a0f9b3730a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "58d0c250-68e3-42ad-acc2-8a434be2f7fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d8f269b-9c01-4a73-8ee2-f598062b92c3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "432adbbc-d63c-41fd-888c-98340bf51255",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5a8841-4348-42ae-9188-2c98fc767b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68629dcd-7136-4826-be58-ddbf4f9ac8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c06c20e-0987-4f72-ae41-e83277c6c490",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b657ba75-a02f-44b1-baa3-b70460911470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1bc2845c-7ddb-440c-b771-9fdc11126da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dae690-92ac-4905-ac1a-f78cb64a4f0b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b007f53-156b-4199-8e5f-11718f792bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9405be8c-ab8b-40ec-a783-2c62223d4e32"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "83ccb784-0160-4811-ad04-ba789e4a6a65",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "987771e5-7eef-4a01-83de-c30ac9695a38",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8887e8fc-99a9-46d4-8659-5e9e9a1f9e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89646309-9413-4eb5-a2fe-c9b0153b8644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b59464-2901-4065-a60a-2da5fff56a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac7daaf-e6ef-4507-819b-2dadba01eaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79ed530-5a01-4df0-b76f-c8d9940cda38",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba28a5c5-5d9b-43ef-86fb-f2222276d749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8f34e62-de95-4e56-ac55-42aead92a5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31930eed-43a3-4490-b7c8-28e5ade69dda",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "bab45531-36cc-4afb-811c-2b7c77f3b6c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b71e008e-d75c-4c29-abc7-35e533648409",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ce74bfea-01fc-4c2e-8019-8612a685fa9a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22cb54bf-32df-4d8f-a610-85ad4469c823",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "51715c67-0889-4bad-8c4c-43d8e68740ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8c8984d-68c5-48fb-aa83-53b33482f594",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b597b31a-b3fd-475e-aedd-8a71e5bcb1c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b316b6df-0f0c-4ccc-8838-13a4564cc405",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4c7b995-9a71-4349-8d78-e862750cbc4f"
            }
          }
        ]
      },
      {
        "id": "c6c8e1be-1f47-46e4-b78f-ddf499072a67",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "500acb72-11c1-4fcd-86cf-c5d4b40078ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff8607dc-9219-4b40-8b8e-4fcdf5f5e1dd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e30a471b-4dce-4f21-89c2-197d9cde689f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcf20f7-d78c-49a2-b67a-e9ed84867133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0166ef-bd4c-4282-af91-5925750c3bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e50768f-4431-4b3b-8e01-57ca4bac86a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15c9b73e-398f-4597-8cd6-477b4c3e2789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c6459f-cec0-4b2c-b62a-fb4a3752e684",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff52686-4ebb-454c-af74-9e37a38a1649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8579ffcd-fffb-47de-a503-7b86346a9066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fa0802-f4af-4839-a06c-39389a225b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57ca0709-c986-46af-be7e-89475b7e708b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1614c048-3474-4577-a68a-90b1e26096c3",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56fbdc0-4784-4402-89c1-bc5d522a5ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553fa8c5-5b78-4753-a07b-8ad53c4c6a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a1a9c8-2574-4212-bacc-3c6ba39215cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91faf82b-a3af-4ce2-af33-319ecacbffc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b2bec0-1868-4776-b4e9-691c83a1ff21",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8b342e-a03e-4f11-b354-c94b2f79e847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc59b8dc-0269-49e4-ba51-0e2e0cea2316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae5074b-f4b8-4365-9f0d-6285664e0306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67b83588-0d25-4a08-b4d0-ac2b8ba31da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089ad881-5b55-4bce-83fe-d2476c65dd59",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755d2b61-8cdd-48b1-bb74-46398f15941e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd75758e-c715-46c2-8da2-bdd164437d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cd00d8-b1a5-4055-869b-0a5393900dbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dda342b-4999-45cc-b2c8-933ce72d6674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09256a3c-cfcd-431a-ab05-d49fab88b69a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323acea3-d440-4606-9bdf-17a7fca8b9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149876d3-6597-4d4b-b273-d322221f89e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c47761-4588-4215-9186-bd0f62c1a2fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70bffe66-38ae-44ca-96e0-f9e7d380b875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11208c0-507c-4711-892b-651416502f21",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f431b05-48df-459a-959f-cabd95a5b2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a455bb5c-650f-4f1d-8a7b-931d8e4b37d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d3d09f-acb6-4faa-a5a1-f9f848e5b5dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c91078a-0335-49c4-aa1e-0ce1630f263c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91676545-f742-4c8c-8c3a-baad7c0c8265",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82b3e09-2751-4434-8b1e-efd77ed35335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b032fcd0-0374-418c-a9ad-63a5e45c7cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe8026e-11f4-467e-a39a-01bfda13d615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2931806-d726-46ca-9558-9a7beb84a5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818237f0-869e-4928-aba4-36cbcae8e13e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bb1a74-f727-4209-8e6a-54de423ec51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2de4ec0-51ac-4229-9577-861f95fd0a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acab2b4-12a0-4615-b866-82eb8e1156eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d054f10b-9c0e-4edf-a632-b53607e7179e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28d224b-222b-4d2d-87dd-959c90f009b7",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b231e2d5-c826-431f-b2e5-5fa7394a11de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f239c00d-83dd-4b62-a8d2-25b098ffcd5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54949d25-76dd-4455-b132-522e8c6120f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "964da7c4-f452-402b-bd89-46d0f2d6fd2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97da50ac-7678-40d6-84f3-5be2e4638c93",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93980703-a938-4f35-97c9-19a9cd6c1821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63447a86-09ac-4617-8cef-a2371f01a5bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b290a8d-f31b-4f64-9f45-17f500ae64ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "1945a95f-32e2-496f-a393-10934f0ceacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6f0ca3-8940-4a3c-9368-b9c90b1e1308",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39dad910-f925-4f45-bfc3-3f4e4a393975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee191a7-cc18-4ea6-af2c-3b091c65b7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007af0f7-54ce-403d-b374-38bb9e4e9a39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "7d01850d-6491-4111-aa26-cbb7ae4cebc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec46478-1934-4a4e-b4af-c2f19d6e4fc7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acb6f4c-78e0-40d6-b4f8-ad32ae868359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34233c07-d851-429e-9d8b-a63a125f1ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9804c473-9b40-48b2-af55-fec49899c405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1734eea2-25ba-4e6f-8572-f4730d3ec132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f40b5f-dcd7-4e7f-8649-ee1f75ebb073",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcbab7d-a5a7-461c-8a49-1ab7f53559fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a251c6-55f7-45b6-ae1e-257287e42865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064c9b6b-a350-45d4-b460-18f0fe2e7c9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8821757b-edce-4b85-9518-4b3e7f75bb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac23c35f-422c-44ee-92b1-8fe0dff105c7",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a40209e-81e5-4750-bea1-be857de6d227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c2bf2d-247b-4441-a023-473dfd6b3f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec6ffdd-d5ae-41ab-a53e-8f06eda04f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "c1d5ee2b-48eb-4b7e-a676-e582f44cc2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e766100-01de-4dc9-be8a-2722ed58cf77",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2efc8e3-7b8b-477f-8e99-b9531de0b331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c192a2f-56b2-4dd7-a65e-dc1f7c4063e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2a1aac-0e1b-4f59-838b-6ed264c003d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "db049644-9680-48ac-8eb8-3cb8e223ca62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb85384-e653-47c4-9c42-868d3fa9a8e5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c101186-9c41-485a-94d1-c64a687a7242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47670ac-aea5-405d-826e-9471d5c26efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea67cc5e-59e7-4fa6-a4bb-c6347386c303",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9315ab7c-89fd-42ad-baf1-beb1aa973217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adaf657-d4c4-44ff-9b9c-a216b0069b89",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202a3eaf-2a3d-4187-95e3-4e7b3490fc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89dad4bb-3120-4aaa-9055-0d60b02a486d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef1c8c5-20fd-4fee-ad92-cbf2157fa620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a1b3624-8d58-42f0-8e43-9bc16c0e0e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999e29fd-633a-4d85-8f7f-2b5f209ff0c7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f85050-5f14-4ce3-bb66-a96e8bf25e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53979459-bb3e-4823-a4ac-fa03f377f707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d918ef-df4e-4c2a-b14e-f4f5dfcefd4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eb0f512-0999-46e6-b453-062ab49ae519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1247db9f-cfa3-41d1-a98f-2402c1ffa3f9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74eba775-65b9-4c8b-ae31-1105604a8289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d34a71-b675-4528-878e-dcc195838544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c64d55d-4d8f-4a11-93d1-8177d39e376d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18d5a150-0dfe-4ee1-b45a-3a4509dd8f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23960f8c-b032-4ec5-999f-32695f679991",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e8b8fa-44f8-4f70-89c7-3850c81fa5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384615db-365e-491c-8e0b-c4c542fe589d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e20fa5-09dc-44a3-a6d7-0be7b04d8a7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7790b5ef-3804-448a-9d9a-fb867624affa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327d9960-7e27-437a-9219-971ca329c828",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad7d346-fe19-4ee8-ae7e-420db88f5ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480a1590-8b47-4f0b-be78-d613cb4567bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e0c1d9-1505-43eb-ae24-42a01d94fc66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28e07c74-4a53-4b82-8082-a63013b6c55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dcb444-50b4-41f2-b9fb-6c91e76c72e9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97f2ef6-f08f-43b5-a68a-236ac2f9162a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd90cd3-210b-4052-aa11-95f3a51bc86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f55b18-46d6-4756-834b-55e55955b5c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6607b111-6dd1-4da3-8789-c99344db3dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e647cc-f23f-4320-8538-ef7502c5bacb",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb1426a-90f9-4aba-8324-f118ab8f9679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf4d207-d4ca-4066-9352-fbdeee6b1122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af433377-bbfe-4856-8a36-bc60322052cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "617e725f-48a0-4a43-9230-881ff46cf17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9b54b1-1310-4438-9dba-644f2438e7ee",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f97f4fb-2219-422e-9c03-e1449724095c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb94c0d6-a52e-45f3-ad7f-1fd5ae15aefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d99883e-e66c-4372-8e80-c0f14bdf4013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1042b4d-13f1-4da3-9617-8f9641d7601f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e98e5f8-673a-447e-948b-61cfbd3c5c54",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd83c35-8de5-4ad9-94c4-87bea723533c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b93cec8-cd8c-4711-bfc4-4b53b464f9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a617228-5b3a-4296-aa15-c1cfd8c5f8b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73a476f0-b256-4c42-b834-ba8c474eb0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a64a4d9-5934-4717-b2a8-0200b5db11e4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f8b2eb-1d1f-4d54-bdab-c61f0403792a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7767c5e3-d472-4995-8c49-490062a468f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1ce5cd-c41e-459a-be28-4e1da718763b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2c64391-68cc-4153-8771-425f92971c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02427c79-f37e-4416-9774-74415018bffc",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab15fb6-736c-460f-8522-4aa8bce16f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c618d871-d801-477f-be0c-3d7b2d1d9012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c125206-d1c7-4a46-a628-0839360aa598",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a524ca56-be69-4cac-98df-5b05c2d18de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8442582-f2e3-4e85-b827-a5e4961100b1",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1820dae-3c79-4693-8378-c540355bd887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e839a16-15b6-4f2b-9dd4-c50240af1502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4216ac-f6bc-423a-ba93-4cc74aef9fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f8a23c4-a17c-46ee-953b-b55e899f84a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2526c2b-d45c-4980-8b90-102e9c801086",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb1a655-c789-4531-b1e7-c067185c2772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4feae2-34c8-4b28-8342-6a1abf4f7eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68afa60e-8560-4f7f-b25b-51d43ca46e86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7bcd20e-b542-48b2-a5d4-dba5e9f2c79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ecec26-971d-43f2-8208-8ae1fa900742",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d94e8f4-e1a2-4dbc-a7a1-ef5b1a9650fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6d803def-a54f-42d9-b91d-6200a568721f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a07ef41-413f-4a34-9e22-8e7b286b18ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a518a19e-7e43-4d7c-9bc7-eeb2dc93d6c8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a89aaa89-2e0d-4267-ab20-76ed75840cff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75e6ee25-cf9e-4e3d-8dc9-39baf6e24006",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c221a4a-a6ce-4f7e-9bc8-72aa7a410171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6d4afd1-8c80-4e04-90d0-fc83504f9aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd970c8-62bb-4db6-af2b-2153154bcb4d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d44732f0-fb7c-4057-a4f3-7e70b426ad03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670bba6a-afa2-4d2a-84f2-c8e0de8abbdb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c6a17c-a6d9-45af-8bf5-62ccc1945f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "924954ab-28f1-4434-af0c-bd02c2772e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded6af51-2091-4687-86e5-bbe0b4951f48",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "579d9aee-1b57-43e1-a264-6b780f5378e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71cad22b-c872-481b-b7bc-ad535b63fbc0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b15566db-d389-4d06-8818-fbb0c121368f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e488839-8428-45da-808a-7d0c3d2eb710",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8dc6b67-7c0f-4566-8828-f12f781f93f3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f008e747-862c-4c5c-9117-7b71c7c83b21",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c17917b-9c95-4fc0-b28b-70bc00465455"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cffdbf27-0b19-4150-b69e-6983cee9ab24",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "afc33b32-f15e-48aa-987d-2bfadc66f646"
                }
              }
            ]
          },
          {
            "id": "4287c2f9-2f99-472f-a518-eb7512a04772",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dbceb672-f24a-47c3-bd9e-8e213763be35",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cc8029e-377f-427c-9206-dc8c8b62528f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bdd50da-6b26-47a4-9e2e-9532834b1013"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3782321e-c067-467f-addc-165fe12cc367",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f4089da0-3482-449c-925d-d8a5fcbeefd9"
                    }
                  }
                ]
              },
              {
                "id": "69c52bea-d0d1-499a-99e0-5bdb4479f313",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f745c3b-1fd7-4e5b-a32a-8b6254b3fb7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec9e5dbd-afac-45f6-8ce3-5a963752dcf5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26af5ba5-5880-42cf-aa6d-9c2fe4fe3395",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f1356962-5419-47ca-acee-17a88e786477"
                    }
                  }
                ]
              },
              {
                "id": "bb68cb3c-0d1b-4465-8674-1768de311c40",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4c206e5-c761-451f-9da8-da0b0d04e1a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61db0dfa-a8cb-4c5d-9fa8-6b3d14d41571"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a91295bc-5340-4e15-9481-f0e1cd6546e8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "61a2f8be-11a7-4304-855a-e759f6c8e469"
                    }
                  }
                ]
              },
              {
                "id": "736dab8c-8044-4865-b949-bb97aa11fd20",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e75ad15-4566-4b6d-b211-e6feb1897951",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef6501ed-62c0-462f-96a8-00d383def03e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67ed07be-10cc-44d9-9551-84b61be65e76",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "cef3bbb5-a5e1-4c6b-984f-047457982ba3"
                    }
                  }
                ]
              },
              {
                "id": "11174756-ad7c-4405-9117-e0f0fc1acd02",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ca9d67e-788b-445e-9565-477252097ecd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "0b110d10-235c-4246-bde4-8a286506e6d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "420dddd0-f32b-4853-b7dc-e6ae0972767d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "459ae40e-fbe4-49ab-be7d-108c4eee73c3"
                    }
                  }
                ]
              },
              {
                "id": "ba13c84a-512b-401c-8842-c4c46ac92099",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52e98f1b-206d-46be-b4b5-9b986115a837",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "649247f2-2666-48e1-9a10-a6b471feda62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7150488-3053-4fb6-8455-d1c2ded5ccd7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "06de3dc0-0f29-4fbc-85ca-9a7a432ade56"
                    }
                  }
                ]
              },
              {
                "id": "77e46138-7a6f-4608-a392-5540d848ce47",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3a3e316-f5a0-43e7-94d9-7b9666a6a9c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d23c15b-5582-4764-8c5b-9b8d6f08eeb1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9b1a54f-509b-485b-bca1-0de0a8af9138",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "22482b7a-1755-479a-a47d-5e2b71c9a352"
                    }
                  }
                ]
              },
              {
                "id": "4d0113cc-3084-4716-868b-8c38c853bc7c",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08a9cda0-e8f0-4d16-992a-1d372569d779",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19d61d8c-952d-4978-8038-c2b6eee8c776"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e19d0bea-ff77-4a3b-8840-2338d8451545",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ef30d260-3906-4bd7-bf8e-cc29d674c3fb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e910e90-b0e1-4962-9aaf-638d0317f734",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42c21525-cdaf-449b-96d0-1fd5fe06f4e1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "466c50bd-2a82-46e0-8090-dd5673815dd1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fba8c2b9-a74f-4815-bcef-6dea9468ef9c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e16fa3d-6733-499d-99ef-28e2f6cf294e",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "a0c018c8-414a-4170-a398-f911051c3813"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "636fd049-3dda-4e98-905d-8554c7363f10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d57d677-9e00-4368-a89f-a8bf214547dd"
            }
          }
        ]
      },
      {
        "id": "d984915c-0f94-487d-b6d5-f8394253844d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "074ece18-d3f0-4f98-ad1a-28bab86362b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4cdf646f-2c9a-45b2-aba4-114441ba5e6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8fbea994-124a-4dbc-8142-c7e8627947aa",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2381129c-0c31-439e-ae4b-7a152678fb4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f76895e-c676-4db3-9b13-235211ce1f31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cfbd5a-5d90-438e-8701-f03e6c77a617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "410cbe4d-cd82-46e1-9e9e-550229f177b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a396bb1c-1e57-4919-a739-61822b096877",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac6969e-09ad-4703-925b-57fd951a1fdb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a793d67b-bc0b-44be-9802-311464f11b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb559e1-b554-4ce1-bc2e-43a13b7f974c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd39db15-aa9b-49e7-8303-3b5a6885123b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcc1ed74-f3a2-449c-a04e-d6d55a7c113e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90caea5a-e8e3-48e9-a8de-bcb76b5b0271"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04bca7d5-7f57-41ff-8817-b793a95f9688",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70b365d5-eb84-4bc7-9ae3-5a374edff8e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "041b12ae-aa71-40cf-8bfa-024f92184d5b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "44141cb9-b391-48a6-bbbf-e94de15cfc2c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7c47cba-7b93-4064-985a-4141df3473e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ae5833c-8e00-41ba-81f1-6256620cec3f"
            }
          }
        ]
      },
      {
        "id": "64470aa2-0509-4d0a-abd6-3c50e52d9d5c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "89c155db-7c16-488c-9b76-12259814b2ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2646602f-201f-4931-834a-519ccd9758b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00154316-a09a-4068-9380-3a0fdeb0cf8e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2908676-572b-4991-af99-d7a4eb03a809",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "6be089b7-c057-4b7a-a966-d10ab23c3104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37eeca1c-6243-4ca7-96aa-4828fe2c4ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e4df2b9-7ed7-4665-ab63-9c87d7806218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c533887f-96c9-4140-a56e-11debce4f04b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849c50f8-40be-4d07-ac15-90842d6f9bd6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "2b893286-7084-46b8-893a-eb0d2b15bda7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c087d5fd-c0fd-49b7-8ce1-e48661ab8932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a35f8454-0d40-4f04-823d-c7e724b38893"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4173ca8c-7083-4b25-b4c1-1e81bcb326f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a236b5f-4ec5-4706-9f72-a0096def1b4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d92923e-c8a2-4a21-97b8-62a89d446db6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27af580d-46ee-4b88-bbd0-d148da2806a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "445e8211-b681-43e0-ac2f-cf9892876bb9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "edd8116b-a0ab-4fcc-a304-3b9943aeef38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19b8f3a1-5c48-4066-8115-c1ae49f69045",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1672a6c-b1a8-4fb5-848e-ef99df09356b"
            }
          }
        ]
      },
      {
        "id": "d79200d2-d0de-4887-8c8e-ae6a4b45d053",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d8d07b87-3b73-47c0-a248-60b5daae51a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "575606b4-ef88-49c9-b421-5761eddb225e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4637e177-c064-47b8-9866-a9320d08d033",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7052e34f-8344-462b-80e7-88dbcb583d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85423444-a77e-4466-a8f1-d2ac45f9d98b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac87c09c-87c4-43dc-92f4-967bcde545f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0d9c09b-335c-4137-9a9e-bc0b657dbad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b995970-0281-46c8-bdf4-55e67854c510",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2249802e-04bc-46ce-9afd-6bc70d458ce4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8f062939-70bc-4cda-908d-c87093127894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fc61a6-2bfc-4171-9578-1cbf5dd8d8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b49cf56-808a-4c9b-b9f7-bcd1c9d50b42"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4315d07a-414e-46f5-b9ce-b58893cd9688",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7426fcc2-b5cb-40e7-9a3f-31dc80015bb2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb5a0428-ac63-42ea-9c0b-4fbfd9e9d40c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "953afcc8-a32e-45a6-a9f2-8051e742df6e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8812b8ed-9f1a-42ad-9517-a6ba6fa0923c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "94c5d72b-e324-4292-b882-d973c5e51e97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9391c940-bce6-48fd-8cd0-2494dc425203",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4198d0ec-233f-4e61-b7c9-5a60922122b4"
            }
          }
        ]
      },
      {
        "id": "47e55044-fd9d-41ae-8c3e-8c54841b19ee",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "987b6ad5-3abb-4508-840b-c08547d8bd61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8196ebd-25c2-4fe3-9775-44aab0bdabdd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "502179fe-e36d-4833-93e1-2c67868ba8ac",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d228d150-e231-46c1-8f63-909453c884b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8722f6-c80b-44ff-b1da-e46cd6d2ba6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301510b8-7516-40d8-83ae-86556f4d0603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4364538e-8466-46a4-b775-d9afd7367826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fe43ff-0e90-476b-a8a8-e9344bd53718",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535fdd3c-6b51-4d10-875a-444b788d146d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8e423975-fed0-46b1-a550-178894fc81cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f21e5d-fba7-4a3e-a8e0-bc28a188bef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8208377-80ca-4941-994f-04876b4ade86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9bef68c-1c91-45bf-a735-386f03913640",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ba09007-4ce3-4eba-9961-b48ad1dca6ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f65ef34b-2987-40c1-a57a-786a66730848",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5ed12b4-1366-43f3-a756-5e998c9a0297"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2113d001-2617-4f03-a559-e1d1b0a0ea5f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "ba7c4e28-f3f1-4cbf-904a-72149bc07464"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c40c886-e28f-4bd9-b61c-fbe1dba5f34f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce2730d9-4fc2-4b2a-b946-e792edfb2ed2"
            }
          }
        ]
      },
      {
        "id": "2c9857b7-5ca9-497a-bf9e-1b534f9ecf6e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "deba68f5-0294-4c97-8ee3-26a5fcd5de83",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bbd14fa4-3d16-4468-9ef5-90acfc1951f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61ebd10f-eeda-455c-ad4c-17139ca90a69",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af935f1-8689-444b-8a5e-65ae37b78c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9334e8f-83bb-4891-a2fc-0654d6453e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72792a0-24fe-43ef-80e0-fd49485391e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5cabc15c-b6fa-461a-9bda-5fd1bf0a7137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7e4d8d-7ad6-46f8-8ffc-e5fad13e18f5",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c49ec3-4655-4f60-80f3-3083249d1ba4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "fb1bac7f-35ae-481a-9385-a9dc24716bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ff99da-6261-4448-864f-86befd8ce66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63cc5e1f-337a-49bf-8389-8686fffac8a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f552fed-edc9-4687-af6f-2007b40bd828",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62780489-5f91-460c-a360-42a55248c5b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25637942-8bff-4bf1-8f77-6ffc1d6c5689",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10ae1a66-7ce1-4efb-a582-972cd98947d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d8e1d2f-b956-4eb7-a7d9-5a8f40a3c61e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "c0a47024-ab42-48ac-ab0b-2d327f038387"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9546c893-707c-4b52-b9fe-4192872a051f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29c593f1-c376-4000-a266-9d9f2038f4e9"
            }
          }
        ]
      },
      {
        "id": "101400a2-152a-41be-a0c7-bdab3ddeb917",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "c6abaeb5-8c3d-4b9d-bcd5-71e667894f1a",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 22
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 92.92523364485983,
      "responseMin": 64,
      "responseMax": 928,
      "responseSd": 98.82758524953357,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662339352299,
      "completed": 1662339366007
    },
    "executions": [
      {
        "id": "fa739c11-84c1-4f85-899b-16b34c850af2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "46f0eb89-f72d-483f-805a-32c1bb1a43e5",
          "httpRequestId": "c3c0a8ae-b010-4a9f-97d8-c4637dd15cc4"
        },
        "item": {
          "id": "fa739c11-84c1-4f85-899b-16b34c850af2",
          "name": "did_json"
        },
        "response": {
          "id": "f69eca26-2782-439e-8f42-9cb827837088",
          "status": "OK",
          "code": 200,
          "responseTime": 321,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432adbbc-d63c-41fd-888c-98340bf51255",
        "cursor": {
          "ref": "ff890dda-5ac0-4747-a5c2-b2debd792a5f",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "83acd213-254e-438a-9c89-3727f7dfd16a"
        },
        "item": {
          "id": "432adbbc-d63c-41fd-888c-98340bf51255",
          "name": "did:invalid"
        },
        "response": {
          "id": "bf4f4bd4-7a69-4409-ae4f-b177870699c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432adbbc-d63c-41fd-888c-98340bf51255",
        "cursor": {
          "ref": "ff890dda-5ac0-4747-a5c2-b2debd792a5f",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "83acd213-254e-438a-9c89-3727f7dfd16a"
        },
        "item": {
          "id": "432adbbc-d63c-41fd-888c-98340bf51255",
          "name": "did:invalid"
        },
        "response": {
          "id": "bf4f4bd4-7a69-4409-ae4f-b177870699c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c06c20e-0987-4f72-ae41-e83277c6c490",
        "cursor": {
          "ref": "43ebb044-0234-46ea-a910-48a89b31b36c",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "341f8f61-3290-4ddd-9dd2-672ecef0267f"
        },
        "item": {
          "id": "2c06c20e-0987-4f72-ae41-e83277c6c490",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "853e06dd-646c-492f-9427-aaaabed39caa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 123,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dae690-92ac-4905-ac1a-f78cb64a4f0b",
        "cursor": {
          "ref": "9ba265d5-3c40-4e9a-ad84-2b8ddf1ffee4",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "59e4b067-ecc5-471e-97c9-f3ac2420cda9"
        },
        "item": {
          "id": "c8dae690-92ac-4905-ac1a-f78cb64a4f0b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a4799759-f8d4-4131-ba8c-4ac753afe9f5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987771e5-7eef-4a01-83de-c30ac9695a38",
        "cursor": {
          "ref": "f78d1592-7c7f-455b-acef-988ef0cddd37",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "80d2c409-c805-49f7-a64c-a844daefce55"
        },
        "item": {
          "id": "987771e5-7eef-4a01-83de-c30ac9695a38",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b2ce7a11-0b2d-451a-aa17-3e546d46487a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79ed530-5a01-4df0-b76f-c8d9940cda38",
        "cursor": {
          "ref": "a7696f24-5d53-41db-9afa-a70a73784b68",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0b0ffc6e-cc2b-42fd-a14e-b90ba8f76d9f"
        },
        "item": {
          "id": "a79ed530-5a01-4df0-b76f-c8d9940cda38",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9629ac09-d8a7-41bc-a575-20130c9ecce4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79ed530-5a01-4df0-b76f-c8d9940cda38",
        "cursor": {
          "ref": "a7696f24-5d53-41db-9afa-a70a73784b68",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0b0ffc6e-cc2b-42fd-a14e-b90ba8f76d9f"
        },
        "item": {
          "id": "a79ed530-5a01-4df0-b76f-c8d9940cda38",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9629ac09-d8a7-41bc-a575-20130c9ecce4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce74bfea-01fc-4c2e-8019-8612a685fa9a",
        "cursor": {
          "ref": "bff211cf-9a8d-4d64-b85b-5bfe7c416350",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f19f44ac-9191-40e0-ba3a-b452d7e17cd2"
        },
        "item": {
          "id": "ce74bfea-01fc-4c2e-8019-8612a685fa9a",
          "name": "identifiers"
        },
        "response": {
          "id": "2442dedd-6c18-4089-a8d5-18ebb62edec7",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30a471b-4dce-4f21-89c2-197d9cde689f",
        "cursor": {
          "ref": "7e0dc196-e2ba-4200-babb-12924004e263",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "46e8c11b-70e8-47f3-b297-22295620113a"
        },
        "item": {
          "id": "e30a471b-4dce-4f21-89c2-197d9cde689f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "57c48c7f-331e-40fd-b347-c550a0c01bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30a471b-4dce-4f21-89c2-197d9cde689f",
        "cursor": {
          "ref": "7e0dc196-e2ba-4200-babb-12924004e263",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "46e8c11b-70e8-47f3-b297-22295620113a"
        },
        "item": {
          "id": "e30a471b-4dce-4f21-89c2-197d9cde689f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "57c48c7f-331e-40fd-b347-c550a0c01bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30a471b-4dce-4f21-89c2-197d9cde689f",
        "cursor": {
          "ref": "7e0dc196-e2ba-4200-babb-12924004e263",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "46e8c11b-70e8-47f3-b297-22295620113a"
        },
        "item": {
          "id": "e30a471b-4dce-4f21-89c2-197d9cde689f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "57c48c7f-331e-40fd-b347-c550a0c01bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c6459f-cec0-4b2c-b62a-fb4a3752e684",
        "cursor": {
          "ref": "2fdb69bb-8157-43e6-a573-f96569bc47e7",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ed15d994-33d1-487e-b52e-a0e5d0ff81d9"
        },
        "item": {
          "id": "d0c6459f-cec0-4b2c-b62a-fb4a3752e684",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "76201d9b-0c9e-47b6-acf1-5cfcfcb8dd53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c6459f-cec0-4b2c-b62a-fb4a3752e684",
        "cursor": {
          "ref": "2fdb69bb-8157-43e6-a573-f96569bc47e7",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ed15d994-33d1-487e-b52e-a0e5d0ff81d9"
        },
        "item": {
          "id": "d0c6459f-cec0-4b2c-b62a-fb4a3752e684",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "76201d9b-0c9e-47b6-acf1-5cfcfcb8dd53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1614c048-3474-4577-a68a-90b1e26096c3",
        "cursor": {
          "ref": "eed1f45b-b4d8-45f8-b7eb-f3c22d7a30ed",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d7d3b6db-26e4-48d2-bee3-1c585da59cd5"
        },
        "item": {
          "id": "1614c048-3474-4577-a68a-90b1e26096c3",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "3e80df01-4c9c-4640-ac85-8daa4e8520ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1614c048-3474-4577-a68a-90b1e26096c3",
        "cursor": {
          "ref": "eed1f45b-b4d8-45f8-b7eb-f3c22d7a30ed",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d7d3b6db-26e4-48d2-bee3-1c585da59cd5"
        },
        "item": {
          "id": "1614c048-3474-4577-a68a-90b1e26096c3",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "3e80df01-4c9c-4640-ac85-8daa4e8520ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b2bec0-1868-4776-b4e9-691c83a1ff21",
        "cursor": {
          "ref": "8c9ce912-d29d-4c9f-86ce-a1449da60cd0",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b29f6142-e49d-482b-9728-50a3ce9bd93d"
        },
        "item": {
          "id": "31b2bec0-1868-4776-b4e9-691c83a1ff21",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "36343885-b235-40f2-8346-688d2fd917db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b2bec0-1868-4776-b4e9-691c83a1ff21",
        "cursor": {
          "ref": "8c9ce912-d29d-4c9f-86ce-a1449da60cd0",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b29f6142-e49d-482b-9728-50a3ce9bd93d"
        },
        "item": {
          "id": "31b2bec0-1868-4776-b4e9-691c83a1ff21",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "36343885-b235-40f2-8346-688d2fd917db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089ad881-5b55-4bce-83fe-d2476c65dd59",
        "cursor": {
          "ref": "55947c2d-ef84-41a1-8500-12d2fc24a80e",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5c42732a-3dc9-4d56-9f0c-a6ad88d4726a"
        },
        "item": {
          "id": "089ad881-5b55-4bce-83fe-d2476c65dd59",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "9dc29fe0-8a5b-4f33-8888-bc385d5eef9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089ad881-5b55-4bce-83fe-d2476c65dd59",
        "cursor": {
          "ref": "55947c2d-ef84-41a1-8500-12d2fc24a80e",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5c42732a-3dc9-4d56-9f0c-a6ad88d4726a"
        },
        "item": {
          "id": "089ad881-5b55-4bce-83fe-d2476c65dd59",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "9dc29fe0-8a5b-4f33-8888-bc385d5eef9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09256a3c-cfcd-431a-ab05-d49fab88b69a",
        "cursor": {
          "ref": "c85842d9-880f-43d2-886d-fbac9634d6f3",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3154241e-ff72-4df4-9ea4-39523764154a"
        },
        "item": {
          "id": "09256a3c-cfcd-431a-ab05-d49fab88b69a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7f132756-e258-4bc0-8c4c-cc8fc15b343e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09256a3c-cfcd-431a-ab05-d49fab88b69a",
        "cursor": {
          "ref": "c85842d9-880f-43d2-886d-fbac9634d6f3",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3154241e-ff72-4df4-9ea4-39523764154a"
        },
        "item": {
          "id": "09256a3c-cfcd-431a-ab05-d49fab88b69a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7f132756-e258-4bc0-8c4c-cc8fc15b343e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11208c0-507c-4711-892b-651416502f21",
        "cursor": {
          "ref": "f5dc6390-6244-4189-8fc7-42f62d0e25c7",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "367cd8f2-47b5-4e7a-8957-0e2e08252837"
        },
        "item": {
          "id": "c11208c0-507c-4711-892b-651416502f21",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "ac2b05a9-3326-4f4f-bcc9-20de2ba21a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11208c0-507c-4711-892b-651416502f21",
        "cursor": {
          "ref": "f5dc6390-6244-4189-8fc7-42f62d0e25c7",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "367cd8f2-47b5-4e7a-8957-0e2e08252837"
        },
        "item": {
          "id": "c11208c0-507c-4711-892b-651416502f21",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "ac2b05a9-3326-4f4f-bcc9-20de2ba21a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91676545-f742-4c8c-8c3a-baad7c0c8265",
        "cursor": {
          "ref": "565790df-6a70-46a5-ad26-fcd1c6337928",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3d5acdab-5a7e-4660-80d3-288a017183e1"
        },
        "item": {
          "id": "91676545-f742-4c8c-8c3a-baad7c0c8265",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "fdfee63a-415d-4eb8-a446-e81e273eba94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91676545-f742-4c8c-8c3a-baad7c0c8265",
        "cursor": {
          "ref": "565790df-6a70-46a5-ad26-fcd1c6337928",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3d5acdab-5a7e-4660-80d3-288a017183e1"
        },
        "item": {
          "id": "91676545-f742-4c8c-8c3a-baad7c0c8265",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "fdfee63a-415d-4eb8-a446-e81e273eba94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818237f0-869e-4928-aba4-36cbcae8e13e",
        "cursor": {
          "ref": "2a986bf4-bea2-435c-9f02-f9ea47f00517",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "011afbe7-4a7d-4b9f-a996-2c3284c8b456"
        },
        "item": {
          "id": "818237f0-869e-4928-aba4-36cbcae8e13e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "41c3401d-06e6-4e71-a53d-8351bf87e845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818237f0-869e-4928-aba4-36cbcae8e13e",
        "cursor": {
          "ref": "2a986bf4-bea2-435c-9f02-f9ea47f00517",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "011afbe7-4a7d-4b9f-a996-2c3284c8b456"
        },
        "item": {
          "id": "818237f0-869e-4928-aba4-36cbcae8e13e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "41c3401d-06e6-4e71-a53d-8351bf87e845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28d224b-222b-4d2d-87dd-959c90f009b7",
        "cursor": {
          "ref": "400cd298-aab9-43a6-bd20-6f19d08c1fef",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3c76a3ca-aacd-4e22-a055-e2ecb03ac1a7"
        },
        "item": {
          "id": "f28d224b-222b-4d2d-87dd-959c90f009b7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "d548652c-48b9-4257-8441-cdb952588d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28d224b-222b-4d2d-87dd-959c90f009b7",
        "cursor": {
          "ref": "400cd298-aab9-43a6-bd20-6f19d08c1fef",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3c76a3ca-aacd-4e22-a055-e2ecb03ac1a7"
        },
        "item": {
          "id": "f28d224b-222b-4d2d-87dd-959c90f009b7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "d548652c-48b9-4257-8441-cdb952588d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97da50ac-7678-40d6-84f3-5be2e4638c93",
        "cursor": {
          "ref": "ff4f829d-10d2-4061-b714-806d784478cf",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d84a007d-1c64-426f-a6b6-f1405404e3a0"
        },
        "item": {
          "id": "97da50ac-7678-40d6-84f3-5be2e4638c93",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "a9b23c28-7289-4fc0-a330-5171a4c479fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97da50ac-7678-40d6-84f3-5be2e4638c93",
        "cursor": {
          "ref": "ff4f829d-10d2-4061-b714-806d784478cf",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d84a007d-1c64-426f-a6b6-f1405404e3a0"
        },
        "item": {
          "id": "97da50ac-7678-40d6-84f3-5be2e4638c93",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "a9b23c28-7289-4fc0-a330-5171a4c479fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6f0ca3-8940-4a3c-9368-b9c90b1e1308",
        "cursor": {
          "ref": "883b8617-0769-485b-b883-5723286e0a31",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cabfd4c0-39f1-439d-b20a-3fddb69be104"
        },
        "item": {
          "id": "4d6f0ca3-8940-4a3c-9368-b9c90b1e1308",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "676ddda8-db5b-4583-94e9-d7a950242294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6f0ca3-8940-4a3c-9368-b9c90b1e1308",
        "cursor": {
          "ref": "883b8617-0769-485b-b883-5723286e0a31",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cabfd4c0-39f1-439d-b20a-3fddb69be104"
        },
        "item": {
          "id": "4d6f0ca3-8940-4a3c-9368-b9c90b1e1308",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "676ddda8-db5b-4583-94e9-d7a950242294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec46478-1934-4a4e-b4af-c2f19d6e4fc7",
        "cursor": {
          "ref": "4a644d91-8828-45b8-bd2d-0e512d7d19c9",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4acdfd73-a903-41b5-acac-9987ee4f8b7d"
        },
        "item": {
          "id": "8ec46478-1934-4a4e-b4af-c2f19d6e4fc7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1d25e373-36f7-4297-a666-5eeb2457d9bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec46478-1934-4a4e-b4af-c2f19d6e4fc7",
        "cursor": {
          "ref": "4a644d91-8828-45b8-bd2d-0e512d7d19c9",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4acdfd73-a903-41b5-acac-9987ee4f8b7d"
        },
        "item": {
          "id": "8ec46478-1934-4a4e-b4af-c2f19d6e4fc7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1d25e373-36f7-4297-a666-5eeb2457d9bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f40b5f-dcd7-4e7f-8649-ee1f75ebb073",
        "cursor": {
          "ref": "cdf899a5-8564-467b-8682-77e883c1c8d5",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3d4bf394-ae4b-4df5-995d-0dbd1f69a007"
        },
        "item": {
          "id": "23f40b5f-dcd7-4e7f-8649-ee1f75ebb073",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "01acb36e-392f-443b-b42c-c80361e74476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f40b5f-dcd7-4e7f-8649-ee1f75ebb073",
        "cursor": {
          "ref": "cdf899a5-8564-467b-8682-77e883c1c8d5",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3d4bf394-ae4b-4df5-995d-0dbd1f69a007"
        },
        "item": {
          "id": "23f40b5f-dcd7-4e7f-8649-ee1f75ebb073",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "01acb36e-392f-443b-b42c-c80361e74476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac23c35f-422c-44ee-92b1-8fe0dff105c7",
        "cursor": {
          "ref": "bd0e82e4-fa27-4df3-bf33-98ede3055529",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d9836a2d-663e-4040-879f-c8196b7ded72"
        },
        "item": {
          "id": "ac23c35f-422c-44ee-92b1-8fe0dff105c7",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "caf3dacb-7d41-46cc-ab02-8ec91f8ff2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac23c35f-422c-44ee-92b1-8fe0dff105c7",
        "cursor": {
          "ref": "bd0e82e4-fa27-4df3-bf33-98ede3055529",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d9836a2d-663e-4040-879f-c8196b7ded72"
        },
        "item": {
          "id": "ac23c35f-422c-44ee-92b1-8fe0dff105c7",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "caf3dacb-7d41-46cc-ab02-8ec91f8ff2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e766100-01de-4dc9-be8a-2722ed58cf77",
        "cursor": {
          "ref": "f3e96fdf-597a-4a28-8847-450da378ca2c",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ccffbbd0-f43c-458a-a9eb-cc408d0838ab"
        },
        "item": {
          "id": "6e766100-01de-4dc9-be8a-2722ed58cf77",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "94ad45ac-16df-411e-9ab6-cede761aafbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e766100-01de-4dc9-be8a-2722ed58cf77",
        "cursor": {
          "ref": "f3e96fdf-597a-4a28-8847-450da378ca2c",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ccffbbd0-f43c-458a-a9eb-cc408d0838ab"
        },
        "item": {
          "id": "6e766100-01de-4dc9-be8a-2722ed58cf77",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "94ad45ac-16df-411e-9ab6-cede761aafbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb85384-e653-47c4-9c42-868d3fa9a8e5",
        "cursor": {
          "ref": "8aec3535-5709-4c2c-b4b8-c1adcf3ef92a",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6fd7398a-a492-46b8-bb67-b336e27d9e94"
        },
        "item": {
          "id": "1bb85384-e653-47c4-9c42-868d3fa9a8e5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2e37c019-0139-43b2-bfc9-658720784ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb85384-e653-47c4-9c42-868d3fa9a8e5",
        "cursor": {
          "ref": "8aec3535-5709-4c2c-b4b8-c1adcf3ef92a",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6fd7398a-a492-46b8-bb67-b336e27d9e94"
        },
        "item": {
          "id": "1bb85384-e653-47c4-9c42-868d3fa9a8e5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2e37c019-0139-43b2-bfc9-658720784ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adaf657-d4c4-44ff-9b9c-a216b0069b89",
        "cursor": {
          "ref": "2e664557-3d77-4ee8-9695-a8379d6ea331",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1209593d-4c81-43b9-8785-bd0be6dcd030"
        },
        "item": {
          "id": "0adaf657-d4c4-44ff-9b9c-a216b0069b89",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "ef73bb9a-8314-417c-8840-09c53389a860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adaf657-d4c4-44ff-9b9c-a216b0069b89",
        "cursor": {
          "ref": "2e664557-3d77-4ee8-9695-a8379d6ea331",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1209593d-4c81-43b9-8785-bd0be6dcd030"
        },
        "item": {
          "id": "0adaf657-d4c4-44ff-9b9c-a216b0069b89",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "ef73bb9a-8314-417c-8840-09c53389a860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999e29fd-633a-4d85-8f7f-2b5f209ff0c7",
        "cursor": {
          "ref": "d576e828-c439-4a01-b37f-5319666e1621",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6c49c053-2bd9-4460-97c5-36e67706cec5"
        },
        "item": {
          "id": "999e29fd-633a-4d85-8f7f-2b5f209ff0c7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "04af71c5-082b-4219-b1ea-279b54b7c3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999e29fd-633a-4d85-8f7f-2b5f209ff0c7",
        "cursor": {
          "ref": "d576e828-c439-4a01-b37f-5319666e1621",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6c49c053-2bd9-4460-97c5-36e67706cec5"
        },
        "item": {
          "id": "999e29fd-633a-4d85-8f7f-2b5f209ff0c7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "04af71c5-082b-4219-b1ea-279b54b7c3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1247db9f-cfa3-41d1-a98f-2402c1ffa3f9",
        "cursor": {
          "ref": "8febd0d7-beae-4010-aa03-3ac51ed9b6b9",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4c9ddd92-abe8-4864-92d7-c081fda80db6"
        },
        "item": {
          "id": "1247db9f-cfa3-41d1-a98f-2402c1ffa3f9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b351859c-870f-4c43-a750-06a4b9b4b4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1247db9f-cfa3-41d1-a98f-2402c1ffa3f9",
        "cursor": {
          "ref": "8febd0d7-beae-4010-aa03-3ac51ed9b6b9",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4c9ddd92-abe8-4864-92d7-c081fda80db6"
        },
        "item": {
          "id": "1247db9f-cfa3-41d1-a98f-2402c1ffa3f9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b351859c-870f-4c43-a750-06a4b9b4b4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23960f8c-b032-4ec5-999f-32695f679991",
        "cursor": {
          "ref": "56032397-ad79-4af3-b7a4-9f227196c766",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5d61a8a0-0dfd-45da-a237-0b83885c237b"
        },
        "item": {
          "id": "23960f8c-b032-4ec5-999f-32695f679991",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "eb14c8ba-d8fa-4fce-811a-71b9c9ff7576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23960f8c-b032-4ec5-999f-32695f679991",
        "cursor": {
          "ref": "56032397-ad79-4af3-b7a4-9f227196c766",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5d61a8a0-0dfd-45da-a237-0b83885c237b"
        },
        "item": {
          "id": "23960f8c-b032-4ec5-999f-32695f679991",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "eb14c8ba-d8fa-4fce-811a-71b9c9ff7576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327d9960-7e27-437a-9219-971ca329c828",
        "cursor": {
          "ref": "c9177671-b265-47bf-8275-9a7425d5435a",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0ac8a5f0-e59a-4b5b-ad51-f010e01ec11a"
        },
        "item": {
          "id": "327d9960-7e27-437a-9219-971ca329c828",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "15fa7390-703d-4a37-9696-49652165ed96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327d9960-7e27-437a-9219-971ca329c828",
        "cursor": {
          "ref": "c9177671-b265-47bf-8275-9a7425d5435a",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0ac8a5f0-e59a-4b5b-ad51-f010e01ec11a"
        },
        "item": {
          "id": "327d9960-7e27-437a-9219-971ca329c828",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "15fa7390-703d-4a37-9696-49652165ed96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dcb444-50b4-41f2-b9fb-6c91e76c72e9",
        "cursor": {
          "ref": "480e836b-5ac8-4ad9-ac46-c33cd99111c5",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "baa8dfda-3d61-408c-8640-7854acd72516"
        },
        "item": {
          "id": "e9dcb444-50b4-41f2-b9fb-6c91e76c72e9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "51cb1050-18ac-46e1-80c7-a040ece08075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dcb444-50b4-41f2-b9fb-6c91e76c72e9",
        "cursor": {
          "ref": "480e836b-5ac8-4ad9-ac46-c33cd99111c5",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "baa8dfda-3d61-408c-8640-7854acd72516"
        },
        "item": {
          "id": "e9dcb444-50b4-41f2-b9fb-6c91e76c72e9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "51cb1050-18ac-46e1-80c7-a040ece08075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e647cc-f23f-4320-8538-ef7502c5bacb",
        "cursor": {
          "ref": "6ea4bb42-3101-4fdf-bb72-0fff2467a380",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f7975a6a-7235-46d5-a906-9682ed0d171e"
        },
        "item": {
          "id": "48e647cc-f23f-4320-8538-ef7502c5bacb",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c058a79b-67ad-4650-95e6-6523617a0965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e647cc-f23f-4320-8538-ef7502c5bacb",
        "cursor": {
          "ref": "6ea4bb42-3101-4fdf-bb72-0fff2467a380",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f7975a6a-7235-46d5-a906-9682ed0d171e"
        },
        "item": {
          "id": "48e647cc-f23f-4320-8538-ef7502c5bacb",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c058a79b-67ad-4650-95e6-6523617a0965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9b54b1-1310-4438-9dba-644f2438e7ee",
        "cursor": {
          "ref": "5317793b-4acc-4301-a6a8-09f8054ee6f2",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0b29cd5b-2fb0-439c-8027-86dc2a068804"
        },
        "item": {
          "id": "2c9b54b1-1310-4438-9dba-644f2438e7ee",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b78bd98e-a5dd-47a9-8313-b0b4feb60160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9b54b1-1310-4438-9dba-644f2438e7ee",
        "cursor": {
          "ref": "5317793b-4acc-4301-a6a8-09f8054ee6f2",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0b29cd5b-2fb0-439c-8027-86dc2a068804"
        },
        "item": {
          "id": "2c9b54b1-1310-4438-9dba-644f2438e7ee",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b78bd98e-a5dd-47a9-8313-b0b4feb60160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e98e5f8-673a-447e-948b-61cfbd3c5c54",
        "cursor": {
          "ref": "28aa9e7e-2555-4fa7-a036-67d40c062559",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4d9cb294-6baa-49a5-b6ab-965921178164"
        },
        "item": {
          "id": "6e98e5f8-673a-447e-948b-61cfbd3c5c54",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2eda4949-30ab-4bae-8474-bf15e3d5ba9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e98e5f8-673a-447e-948b-61cfbd3c5c54",
        "cursor": {
          "ref": "28aa9e7e-2555-4fa7-a036-67d40c062559",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4d9cb294-6baa-49a5-b6ab-965921178164"
        },
        "item": {
          "id": "6e98e5f8-673a-447e-948b-61cfbd3c5c54",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2eda4949-30ab-4bae-8474-bf15e3d5ba9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a64a4d9-5934-4717-b2a8-0200b5db11e4",
        "cursor": {
          "ref": "f957f0f2-b9eb-479b-9452-1385a840fd90",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c93d6855-6cf2-47c9-b7e1-2df00828bfeb"
        },
        "item": {
          "id": "3a64a4d9-5934-4717-b2a8-0200b5db11e4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e1e0a198-ecbb-4bcc-9a73-11ce9ae1b732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a64a4d9-5934-4717-b2a8-0200b5db11e4",
        "cursor": {
          "ref": "f957f0f2-b9eb-479b-9452-1385a840fd90",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c93d6855-6cf2-47c9-b7e1-2df00828bfeb"
        },
        "item": {
          "id": "3a64a4d9-5934-4717-b2a8-0200b5db11e4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e1e0a198-ecbb-4bcc-9a73-11ce9ae1b732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02427c79-f37e-4416-9774-74415018bffc",
        "cursor": {
          "ref": "46dc13b1-6bf4-4d64-9b73-143ac79ecc43",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a3a59a4e-c0ed-4d9e-be10-98715c4bdc12"
        },
        "item": {
          "id": "02427c79-f37e-4416-9774-74415018bffc",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "e3495ce2-1530-45ff-a704-dc5990d009bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02427c79-f37e-4416-9774-74415018bffc",
        "cursor": {
          "ref": "46dc13b1-6bf4-4d64-9b73-143ac79ecc43",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a3a59a4e-c0ed-4d9e-be10-98715c4bdc12"
        },
        "item": {
          "id": "02427c79-f37e-4416-9774-74415018bffc",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "e3495ce2-1530-45ff-a704-dc5990d009bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8442582-f2e3-4e85-b827-a5e4961100b1",
        "cursor": {
          "ref": "2a00ab1d-4d5d-4f1c-bfee-7ff07599e573",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0b3129f9-7582-43ae-b540-fd35c86d8655"
        },
        "item": {
          "id": "a8442582-f2e3-4e85-b827-a5e4961100b1",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "0664d8f6-4fb3-412e-a8c1-7674d20852a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8442582-f2e3-4e85-b827-a5e4961100b1",
        "cursor": {
          "ref": "2a00ab1d-4d5d-4f1c-bfee-7ff07599e573",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0b3129f9-7582-43ae-b540-fd35c86d8655"
        },
        "item": {
          "id": "a8442582-f2e3-4e85-b827-a5e4961100b1",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "0664d8f6-4fb3-412e-a8c1-7674d20852a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2526c2b-d45c-4980-8b90-102e9c801086",
        "cursor": {
          "ref": "c950b65f-be06-405e-93c0-d1eac93fe06c",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1845013d-a531-4e31-94ad-b7094317d2a3"
        },
        "item": {
          "id": "d2526c2b-d45c-4980-8b90-102e9c801086",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d58afd69-e46e-47ef-a9ad-1f5ec4ac0031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2526c2b-d45c-4980-8b90-102e9c801086",
        "cursor": {
          "ref": "c950b65f-be06-405e-93c0-d1eac93fe06c",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1845013d-a531-4e31-94ad-b7094317d2a3"
        },
        "item": {
          "id": "d2526c2b-d45c-4980-8b90-102e9c801086",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d58afd69-e46e-47ef-a9ad-1f5ec4ac0031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ecec26-971d-43f2-8208-8ae1fa900742",
        "cursor": {
          "ref": "0f06ede1-6dba-42a6-96f2-d476b34a0d02",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d3018a5f-70b0-4705-8105-7de58e0ae541"
        },
        "item": {
          "id": "47ecec26-971d-43f2-8208-8ae1fa900742",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "f21bcac0-5a19-4935-ab90-4217216f779e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ecec26-971d-43f2-8208-8ae1fa900742",
        "cursor": {
          "ref": "0f06ede1-6dba-42a6-96f2-d476b34a0d02",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d3018a5f-70b0-4705-8105-7de58e0ae541"
        },
        "item": {
          "id": "47ecec26-971d-43f2-8208-8ae1fa900742",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "f21bcac0-5a19-4935-ab90-4217216f779e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e6ee25-cf9e-4e3d-8dc9-39baf6e24006",
        "cursor": {
          "ref": "6f1bfaa7-6d71-40ab-b03c-3d90a1e357c9",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "366586e9-a195-4637-a59b-cd6918f9dca3"
        },
        "item": {
          "id": "75e6ee25-cf9e-4e3d-8dc9-39baf6e24006",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9c9f77d5-5582-43fc-9d20-d68da41b5a8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e6ee25-cf9e-4e3d-8dc9-39baf6e24006",
        "cursor": {
          "ref": "6f1bfaa7-6d71-40ab-b03c-3d90a1e357c9",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "366586e9-a195-4637-a59b-cd6918f9dca3"
        },
        "item": {
          "id": "75e6ee25-cf9e-4e3d-8dc9-39baf6e24006",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9c9f77d5-5582-43fc-9d20-d68da41b5a8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670bba6a-afa2-4d2a-84f2-c8e0de8abbdb",
        "cursor": {
          "ref": "eaaa58be-1c28-4fff-9abe-c9df46d77694",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "961f7632-6f74-4987-988d-84aad5811b47"
        },
        "item": {
          "id": "670bba6a-afa2-4d2a-84f2-c8e0de8abbdb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "20f8aeb9-16c6-400d-9724-27105de31968",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670bba6a-afa2-4d2a-84f2-c8e0de8abbdb",
        "cursor": {
          "ref": "eaaa58be-1c28-4fff-9abe-c9df46d77694",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "961f7632-6f74-4987-988d-84aad5811b47"
        },
        "item": {
          "id": "670bba6a-afa2-4d2a-84f2-c8e0de8abbdb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "20f8aeb9-16c6-400d-9724-27105de31968",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbceb672-f24a-47c3-bd9e-8e213763be35",
        "cursor": {
          "ref": "a8903777-171a-40e6-bb52-7ccf31e34352",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bf4a6516-01fd-413f-b8d8-8c6842c864fd"
        },
        "item": {
          "id": "dbceb672-f24a-47c3-bd9e-8e213763be35",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d63430be-547e-4eec-a467-919160b61f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'",
              "stack": "AssertionError: expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected undefined to equal 'did:example:123'",
              "stack": "AssertionError: expected undefined to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "dbceb672-f24a-47c3-bd9e-8e213763be35",
        "cursor": {
          "ref": "a8903777-171a-40e6-bb52-7ccf31e34352",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bf4a6516-01fd-413f-b8d8-8c6842c864fd"
        },
        "item": {
          "id": "dbceb672-f24a-47c3-bd9e-8e213763be35",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d63430be-547e-4eec-a467-919160b61f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'",
              "stack": "AssertionError: expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected undefined to equal 'did:example:123'",
              "stack": "AssertionError: expected undefined to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "69c52bea-d0d1-499a-99e0-5bdb4479f313",
        "cursor": {
          "ref": "a5909fd1-50a9-4429-91ae-af90cbe67aa2",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "41f2133b-3dbb-40b3-a0a5-97967a565d97"
        },
        "item": {
          "id": "69c52bea-d0d1-499a-99e0-5bdb4479f313",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "edebaafb-4b47-4909-9601-1a2e10e6be6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "69c52bea-d0d1-499a-99e0-5bdb4479f313",
        "cursor": {
          "ref": "a5909fd1-50a9-4429-91ae-af90cbe67aa2",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "41f2133b-3dbb-40b3-a0a5-97967a565d97"
        },
        "item": {
          "id": "69c52bea-d0d1-499a-99e0-5bdb4479f313",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "edebaafb-4b47-4909-9601-1a2e10e6be6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "bb68cb3c-0d1b-4465-8674-1768de311c40",
        "cursor": {
          "ref": "99694870-25c9-4626-9495-2319415f9823",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3aedf753-007e-487f-b946-123ad69a047e"
        },
        "item": {
          "id": "bb68cb3c-0d1b-4465-8674-1768de311c40",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e8026559-1620-4ad1-9c18-db0fcb788628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "bb68cb3c-0d1b-4465-8674-1768de311c40",
        "cursor": {
          "ref": "99694870-25c9-4626-9495-2319415f9823",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3aedf753-007e-487f-b946-123ad69a047e"
        },
        "item": {
          "id": "bb68cb3c-0d1b-4465-8674-1768de311c40",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e8026559-1620-4ad1-9c18-db0fcb788628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "736dab8c-8044-4865-b949-bb97aa11fd20",
        "cursor": {
          "ref": "a8c919eb-e617-449d-b78c-4a6dfa4886ec",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "83df330e-fd2c-4f5e-ae49-d15ad83aae36"
        },
        "item": {
          "id": "736dab8c-8044-4865-b949-bb97aa11fd20",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "baa0d933-9e11-4ced-bda7-6d4c102ce6f2",
          "status": "Created",
          "code": 201,
          "responseTime": 928,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "736dab8c-8044-4865-b949-bb97aa11fd20",
        "cursor": {
          "ref": "a8c919eb-e617-449d-b78c-4a6dfa4886ec",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "83df330e-fd2c-4f5e-ae49-d15ad83aae36"
        },
        "item": {
          "id": "736dab8c-8044-4865-b949-bb97aa11fd20",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "baa0d933-9e11-4ced-bda7-6d4c102ce6f2",
          "status": "Created",
          "code": 201,
          "responseTime": 928,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "11174756-ad7c-4405-9117-e0f0fc1acd02",
        "cursor": {
          "ref": "51021c06-fe38-48a9-9a6f-c95366d1b2b1",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cb978edc-33f9-43ae-be4a-9c0a46098d63"
        },
        "item": {
          "id": "11174756-ad7c-4405-9117-e0f0fc1acd02",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a1758c2b-82d4-4cd2-a788-370ec36a076c",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "11174756-ad7c-4405-9117-e0f0fc1acd02",
        "cursor": {
          "ref": "51021c06-fe38-48a9-9a6f-c95366d1b2b1",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cb978edc-33f9-43ae-be4a-9c0a46098d63"
        },
        "item": {
          "id": "11174756-ad7c-4405-9117-e0f0fc1acd02",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a1758c2b-82d4-4cd2-a788-370ec36a076c",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba13c84a-512b-401c-8842-c4c46ac92099",
        "cursor": {
          "ref": "023df1a7-64f2-4c65-b8c8-280ab32cf970",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "78b44fac-6ca5-4dba-bb20-6f7a4afb2405"
        },
        "item": {
          "id": "ba13c84a-512b-401c-8842-c4c46ac92099",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b83362a8-b62b-45c6-a2b9-005c56c8906c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ba13c84a-512b-401c-8842-c4c46ac92099",
        "cursor": {
          "ref": "023df1a7-64f2-4c65-b8c8-280ab32cf970",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "78b44fac-6ca5-4dba-bb20-6f7a4afb2405"
        },
        "item": {
          "id": "ba13c84a-512b-401c-8842-c4c46ac92099",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b83362a8-b62b-45c6-a2b9-005c56c8906c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "77e46138-7a6f-4608-a392-5540d848ce47",
        "cursor": {
          "ref": "7655638d-896c-49ac-a15a-40e7a586e24b",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "95940397-a7ad-4200-9f2f-9244ad254f0c"
        },
        "item": {
          "id": "77e46138-7a6f-4608-a392-5540d848ce47",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5c7ba896-aa9a-4b14-8a93-c7317ec86f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "77e46138-7a6f-4608-a392-5540d848ce47",
        "cursor": {
          "ref": "7655638d-896c-49ac-a15a-40e7a586e24b",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "95940397-a7ad-4200-9f2f-9244ad254f0c"
        },
        "item": {
          "id": "77e46138-7a6f-4608-a392-5540d848ce47",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5c7ba896-aa9a-4b14-8a93-c7317ec86f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4d0113cc-3084-4716-868b-8c38c853bc7c",
        "cursor": {
          "ref": "a0fd52ad-dbd8-4ba4-a22b-87186e48a78b",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "134f0cac-1aa5-47b9-a298-f10df359f969"
        },
        "item": {
          "id": "4d0113cc-3084-4716-868b-8c38c853bc7c",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "583963e4-4f86-4974-8550-d22905c5a820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4d0113cc-3084-4716-868b-8c38c853bc7c",
        "cursor": {
          "ref": "a0fd52ad-dbd8-4ba4-a22b-87186e48a78b",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "134f0cac-1aa5-47b9-a298-f10df359f969"
        },
        "item": {
          "id": "4d0113cc-3084-4716-868b-8c38c853bc7c",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "583963e4-4f86-4974-8550-d22905c5a820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8fbea994-124a-4dbc-8142-c7e8627947aa",
        "cursor": {
          "ref": "2c579b8f-92aa-4ec3-888c-88a5a30168d0",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4ced45f2-0183-4f7b-bf98-452f60354237"
        },
        "item": {
          "id": "8fbea994-124a-4dbc-8142-c7e8627947aa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cc96678d-5fc7-4b87-8fe8-484f7f415eb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fbea994-124a-4dbc-8142-c7e8627947aa",
        "cursor": {
          "ref": "2c579b8f-92aa-4ec3-888c-88a5a30168d0",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4ced45f2-0183-4f7b-bf98-452f60354237"
        },
        "item": {
          "id": "8fbea994-124a-4dbc-8142-c7e8627947aa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cc96678d-5fc7-4b87-8fe8-484f7f415eb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a396bb1c-1e57-4919-a739-61822b096877",
        "cursor": {
          "ref": "48262c2c-a144-4161-bc4c-e3bbb5fa4139",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b90bb23f-7cff-4d21-87c7-c5fb2192c98c"
        },
        "item": {
          "id": "a396bb1c-1e57-4919-a739-61822b096877",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d0682e25-06e0-4e85-bfa9-3cb0f0de2023",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00154316-a09a-4068-9380-3a0fdeb0cf8e",
        "cursor": {
          "ref": "bf91ce0f-e53e-48e9-ae7d-7b59ed34805e",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "091138e5-3eae-4d35-aa5b-67aa28fa87a2"
        },
        "item": {
          "id": "00154316-a09a-4068-9380-3a0fdeb0cf8e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3606ca08-96d0-4734-acbf-34ce084d643e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00154316-a09a-4068-9380-3a0fdeb0cf8e",
        "cursor": {
          "ref": "bf91ce0f-e53e-48e9-ae7d-7b59ed34805e",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "091138e5-3eae-4d35-aa5b-67aa28fa87a2"
        },
        "item": {
          "id": "00154316-a09a-4068-9380-3a0fdeb0cf8e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3606ca08-96d0-4734-acbf-34ce084d643e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c533887f-96c9-4140-a56e-11debce4f04b",
        "cursor": {
          "ref": "d66a89a0-c9b5-4a11-9373-85d706cd6550",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "14303d10-c026-436e-b943-26cfc5f0e560"
        },
        "item": {
          "id": "c533887f-96c9-4140-a56e-11debce4f04b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "9b09e4d0-7533-4dc2-9650-0931776252fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4637e177-c064-47b8-9866-a9320d08d033",
        "cursor": {
          "ref": "5e4d71f6-cb5d-4eaa-9914-0adf70817a7d",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9076faa1-39f2-4a2b-bc48-8a55349a1548"
        },
        "item": {
          "id": "4637e177-c064-47b8-9866-a9320d08d033",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0ea1000e-9fe3-41e8-843f-4cbb6d05747d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4637e177-c064-47b8-9866-a9320d08d033",
        "cursor": {
          "ref": "5e4d71f6-cb5d-4eaa-9914-0adf70817a7d",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9076faa1-39f2-4a2b-bc48-8a55349a1548"
        },
        "item": {
          "id": "4637e177-c064-47b8-9866-a9320d08d033",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0ea1000e-9fe3-41e8-843f-4cbb6d05747d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b995970-0281-46c8-bdf4-55e67854c510",
        "cursor": {
          "ref": "09ed8282-71a3-462c-bf48-51f7ee53311b",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7f0cdac2-d1d6-4919-abc4-a503399e11ef"
        },
        "item": {
          "id": "3b995970-0281-46c8-bdf4-55e67854c510",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2b9bbe6d-dedf-4204-9c54-6340aaaee36b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502179fe-e36d-4833-93e1-2c67868ba8ac",
        "cursor": {
          "ref": "8bd91bf1-40f7-4fb4-a68a-babf38903b31",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e450acfc-3b09-4e28-adff-356ce9519c1e"
        },
        "item": {
          "id": "502179fe-e36d-4833-93e1-2c67868ba8ac",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "29718ddd-62eb-41b4-8f15-c9d862f89789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "502179fe-e36d-4833-93e1-2c67868ba8ac",
        "cursor": {
          "ref": "8bd91bf1-40f7-4fb4-a68a-babf38903b31",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e450acfc-3b09-4e28-adff-356ce9519c1e"
        },
        "item": {
          "id": "502179fe-e36d-4833-93e1-2c67868ba8ac",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "29718ddd-62eb-41b4-8f15-c9d862f89789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "10fe43ff-0e90-476b-a8a8-e9344bd53718",
        "cursor": {
          "ref": "325dcf5b-245c-4f63-86b6-bdc39828951a",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c661c502-9280-4ecf-8331-418e7c4fe7b2"
        },
        "item": {
          "id": "10fe43ff-0e90-476b-a8a8-e9344bd53718",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "663ea4d8-44e2-488d-9721-0844d82fd041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "61ebd10f-eeda-455c-ad4c-17139ca90a69",
        "cursor": {
          "ref": "cf54d123-dd48-4fba-aded-6376591d4b7a",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "52ade8c8-cf4a-499e-8aad-59eaa19ed363"
        },
        "item": {
          "id": "61ebd10f-eeda-455c-ad4c-17139ca90a69",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e5eb1f1d-9865-4968-9c0b-d458c6c6fc87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ebd10f-eeda-455c-ad4c-17139ca90a69",
        "cursor": {
          "ref": "cf54d123-dd48-4fba-aded-6376591d4b7a",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "52ade8c8-cf4a-499e-8aad-59eaa19ed363"
        },
        "item": {
          "id": "61ebd10f-eeda-455c-ad4c-17139ca90a69",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e5eb1f1d-9865-4968-9c0b-d458c6c6fc87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7e4d8d-7ad6-46f8-8ffc-e5fad13e18f5",
        "cursor": {
          "ref": "99e5f07e-b06e-467d-b029-f44bb3a30497",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b998a38b-b179-4742-8819-cf3cd516d782"
        },
        "item": {
          "id": "ce7e4d8d-7ad6-46f8-8ffc-e5fad13e18f5",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "95bc9ddc-27bf-4a3d-b4e0-9bf5dcafc139",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}