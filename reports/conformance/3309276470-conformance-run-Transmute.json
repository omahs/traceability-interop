{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "444b2bf8-5a34-4ed9-b419-cd7d4dd664cc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e268cba3-6244-45ae-9408-1fba0d0a23e8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a0c2a83d-5a15-4511-83c2-0c2a2d850b3e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8fbe5742-6ad6-4295-bfe9-768c096ccefb"
                }
              }
            ]
          },
          {
            "id": "36a6eb6c-2994-4978-bcf7-51cc315e1089",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6fbbd406-543a-401f-af04-cda16a4c8ff1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2ab71e24-a37f-490d-ad8f-e8a322daa610"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3df1af20-60e7-42a8-b186-dc4a3bbf9372",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b9d2bdbe-dd6a-409f-9d74-e74f65b6a7f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d7e6369f-a9f7-4373-b0ec-0f7bb106c150",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c967980f-68ec-4c42-8eb3-dc0dfd26b2f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e131cc32-7520-4197-a608-3fb4c6a75392"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "beee8b7f-e930-4245-84c7-ae26d38b651c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bfa9377d-dadb-455d-95b9-4b201d92c5b5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fe06f2af-2ed6-43d5-8ef5-aca6e6285f86",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7135dab7-fc48-4603-92e3-2e3c93cab2a8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf6b7bcc-8a2a-41dc-ba14-985019a1489a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5cf71db8-dbcd-49ed-a204-21b3d11b3625"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b67a2eb-367a-4a24-85fd-2a9b6cb835f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2bf16aa-712a-45a4-b1d2-2bdb933d461e"
            }
          }
        ]
      },
      {
        "id": "b10e9809-5a35-4a0c-993e-557137046551",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e1143360-b6f6-4856-a9dd-33b12b1385aa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ccabed48-1475-4062-9b70-a8572247b488",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d34fbf7c-d2a3-41a7-8dff-ba8d83043245",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92708fc-264c-4a8b-a8fd-a0da26f01012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34949c66-aeb8-4aca-9187-7b91545e8825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ea1fe8-2f36-43fd-881f-ece2e2b53866",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700a310f-aa80-40a0-a8b7-31a66f22a6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "030a7ea8-2ba0-4f60-8f82-c7b0823010e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20e10c6-6a69-46d5-b467-04de7b675b00",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21d5fab-b26a-46e7-a3b9-7078ba483a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9d7a285-1ca9-45cb-95f1-c27a67f23800"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a3a3aafd-3f41-4919-b2a1-f926edbdd1f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53604cfe-fe87-42e0-9f12-32765f20e065",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99dd71da-a2f3-4b1a-b94e-50d7399bab70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f31fad5-9273-46e2-8cb7-7f6f482a42cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509dc1b2-a3cc-4b43-9968-782eadf22159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4e8996-4dc2-4009-a456-aca787da73a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fbea33-e102-4ba3-8319-572d3f23a3c2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2998c2cf-59cd-4ca7-9251-df45adfb1dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "671cdd9b-af71-41b1-8f5d-a90328b9316b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477f8571-be76-4dc7-ab18-0f3e6b7a0003",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "160db0df-03eb-4505-ac64-9e4f9d5aae9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b2dabf73-2331-4659-b37e-77477221fa00",
            "name": "Positive Testing",
            "item": [
              {
                "id": "51f8540b-a14c-4bc2-8bc7-8c27e6590b1e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bda6666-807c-4108-8bc8-64b51ad2c0f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5ded8806-e247-4aff-ad3e-17827b2376e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "abfd8772-2667-41cd-a9f9-fdf2d3592601",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b007e004-cefb-4d9e-8e8e-ccd0ab082c2a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73a1109e-c0fa-4d28-b007-42a3a324ebee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "315a62ba-ce31-4ea7-ae69-cfa6313859a4"
            }
          }
        ]
      },
      {
        "id": "3695f42e-0124-4798-bd87-3816d5a9b156",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e87ddfcf-ac21-44ea-8b13-23e55f6f0fca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca17c9ca-20bc-4814-b8f1-09fee326d808",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "52de5e1b-b69b-46e4-a1b1-129081ee1889",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8dd7eb0-0d22-4d78-b9ed-581bd8f20567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834ba83f-3a0a-4191-8a8c-b2bc7c3e87bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73af0f4f-e792-489a-a16d-a4e462a063b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4828a863-9688-4ae3-92d4-e8d06072f1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ede31ba-e5cb-4bc9-b700-56871f1a9232",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90aa154-0650-4133-b5aa-9182a6497128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d091342-cc1c-452d-81ab-238d11139e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbae0b3-0d83-4666-9ca4-0736385e1857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fd6ed5b-e1bc-4159-ad9d-b96ba52b3bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67aacec7-32e3-4194-9b60-57e809d96629",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08ec611-2702-4441-844c-4c9b209cb2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0437d8cd-ee51-4b47-8ddb-a166663e21bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f39a93-cfcc-4100-87b8-76c8f575d046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4540d77-0dc7-4ed9-9ff3-89bcf9ae08da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf1d8b5-3a18-4c13-be45-cd6439d34cb6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5965e4-bc2a-4909-826a-948f8ffffb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d352e6-7ea9-40f3-8992-8b80f3ddb8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c39ba05-bbcd-4ba9-9d7a-cdad0390f54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "905e6df2-8eed-4c75-b884-ee464dd3306a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8680b5ed-a8bc-4e90-8f11-da8f09b99062",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c087006-0459-4df1-b7f9-3c9c232c574e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7f33fa-94b7-4074-8024-f6a5b081974f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9601fbf-9d2e-48bf-afb8-5028ea32c31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3080471-5175-4b41-af64-65fe928fdadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f894114-ee20-4d29-8ae0-cce8713c99a5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37a2cf9-367f-4ddb-a290-1cc3e75aa4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb46d758-fe86-4d5b-985b-553af6cc1ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde4593a-a07d-41e3-9f51-7d268933da0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "025b20ab-30f4-4fef-bbcf-c616f8239657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f98503c-d4c3-481b-94b4-87506020fbe7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ef7844-a4a1-43a6-a928-fb2ea7a8cc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd25863d-f01d-452b-8d55-6b56a8cfef86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40431921-6f01-4483-be5a-aa6a6e9a627b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bb097aa-cc82-4af4-800f-1e172871d21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd4bcc0-f83b-40a2-a784-61c1ec7f3f93",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89f0498-3003-470c-a257-07e6832f4e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8231cac3-ccb0-4851-a14f-fed8d7e50446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d386e2-3cd2-43b9-836d-b5d09cfb3e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e6eaae8-0790-4ef9-87d4-c5e1fbbc0355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c84507-fe62-4e58-b272-26f99e99b032",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eaec64e-f9d5-4e8f-aed4-29043d3f50aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b696afe9-1877-422c-92a1-31b8d15577ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ea2af4-e061-4fc3-b088-6bc7789446db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad5d8dad-854b-4849-9c4e-10f3ee3eff0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a475cb7a-4d3d-40eb-8407-f2f449a6a18d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4a054b-614b-45dd-b861-de8308c346c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482e6176-8d93-42cd-a06e-c985a8f0365c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db2e368-7afb-4826-830f-4ce6a438acfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5449e309-54e0-430d-9bf5-7005c48f0602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf457eec-606c-435a-82f2-e2ca0b932519",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef29f83-0f59-47b1-ad63-2608b66a97c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f478714-01c9-4998-8830-d17419b295ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20821fc-0d4b-4364-b30b-1a292553909c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "504dbc60-48f5-450f-8bed-7f6fe789718a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d408d9c-301c-476d-9380-c5c59a8e489e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c522d2e-2862-4650-bd5f-1ef663502431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3407b43-1ea6-4823-acc3-dae806a68dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb9b98d-b9c6-46ae-9e0a-3c7438bcec3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e54dcbfa-393a-4e31-b835-60f99519a9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028a225f-d019-4940-b36f-0cbce27019a8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ce14cf-a523-4b00-9331-394af29dcf97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4786e61a-3054-4b58-be99-3b770b17a123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69a16bb-2427-415e-9c09-54f878dbaf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "673309d8-0bf5-48b0-b13d-d810da45d304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e902cf1b-c502-4a55-9acd-dceb125e81b8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b121dbee-e569-4962-95ec-9bc227204060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b7486f-1337-4b0f-88de-0b923af6cff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d486560-e439-42f0-a7af-bffad262ce02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a9edc0e-da4e-4fce-a761-e8bd0cf461b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57cac4b-74a1-4811-b422-878cd825d52f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb890b2-4dc5-4584-84cb-f7d7454ec46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21aecad0-5be2-46d6-a019-7055c6997768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ce4e1c-f407-4322-8ade-d2936e31c4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05309ab7-5b96-4290-9d32-ea6a9821bb5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18beaed3-7312-49d4-9410-16c1597394fc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69a6b9f-c496-4028-90a4-0f4a6d660cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c2d7d9-73b5-4f08-bb77-3b7def77fdfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e47cd2-e6a4-437d-9b72-10ff6018f016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4815d98a-6f37-4e34-9258-fc423f269e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12f2cd5-29b5-454c-9880-f0192c8f4af4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5e65de-d64d-4536-abbb-6f0faaf8d760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b7f55a-edf5-4c39-b86e-3f33a3a8affa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668cb654-ef51-4e74-83bd-b53fa35627e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c37d21c0-70cd-442c-8eaa-26af579e660d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddba2d0c-bb62-4082-b8bc-716200dbc3bf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bae79c3-4f7c-4ec5-b064-cb054364b35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ba9027-34d9-40cf-8eeb-06c9e8feba40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b28e03-93ce-4b1c-8da6-a92b5e0d9867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cfd3d8-deb5-4321-a3a4-ec7e73fd5664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31874237-be15-4248-ba74-c93d7b3866c1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b644610b-25c8-43bb-a47d-95e17ceb6fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26102000-04c2-4bc0-a04f-2669340ff8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5be067-b764-404c-a9a3-29f2da8b98de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f45fe122-d25a-40ff-9a75-9cfe5fe56ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b592bc64-25e7-4dd6-b1fc-1fdfc583d71e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef7be05-10cf-4bd0-a5bc-c3c9f70f438e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b92f34-47f6-4718-8ed2-fafcd2ef7e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bee7b7-cc2b-4285-81b5-367d514af90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f71f62-78e1-4923-887b-2c4158ff044b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b58b4e-34e6-41a6-aa41-1f3fb0916f4a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29c0657-7542-4cfc-9031-24d09f2bb669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd0dda2-ebda-4219-88ed-b66c53ac0a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aefd3a1-4d9d-4f9f-86c8-7f1855d01851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e99b4a-ac29-483c-9f49-08e002b88492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c405b0d-afa8-436f-92aa-69177c67d3c9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b0797c-1ec2-4501-a435-99726dfdf15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4acc828c-ef4b-4175-b135-8589a65c8fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90907cd-a62c-4265-90f4-5c4a68d11c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "350e6912-ff1a-4bb2-91d9-dd3e6fd93baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9dc7c6-f38f-4cb7-931e-0d2d6000efca",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b5dcdb-86b5-42f0-a494-d2e0eeab720f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31abce3a-05aa-45c6-aece-e5c5d5f90eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e1e6b2-a25d-423c-9c30-931ca9f39a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b06e89bc-6356-48e8-ba2e-ebf009c51f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5189761-ca04-4ec3-b9a5-026f72216240",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fddd40-7dea-4ada-9cd4-71f7611dc508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df22d9e-741b-4779-bb96-fc384904c881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0563250e-541f-46b9-90ad-da3865d415b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d63fc2-e768-47cf-8205-0f95d9b206f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fa76f9-83fd-400b-a0d3-9f46021d9d37",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1640d497-d8c1-4bb6-8e19-2dd138df53dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36bd1f31-a71a-4552-a638-af46731d704f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d5ecb2-6d92-464f-945b-6af5c40646d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "696a59c7-5850-40e0-bd58-451ca8862358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aab9b4c-991a-43a8-9811-071eee3b783a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a553b79-8f12-4600-bf3d-504820a26879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd775e8b-b5c8-4a1d-84f6-c89bd511e12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb7c659-0eeb-4cca-b401-f8ab26a12bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "689caae3-4fdb-42ee-baa9-bc0a8abc5bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe3fad8-0af7-4170-a183-37403b9fd4b9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0a719c-9890-4d76-909c-b1257b45086f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a53e305-a169-48d2-9e30-d988b0656254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcfd952-317f-4f76-9bfb-3ce5f57f05ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d98a5537-1f44-4648-9b0d-8c01c36dd9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a05376-d82e-4908-b617-251f07b2a8eb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be19d45-dcd8-479d-807f-30aff13b6235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b8c516-70ce-4085-9f7b-a28cc7af5741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80aa6b00-5f05-4a9f-92e5-e5d7599a03b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd19b3da-880c-42d7-971d-c1c9cef25360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0b4855-9cb5-46f3-b8b9-d72c97aad48b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c5576e-c6be-4971-9dad-15dafa33a600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a22ffdc-e9a6-4f27-a48b-9693ed24e878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09fc1ad-d411-4346-a869-71ba9d53a1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "488c6787-696b-48e4-a1ae-2b853e1fe686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc03e66a-7cea-4f61-a50c-688d6ec83098",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf81401d-7c4c-4992-b4d2-2d37b861d304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152452df-bbc5-4608-bf86-5de0233fc9b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c698ec0-6252-49ed-9a79-e8216b18febf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d478a9-d5bd-457c-a973-e39f84a326f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cc0ff0-1891-4ce4-b5ea-33616483ad53",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af4fd22-f944-4689-b74f-5380b520ddfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e2b0c7-6bad-4097-96ec-ab5e9583208b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed684f54-9215-4f14-a483-80f0408effb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf6c852-0dda-4b6b-a22c-b5be2e96c15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8341867e-6fda-4594-bbb8-c736abe14ed2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfa3cf9-d7c0-429e-b9d2-d7ce06d45cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3c29a8-06f3-432e-a0c7-5960a7fec4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e691fbd6-30f6-4314-91ae-c5966097d5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "704cc157-ccd1-4308-9d4e-887a605ef457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f64b4a-f45c-45ef-a65e-98b27aadfce3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdcb413-3d36-4452-b69a-056aad07f47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c608ac0-ec71-4892-aa41-61f76e4cb6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30144b47-7702-4e41-ac4b-bcdee82603c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b8e01d-fe9e-4b4c-8454-6f37c6759303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460596ce-ff85-446d-8dcc-5925ed57ae59",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79485348-1a88-46f3-9091-54717752d9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44937ee3-2086-4469-a2d6-a01e03b62227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60df328a-1058-4c51-a0a7-8aef0d4a4cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f8c356-7f68-4e1e-b598-809d0943c4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6bcf83-f521-47b8-b671-0d5ad6595caa",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c787f875-33dc-47b4-9e96-d9291ee5f41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4eea5c-848c-4004-b4c5-f30bfec7c2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26635171-b7cf-4469-bda1-9830068df097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4aabef59-e081-4bad-96f9-2c29c35a8142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b41cf1-e821-4bf4-aed5-48527505b6d4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3871e76d-839f-4b35-b855-95d9416689ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33d4d268-29de-43e6-be97-12134e1caa2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56650ce3-771f-4726-a9ba-172207ce4532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "271b27e1-a024-4e18-a659-1567fe9f0793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6405b6c3-d465-40d8-aaa8-364bc44acdb5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c642168-c2e0-48ab-980a-ff27be1ad6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b73a648e-9fed-4e7d-a65a-861b810b64ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d3bf97-7191-4cc1-9d50-a9aa5df40818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "25354f2b-e3be-4268-912e-b6bb35f7e8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4064af47-3893-46e2-be87-94e2c10fea45",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57dc480-24be-4623-ba5e-7c840c69ebe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "917b55c7-f05e-4cfd-a531-9e7ec080dd3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e991fc7-8d26-4fd9-a7ad-37c5180894cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa69eb65-5cc2-4f14-9437-111d85d76095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311be8ad-7352-4a69-93b9-363bcfd90500",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f986b982-d03e-46ed-bc19-8d0c7e01b94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b06e30-c9d0-4d7d-813c-86cdb04d86a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cee7740-2228-41f5-9472-bdcf70c42e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9669ec70-080e-46be-b1d8-c234b599e5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557c7610-adbd-46b1-9b1e-d8eff5c43fd4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed29445-900a-4982-a392-5e7dd3cbabee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d7e98f6-c59f-48a6-9cb9-049dca0ea86f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29c2a84-01b3-4d37-8fc5-47b2cb67c819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1db4c3de-1a8b-4b68-9582-8b91efee705b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7b4cb7-d826-40d1-9915-295ec4e10b63",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe32cb38-489d-4374-958e-d9d6806b1731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141a0cc4-666b-4ade-bb95-cdbbea284625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a612fd1d-8845-44fc-bb42-2b64d851ec1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9efc786-4e02-49b4-8978-11dca38f6384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02aafe89-a32c-43ae-b6e8-8fb3cb921699",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc77b552-3e3e-4103-b785-c3d0e206e57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdbedae2-268c-43b0-9830-3614fbd22ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ef3e00-ca8c-4b1d-bddc-3ea952b8d736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee7091d-bab5-44b1-9cc5-c44e793cc5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83db334e-9c09-4f38-ba88-8b85694a4571",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11779ca6-157b-4e6c-88c2-24dc6452ba51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c653fbbd-1b1e-4e41-8933-1d986ec978c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01fa924-a6e6-40d5-8dfe-93fd4600a8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c870804-d490-4244-8506-43719ad83a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf1a4d5-a63a-4080-8d71-80e1a5876a1f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "701a8e46-63c5-4100-afbd-c053ad905187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c72d5af-494d-42e5-8a48-8832a1078b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdb1412-22a0-4395-a3e6-24ed5625ea0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed304cf-eb5d-4cfc-95ef-04c8ee8ab4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b6a4e4-e28e-4ad0-80e9-3e79e111fbd4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48717d18-516b-475e-877a-23fbff6217cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "392a433c-a881-4000-81a5-6a8da9d4806e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ddda88-38b5-4495-af9b-695bd945b4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f072f575-3494-4406-9d0b-84f85a9f6ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a959b5bb-6b9f-4af1-bfeb-2867ad7cb19b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b0bb14-0549-4989-81a0-b058fad4e248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110f89ad-80e9-4040-bff0-292ec9550646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5266e1-df28-4607-b376-d545187f97c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81ef0cd7-7da5-4df7-a29c-3fc72726e53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4585fc-04bc-4dfe-9fdc-c8835f896352",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8bbf87-2114-4edd-9693-0c1e064f51e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f53c5f-7d77-4e56-b63f-dd76d448a1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f42899-3a75-4a78-8163-e1ccf08a1dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81f333e5-5d8d-43f1-84ff-b327ddfcffe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abc77e4-a400-4507-9a7f-b4af3ab584ee",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a191d5d-de73-4121-9e2a-2c04437f3c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c9a463-0d8f-4f40-a984-ccdd61b359df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5fcad3-34e3-496e-ae66-64344331fbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05fbc000-c474-4401-8cb6-784fdefe576e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ba7ed8-12a0-4cbc-8d91-1c13e83f1df7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b273a933-3cf9-41ca-bfc5-cfdbf9712fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beaf1ca9-97a3-44a2-bc91-b4173a15db47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1465c11b-faed-47d7-a5c3-247aee018fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1271fd3-88f6-4f5b-9ea4-27cd9ab0f246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c609ba1c-e60c-4b79-8881-dca42a043020",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "946d8054-b4da-45a7-929a-fdd55534a3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71422ef3-7140-40a6-a9ee-9d8df0f91729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43216c52-c905-40f6-bb07-96cea8a13825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04019d8a-669a-49b2-8682-a7f0c1893dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa96357-1ad9-4a54-9bba-c296139ad651",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de32a72-85af-46d2-98ec-5dec07b32bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbded52-0cbd-4aad-8c57-6f2b572ea2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f44e28-c37d-4135-bba4-afb6210be1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e12368d2-7b34-4485-9708-f22111da75a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40f2c55-58d9-47ac-a93d-e852e4bc1dda",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e3f6fb-71e9-4a47-a5f4-2fcab6d46e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be06671-b7a0-4338-8b97-1ac90f99447f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778452a9-ecdb-4b1f-8db7-bc27370b2d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a712425-627d-4a43-aa71-a3945b420b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b2ec85-02f7-45ee-a586-20f47b2d8e24",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ffb84e2-ea33-4d09-91af-2da8cfbf1016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5b91f2-e307-4e9a-b2dd-bb149a65e597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18313e6-8904-4343-b0e0-47f51cb346bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc42433-c76b-436f-9cad-dada4ac28e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836b3e83-a1db-4a2d-8b37-38a1e95000d1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bfb280-765b-421b-9ba4-523c472bde31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcbb080-c053-4b01-b855-ddb997242808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf8a4c9-badc-4008-af2f-381ec7ca2875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b459f707-5545-4d62-ab36-55baa1d86040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc707b89-8f74-4ffd-b143-5f4453a2f16a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7e873b-c0cb-4180-86de-27bedc428fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea03b5d5-a63b-44c8-9033-b29b5d93e791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144a6c4b-d0d7-40c4-b170-6e51142901ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b68be8c-9bd8-4d22-9481-90bc35aea656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb29848-2d7a-4dcc-9718-76b2cc2be27f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afae709-87be-4675-a52a-55c76be970cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e737036-8305-4226-b35b-2241d0b0b941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27aa9165-40fc-49c5-af6c-b433e60936ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "107bbf55-1ae7-46d5-899b-7895dad985a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634674cf-2e25-42c2-9a7f-eab55c12af6d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfa35e9-cd2f-49ed-ab6b-397627919382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381d38e0-0cfb-4370-8736-61f27b6a0be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e4396f-9336-45d8-b3de-8bdac9ede3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "910ae965-d29b-4654-929a-2f8ada58fa63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d32a77-27c6-4162-a3f9-db7da8335c18",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dfd03d-dfbd-4a32-8396-0832ca925a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dba0fa0-3b15-4bd4-9230-27f69cb15800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ed4871-ca1d-4c2b-a313-8cbba29d46d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "705a2f11-e86d-4ae6-b014-3e46362717ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b4cd42-c649-4752-ab82-82e7c207b099",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f39e14e-6cff-4a8a-8ddf-e6d7acb8aef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdccd483-0dd5-46b2-9917-ec451a145892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1870469-197a-4fa0-ac0f-c2c66ee16c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b0d75a7-9715-4246-b73c-b07c80091ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9e7936-5750-417e-91e0-4df72283ec92",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e7fc6e-8a00-42df-a2bc-0c185d30258d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea724d4-cd79-426a-8f3f-0f1236668aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf4cc90-4130-490f-8642-9133a2320765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6acbd2a-f212-4636-afa1-3a68a8d9e723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd1fc9e-b853-47ee-97d2-f1dc41e7d3cb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0592f02-898f-45f0-a190-0b906ffa0468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9daffa-0c77-4f2e-b075-1fee3035686a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934e04c2-8bd7-4eda-82d8-ae4da8a52d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d8901ca-ea39-430e-b285-1bd4f33c00f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f43c90-9674-4abc-917d-b9af1c0553eb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb7f8b5-8b6c-4f69-9627-d3c4d93fd539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611d03b4-37ff-4964-a8fc-6d8d0c3f6c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e9b281-4304-4983-b411-276f4cc16087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "65a7e1e4-b1cf-44c2-b44f-c158ace686ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b076af-b41a-4cbb-94c5-527a8b7f391d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8ffae6-d83e-4887-a311-73abdce81aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a5812d-20a3-488a-a5c2-7164f9af0e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b66f9f-1b52-4752-91c6-822fd9262efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0442ce18-356a-4fd3-b739-455e2c355fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52eaac2-24a6-472f-ba97-4653b2370d87",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123b98b9-6ad7-401e-906f-fe5feff3f4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b813307e-ae5c-4696-b2c6-470bfb2f9775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63989b1-e393-4955-b811-88c44c59fca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c3653e8-aa93-4b85-bc70-e6053a4d7540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86448f5-8535-470d-ac9e-6eab63a59444",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db047f10-87ef-4620-8278-236f5ef864e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69593c0-4d9e-4555-8d11-fe68cb2b8d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f27b63c-7537-46a4-91e9-aee76a35eb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94f0b853-89c6-41fd-9383-0afb47fae251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5001aabc-e363-4a48-a430-43cae10d8423",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1846c2-822d-4a00-8cb6-197e48cd3dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ed59a2-9a98-4ce5-bf9a-44f4ff65bc3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d230905d-c513-4a6d-9eb2-cdb91ffbdd5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2135e4-d1b3-45c0-bc97-59e1a375a497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10115ddd-604d-4fca-b3a3-c168f3c64e32",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7963fb59-7554-49f0-9c5d-12de0d12d772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc963642-33d8-4d6b-9f2c-b0e02daddd0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46ea2b7-db70-45d6-b187-28a1d8364a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea6dba5-97bf-415f-a3b4-3c034dd9f454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674db4ad-2baf-493e-9c76-281e41e62973",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f21da11-143e-4991-88f2-c67ac273bd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc6c613-64cf-423f-90a7-76b2674d75ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ec9403-c7e5-45ab-92a0-da18417c8a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a006c7-29ef-46b2-b833-bedebfdb0f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c2a368-4ad3-462f-afc9-92bd07fb5330",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0ba46e-79aa-498c-94c6-b0af564be418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940d2444-33a6-45ed-83d2-070be2068ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eeab9ce-2be9-4636-b084-39cf523ed737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "554b95de-2c85-49ce-8b59-ed3815ad48b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53359db2-937f-409a-b1f4-691895c33ce1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd99a229-16f2-4985-959d-0466408d30d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b44fb9d-3db0-4e79-bd0c-b3c4be19505c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965bfa71-0302-4d0f-ab5f-423c1873a044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35c3b3de-2fe6-4c9f-8c33-1cd1d30ad7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da85e2f-ea31-4d06-bd28-bd724e4e37c5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537ec469-7c97-478c-bc7f-e18db2f1fb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85455ab4-126c-45e7-b024-2eb4853da780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72c8daa-9f6e-4233-8f15-9b58d24a66f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d66b4e46-669d-43fe-ae8c-76db72c6146c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7639f8-db1d-4035-9c9d-3bd515aaf491",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc1aae2-177e-4111-94ac-c65da6d37f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853d3b01-3402-4d1d-8336-9df1b36116c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e91493-9986-4e3a-82e8-699b6a122770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "738c6ae8-251b-4d08-9253-90016e5d10f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d998ad8-476c-4590-9ba2-8378f13ff503",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a47913-1a5f-4478-9f31-ea7b86b9115e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6952d3-dd9b-40e3-9bb6-16a22881bd31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f214d7a-a153-49a9-8211-2325b0edd01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "152b671c-d329-4f81-8fac-e8fb3f0e5609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6e11dc-db6c-4192-9af5-12ff71813ece",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85ef69c-5f81-478c-8d9a-2442f8ff12ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163ad0fb-c4cb-44bb-b89e-0c68ef929a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc086599-de4f-42d7-9e26-86edf0fd5254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa97b83-d4e7-4613-a3be-971d748392ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2580d27-3715-4303-9b17-628f19528d25",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d2ce5e-4771-49f7-9ec6-c284a601e474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11647cb-dc0e-4087-9764-92aaa88b8366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b37e0e-6e4b-4692-83c3-32e879852c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a038c051-b4b7-45a8-95f9-2ea803b17d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7753c982-f471-48d0-9ffb-9917e5d3ce4a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5eb7b46-ee20-40af-aa7e-005785dbd71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d96688-5243-4f5f-8b15-90f8d54d8251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1633fe-1f4f-4266-bb86-71f64ada48dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c66629-4165-4dc0-ad66-623e7aed6666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61c94f3-e051-4cfb-9f26-9de4ddf07ab9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43aaa8c-23ee-4a6f-a380-52f83a03f439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee5c0a6-dedd-43b3-bb7e-2a36340b9900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e781c15e-f188-4eb9-9f67-fce194607c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23542296-a04c-410a-bb92-5f5bb93986d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01354084-42d5-4372-b386-df68cfee5e93",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf7d25f-c680-45d4-bbc0-310069247a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5cc0930-50ff-4dfe-a0c9-df5686212184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4692b66a-c9ff-4b6c-8673-0feabcac9494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f814e886-3be5-4056-8bad-1f253b0a3825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc57b1fb-a2e8-47a9-a1ed-5fae9fbf6bb2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ecff62-f8c8-468b-bf32-aa5fe13f7c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91295c17-bff0-4e26-963c-3ee5fc8105ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8aba02-b65d-48e8-982c-ba4604de2171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1adaef9-c6d9-4f3a-ade6-cf7ec8aef2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd28abf9-56d9-4b4f-a744-fe85d884c2d4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e50a4d8-72e0-4e2e-8cdd-15882aaa7f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faed2083-c79e-49cf-9185-1905b6a9c703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3b175f-0efd-4085-b67c-3ef0983b4fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b420195c-e918-4157-9919-4da5770a583d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcaf70b2-758c-4553-9759-97eb710ec9fc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1f64a9-039c-4e54-97ee-3488e9d89918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211c7be7-3b24-4953-8fa9-f3ae6c236ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832179bc-0cb1-4bc9-ae81-ccf6911d733f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe50e8c5-4fcc-4785-9725-eccda4f8543e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4b9c26-6a55-4dcb-a631-1c6630d79813",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4beb38-8b9e-472a-8579-e81d8c994861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0c8941-1326-4273-a9eb-378681b51188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108fe271-81a7-40ca-a58f-c5b2b197dd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56f8e58d-7a4e-44e8-bf9b-c739e238dd13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02841c12-b120-4cfe-9857-9c8de95bd311",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffa64fc-2fca-4257-9f23-8bd2136d4df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f013757c-cf58-49ff-8a75-21d9fc9917a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7713e06-03b8-478a-b6f4-85c80619d04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "897ca9fa-54f1-4a90-b739-93ea041540c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b02ee1f-3d7f-4943-a1de-087d47f9c8cb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0abc61-cf43-4d66-a472-e6dc7966ae0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc64814-9fce-4489-a7f8-bbaa45e7b432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04dbf973-da3f-4cf1-93f8-6dbe9ea47f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3ff62a-2acb-4aeb-8953-6907e2372522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794c2fe5-41f8-4e9f-befe-427ebb7bd505",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f3a442-50f0-4d1b-9653-8fcef23e8809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54fbccff-07b0-447f-bc04-fbf8608ef710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bdaf0e-d545-44b7-8f4e-3aa93e5c267a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab3ed8d-f057-40cf-a21d-ae316060485e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e103ae-7342-4925-877e-52cc4ca6784a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6360d874-1078-474b-9886-ad86156e31c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba25af5-8ce7-4a2e-af00-dc6f001d1c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8041974b-332b-4cfb-89b5-b31e7816cb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "032349fa-e1b1-404a-8a51-518a7102fb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34274f4-8ed5-435d-a2d0-218b657e1723",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de2de25-ba54-415d-9ee5-51284948e0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434b6864-3f51-4318-8b5f-9d3962a0ffc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7301deca-af66-41ec-8875-68d37050dafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "32baf20d-bd25-43ce-8e31-b4f5d85c3bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eeb60b9-963a-4b99-a2d3-37ce609ca0ad",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c884f3-21c8-440b-990a-71a7f0f0d105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4630f3dc-a632-4886-abbb-d7dd43bc5238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0eca3e-bd46-4508-af1c-74d0574bcc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "37222b8b-04bf-4a38-adcf-91c9ce5970a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af33e27-b689-4133-95f1-4efa84756d11",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ef7042-6b53-4339-9fed-044c41f179c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d435c63d-643d-4e47-b538-1aa84d0dfa6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e639e1df-1e91-4e54-8da8-fe2666060df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0542b3a7-73e4-4d91-bfc9-dc69768349a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49d4cdf-014e-40ae-b505-e256debcee6f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7961a2ac-8f09-48d9-bb3a-67955483c537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb7d63c-1b71-4d05-9a8a-7fdcb71622cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93fd385d-df4b-445c-a704-9b911a9fc3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2efba4c-2d6e-4f0d-be5b-d5fd6489ed34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058ef1c1-4005-437d-8eed-1911cb3d75f9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7799f49-503c-4033-8b97-cb3e064b19de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f69b59-3b90-4d2b-9f60-e9fbef17d6ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e150728-13d9-45dd-ba73-f64d8a59ccd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "793ebdf8-e288-408e-b027-4a26afe749ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410cbe66-e7d0-477f-8ec9-e10ff950bcf5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27adf25e-01dd-4a5e-b612-4d341e1bc652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "efdd971e-ca63-4be1-8ee2-f57e82d86334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db179b8-6230-4f6e-b563-e2ed042cac5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "36db1a4e-9353-4d80-b94c-ebf6687dfa25"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5ac53089-721a-4890-bb68-e1614a634e46",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2673ecb1-e482-4065-87cd-f114a97f9754",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0feab212-0c2f-4802-b2ac-689257c05da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21a185dd-6515-4eb7-9867-560892183c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eef92a8-6f65-4867-94e8-a0f85d92699a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "297e9f1f-69b3-4ac9-8d52-9568507acc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226869b7-fcb5-4a85-b1f4-28fc156e5e5c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b161d9d3-de86-4261-a53a-e63897d2ccbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8815486c-2c12-4aec-8c2a-84617aa8f0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20c42ed-964c-444a-80d7-fbb5fbb57565",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "82219944-8081-4b1b-9432-6586f9e7e732"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14ead2aa-a297-450c-9ecd-a844067beaee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddb72cc0-0537-4bf2-9eba-ba52352cefab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a88a7f4-f869-4bb0-951e-4f2d7680fecc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d320de1-fcbd-4130-8b4f-a07b526e8ee5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d750175-ae60-4f14-ba8e-38465dbfa493",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "309a4f66-0e4d-4eec-9404-3dbdf5ad1783"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "992633aa-bc6c-4ffc-be77-5b485208f7d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a7e20fb-fb08-4144-99cf-4147de578ecc"
                }
              }
            ]
          },
          {
            "id": "1b44bd0d-05a6-48be-81c1-f208ba6efcc8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d263916b-9e53-48ca-9a29-586c751065b0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22fd5054-ed23-4eed-8134-8fb7b562ed76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6043a44-d73b-4a3c-8003-8f6258ef3343"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "710a6f6e-56f7-4460-abe2-bdd0120dd399",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11b312f6-c5a6-44d5-8c19-f1ec8f76d490"
                    }
                  }
                ]
              },
              {
                "id": "675363ce-cd03-42b7-9f7f-ff5caaa78ca3",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efed570d-1c7c-47ae-97fa-03232338b94e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63cbeb02-0c01-4b38-9302-c3d913d97b02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8571a4b-90da-43c5-960b-15adcaf2d5c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29161a5d-387e-476f-9c37-17b1697dda68"
                    }
                  }
                ]
              },
              {
                "id": "5be90eba-cbea-477a-8d69-d20e3cfdeec5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c4ab8c1-ca5a-4903-a3ee-3745106bd265",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89c32a9a-d9b6-4a67-9308-f22f2998e70b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "316487d4-182f-4f08-b652-3bac5219aa1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e3330b19-0b34-4085-bcb0-7525aad81f4c"
                    }
                  }
                ]
              },
              {
                "id": "0925e039-2afe-4831-aba5-c9aa1a384858",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c8f678f-bc8f-4535-b084-520b5341cea3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75763b95-e46c-4609-8f16-8819ea230df5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aee81997-033d-4cb0-ac97-7a0ddd16bda6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dee65b80-2485-4cb3-997e-65a05799d8d7"
                    }
                  }
                ]
              },
              {
                "id": "5bee9018-880e-487a-93df-1af74ec30311",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25835ddb-a2c4-4df8-b712-d49aedea19dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1da84309-5072-437a-bb60-f0d11cf80555"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c45e6dba-0c41-4391-b1bc-4c10c4a3b238",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ad5d41cb-22cf-47da-81c7-ff566afa0b68"
                    }
                  }
                ]
              },
              {
                "id": "d92438ab-e7d1-40b8-9663-903ff2d73424",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de345a9f-7bd5-449e-95bb-789489f8cf4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d23bd4f-beb4-4e32-b4af-9106bcc97e2d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8af3363-a1e8-4207-bb32-4278339070c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8f2cba79-0001-4bdd-8e2a-7990e9101c49"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73f07353-a0b7-4832-b1eb-7a0068cb6fcd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f3bef05b-a7a8-430d-8ece-e287219dd331"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2ef898de-44bb-4c87-9ac7-d135588dda81",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "35f4627c-23b4-4c7d-85c7-c59d1c39d425"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cbb477f3-9411-47c1-91a9-c982a201b2e9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "946eec8a-95ed-4a7d-981b-1537568bc560"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43265842-a982-4ec7-a852-5a3d0c2a2422",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e42d05c0-212d-4689-be4a-3ec379ae3f1c"
            }
          }
        ]
      },
      {
        "id": "2bfb3c90-7c81-42be-8858-ebeeee54a3a0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2c5a4ca8-1d67-4b72-b5db-557506614e68",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0708a73e-9f51-4c1d-aae4-36fdad939654",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c53f53e7-4b65-4442-b012-a49eb39332d7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd8b778-a6d1-481b-8bc8-dd5c42dd2691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9773bbec-9e30-4778-a839-98fd053203c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42f5cee-2b73-4156-9eeb-752c7e188b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "74069378-5229-43b1-aa1b-4eeec0c98e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d761c8fa-1fa6-4949-86d5-6554074a96b3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74b3770-c3a0-47a8-8d55-6e9a0d3ffe8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4ea78f-f458-4505-a491-e89c0711728a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ac18ba-248c-4a95-8d65-61118ee9f4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5d7d48-b625-473a-877c-bd0932dcca26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1361e7-8c67-4c17-bcbd-16b64ef0672e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a6cbf4-e004-4c37-997d-e02c970ddde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa70568-8e49-4956-87fe-d3cd28f2fbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb35caba-5fb7-42cb-a8dc-ae57c0310042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5267dd-ae7a-4328-86ae-874f275473c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83da2f4e-8e8d-4f22-a984-b022e0f77059",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32ce7e3-d39a-414e-bf8f-61f9785e80b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a203d6-574d-4ac3-8a3b-a1da82962a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4feb0fea-6c4d-4378-b240-5178a06104ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b66ee8b9-6d0d-43af-8fe2-b88d4c8971f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd714a04-4528-4d51-8324-ca141c1fad4f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e3c53a-2065-40c7-9fcd-05eedf12194f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e256c27-3374-4d2d-883e-7efeda431f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5f3fa2-c3ae-4989-845e-61c9fc4aee24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3697645-a194-4854-951d-c21afb0082ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc91d2b-0585-4771-8d37-1ebf7de9bdf2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9f8740-1790-4307-af3a-caf457cf3ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0159eb9-6c13-4aab-8dc4-258491498925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589e4f69-5491-49bd-8ff1-822389e89e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0f3f34-0b31-412e-9fb7-092dfa715a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21957d82-9f63-49fe-8dbd-880063da25d9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b0342b-d39c-4d5e-a2fb-cd74d17fc2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a116f033-fd09-42c0-a112-e00968d2b9ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969a3f42-0fcc-45ef-9176-9a5d96f77e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb7ab1c-503f-4632-9f17-98cddb9aaaad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44d437d-eb3a-4dbc-b246-46eb42123222",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf189813-d2f8-49c8-9824-18045a05d4a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e751fb-fbe2-4e6c-8bd5-394d3bf20eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983b9ea0-b8ce-4bd2-a4af-7e0d0bbce0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "910b6801-49a1-46e6-b449-3d82c17960d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2e13e5-a714-41d2-ac3c-b6c8213e3318",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d064150f-68c7-4b6a-9f36-bf5f30596715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a988a21b-719a-4c04-acaf-d8be6e0ad09e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84194008-2ebc-46b0-8553-ad488bcc59a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d795e47-cca6-429c-a6df-c4c64b04290c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f2cf18-5c21-4fb2-a4fa-1e4c607cd147",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a19193-779a-407f-aecd-5306b58226fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80deba76-706c-4e0f-bab5-d2f17680f7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d415df-9682-475e-993d-05998d271b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99eb0e8a-49a4-4aad-80c7-c864c8b54e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd182fe9-e5a8-4910-8bf7-a62dbaeb7a2f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4db38a5-b36b-4dee-a63b-4e1cb6de25e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c96159d-9aa1-46cb-9747-3de2655e3b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4c44b7-4efc-4096-b3b4-483fed2b0b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c59100-32fe-41a3-a0b9-f1e508f1fa73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625f0bf8-0b3f-48be-9eec-66132b29ed97",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adf0160-1ebc-4313-9ed1-0832b7589a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2f2453-2e77-493d-b252-f2e02d519ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b08ed6a-8f3a-47c6-be10-4b93cc4a50b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d831458-185f-418f-932b-6abfb8725ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd229483-a58f-4813-8891-24a8f6d48876",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f917dfe-d263-4d44-b59c-6527a41b1bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bfae791-6835-4d9e-810a-64d3ac02a206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d31fe05-7b47-4e79-b430-7906c8e2ea77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1095246e-5862-4f51-b493-f7d5b67b9ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f236a3-cfc9-4183-b329-64f67904a25a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e935fba-294e-456d-87be-bb536f0d8e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb26e62b-1746-4f11-a339-cb8870bd741f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f5740f-399b-4050-98d7-fef4b6cfb560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "878a9baf-c94d-4d6e-ab69-66d7502c8c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c165bcff-ad7e-4f95-93d1-9252b9813860",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6eb6f4d-6aeb-47f0-b9bc-1fb4bdf59fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20089d23-cba2-4dbb-bee1-50657541af41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938678f0-6c6c-4abe-a904-229cde2e19ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "97fb14d2-94dc-465e-bdff-b9e952810b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce5b230-26b3-41ec-89e3-c11363129869",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e322832e-f290-4909-bdf3-84be7dca0b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c405e501-645d-491a-91b7-c36c32ee599a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eca79b1-da6d-4191-b14d-cab6efea9995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1167d7be-92db-4cd3-8cf7-97a98d2fb9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d0caf2-9e61-4407-853c-62d3227ea055",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e902030b-f17d-4b90-ba28-10149e59739d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4b0fef-42d6-41b8-98f6-b14f841a35bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fd1c41-ff53-4dc7-9502-97ced9a8211c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc6a201a-f0f4-400c-80b9-e233c854fa48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e749df-9c65-4728-8f5f-1b9219090ccd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6a6de7-2c1f-47fb-b910-6ed425b4b821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e31fca-9029-4170-8d65-43be70e6df01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f718c180-a446-423c-a547-dc3686ce0eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2298d7a2-c1fd-4827-b5ce-6bec0579441a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f407c526-1b03-46bd-adab-8ae318699437",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d08ac8-1450-40fb-bd8d-fc8bd75e1bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907bb207-9e70-4d18-974a-31ba660e0452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7dbffcd-57b9-463d-82f0-8bc8a2519236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56826c16-a999-4d74-8071-fbc74fddc76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4501e67-d90d-4a58-a3b7-de467ec436f2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e02d0be-f905-46fb-b0d3-0c5d17a3c07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378aad39-9c87-4bdb-aede-2ab92ad027fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a550e4-e22a-4ed2-90bd-c92ce1a452fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e5733a-bed1-4a73-b488-8b5a90a4db42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d80913-f45e-4e3a-a263-d4859d977b7d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b27d008-527b-41d9-b981-d54f5f7d1a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "296ebdc9-c601-4bbb-98d1-e3df3e733b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6b6c60-eca3-4d39-a9b1-523af0eb4815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7efefcf-7812-4b0c-8583-e5ef19a58009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bdd672-1a42-4aee-af53-3640e7fb3bdb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d108696f-c424-4f36-a810-f14d8b39001d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "059d4133-eeb5-45b7-a2b6-3e2056eeefd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7a3263-b19b-4e51-a1d5-7a1ed5abc3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "530d3dd9-bc04-4231-9629-35d51492f8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a09ce25-3fab-4a3a-81d0-d8f7b7200979",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc34b025-1cc7-4d35-858a-7258a14355f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ad369f-eaec-4ea0-ba5e-662a0ff822d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e093e4b-c1f9-44f5-b638-05053bfda49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf196ab-d6c2-49e3-ab2c-02f00ae2df48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591766e7-1b10-4308-a621-2bf95887abc8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7101f975-f3b0-471a-af12-bf7495252d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23cdcc31-982b-4efe-8237-d66888dd7200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfca8b2-1040-445d-a5e6-4a44a50813f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f90532-51a1-4499-b950-ebad8f745456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02793fda-01b8-4ff0-a72a-a62f229b7aa1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85781fb-6fdc-41e4-9d41-efe9a2c9462c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0717d5-cdf1-4c38-b6f8-b5ff9df9386e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d36bd26-e8f5-4b53-894b-e722f21ecc82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b07412e2-305a-4055-885c-87e85cfd1e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c7acf7-c184-420b-8c4b-25c436066b06",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbcd4a0-4864-4eec-bfb8-147d3a9ee1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b780a3ac-31a3-409c-ac14-ef1a498d174a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5feb6d6-4cc4-42f4-87a8-ba29d2b01825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba94c53-9042-4463-b5cc-d436ba20e505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6ad454-4ba4-497e-8cf9-9a225e068058",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7d9b3d-c696-4e27-ab8b-31e5e66df4a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de3bf4d-5f90-4394-b6c4-ced26dde0502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10b5cf0-1e66-4f0b-a865-5e99465a9c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6393c298-7d2c-4639-9222-f66872c40877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4d6eb4-54c9-456e-9893-2771b463ff10",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640f308a-acf2-44ff-bf22-e280f5f9a3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f520bb0-0719-4c6c-8e33-b47f5de8288b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b3d624-ae6f-45b8-95e9-83f422707824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3720b70f-4ea8-43ee-9bb5-5738906906dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870933a7-d2e3-42e5-88e7-1f546c567ec5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9e6ffd-eb35-427e-bab8-2eb3beb2f490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222fb26d-7a13-4574-9309-3157765821ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2eaf9e-f392-4ee0-8cb2-d697157a556b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd33a2e-a649-48f1-b3bb-2a7f771748ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289836b3-3a45-4338-b99f-4e8d5c576670",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdf67fb-77c1-4ba5-9165-72b875e09989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b86dc9-8d2c-4cda-9bdb-a16bf6068c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4127a9-6608-44ec-8d56-adeb40806275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78b0fc5f-fc3c-4b8d-a443-82e9fc054c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddeca9a9-2709-4200-a65e-2babe4ac2475",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd8b39e-0e63-4347-8203-f65246b5dd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76cf72e2-fe84-4b1b-8c81-a15944e4d2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b15ecf-4c10-47c8-b31c-7e9bf87db056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5fd43e-eb0e-42a0-a22d-fa58ee37c28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc27ccd9-004e-4478-a106-26a004b52b44",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32096cf-f84d-4b13-9439-46c58349bd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1bad06c-851b-4ce1-91a1-2935e3a2041a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990b8d38-799f-41e9-9940-877c552cdd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35dac55c-79ba-4439-8a7a-a457efc59c73"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "657b5e4c-0697-4e17-9aa5-8a8324f9308e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e68faa94-c697-4591-a148-71366d3786b7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4f584f-239b-4ef6-9ee3-8efe6ce5bbd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a764dc-b4ff-4d84-89bb-423024399a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a00f7f-e5b1-41fb-a443-27d766b5192a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c96f8c77-93c4-4b06-85ed-88cd85d9c0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a1d284-658d-46d8-8d56-986850e87291",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb73be7-0833-414a-be45-ca1c3aeb130c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "17d319f9-0712-472b-9214-f70dde711417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91c8ece-7a43-4bf0-b250-f89da7ee6570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "805e91a8-c4b6-4f74-87b9-da67e3da12a3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2060df2a-eaea-44c7-a3ef-c5366acaff96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "890a10e0-8648-4dbb-9724-b5db43df731e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bef5685-07b9-4c4f-a13c-c6dc4fa2d7be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0700dfe2-a3fc-4498-b1c6-54c4f11142ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df91ef74-8605-4d0b-8af4-19dc720e7315",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7cf5b14f-6d69-4b35-86a6-18ab937606ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e93bcac8-d1a8-4449-b7e9-dbe55c8e0461",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b842fd5b-af80-4865-962b-06a3eaf75e33"
            }
          }
        ]
      },
      {
        "id": "b74c7216-4549-4a26-8715-176c49af8d89",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9c9ea22a-1c03-4053-aee4-f321097b1f41",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ebf69a2-d7c2-420f-9f87-0d5243ffa41a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bc747672-18d5-46b0-8aee-1769cc35c428",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa36202-30ce-4689-b550-510a52d4967d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896858ce-c9ff-485c-bb10-3e57ee013398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a18bb0-c151-4970-85ca-6e4ef8486ef8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd09d1d6-d7f5-435a-966a-878e4ba0a2c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5770d79-11f0-42b1-a7e1-d88f15ddbc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42146de9-f0b8-4237-915d-5d54818225b1",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7597f38e-b71f-4f1b-997f-db5ceb809f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04814eb-1026-43e6-8d32-a72bb93abc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d167c018-8eb6-49b2-bdda-c6a1bf38868c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e089397-9e16-439c-a1d6-605b80da7fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67648036-8a0c-4415-9263-0a27b5a1e1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cf878c-3959-4ba4-85ab-1aa0f3106d71",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17613061-2c10-4a8b-8b3a-f3059eff56bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca5360b0-0266-4004-b467-aa8032f93d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deaae0b6-178c-473a-8a92-a89d268f39ef",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1152b451-b6e7-44d4-91c3-c65027a31cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24be5757-c7ff-41ec-8da1-7c8287822aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc6a8bf-4589-4e07-be61-835bed7688e1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52475019-ea95-480a-8cc0-aa969d953ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152a8990-abf1-4486-b51b-d0501ac997f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f95473-9b48-4ec5-aa2f-2854dd9ff070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a633e50d-8159-4f8a-84d8-49e220ebf86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16eff88-30e0-435f-bb96-fe02cd9e7eb3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09456686-bbab-4ca7-afab-394d055df741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4650439-425a-431d-afd8-f7d6f0cabf66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a3c952-a1b7-4bf9-9168-95809f02eb3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f425049c-8044-41ae-b8d7-62c98bb9f6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d258d371-0f0c-4de4-9647-08609c8e8fda",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02393f41-657d-49df-8355-df911b6114de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "237142aa-0270-45ad-9ce4-13a35515f7c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0a698f-5c2e-4adb-b45d-947ed13efbcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d6177c-d3ea-45c4-89af-463e503e1e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321ccace-284c-484b-b068-54de0f722d1a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3b6a2d-ad96-4aa2-bebd-55a6eece337c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d95f771f-9bba-41d8-aaa8-3613913471c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb32631-37b4-4a44-8075-165834dcfa37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "307ea6a1-b483-4491-b309-edfbfc26a3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b9624f-bc84-4a6b-82f8-ca68ef23f7ad",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca89380d-7a28-4978-a910-db8f80269bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85bb93a8-19ee-4f34-8a66-4b8b57d0abe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedb81f8-9c38-4b30-a519-f0fb173fb87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c9c319-0274-416e-a618-6c87dfecac3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32809b73-95a1-4308-b647-4ad75eb02a4f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078fbd74-2288-4ec6-b533-cbe1340ffc89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f929815c-1b7e-48b7-a346-fea49fc7de1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1b1c4c-8205-4dda-80ef-58c26aa93879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df438f9f-293f-4635-9ef2-c6e2f05eac0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba97d241-27a8-4c19-b791-fe3e53d93428",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6d18aa-325e-4786-a32f-84be94647406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd34cb85-ad28-41a8-8b73-4db2d5407ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb6a82f-9b6a-4144-8a4a-8ccd221f3350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6fb997-946e-4847-9123-103bfb786ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438a16b7-dc52-425f-b74f-24b96daa82b3",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d1c0e6-645e-4821-84b9-199451071a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1988d6d-3b24-425f-b6fc-6c0a142e9534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74611851-c4ee-4a79-a102-7446dc8e643f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07831322-361e-44ee-872e-08a5ce7a33db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97246b69-3ad5-4518-b6d2-59f619f0abd0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ce4436-daaf-40d3-8b32-204555c123b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "071de526-9646-4771-bbe5-6c42bdd75bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b339e5-c197-4ee4-bb5a-d93d7b1ede47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a488ae3e-a65d-4faf-8062-f93a61b009f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60490d57-1226-45a6-8587-9a482a4fd0c6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b037c9-1f9d-4c3a-b7d4-a59e593b7c0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf1aa365-7b3f-4373-95f3-18839d66e2cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f705f97-18c1-4a33-8a5e-c865c4dfce67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f21fc5-88fb-4ddd-a5e1-0efc1f937610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395b7fee-c630-4e73-9c7e-e1ec34585204",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97108d9c-ec53-4597-b530-5f24d3cdff47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c58aa09-41cb-40ac-8aa1-958754c4ce24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5167dfd7-2890-4c43-a128-2d29afd6bbf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97722ae9-394a-4ff3-aedd-03ed4716488a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7e970a-d4f5-4e31-a244-dbe0e2be2200",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1346e0b-663f-4f0a-93c6-45104bbb40b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74e72c4-ad6a-47c5-8001-9a30c0f83023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d66821-f49f-41d7-bddc-be2b4d5ad23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aab1fac-e44b-406d-8fff-8a3353d0d530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37669e1-8f32-44db-8543-4c43f1c2d801",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f3f9af-2ba6-491f-868f-28deace76d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea6c865-9ed7-47b9-b7da-861b80803713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeaa581e-c4f0-4c11-bdb3-6c8c4f348229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b5d41e-2e33-4722-9e1b-cd0a8ebc0587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e891492-7993-45e5-bf27-e1e65007bd72",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6086599c-83ba-4c6b-a2f1-c0331e2951ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557afa89-b68c-4238-94f8-578bb8de51d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8266ac-0f6f-4484-a724-3dfbb594854b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65ffe35-dc7d-4c62-9204-cf2396041ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33e991b-7266-452d-a8e7-ae30389f5515",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3ffa63-11b5-40ab-97ce-dff46ae9bde1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06fb506-8c73-4ba3-bc33-022ec40da3c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb7de3d-caa6-408b-aac8-7dd1c9fee746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636475f2-b43b-4998-9450-002eb38aa6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d7ef3a-82ca-42b3-baf3-76a841529451",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1afb44-a322-41e4-aec0-13f56119d66b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0219bad-f25c-40d6-a403-aefc8de20cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc4384a-413f-49c1-85b6-a529d85b8833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e926fed9-dcae-4b6e-8758-0c64c987cc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de51e39-5341-4e79-83ef-9edf1e60e3f4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52952b48-44c2-4b36-bbdf-b3814d4acd8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7437e427-0bb3-4d15-96cb-fab81293281c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3ee1a6-6f38-4c1e-8cf3-736554de0276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89799742-f075-420f-8b25-89be27eaee1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb443cb2-1ec0-45f1-a59c-4acd3d177ad7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed680f8f-db84-4f6d-b5f4-72e2c564d8b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fd0543f-8aaa-41dd-b26d-82e08bf95963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c02f26d-7be5-4d59-a556-b00467871a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4efaa6-873a-4b3c-a551-469191ec2b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff6a5dc-b10b-4939-bf67-be40d9a50c99",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66eae7cd-bf82-4181-ad51-7af8e3041e58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ae12e58-5daf-4941-bb14-2c2538828774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "562a6d26-fe8d-47d3-ad2f-75bc021d6f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8cc0f36-cb77-404a-95b7-d089bc74d0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49338a9e-7c54-4457-8598-50796dc0f4df",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b512142b-e383-4064-afe4-a3e30cd68df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb5cf126-e1d2-4033-8d34-be48c447b5d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b3adbd-6583-48cd-bd4f-f37f046e33fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275bff1a-7f88-45aa-9560-93980058c5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5e2899-2d88-4bf4-b9ab-e86a1218fc86",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c712f32-d9a2-416a-a9c2-89059efc791e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "168798d0-1792-4901-9290-f33e52a9555c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87916ecf-97b7-4f78-8113-35e99e8fb16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc751be-4ad5-4633-b1d7-bbcd224c0eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d84da4e-f92c-4671-8352-e22029fc3b0a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9970bd2-b01f-4bfb-95ca-06d61e389176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523c210a-5fe5-48b3-b50b-d5a66d4b5a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "088aa89b-cf8a-4577-aaf5-96968c08ba73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53b369d-e14c-4ac1-b492-ddb3c648c501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8fe265-b5a0-403a-9831-75457f39b466",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806f00ce-fd9c-47bd-add2-d7380630d5c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4fe4b9b-f414-4c83-b049-a41e2a67ea41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f847a5-4957-4a6e-a683-168d25162f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4965d795-0d98-40cf-a97f-a5730b916b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4725b9d2-ab5d-483b-8e91-76c27905d706",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7cd9f8-df40-4ace-aeff-62494b9b3510",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b075569-c309-453b-8ffb-d06ee2aedf43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9466b4ac-9c41-4c7b-b025-e23922f77063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3bf5fd-2cf6-4ca3-86aa-697f027fc68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f6a50a-a176-4390-a905-61beea3383f4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4614f8c6-be25-4180-8ed4-d0fb23f23159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c39cb00-7332-443f-8873-33ee8b7b61f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa00284a-26ec-42dc-9a06-ef5a0ecc71df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6618c6-66a9-4956-97a9-7175333d1677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d75fd33-517c-448b-87de-41fdf0f1e843",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee308630-9bc5-4512-be3e-7b368fb52428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1a347e2-1836-44ec-88ee-4cf2f0afa2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2714e233-e766-46b6-8e57-31bda147560b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae01ee2-df64-44fd-8dae-af51a1642d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ab53e7-953c-4fb3-98b1-cd167e79cee3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e06fb4f-1f0b-4ce5-8057-cfde41fd9ef0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7e5d439-c788-426c-91de-c295be5cd14a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b89a825-3cc9-4bf6-b44e-ae00d4c27d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200aaabb-35b5-44bd-8dfa-9ac8e97db7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cdfcd7c-6837-4a86-be10-9ffedd53072e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05476c5-ba24-4903-aa9b-9d4790e5e75d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a7f2bde-7eb2-4946-a3a3-dbe787739541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4fd715-e7b8-46b1-9ed4-1809288cd140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b92b8b5e-26fc-43f7-b884-3bc35ecf0c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9b7d3d-96d8-4ebc-982a-df1c348296e0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90821262-e8ea-43f9-ac25-37bf4984580f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1910dda-fb2b-4fe7-96de-0bfa9e5a4853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5200cb2-09eb-4a5b-bdb1-3094565667a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59395362-6bd8-430a-98dd-a92fd82e4445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e09d22-9fe5-4b33-be8b-6cae2a87e8c2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43af27a-563b-4801-9a92-14bd78be330f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4602453a-a949-41c6-9f9f-1b8dd9215aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25729eaa-da88-4996-b419-cb7a70022396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd9fbc7-4c6b-4329-8fc5-bfce2afb329b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb52c64-5530-439e-a664-573724f6e670",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7bb535-754b-4b66-ac8d-9ddf020f41a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94411f9-59b1-4f6d-826d-d7fa4a9b51d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "321487a2-332c-4b0d-ade3-8cdbb0d06e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49de7e99-db85-4c45-be70-dbc42151d3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6b6da4-c601-4e1c-9c4e-790d42cbbcbf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710866ad-632e-40d8-a719-6258c6fd2d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e95dc94-5aca-43a7-a2c9-bf615bf0332a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486552ee-4678-4eac-9c7c-69b55dc0e457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "388f20fc-79c1-47c5-9547-5ceb7bf69ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5910ea22-9ea2-49c2-8db0-e3310901dce4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22c64c0-f9fa-46a8-94bc-63e3939db0a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86149666-cb9c-4799-8bb3-b2e32945db26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194e759d-5eb4-493c-9713-5c5988a7cf30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24be81e8-ce4b-41d6-a035-559ecc30f184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6763ed10-33ec-4ae6-a510-3fe66af7d3f0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a9fe6d-e017-4f72-aa06-7985cb6f57fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222906d4-bc73-425a-9078-0a8d6e07fe16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2231fb2-a71e-4d4b-b990-7096c1ef522a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df507096-b307-471d-a7d1-41d8ec508a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ef1925-b5e7-4646-9712-1948e9047d40",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55a3c16-a0b3-48e0-b949-754166df75ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77bd8e0-099c-40b5-933d-1ee45e1f217c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f03d90-0baf-4bc7-b57c-dffd66e9ba94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475f513d-541b-4313-b743-574121f10147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bbcb28-d03e-401f-8cad-c07b5304aca1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ded7eb0-f071-4fcf-8bce-1279e2f05fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0e0df7-da05-4205-a7d1-467004c785bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2f2e27-0330-4249-a3bd-22a467670d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9073c8-7209-41ad-be16-a5275550b944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7f7d12-98bb-436a-9ad2-b0a1badb6055",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a49393b-a6ec-405f-b8c7-157e23cadf0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1b6bcc-08b3-4c98-bb0a-617b2423cb60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "975eed9e-7f77-4c86-826b-e6f8278315e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde5d778-7c50-4fe4-bce1-c2c9296713c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51eaa41d-7320-4bfe-bcec-104d56e26bca",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7727fa-d266-4b99-b547-97217d63af01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e95a673-5e91-44cf-8e13-f0980ec3aefd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46793d5-1758-4e40-b8df-45c23c88fd44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ce9031-2d04-4f7b-a222-1fa1a6cd48d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263aa515-17d1-4ed6-9bec-1688c14e932f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09f7744-3fa2-4064-82dc-b3b2805561cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "050b5f49-c44a-4bd8-8c9a-e9c3288ad9c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e92e7c-d0bc-45b0-92cd-ff65a2813993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b70acab-8f08-4b35-9512-619d0b81ef55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf2b4bb-c29c-4f97-99ff-3eff1357bfd0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfb4f43-a49b-4b98-93b2-c432abd5c459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737ade4c-044a-41e5-a9e7-d7a38eb57f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1cf23ab-c7d7-4813-a499-bfb3e34d7575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8092aa7b-244e-4b49-8e6a-d6691868ae58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c87b8c-7e94-4c6a-a002-87afe515aa31",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fbfec7-3dd0-4787-91cc-09a13b38e83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ad2429-395d-4075-96c4-0f15776e007e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbcfa9b-c92d-41e6-8f08-cae770f45eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d476217c-4376-4a81-90dc-00c2e83c5044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee0d3c2-2f2f-4f85-a9f7-1d5715f5f867",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fe372d-c006-473d-a742-cdfe7fba60e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c272112-af1e-49b0-8d87-0eea63d46e93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a10cd4-a6f4-41d3-801c-674007cdf325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcca7038-eb4c-4ac9-927b-c2a37a90f6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0e6a28-2e9c-4fd1-8e3d-91643481f000",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb6c3b9-85fa-4014-b6db-2df741be6642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c207488f-ae17-44be-812b-261aa7d59b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04877e8-033e-4bf4-bf46-f9f0bb4cbba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b2c537-63fa-445b-bb50-e1b9979423d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071c71d4-bc3f-4f9d-97b9-8302ea3301aa",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3084ed-9b5c-4c0b-93c4-3219a8e9dfa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "592f3ae1-ca1a-4907-9e89-f7e2e9282dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ced9624-4fd8-4a48-828b-13e726388334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8bfdc79-92b9-479f-8994-340ccfc88805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2004f2a-109a-498a-a7a0-ef1bf4f72f7d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09876f71-7336-480f-ae16-c823f4285c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730ad130-6b11-4878-aace-4d6baf1617df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af363230-9fd9-4431-9252-c8552ff77269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d081f62-a6c1-4dfe-835e-f5b41d5820ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ba2fbb-2709-4a02-b805-660de3a1b541",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34151a9-538f-40a7-96b0-b6b6086b5ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a09e55-dc6d-4d98-b846-c1c960a8f963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "048fe643-04b6-4449-a40b-b22667c50b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d012b1da-46a4-4121-8e51-33cb70a5fd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2595c549-9c87-4e2b-a504-ff1f8e25ce1c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1298f1-411c-44a0-aeba-9093a947f15e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183d4ea3-770a-4144-bbcc-7687003b25a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec30641-6578-45d0-91a8-09a743732d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387f9e81-b3c3-47d5-b923-17d41819b146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007bf38a-5f89-4cc2-81cd-e11b78c885ba",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3d208c-f71b-466f-80d7-aee8c47bd396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c084a92-a97f-4c88-a5f1-3cd9be95b30b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf690f6-77f2-446d-bcab-da3daef7acbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e264c9-27cf-45b7-aa98-3d7301086625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924eb45c-1f2e-4fde-8f56-c8b1f834f99d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c0eca9-69c7-47fa-af06-09f1e57c0557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec7a167-88a7-4b42-bdf6-ab14e0713db6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9543add-5d77-4d76-94dd-331e7e6ee36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b563c82d-aa89-470f-a1a2-a15e85ab83b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b7aa81-7659-4874-b6ad-db9468a51e0d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ba7dee-e972-4c22-b06c-cf44ead36e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b0b03d8-3f30-478c-8d6d-939d90a0ac4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32848a81-d5d0-4599-8dcc-1ec5fda4fe69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809575e4-c5bf-4bc7-8935-4925f34edf34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f6a5ad-d854-4a3c-a64e-f5e8ada9fb0b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bcf4fc-52f9-49bf-a451-b9d0bea2e656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0877954d-044a-43cc-860c-d193e38b971d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa611c7-5890-4a32-bfbe-f7ca1d73eaba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "304a46b2-a6f0-45c2-a183-b674862e225d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9e27bd-b638-47eb-be57-32be9b76220a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48dffdc4-0743-4cea-aa33-795f2103317f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a813aa4-a1c0-4740-a5d2-cc7cd67a9e43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03123d72-b583-4faa-8f43-e651476981d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd0a4b1-3887-45e2-91f4-b267a189b0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216e0378-b443-45a2-922c-6ff52c359aa8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f387b821-4999-4627-add6-b02d83770697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d9b5d3-17a9-415e-b2c9-8f034c177e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd39500-21cf-4c3a-bd66-8491c0059dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd5c363c-6797-4da3-913c-6b3dc1855adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b45377-e7a0-4eaf-85ed-734baa6f28b1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8e66f2-f9bd-4e52-9584-4dddbf421dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf36c2de-cc9f-4db1-b455-71287b3a67fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35764cf0-4435-46f9-8d66-e5f3693511d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05281764-4bb0-4080-a136-f71ad37056c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7355a429-159d-45e1-acc1-89dcbb7a4faa",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204a38e6-23ec-4577-a8e8-693e4495c5a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0994efcd-8ba5-40b0-8bc4-41f15ba028f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51bbef1-9a7a-4608-ba56-43af3c3e61b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975d758c-fb57-4d67-9aa9-cb8d46757896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a7d0f1-ee41-4778-b5ad-78ef881b83c1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7d3d90-f7c0-4d83-bc0c-554826d1f036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b9171e-eea4-4c2d-bed2-1c85022c8103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3310b1eb-53dc-4332-8427-c2ad11a38666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26534bd0-212d-4346-8a12-915b640328cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed68df70-e9a4-4af7-acf9-7f1192712733",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c280e93-917b-47bb-9c2b-eb90ab2c63bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71219ca2-579c-4ab6-81c4-40d1f0244fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1827180a-2c0c-421c-8651-591ab0cecfeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a9120f-af6a-41c8-ab98-46e834f46071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109118f8-bdd6-492e-bec5-2a8e119190c3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40200d6c-cd3b-43b8-b031-561feb5f157a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98c0e834-7751-47db-8186-053d4529b23f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a409a0d5-c324-4b01-937f-670c49118d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ae58cf-f2fa-416b-95dc-4c90ebf2159a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967db4c0-da9c-47d8-a039-15b731584fa1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7579b464-1010-44d3-a72c-d99f1f6cfc2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5d8f672-d33d-4c36-af9e-dc0e03bde36f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be449f9a-4363-4202-84fd-fd3e40772254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939cab4f-22f3-4f86-b521-576f9b0638bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462ee4dc-d012-46c9-987a-0b028464bd1d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2cb7e5d-7e39-4805-adff-62b13676b19c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "601937bb-5745-4c2f-92ca-ca12ae7c31eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcac429b-a90c-4aa9-b958-4e9b26e51279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde782b6-d2a4-4468-83b1-0e4cc12fb366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad7caac-8359-4a5c-a786-c3d6960db1c5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bd91db-7462-493a-a213-354129215ddf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c0c14d4-1fc9-4dbe-8d3f-5dfbc5d9171b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef87d7d8-f412-4ed8-8908-b2baad135386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ff9530-724c-473a-9f77-6280a4ba7058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa98e89-2a13-419b-a6f4-5e09b39d5a7a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58dbe45c-b513-4cff-872c-774ba6efa1d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61c709c1-6b62-46d7-9465-1488ab2322ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1415f6-fa10-4ba0-a8ca-7d6b05953492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3c93b6-70a4-415b-924e-d60f51842d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabdbe89-586f-4ec3-a1ff-a25db7041549",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10d5685-b91a-4c8c-bb95-3a766e693c10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b819d73a-0015-49a2-94de-cdb43119c114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed66eda-06ae-4ec9-8141-100c11522d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fad2d1b-0c89-4754-9df7-538e6c5393dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0beeec6d-aa63-4ea2-aa81-06e591aa0bce",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe1b7ab-808d-4797-930b-0592ea8a2d2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0369f469-4224-4f41-a201-4a0ddbed023c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "321c7ab2-3df2-4a17-bfc2-e583c4501325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e409baa0-6d78-4e40-901f-98d21c638257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce637258-462c-4fa7-bd9f-2c712c7cf1bd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587a2391-85ae-40e7-959c-6e0c732adb59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ba22732-414a-4eb9-b105-ce45135baadf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311ce293-6e28-4d4c-b72a-7067dbe50924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1330fecd-0093-4ca0-8965-57ea237c4c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b281a7-0943-4cd7-a920-1e9929404d60",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49cdd7c-d02b-4afb-b2a7-828b40411193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b4e4ac5-b512-4083-9a32-ff2c894d0105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab339ff-1385-4bfa-b2e7-c02cf6ec95c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b4bd01-8d01-48c4-aa70-19aa930adbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5542cb35-a207-49ad-a171-a7ae16e0cbb2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3849aef-89b1-405b-abfa-c676ece67a27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3bebd89-d294-417c-8fcb-0e705c80e424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3825afd-67ad-43c1-a7f8-2bedda7766de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68cf7c14-9e53-4921-b88b-52d6c7e05b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e1a2a5-be54-426c-9109-c5b2bf312b32",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564399bd-95c1-4b23-a6c4-8faac47c00c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "592bde6d-d1f7-40df-9bd7-4aa9d55584d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e313cbce-0025-4224-965c-38f662501c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72449c9-11d1-472e-a119-428e7f132c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770f9b10-7c0c-4516-8dcd-6d19d14535af",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfca153b-570c-49f7-a419-cc11cc883075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8bf7682-0f94-4042-92d8-0ce02af6e250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea554a8-0e4e-4192-a587-9135d34bba6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab4676c-df77-41ce-a34f-16e348470f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b538cf-7b2b-432c-8761-f3a32305ebbe",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ac8cb2-2c28-4a1a-adac-2828225cd3fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af384bc8-5410-4906-8b2f-c0d3ac45b87a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea7d253-a1a5-4403-86d3-eee64eb0fa77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377782af-531e-491e-8ca4-e9cb3036c37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2b8fae-b3a7-4800-b964-fab89fc49108",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269b0b83-2827-485a-ac35-66e72a394f7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c12d2c1d-cc9a-41d6-aac7-aaa61640330d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e911cf04-52c4-4648-bdbd-77f293019371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b92ccf-e5e7-40bb-82c2-51f3c19b4fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8fafbb-f2c5-4c2e-8915-959b6d3f1e2f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db9e7a9-13ff-436a-9a72-3528220bca4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f12315c-7ed5-4b3d-89c0-5b93a914806d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "967e0fcb-d123-41c7-a21b-e84938c57a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff98c0b5-e8fa-4547-a817-765e4d8c3443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbd2588-cb88-4c80-8260-34594a30caba",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894e2ccc-5287-44ce-9f47-8b08c9f524f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf956296-0e92-43d7-9931-14134211af8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652251bb-cf53-41f5-9ce6-b141271fa598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e96fd8e-d7a5-40f4-aabc-0b863d55b599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388b5c9c-bdba-414f-8fa5-744c83dcc965",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9171aa89-8078-4e4c-9b89-9a5d160b4517",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcda6812-951b-4a0b-9c8d-3f8363f9503e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3287ad71-e30b-4f1d-ab13-ddf41d4790df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e958b09-8611-4cd0-8931-129e43a66ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82013278-60a6-4643-b8eb-6224bc03b27f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7e3017-80b3-4861-8d1b-22cd104409a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cc1e38b-90e6-41fe-b5b5-70ef4ae2cd46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a3863f-ecf9-4c33-ae01-6d5b79d94e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537f7402-fe45-431b-914f-fe0761f2074f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641505ce-2a51-43b0-96a1-b802385901a7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196be3ef-5155-4475-b731-77944d4187e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44856484-1ccd-415d-92f5-a02317f6c658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef0f5a7-e085-4e04-ac2b-763ada8432d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e1ea043-7f0a-4ba7-a948-041ad4455104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ebc61c-04f4-4526-bc4d-01b8e6cb50cc",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9329fc-6266-4b60-be80-1767a2c2b816",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7d92133-934b-4204-a8d5-37e69ce4b13e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd00df8-56a9-4c9d-8a0e-2def16f36f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c614407b-99e2-4ecf-a229-bda71ee980d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eccefb5-bf58-4754-9207-61fb889ab743",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fe6409-d4f9-4093-a043-34807d146bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90bca37f-f1e5-4081-8cdf-0cf4a36502ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d298417-dfac-48fe-8f86-f36fae584dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c260db1-e2d4-4cb1-aca1-19ec717951e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89220c89-185e-460b-8301-a875af8a8ba4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80e1a4e-30ba-461e-8054-6d2b900e79aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b127d8a-8059-4275-b4c2-2f98f4b7da5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d17ba1-6b94-4a1f-8bcf-e7c871632166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3746d56-9ac4-4a94-9739-0f4844deff90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878351b5-d5b8-4b24-9ad8-acee62e4467c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0052e2e-8980-4b65-b90d-5aa19455f338",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f353137c-eb73-45bd-adcd-a1e2ab0d6fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df45965-b997-4db5-bfc2-383a8457fab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc024a7d-2bc4-4d32-bbd7-a8e13b290e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff82434e-8180-4c7e-a685-f325ad3d2f79",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daae0d73-f0f6-4308-bcdc-bc9b4184b943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22a0b4a4-9d15-438d-b061-6895ac4d92c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a38bc0-84cf-4ec5-a08b-0f1716d2b613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f5f892-a81d-4724-83c0-8cdc40d92631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efda1e6c-3bcc-4738-81bc-91c96fb4c998",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227ce20f-aacd-4814-8e12-5a2ef7927728",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d5c4ce4-27d6-4fc7-8209-ac635c8b7a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb18750-05ef-421f-8197-13126e12425a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04dbb563-8dc3-45b1-8b02-8de394059179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd53778-37de-43b4-8525-f9db1fb7300f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7284779-8734-45e0-91ee-b55960d2f59c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae45c1f8-943d-40cc-9c08-07082ae569eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c14278-cff2-4164-aef1-9879ac381e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ecb3cf-ba27-4ea5-923b-8bd1e2c4d5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b0e072-b89f-4425-8897-bdc16b2bea96",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35b0771-d729-4ae2-a694-5e5e3f7b3703",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9804a0a-9894-42ec-a0f1-ea421463c2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e22f38-7282-4de6-a9b2-a79d0e34014e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78014823-09be-4b21-8a76-83493b227e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee0f126-f12c-4b50-8041-7376f2777e0b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f2fdff-6367-4c95-9a94-15131e39ca4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e71f79a-9e09-47c5-9e7a-acb8e0f9e5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fea7a0-3e5a-4e8f-9d81-495958204c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41df4daf-b7fe-458a-a193-332713cb1549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70abd76a-7795-4662-b208-928f8b8eef96",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54b1cfa-7f12-4229-9dbf-bb5fc25e2763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c90d38bd-bf7e-43d2-9d22-72a5049bb572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68f3662-88b8-499b-9d43-1ba6f68e448c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5337b2ba-0bfa-43b7-a7c6-bb088043fc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027c07a1-52f7-4636-a0cb-557483ee7021",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb08aa9-d079-4796-9588-cd9f423b4932",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6acf2f30-507c-4459-8945-1ae2cf681f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec7a180-b87a-455a-974c-0cfcd604d56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa59598-2a7e-45e4-810d-3d9e43c4f333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e8f598-af97-4db3-81e1-ed1cce668046",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5811709a-f242-4143-bd24-0d77d5b03370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdeb9d98-1f0f-4e28-8313-dc21e3ba5674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8455b7d7-402f-45ee-9365-8781f37252a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6c5b62-1fc8-4266-bf1d-9b82d6cb40b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d8907b-c4ab-4648-a21d-1966864bd2d1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8d2dd9-f1bb-4509-a560-7cb8bac9e7cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "845bdd90-029d-47c0-b6c9-cf7e3b861370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d966e6-32c8-497a-aa2b-60ed088002a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab04ad3-d7d6-421f-aa01-503039e7bd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba5878d-2047-4af4-a6e0-b3d9cd9254bc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b759a96-5f53-450c-a521-0da1ceefa026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ff0f75a-b260-4803-995c-28d0efbc5af2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348ffab9-d057-4c90-a954-d0168db84438",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c2248c-b09f-4bd1-9c11-f135cc8982af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5dcdcf-ba9c-4978-b958-84af140a8e3a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2eeb4d-d463-4fc9-85d6-d86f7e01e10b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68622c1f-2dc3-45d2-b5b3-6a581dac1449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1abce8-a983-43d9-ba68-727cb2952d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba4f32e-97e8-46bf-b141-c3d25cd55ac8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca20097c-0030-46fe-abdb-70638f10116f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2eec9820-1cd8-435e-bbc3-d30637b82800"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cce3739-5f78-4eb4-b053-c074a4e229e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a28421a1-64ec-4ac7-8446-5cd6585576b1"
                    }
                  }
                ]
              },
              {
                "id": "8cd40365-6f1a-4139-8b64-3baf6684d622",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a53918df-841d-4a83-a756-595cac01d2b2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2684589-3fe9-4ed2-b006-95e70bc094c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "02745064-7bd5-4faa-8181-c356f5d2150e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99e89ef-5682-4308-a2b3-41d6863f9f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d59ed4f5-64de-4e20-8e41-995e9c3f1ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fe2b46-2c64-4e0a-a5a5-f299ceb07c13",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cabe1b5-2c42-4988-9a90-ce8d21cfe2a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "aed620d3-765f-45e6-b532-05bc0ee89d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba892e17-2189-4d47-a5d4-87ed383f5c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bea30fdb-4ea2-463a-b8ea-d6f71c69f8e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5ad8e51-7609-49f8-8fa3-7a7926e6a568",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3022bb20-b654-43df-8bac-1942f52b34cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86c9034c-b148-4a59-a6e1-79be02386cee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d3f2fd2-c325-44db-9ab6-1aad39863a6b"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "9c905b06-334f-46b3-b839-a9bb690dcb0d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5cc3b92a-07f2-4e28-9465-afd0b0a8b4c3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6da577c-fea8-4ab5-8678-112040b5ff0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65966964-8f53-47d7-b58b-7d39b0d1341f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fc014e1-af35-426b-b4ab-92c2ebf95106",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a32ce1d-a795-4cd4-a369-1141ee1ab461"
                    }
                  }
                ]
              },
              {
                "id": "66706050-9cbe-475e-a3bb-be18dc88ec93",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0ec5c55-82e4-45e6-8576-b25f9d07dade",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0c24ecf-87d2-4c62-8625-4ecd7d75fa3d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68f1eb20-144e-4455-9d99-44ac34477b40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd0d19f5-e24f-4482-ad4a-c378ef2c0bf0"
                    }
                  }
                ]
              },
              {
                "id": "82ee9ef1-9744-43f4-8497-bd095bbf1456",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2648aea9-a821-43b2-ac64-78f873549d42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7059b972-af8f-45b4-b0c7-52d8bba564a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33e6d015-31ac-4390-9748-b03887399b91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "392c003b-c30b-4fe4-a301-4f9efeaaf881"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f70106d3-ebc8-41ca-8a13-a966704baea8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2fdd0b71-d9ee-402e-a16b-c985b7afa947"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca3adbc0-ba91-4e34-99ac-4205c748378e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0dd316a-79c0-44d1-91eb-3fdbb8e7b76b"
            }
          }
        ]
      },
      {
        "id": "889bde90-6908-431b-be91-1f573504ea1b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "50e7042a-b24c-4a6c-a5a0-b5842633c048",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c77aabe0-395a-4cac-bef5-c772f4bd97a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7f00beb-cc0f-48f4-8b50-072c5971fac5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f710dbe3-6a73-4d67-a61e-354a88bde420",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e2a62dc5-c30e-480a-96b4-dfe9b269f490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd4bbe0-bd60-43bd-973e-2e099214fbf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5490efe8-3f40-4966-9dcd-78ffa35eb64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356bd204-cbb7-484b-b7b6-5d1c1500d9ea",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6231343-d19a-4892-a239-bfaee0f74242",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "976f6f08-9047-48e4-8eff-e911f7e1a7b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b74f9b-02cc-42bc-b8cb-6f1b0534dd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0e83414-b6a2-4092-8b4c-4b9b069bb3ca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bb181ac-d01f-4918-bb48-0b3e50158494",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0674052d-c52c-4e00-9b37-bf5cdba5dade"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22ab85a2-cccd-4788-ab72-f4392f30a7a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cba013a6-cfba-4c6c-9539-cc1d3170bc59"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2acc20df-55fc-4f7c-943c-2409690b3a81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "78de072a-516a-463f-9008-a09768ef8943"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89bf02e1-169c-41de-b248-c63e6c352823",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09132d4b-429e-4a62-abfa-1706f6033435"
            }
          }
        ]
      },
      {
        "id": "acf90b06-ee47-4dc4-88d5-7e722a2bdd2e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c50f718f-801c-43a0-9ed3-e233d19796b2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2748ab7-fce9-4e73-ba3a-b53eb9526fc7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5ba97a9-cf9b-4b22-8b5e-a46bbb12780b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4600491-e7e8-48ff-95f4-1640ad84a952",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6ecee1ef-78b6-4c66-8734-be72329b28b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9bf90b-e6b8-41ab-b59d-9923ed8601c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22b69dba-1610-4298-8542-1d853d510a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bde6f7-b620-47da-a2f7-7e8e32c57e0e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7ddba2-3b6e-4274-a677-2835909a7875",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "377d468d-d484-455e-94e6-7b74f9835f53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82b7f50-ba5a-46cd-b78b-793f10dbc4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72b0c494-a077-4cc8-be5c-2ab1cc7a8755"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcaf3e9f-86fb-4be2-bf0e-cb76446ed889",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7dc440b3-92cb-42dc-b1f8-56cb561aa06a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "103aa51f-df20-4099-af3f-6b999aa15144",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3e5690e-733b-4842-9745-0697366482e3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cbaa7d0-7de5-4193-a892-3f4bc8513fd7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5c558dc7-43d9-4a60-88db-9011dd11325c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "adbe80b3-c141-4185-a331-503e4be3599d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8c9fd42-096e-4b70-9ced-e85ac048c445"
            }
          }
        ]
      },
      {
        "id": "c29c5ded-f8b3-43ab-a9cb-2a391d090ef7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4a939010-af78-44c3-8147-5569563afdd6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ba80880a-308a-4b79-9b53-6f3b5872ad21",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c04be14-bf56-4a0e-af7a-7682b0705f1b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf35c76-aecc-4bd2-be4c-6be8a606cd8d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6e1a65d0-2849-4de3-ae9d-44762ed14ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c803f15-3aa5-4aa4-8788-b3eeeb171a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f12c7f52-75e5-4ea4-bc0e-1094719e5773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce67401-c983-4a0b-bcc7-65b298fbc3bf",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee06e075-c3da-4c04-a0d0-7338eb9be0e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1995ab6b-5679-4785-a583-6fe6424763c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d80f8d7-919d-4446-ae8d-10a08a2a0e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2c1b2f7-ef80-4b6f-803f-9acc6b4e51bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5138773c-1407-4054-afca-e2320527390f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0558716-5fb7-42ed-8c7c-07f819b51f6b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e060716-ab30-4397-b71d-1515f043a4ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6b1db0a-206f-42c1-bfe9-9410d9b54168"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd6f1ff6-7b17-4d8d-a155-58ffba535076",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8f1daa26-b31f-436f-a5ea-5f3baa4a1a13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "064439a2-429a-4b17-9c8e-df08b5885e55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10101405-28d1-4907-a50e-bb6fae86e420"
            }
          }
        ]
      },
      {
        "id": "281c1f5a-bdb3-4abb-9962-36bc7eb62852",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "898d866c-dbf2-4004-a865-24d79c5c097b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c90b7c61-970c-4634-b296-83be55f0f434",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c0a84919-3a27-440d-918d-ac9df37a992e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17302bb9-3c4a-42cf-a62d-5fb789201875",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05ca07d4-f97c-46a5-8c3a-cee47bdee640",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 338
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 466.7423076923078,
      "responseMin": 10,
      "responseMax": 3249,
      "responseSd": 427.072222925671,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666573544298,
      "completed": 1666573676660
    },
    "executions": [
      {
        "id": "e268cba3-6244-45ae-9408-1fba0d0a23e8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9745a09d-0ef7-4384-a0f1-a062d39ed6be",
          "httpRequestId": "457635b1-20a7-48ad-b166-d9bb892d89b0"
        },
        "item": {
          "id": "e268cba3-6244-45ae-9408-1fba0d0a23e8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "80d59a6f-ee69-48c2-96ed-5ee02e53b2fb",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "36a6eb6c-2994-4978-bcf7-51cc315e1089",
        "cursor": {
          "ref": "306f6dac-cee3-44b7-b112-082d2203b9f8",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "145d7c6b-de8a-4ba6-b26a-fc11a33caa05"
        },
        "item": {
          "id": "36a6eb6c-2994-4978-bcf7-51cc315e1089",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "45b31815-8d27-4c27-a961-22f706453256",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "d7e6369f-a9f7-4373-b0ec-0f7bb106c150",
        "cursor": {
          "ref": "0f237085-6bae-4b4f-9825-19c08e171470",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "dcc529c1-adf8-48d4-ad89-113b7da99313"
        },
        "item": {
          "id": "d7e6369f-a9f7-4373-b0ec-0f7bb106c150",
          "name": "did_json"
        },
        "response": {
          "id": "a8ae38aa-59e6-4675-ba8a-91cb46d325e2",
          "status": "OK",
          "code": 200,
          "responseTime": 699,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34fbf7c-d2a3-41a7-8dff-ba8d83043245",
        "cursor": {
          "ref": "4541c81a-6db4-4bda-9847-57de5997cc9a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c37b6fc4-49d2-491e-a90f-3507111f5822"
        },
        "item": {
          "id": "d34fbf7c-d2a3-41a7-8dff-ba8d83043245",
          "name": "did:invalid"
        },
        "response": {
          "id": "10783f47-89ca-4015-b575-2a83a6f9ba3b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 590,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d34fbf7c-d2a3-41a7-8dff-ba8d83043245",
        "cursor": {
          "ref": "4541c81a-6db4-4bda-9847-57de5997cc9a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c37b6fc4-49d2-491e-a90f-3507111f5822"
        },
        "item": {
          "id": "d34fbf7c-d2a3-41a7-8dff-ba8d83043245",
          "name": "did:invalid"
        },
        "response": {
          "id": "10783f47-89ca-4015-b575-2a83a6f9ba3b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 590,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e0ea1fe8-2f36-43fd-881f-ece2e2b53866",
        "cursor": {
          "ref": "65bba60d-8ba4-4e92-9225-c221c228001d",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "46411a34-48f7-4134-b9bb-9f856ae007c5"
        },
        "item": {
          "id": "e0ea1fe8-2f36-43fd-881f-ece2e2b53866",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ca30f192-be27-45fc-9ced-20989dbe4933",
          "status": "Not Found",
          "code": 404,
          "responseTime": 525,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "d20e10c6-6a69-46d5-b467-04de7b675b00",
        "cursor": {
          "ref": "42782ab5-03ed-4c9d-bf87-420380b7c9b6",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0f508d87-7377-450f-b30c-c0497eea8091"
        },
        "item": {
          "id": "d20e10c6-6a69-46d5-b467-04de7b675b00",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d28921dc-524e-41f7-95f3-f3accb8719de",
          "status": "Not Found",
          "code": 404,
          "responseTime": 458,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "53604cfe-fe87-42e0-9f12-32765f20e065",
        "cursor": {
          "ref": "d2ea5556-a359-4b39-b8ce-73ce4e7d4289",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3b0dfa93-e45d-470b-827c-c5b9efb54616"
        },
        "item": {
          "id": "53604cfe-fe87-42e0-9f12-32765f20e065",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cd603281-7e50-4495-8c6d-cf448449509a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e6fbea33-e102-4ba3-8319-572d3f23a3c2",
        "cursor": {
          "ref": "231d09d9-08cb-41d9-bd49-281fd71ea99c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3d7cca16-0fde-4d5a-a5c3-f8aa20a8befa"
        },
        "item": {
          "id": "e6fbea33-e102-4ba3-8319-572d3f23a3c2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f0e99cfc-dc4b-4a39-bd12-f50d218fd511",
          "status": "OK",
          "code": 200,
          "responseTime": 574,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e6fbea33-e102-4ba3-8319-572d3f23a3c2",
        "cursor": {
          "ref": "231d09d9-08cb-41d9-bd49-281fd71ea99c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3d7cca16-0fde-4d5a-a5c3-f8aa20a8befa"
        },
        "item": {
          "id": "e6fbea33-e102-4ba3-8319-572d3f23a3c2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f0e99cfc-dc4b-4a39-bd12-f50d218fd511",
          "status": "OK",
          "code": 200,
          "responseTime": 574,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "51f8540b-a14c-4bc2-8bc7-8c27e6590b1e",
        "cursor": {
          "ref": "01dde978-15bc-44e7-aee9-61978528a3f9",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b382d0f6-a055-4750-883a-bef1a0b6c8f2"
        },
        "item": {
          "id": "51f8540b-a14c-4bc2-8bc7-8c27e6590b1e",
          "name": "identifiers"
        },
        "response": {
          "id": "a5954bb1-e149-4259-a03f-9b44287a8344",
          "status": "OK",
          "code": 200,
          "responseTime": 603,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52de5e1b-b69b-46e4-a1b1-129081ee1889",
        "cursor": {
          "ref": "3b3bbb47-c822-4151-9380-571e0b2c2adf",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e8e8c9bd-1364-4f96-87fb-ca9463dcd8d4"
        },
        "item": {
          "id": "52de5e1b-b69b-46e4-a1b1-129081ee1889",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f2c73cdb-019c-4235-9ddc-92468bb48e4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 429,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "52de5e1b-b69b-46e4-a1b1-129081ee1889",
        "cursor": {
          "ref": "3b3bbb47-c822-4151-9380-571e0b2c2adf",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e8e8c9bd-1364-4f96-87fb-ca9463dcd8d4"
        },
        "item": {
          "id": "52de5e1b-b69b-46e4-a1b1-129081ee1889",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f2c73cdb-019c-4235-9ddc-92468bb48e4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 429,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "5ede31ba-e5cb-4bc9-b700-56871f1a9232",
        "cursor": {
          "ref": "84a6254f-1c90-4401-b860-936459ec140a",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "65aa3ecc-a521-4d73-a8cc-6362972b2104"
        },
        "item": {
          "id": "5ede31ba-e5cb-4bc9-b700-56871f1a9232",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b9c0b944-2fa7-4684-b3f4-a2fd3e86d393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 441
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "67aacec7-32e3-4194-9b60-57e809d96629",
        "cursor": {
          "ref": "ffd766e3-f8e6-451b-8d4c-e6b25717cfc5",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4e4fbb36-0335-4793-975b-35b341a3af4e"
        },
        "item": {
          "id": "67aacec7-32e3-4194-9b60-57e809d96629",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9145d279-a5f8-42fd-9c33-ce5c2d2cb5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "dcf1d8b5-3a18-4c13-be45-cd6439d34cb6",
        "cursor": {
          "ref": "7abb8ad3-9277-456d-bae8-271512249093",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "83532c7f-2404-48e9-991a-d1ef52768a4f"
        },
        "item": {
          "id": "dcf1d8b5-3a18-4c13-be45-cd6439d34cb6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ad7579cd-aa94-4bfd-b5a5-d3459c7f335b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "8680b5ed-a8bc-4e90-8f11-da8f09b99062",
        "cursor": {
          "ref": "8c96a25d-d149-4135-b266-432762fd2033",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9709a8dc-4204-435f-96f5-99929bb69b3f"
        },
        "item": {
          "id": "8680b5ed-a8bc-4e90-8f11-da8f09b99062",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c0ecb6ce-0a28-45b0-ba10-58259c0d75fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 959
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "0f894114-ee20-4d29-8ae0-cce8713c99a5",
        "cursor": {
          "ref": "21ed5c96-0522-490e-bec4-48cc52cd3616",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "13364ed6-d930-4d9c-9498-77e155911344"
        },
        "item": {
          "id": "0f894114-ee20-4d29-8ae0-cce8713c99a5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c8393f51-259d-45c1-81e8-4c363151dfc3",
          "status": "Created",
          "code": 201,
          "responseTime": 1744,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "2f98503c-d4c3-481b-94b4-87506020fbe7",
        "cursor": {
          "ref": "efa7af06-e8e3-4fe8-b841-6bde82d13175",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a986eefd-0950-44e5-ada4-4c285d0a77ee"
        },
        "item": {
          "id": "2f98503c-d4c3-481b-94b4-87506020fbe7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "44425884-6c7a-4080-b0f3-b12f56e1d1ec",
          "status": "Created",
          "code": 201,
          "responseTime": 1696,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ecd4bcc0-f83b-40a2-a784-61c1ec7f3f93",
        "cursor": {
          "ref": "6d6b6a32-05be-47f3-b11f-60594a23c72d",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f4d4525b-3788-47ad-bfce-79fff4620e8e"
        },
        "item": {
          "id": "ecd4bcc0-f83b-40a2-a784-61c1ec7f3f93",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "609e0bff-5068-47f4-8efc-84ff8441a37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 1448
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "43c84507-fe62-4e58-b272-26f99e99b032",
        "cursor": {
          "ref": "01c4e090-7c4e-41dc-a60f-133308f7eea3",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "49373e0a-2caf-4f9b-a568-ff1873087c36"
        },
        "item": {
          "id": "43c84507-fe62-4e58-b272-26f99e99b032",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e742ac4c-476b-4c9c-9885-93e98a0b77de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 1417
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "a475cb7a-4d3d-40eb-8407-f2f449a6a18d",
        "cursor": {
          "ref": "047bcbc4-83cc-47b8-9d5a-40cd1adab87a",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8009321e-3e21-420c-8dfe-923b94746071"
        },
        "item": {
          "id": "a475cb7a-4d3d-40eb-8407-f2f449a6a18d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "982bdef0-fc29-4dda-bb91-a5e55e891af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 440,
          "responseSize": 1414
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "cf457eec-606c-435a-82f2-e2ca0b932519",
        "cursor": {
          "ref": "e88e52c5-633e-4260-89ae-5cc04b044c67",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8c29522d-9955-4a22-9ace-42fdfc3d5d0f"
        },
        "item": {
          "id": "cf457eec-606c-435a-82f2-e2ca0b932519",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4ec700bd-87ff-4364-8abb-31c6d2e23b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 1416
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "1d408d9c-301c-476d-9380-c5c59a8e489e",
        "cursor": {
          "ref": "5970e7ec-7ece-40e9-ac2c-542fe3b80234",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "211dce85-a893-4d16-a935-97aec4c27f0f"
        },
        "item": {
          "id": "1d408d9c-301c-476d-9380-c5c59a8e489e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "74f9e6bc-c881-492e-9e9b-2c523a09d8ad",
          "status": "Created",
          "code": 201,
          "responseTime": 1531,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "028a225f-d019-4940-b36f-0cbce27019a8",
        "cursor": {
          "ref": "d6e89f83-5f7e-46f1-9fcb-c793026e2c22",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "44fa901b-b793-48ab-90ab-5f2218d92bbd"
        },
        "item": {
          "id": "028a225f-d019-4940-b36f-0cbce27019a8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7a562019-964d-420a-818c-014016920585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 460,
          "responseSize": 522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e902cf1b-c502-4a55-9acd-dceb125e81b8",
        "cursor": {
          "ref": "d4ed9e7c-d6da-4557-94fa-0914fb6d8445",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "efa931f5-b238-490e-988a-0acb78994cd3"
        },
        "item": {
          "id": "e902cf1b-c502-4a55-9acd-dceb125e81b8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "21e6db85-d926-481f-8bd5-d03afe78d803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 478
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "c57cac4b-74a1-4811-b422-878cd825d52f",
        "cursor": {
          "ref": "d32db272-796d-43eb-9455-2ffbd506f05f",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b5c3155a-8287-4d8b-9df9-c7a186286a86"
        },
        "item": {
          "id": "c57cac4b-74a1-4811-b422-878cd825d52f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "81fcd2d6-65d6-424e-bb6f-b70b0ce3cb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 475
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "18beaed3-7312-49d4-9410-16c1597394fc",
        "cursor": {
          "ref": "d8b664e6-0901-4cce-a8ea-0ca129340d14",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f5280b23-245d-4c0a-842b-9a57015d32e5"
        },
        "item": {
          "id": "18beaed3-7312-49d4-9410-16c1597394fc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "18513314-ed90-4c74-a685-cf17e56939e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 477
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e12f2cd5-29b5-454c-9880-f0192c8f4af4",
        "cursor": {
          "ref": "ca2f6381-edfb-45c1-b5ef-414dd7e73dd7",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "93f15409-da65-4d58-a6da-3e8c1064e314"
        },
        "item": {
          "id": "e12f2cd5-29b5-454c-9880-f0192c8f4af4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "20be3b68-e321-4b77-9a94-0f31eee6fdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "ddba2d0c-bb62-4082-b8bc-716200dbc3bf",
        "cursor": {
          "ref": "883337d3-8370-4e22-b8d9-2c3f610f8b0e",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d42c6d8c-1d3c-4053-9aed-188105370153"
        },
        "item": {
          "id": "ddba2d0c-bb62-4082-b8bc-716200dbc3bf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "068f6595-09d6-49a9-a8bb-807ab54873ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 435,
          "responseSize": 455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "31874237-be15-4248-ba74-c93d7b3866c1",
        "cursor": {
          "ref": "75b9823c-da65-48bf-8c9a-24be354d03c4",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3bf3ca6a-b6a7-41c3-81d4-38f39181b636"
        },
        "item": {
          "id": "31874237-be15-4248-ba74-c93d7b3866c1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0ff63259-87fa-49af-9176-f49de4f0eb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 757
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "b592bc64-25e7-4dd6-b1fc-1fdfc583d71e",
        "cursor": {
          "ref": "a800621a-438d-4227-9175-9352a80a050b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9ad845aa-09c6-4cde-9d37-13c38cfe05d2"
        },
        "item": {
          "id": "b592bc64-25e7-4dd6-b1fc-1fdfc583d71e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7e84b3f3-aa1c-4e89-8c43-069fa033d275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 417,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "32b58b4e-34e6-41a6-aa41-1f3fb0916f4a",
        "cursor": {
          "ref": "fa094626-da9f-4ffb-9ed5-f52692556841",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "561acf76-47f2-4cae-a4b1-7e892af8b107"
        },
        "item": {
          "id": "32b58b4e-34e6-41a6-aa41-1f3fb0916f4a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f69f8ae9-b12b-45cf-ae82-3fca752a561b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "7c405b0d-afa8-436f-92aa-69177c67d3c9",
        "cursor": {
          "ref": "ca8b0b1a-b1f9-4438-aeb4-b44d1847bc78",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d9878779-81ca-4490-9084-bc76699e14d6"
        },
        "item": {
          "id": "7c405b0d-afa8-436f-92aa-69177c67d3c9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5291b87f-e2ec-40e9-9812-d52574f9c415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "bc9dc7c6-f38f-4cb7-931e-0d2d6000efca",
        "cursor": {
          "ref": "36248988-55b8-4f15-9c65-cdac77d08b6d",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a3bca463-2377-4f54-a112-f0074435024b"
        },
        "item": {
          "id": "bc9dc7c6-f38f-4cb7-931e-0d2d6000efca",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e5a6274b-6931-4f21-b355-b8fa16f94f93",
          "status": "Created",
          "code": 201,
          "responseTime": 1530,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "a5189761-ca04-4ec3-b9a5-026f72216240",
        "cursor": {
          "ref": "b7856ad6-d2ec-4a41-92c6-f927ff77310a",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0d5c4331-3046-4e74-b2c7-eea432fffea9"
        },
        "item": {
          "id": "a5189761-ca04-4ec3-b9a5-026f72216240",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "41f9b358-18d6-46a6-af2e-a2c00b7b7405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 174
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "c7fa76f9-83fd-400b-a0d3-9f46021d9d37",
        "cursor": {
          "ref": "4f2184a9-ca7b-4398-a4cf-586630301eb3",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3d89a5a7-cd06-4630-9f0a-bc54e432c4cb"
        },
        "item": {
          "id": "c7fa76f9-83fd-400b-a0d3-9f46021d9d37",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c414d461-fa78-4f76-84d2-08973b9fc2cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 408,
          "responseSize": 802
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "8aab9b4c-991a-43a8-9811-071eee3b783a",
        "cursor": {
          "ref": "48261b84-e4bb-45e9-8869-d0f096edb293",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d0b436e4-8c04-485b-94d8-9c46506c07f7"
        },
        "item": {
          "id": "8aab9b4c-991a-43a8-9811-071eee3b783a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "705e6561-09bc-4f97-be87-bff7edcdeecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 792
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "0fe3fad8-0af7-4170-a183-37403b9fd4b9",
        "cursor": {
          "ref": "125359cc-870d-4141-9e8b-d64ce392bb08",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "89cc2d68-6bb0-459a-8a22-d304a227b8c7"
        },
        "item": {
          "id": "0fe3fad8-0af7-4170-a183-37403b9fd4b9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f1a3eb4d-133f-4a2d-adda-efb50197da7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "a9a05376-d82e-4908-b617-251f07b2a8eb",
        "cursor": {
          "ref": "c61b74b8-3a97-43d8-b28c-86024c773e22",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ac7e3643-ba98-4cea-a47a-a46c0ad603c9"
        },
        "item": {
          "id": "a9a05376-d82e-4908-b617-251f07b2a8eb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "03263b95-0998-4bb6-a43f-a0148bbf198d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 464,
          "responseSize": 791
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "5e0b4855-9cb5-46f3-b8b9-d72c97aad48b",
        "cursor": {
          "ref": "0db46337-437a-4791-b7bf-a08f2f6835c6",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "adb671c6-b3ec-4b75-aaa3-dbaa9a78d0d1"
        },
        "item": {
          "id": "5e0b4855-9cb5-46f3-b8b9-d72c97aad48b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "464be2be-cbda-4e70-a83c-dd24ddc390e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "bc03e66a-7cea-4f61-a50c-688d6ec83098",
        "cursor": {
          "ref": "9920d1bb-084e-43b2-8302-07d685155596",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "10d5437b-141a-4075-9361-ae9492d9ee71"
        },
        "item": {
          "id": "bc03e66a-7cea-4f61-a50c-688d6ec83098",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "64bd951c-9d88-4af2-8ae2-17ebfd8f6e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 407
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "97cc0ff0-1891-4ce4-b5ea-33616483ad53",
        "cursor": {
          "ref": "9e9f72fb-6253-4034-ac54-ca53de4d2227",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e4433c24-1a87-483c-8723-1f9d7d5c2a3c"
        },
        "item": {
          "id": "97cc0ff0-1891-4ce4-b5ea-33616483ad53",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9a2114cc-2a1a-400c-a0cd-2d19057cddeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 421,
          "responseSize": 753
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8341867e-6fda-4594-bbb8-c736abe14ed2",
        "cursor": {
          "ref": "dca161b6-6ebe-458c-88d5-22863a77d51b",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4a942ee8-bf41-4097-b7c8-3883d428a773"
        },
        "item": {
          "id": "8341867e-6fda-4594-bbb8-c736abe14ed2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f46dedf7-b0be-42ce-ab18-0f0b46a0f24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a9f64b4a-f45c-45ef-a65e-98b27aadfce3",
        "cursor": {
          "ref": "30073f22-309b-4ba6-9745-8e0f3df5f6a6",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fd57f1cd-736e-48bf-8fd5-df70ea2b2794"
        },
        "item": {
          "id": "a9f64b4a-f45c-45ef-a65e-98b27aadfce3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8ace3901-b47a-4b43-b95f-39bdadf141c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "460596ce-ff85-446d-8dcc-5925ed57ae59",
        "cursor": {
          "ref": "daa87e9f-e7f0-4398-8d37-5bcd5e5e08ec",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "390e4caf-d30d-41a5-af22-1a2b6073b56e"
        },
        "item": {
          "id": "460596ce-ff85-446d-8dcc-5925ed57ae59",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "913c21a7-371c-4dc0-87f0-4b22d3250d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 681
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "fd6bcf83-f521-47b8-b671-0d5ad6595caa",
        "cursor": {
          "ref": "d374ed1d-70e9-49a8-8f49-4fb86d3520d4",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "de9429c0-0fe4-4300-810f-d55106a0d557"
        },
        "item": {
          "id": "fd6bcf83-f521-47b8-b671-0d5ad6595caa",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b275f156-becb-4214-ab6c-264d4e0271b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 411,
          "responseSize": 930
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "33b41cf1-e821-4bf4-aed5-48527505b6d4",
        "cursor": {
          "ref": "009c36ef-4ed0-4b82-a3cb-8b770178b7fa",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "dba96409-3290-4df1-9837-7ddc33a45d3d"
        },
        "item": {
          "id": "33b41cf1-e821-4bf4-aed5-48527505b6d4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3cc64e99-90c7-49b0-be66-af42ace397a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6405b6c3-d465-40d8-aaa8-364bc44acdb5",
        "cursor": {
          "ref": "414b3482-7b07-4186-9b57-a8e314a02d72",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fb981eee-4938-4eac-9bdc-beb5e05ce615"
        },
        "item": {
          "id": "6405b6c3-d465-40d8-aaa8-364bc44acdb5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "20fd0a6f-2ee7-4721-93cb-e5f47b34900a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 476,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4064af47-3893-46e2-be87-94e2c10fea45",
        "cursor": {
          "ref": "91cfa4ab-3f9a-4b45-bfad-14920ffa6055",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c23c2e04-5f56-4adf-8574-75dc08f5d225"
        },
        "item": {
          "id": "4064af47-3893-46e2-be87-94e2c10fea45",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2d1a3105-e4e5-4368-b974-60ef321d902d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 409,
          "responseSize": 778
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "311be8ad-7352-4a69-93b9-363bcfd90500",
        "cursor": {
          "ref": "17bd59e5-5349-46d1-bf7e-57b306013eef",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ae996edd-b9f2-4e59-b019-dac7d61ed06c"
        },
        "item": {
          "id": "311be8ad-7352-4a69-93b9-363bcfd90500",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "89f221e9-1563-414d-a73c-84d324c130a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "557c7610-adbd-46b1-9b1e-d8eff5c43fd4",
        "cursor": {
          "ref": "26d09bb3-b837-4a7b-96e9-aa591f38733a",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dea6b058-9759-4f40-ac18-2d89fc2580e9"
        },
        "item": {
          "id": "557c7610-adbd-46b1-9b1e-d8eff5c43fd4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e489da1d-12da-4c43-9c94-0514fdf6ace2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 704
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "da7b4cb7-d826-40d1-9915-295ec4e10b63",
        "cursor": {
          "ref": "2bf7de8d-a71a-4a1a-b0a9-a9f527ef1e12",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d9e63931-8fa2-4899-9e1a-8e005823f6e1"
        },
        "item": {
          "id": "da7b4cb7-d826-40d1-9915-295ec4e10b63",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d29d8ae2-5e64-482f-869b-91d23b02239c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 706
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "02aafe89-a32c-43ae-b6e8-8fb3cb921699",
        "cursor": {
          "ref": "c95fb1f3-6b08-40a7-b81b-2a774dcb8f9c",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fc76fe40-acb3-4eda-95be-f88275aa080c"
        },
        "item": {
          "id": "02aafe89-a32c-43ae-b6e8-8fb3cb921699",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3199b5b0-29ea-4062-bcee-9eef1e32bd55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 481,
          "responseSize": 955
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "83db334e-9c09-4f38-ba88-8b85694a4571",
        "cursor": {
          "ref": "962e60af-9181-489f-8182-9405b7bdd626",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1055cf75-a2ab-4745-9c2a-4c5a0efbe52b"
        },
        "item": {
          "id": "83db334e-9c09-4f38-ba88-8b85694a4571",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e48b9021-9f82-4929-aeee-c94e288d5049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 679,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3bf1a4d5-a63a-4080-8d71-80e1a5876a1f",
        "cursor": {
          "ref": "9bdcd729-89a6-4e9e-97ca-123b38779c1c",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "acab50c3-54ed-475b-b116-9c5c93c93e85"
        },
        "item": {
          "id": "3bf1a4d5-a63a-4080-8d71-80e1a5876a1f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "95240f34-6243-45bb-9c05-ec3c58bb3f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 465
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b0b6a4e4-e28e-4ad0-80e9-3e79e111fbd4",
        "cursor": {
          "ref": "35a5fc6f-b255-412f-a4ef-cbb6df0e845e",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4b2cc7a7-917e-43cc-830d-ff729f18aa7c"
        },
        "item": {
          "id": "b0b6a4e4-e28e-4ad0-80e9-3e79e111fbd4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b99af1bf-701a-437c-877f-6eea76767af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "a959b5bb-6b9f-4af1-bfeb-2867ad7cb19b",
        "cursor": {
          "ref": "43916ff0-c528-41db-9ab6-06a08dacd37e",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a7e4f88e-bceb-4aca-b0b4-0c6451728b0a"
        },
        "item": {
          "id": "a959b5bb-6b9f-4af1-bfeb-2867ad7cb19b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a473dfa5-7e5b-4b42-8c11-f70aabcd8377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 451,
          "responseSize": 470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "6d4585fc-04bc-4dfe-9fdc-c8835f896352",
        "cursor": {
          "ref": "fce90d32-cf65-49bb-8d6e-6bf3ccb9b1ff",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "913c896c-e463-4e48-8126-2ad02824f990"
        },
        "item": {
          "id": "6d4585fc-04bc-4dfe-9fdc-c8835f896352",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "428cbacd-d800-4963-b75a-dd3100acd0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "5abc77e4-a400-4507-9a7f-b4af3ab584ee",
        "cursor": {
          "ref": "2cd8c12d-fa9e-4e4b-9bc0-25973d04afb2",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "16b5b2e3-51e3-467d-9ff3-d8caea23ae87"
        },
        "item": {
          "id": "5abc77e4-a400-4507-9a7f-b4af3ab584ee",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "23ada7e4-2115-4125-a584-aefec4319526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 496,
          "responseSize": 469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "39ba7ed8-12a0-4cbc-8d91-1c13e83f1df7",
        "cursor": {
          "ref": "a2a9a649-0aae-4375-a93a-b1013f4705f0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9434aafe-69f3-479b-bbd7-5301303badf2"
        },
        "item": {
          "id": "39ba7ed8-12a0-4cbc-8d91-1c13e83f1df7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a46f4d96-7b6b-497b-aa1c-0677a627c3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "c609ba1c-e60c-4b79-8881-dca42a043020",
        "cursor": {
          "ref": "2782b618-cfd9-4924-9701-b36746c71748",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7d72490e-f66b-4963-b5b3-8070f498a50e"
        },
        "item": {
          "id": "c609ba1c-e60c-4b79-8881-dca42a043020",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "420bc571-4aab-4d4f-b021-5fc1a8ad3c2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 449,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "eaa96357-1ad9-4a54-9bba-c296139ad651",
        "cursor": {
          "ref": "332d714a-62fb-4f74-ba14-0586dc384c45",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "949d95a7-909f-40f3-904c-1e55fff701b7"
        },
        "item": {
          "id": "eaa96357-1ad9-4a54-9bba-c296139ad651",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "713437d4-32ee-4fe6-b354-64e77f0d2d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "a40f2c55-58d9-47ac-a93d-e852e4bc1dda",
        "cursor": {
          "ref": "ff0df15f-c203-4a0c-95cd-fe50bd13f25c",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1696be05-f9a9-4563-a152-345aac434379"
        },
        "item": {
          "id": "a40f2c55-58d9-47ac-a93d-e852e4bc1dda",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4a57bf04-6787-4115-82f7-1def2445ebee",
          "status": "Created",
          "code": 201,
          "responseTime": 1798,
          "responseSize": 653
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "f5b2ec85-02f7-45ee-a586-20f47b2d8e24",
        "cursor": {
          "ref": "fd2be9f6-be6a-412b-8b25-1e2eebb66244",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0fa7210a-2684-405b-993d-97a689c2c8c8"
        },
        "item": {
          "id": "f5b2ec85-02f7-45ee-a586-20f47b2d8e24",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e913ec17-6b94-4554-920a-f4039356375f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 935
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "836b3e83-a1db-4a2d-8b37-38a1e95000d1",
        "cursor": {
          "ref": "491701b4-ca7c-418d-b5b7-1fe0a3aaf7c3",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "bd81a0d8-f943-4939-b884-50691f1709a7"
        },
        "item": {
          "id": "836b3e83-a1db-4a2d-8b37-38a1e95000d1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d94d55aa-f9b6-48b8-85a4-8eea5000f482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 932
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "bc707b89-8f74-4ffd-b143-5f4453a2f16a",
        "cursor": {
          "ref": "487425b4-8b63-4b99-af7c-f15b0ce287c3",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c023d818-e1cc-456a-9bd7-96886f7437c2"
        },
        "item": {
          "id": "bc707b89-8f74-4ffd-b143-5f4453a2f16a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d7a7eb53-0e3e-4a3b-b87d-85ba550735a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 934
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "9cb29848-2d7a-4dcc-9718-76b2cc2be27f",
        "cursor": {
          "ref": "3f9419da-02a4-42ce-b3be-eeab8465bca4",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b5f0f745-59c8-44da-ba5d-95c568fd7523"
        },
        "item": {
          "id": "9cb29848-2d7a-4dcc-9718-76b2cc2be27f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a91f0c28-1243-49b8-a1de-f7c298a8cc3c",
          "status": "Created",
          "code": 201,
          "responseTime": 1588,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "634674cf-2e25-42c2-9a7f-eab55c12af6d",
        "cursor": {
          "ref": "2e7af393-3951-403b-96b3-8db268b1506f",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ba4d41ef-78ab-4f3d-a4d7-b551c9b2e0c6"
        },
        "item": {
          "id": "634674cf-2e25-42c2-9a7f-eab55c12af6d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e4dd8435-de42-4be4-8b38-231148aa663e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 1273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "32d32a77-27c6-4162-a3f9-db7da8335c18",
        "cursor": {
          "ref": "5d6f8143-c33d-4900-aa7b-9fcefaac094e",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "afe7d4e4-dedd-4407-b42e-16635ede1ff7"
        },
        "item": {
          "id": "32d32a77-27c6-4162-a3f9-db7da8335c18",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "47d0664e-b933-4ad1-895a-15f58afef2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 1259
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "42b4cd42-c649-4752-ab82-82e7c207b099",
        "cursor": {
          "ref": "59a19cd0-4d04-47cb-95f5-51e43b2233df",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2a582972-8eed-429e-8ccd-efe8ebd38c55"
        },
        "item": {
          "id": "42b4cd42-c649-4752-ab82-82e7c207b099",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9dd8f8ed-c4a3-48c1-91da-42ac68f0ee54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 474,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1e9e7936-5750-417e-91e0-4df72283ec92",
        "cursor": {
          "ref": "c55540af-33f5-4db8-9a91-e8828efe37b6",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d8a27846-f617-4a5e-8e35-5391b687abcf"
        },
        "item": {
          "id": "1e9e7936-5750-417e-91e0-4df72283ec92",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8092bd0e-a942-4129-b39a-dc780d18663e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 427,
          "responseSize": 1258
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7fd1fc9e-b853-47ee-97d2-f1dc41e7d3cb",
        "cursor": {
          "ref": "e6870753-3047-4187-b9b2-414ed7da3728",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "279be722-64e7-4050-a8cc-a8e420e87227"
        },
        "item": {
          "id": "7fd1fc9e-b853-47ee-97d2-f1dc41e7d3cb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "35cc82df-0da4-4c07-8443-61cea1e45f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "f5f43c90-9674-4abc-917d-b9af1c0553eb",
        "cursor": {
          "ref": "70d0d95b-f3c2-41d7-a640-3edc823dc432",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2b70f824-59d3-4d41-8d93-c41656e5e3ed"
        },
        "item": {
          "id": "f5f43c90-9674-4abc-917d-b9af1c0553eb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "db4196ae-18ab-4018-ac72-ba061df9de29",
          "status": "Created",
          "code": 201,
          "responseTime": 1663,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "39b076af-b41a-4cbb-94c5-527a8b7f391d",
        "cursor": {
          "ref": "6a953bb6-ef59-428e-b418-d293453e136a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b74b2b70-11f4-4dd7-879b-c812585a2963"
        },
        "item": {
          "id": "39b076af-b41a-4cbb-94c5-527a8b7f391d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cc7dff05-5c6d-423b-b3f3-b22009f964a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 417,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "c52eaac2-24a6-472f-ba97-4653b2370d87",
        "cursor": {
          "ref": "a88e4da3-6ac7-49dd-9265-0d1b66a3badf",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b41cdd50-9a6d-4d14-924e-ea19ee5859c4"
        },
        "item": {
          "id": "c52eaac2-24a6-472f-ba97-4653b2370d87",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c021e33d-e93a-44c5-887f-5361011d3c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 451,
          "responseSize": 463
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "f86448f5-8535-470d-ac9e-6eab63a59444",
        "cursor": {
          "ref": "807b605f-0d49-4db5-b332-1ed604a8691b",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "64d7d60b-5e3f-47b7-a189-c1bf921a7275"
        },
        "item": {
          "id": "f86448f5-8535-470d-ac9e-6eab63a59444",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a0f1bee2-b915-4811-b298-92f45915a371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 419,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "5001aabc-e363-4a48-a430-43cae10d8423",
        "cursor": {
          "ref": "c185fc54-3177-451a-bca7-28ff2640ec51",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c8d7bffd-c903-4b4b-893c-158003ccbe12"
        },
        "item": {
          "id": "5001aabc-e363-4a48-a430-43cae10d8423",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "861cd70d-f0e5-4a4e-9a7c-232a4fc1dcee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 421,
          "responseSize": 462
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "10115ddd-604d-4fca-b3a3-c168f3c64e32",
        "cursor": {
          "ref": "73ab70ea-ee63-4fbe-a015-3ee90aba3bc8",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5947a564-8328-4381-bd42-64e4b608eff1"
        },
        "item": {
          "id": "10115ddd-604d-4fca-b3a3-c168f3c64e32",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "43de22d1-19a5-4031-8d4f-a7b43ad4a155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "674db4ad-2baf-493e-9c76-281e41e62973",
        "cursor": {
          "ref": "3a20eeaa-eb9f-4538-adc0-1292795e982b",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "99df9b0f-e9ff-4f3e-a52f-39ea01e43952"
        },
        "item": {
          "id": "674db4ad-2baf-493e-9c76-281e41e62973",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "21f6ac0d-abd9-4807-bd6d-16a8fe99092d",
          "status": "Created",
          "code": 201,
          "responseTime": 1831,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "62c2a368-4ad3-462f-afc9-92bd07fb5330",
        "cursor": {
          "ref": "b32eec37-1acb-4145-8284-bc38fc760628",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6c6104be-e32b-4233-a984-845ca94cda2d"
        },
        "item": {
          "id": "62c2a368-4ad3-462f-afc9-92bd07fb5330",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "30252319-0d91-4224-bc6e-5f5591ea195a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 512
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "53359db2-937f-409a-b1f4-691895c33ce1",
        "cursor": {
          "ref": "89f6f26b-4fe4-4417-be0a-fe43c92e8171",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "426e5901-a372-4049-845a-c22bb1ec69c7"
        },
        "item": {
          "id": "53359db2-937f-409a-b1f4-691895c33ce1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3db58ef2-a83c-4ecf-aeff-4f81087fdbc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 493
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "1da85e2f-ea31-4d06-bd28-bd724e4e37c5",
        "cursor": {
          "ref": "898d7d01-eeee-40a5-98d1-d2f973cbe16e",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "082bb0f2-9fd7-47d7-83cc-87c1e1a1377f"
        },
        "item": {
          "id": "1da85e2f-ea31-4d06-bd28-bd724e4e37c5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fea13f99-f464-4b7e-8744-b373d5265268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "8c7639f8-db1d-4035-9c9d-3bd515aaf491",
        "cursor": {
          "ref": "f66ceab7-5e8b-4249-8e1c-665ee8635c21",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3e9e3eaa-9101-4fa6-8846-c17a5d5e30d8"
        },
        "item": {
          "id": "8c7639f8-db1d-4035-9c9d-3bd515aaf491",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "125c170a-9214-4232-84b6-0ca9ee2a14f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 492
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "5d998ad8-476c-4590-9ba2-8378f13ff503",
        "cursor": {
          "ref": "c17155e3-0145-4e96-9e46-00a94db2a985",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2c4669a5-2c24-4dac-b8ad-dc71f29cd15b"
        },
        "item": {
          "id": "5d998ad8-476c-4590-9ba2-8378f13ff503",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8ae0be08-f77b-4b7a-930b-86a686c1a1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 419,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "df6e11dc-db6c-4192-9af5-12ff71813ece",
        "cursor": {
          "ref": "0d844947-782a-4287-825f-e4a2270d4214",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "292acf76-07af-4be5-a685-fc8869a6ef08"
        },
        "item": {
          "id": "df6e11dc-db6c-4192-9af5-12ff71813ece",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f0dc1e13-a22b-465e-9d7c-262e086fee63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 461,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "a2580d27-3715-4303-9b17-628f19528d25",
        "cursor": {
          "ref": "5d9b741a-43ad-4e0e-aaed-363b29bb6f4f",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "996fcbf0-ca44-414b-a454-39b2279efb27"
        },
        "item": {
          "id": "a2580d27-3715-4303-9b17-628f19528d25",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "71bd6533-8f18-40bf-bb87-de97c9370ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 551
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "7753c982-f471-48d0-9ffb-9917e5d3ce4a",
        "cursor": {
          "ref": "9b7883bf-9ab2-4144-8bcb-de9e345081c0",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4e1de677-dc22-4973-a9fc-d7d36f51fad6"
        },
        "item": {
          "id": "7753c982-f471-48d0-9ffb-9917e5d3ce4a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ecd3f7f1-aca8-45d3-ae3a-e271ef4db167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 532
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "b61c94f3-e051-4cfb-9f26-9de4ddf07ab9",
        "cursor": {
          "ref": "1376deaf-dc0a-4f50-975e-f21465b75f87",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "75a9f030-00bd-46ac-ae3a-6b5af3ea5ceb"
        },
        "item": {
          "id": "b61c94f3-e051-4cfb-9f26-9de4ddf07ab9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e7f63595-d751-499b-9ef2-7331204619c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 781,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "01354084-42d5-4372-b386-df68cfee5e93",
        "cursor": {
          "ref": "5b652e02-4874-42ba-9994-8c180b11601e",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a82e5d31-924e-4d42-bd9e-5c9d44a39c15"
        },
        "item": {
          "id": "01354084-42d5-4372-b386-df68cfee5e93",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1b22dec1-205f-48aa-a8d2-8d7ed768985a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 919,
          "responseSize": 531
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "fc57b1fb-a2e8-47a9-a1ed-5fae9fbf6bb2",
        "cursor": {
          "ref": "7eda50c3-a722-4ad0-8186-380e1dfd0392",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "da917dba-dc99-4b4f-9b66-26031efdebbe"
        },
        "item": {
          "id": "fc57b1fb-a2e8-47a9-a1ed-5fae9fbf6bb2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b30b2ba6-6835-4839-b98a-40750c28f252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 736,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "bd28abf9-56d9-4b4f-a744-fe85d884c2d4",
        "cursor": {
          "ref": "c989b28d-f381-4cbd-b47e-adb66cdf9890",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a72521ee-0712-4b6f-a892-2f3a840167d0"
        },
        "item": {
          "id": "bd28abf9-56d9-4b4f-a744-fe85d884c2d4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "90ccb077-8bca-4b86-999e-aa07b0adb1b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2892,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "fcaf70b2-758c-4553-9759-97eb710ec9fc",
        "cursor": {
          "ref": "b488410c-2479-4aad-8538-896fa128b03d",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6e4e09f6-30ac-4799-a29c-d712b1efa75c"
        },
        "item": {
          "id": "fcaf70b2-758c-4553-9759-97eb710ec9fc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ea883611-a55d-49c4-a3ec-21e46556dbcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 751,
          "responseSize": 582
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "8f4b9c26-6a55-4dcb-a631-1c6630d79813",
        "cursor": {
          "ref": "71fff78e-b1e9-4afe-9c7a-2f6f4392a008",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "98986ce8-a6d4-4c97-8b8f-99d8a61cf645"
        },
        "item": {
          "id": "8f4b9c26-6a55-4dcb-a631-1c6630d79813",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d75d5dac-b44a-4b98-85ce-5576a1090b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "02841c12-b120-4cfe-9857-9c8de95bd311",
        "cursor": {
          "ref": "2d424c6d-63a8-43c4-a3d1-91307e7bbe39",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "461c0b45-b9f4-457a-bd25-862dd12fd18e"
        },
        "item": {
          "id": "02841c12-b120-4cfe-9857-9c8de95bd311",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e6c8ed3d-854f-4e62-99b2-8ba17a6b2282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 516,
          "responseSize": 556
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "2b02ee1f-3d7f-4943-a1de-087d47f9c8cb",
        "cursor": {
          "ref": "e35a07a9-5b0a-4776-a639-165b20e18bf5",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1611f502-8626-4608-9992-38362890ff43"
        },
        "item": {
          "id": "2b02ee1f-3d7f-4943-a1de-087d47f9c8cb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c54acd97-922e-40b4-9d1c-2c5cedfee9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "794c2fe5-41f8-4e9f-befe-427ebb7bd505",
        "cursor": {
          "ref": "bf376e67-b532-4ddd-b6a9-754b997f35cb",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "86668def-ded5-4a74-b220-00a135d9d41c"
        },
        "item": {
          "id": "794c2fe5-41f8-4e9f-befe-427ebb7bd505",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "dcd4c87a-ea2f-4c74-930d-b35fd66a1683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 687,
          "responseSize": 580
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "73e103ae-7342-4925-877e-52cc4ca6784a",
        "cursor": {
          "ref": "a3e1d2c4-8543-49d2-8a4b-20a36b57e309",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b36c93b1-724d-4719-be9f-8db55bfbd547"
        },
        "item": {
          "id": "73e103ae-7342-4925-877e-52cc4ca6784a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "764025c0-bf36-4882-95da-9d8806fb6ddd",
          "status": "Created",
          "code": 201,
          "responseTime": 2316,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "a34274f4-8ed5-435d-a2d0-218b657e1723",
        "cursor": {
          "ref": "ca653967-3feb-47da-9830-eb43a800f88b",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "642b15e2-73d4-4f21-91b1-b2a88e6fdcf7"
        },
        "item": {
          "id": "a34274f4-8ed5-435d-a2d0-218b657e1723",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c265543d-f9c8-471a-b67e-806dd835441f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "1eeb60b9-963a-4b99-a2d3-37ce609ca0ad",
        "cursor": {
          "ref": "748ca78d-c1c8-46a3-a942-d30b14cc6fac",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d31215bc-2f70-45da-aff8-91945b004688"
        },
        "item": {
          "id": "1eeb60b9-963a-4b99-a2d3-37ce609ca0ad",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ab167722-b71b-43e6-be93-3bd9c7926856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 455,
          "responseSize": 589
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "1af33e27-b689-4133-95f1-4efa84756d11",
        "cursor": {
          "ref": "34e4e1d7-79ed-40eb-848d-e2fc8a3cddc5",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2d97a7a0-01e2-470e-bc1f-f89c57b3779a"
        },
        "item": {
          "id": "1af33e27-b689-4133-95f1-4efa84756d11",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c7d07ec4-b20b-4f01-bb5d-69375213e220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 508,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "b49d4cdf-014e-40ae-b505-e256debcee6f",
        "cursor": {
          "ref": "32885243-6d0d-41e2-a9a1-7d46ae114953",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4cf42d3e-a045-4f82-9ffb-173543c5c817"
        },
        "item": {
          "id": "b49d4cdf-014e-40ae-b505-e256debcee6f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3b52eb77-5d19-45a7-a94d-bb99bbaa16a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 522,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "058ef1c1-4005-437d-8eed-1911cb3d75f9",
        "cursor": {
          "ref": "8e4ae9ea-f135-45d7-8370-f711c18ea2c1",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "08a79566-ab07-431c-8923-76e8a92cd6d7"
        },
        "item": {
          "id": "058ef1c1-4005-437d-8eed-1911cb3d75f9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e1ddc85f-664c-4e93-9c89-eaa6e8eb9d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 608,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "410cbe66-e7d0-477f-8ec9-e10ff950bcf5",
        "cursor": {
          "ref": "98976eca-cd11-4475-a4af-bc712afd2303",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5f133fc4-3267-4451-b75a-f7e1764a2b2f"
        },
        "item": {
          "id": "410cbe66-e7d0-477f-8ec9-e10ff950bcf5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2966e6df-80ec-42c4-bda9-36124951da4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 728,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "2673ecb1-e482-4065-87cd-f114a97f9754",
        "cursor": {
          "ref": "9ee89c14-5021-4764-8a97-4a63016bee6e",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b489f4c0-a037-4881-a97f-70d663d0bbe8"
        },
        "item": {
          "id": "2673ecb1-e482-4065-87cd-f114a97f9754",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "06d2878a-95cc-4b58-bc02-b0bce76d7c03",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "226869b7-fcb5-4a85-b1f4-28fc156e5e5c",
        "cursor": {
          "ref": "9e9322a6-a157-4eaf-bdc4-9397b21bc05a",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0fc4b2f1-77ce-49e2-8f94-e195f5a67d49"
        },
        "item": {
          "id": "226869b7-fcb5-4a85-b1f4-28fc156e5e5c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "87cbfbf6-7b3b-4b52-b262-dffc66e104cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 922,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "d263916b-9e53-48ca-9a29-586c751065b0",
        "cursor": {
          "ref": "43de63c9-aa67-4ab0-b975-239ff7f3c07f",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a74427fd-ab8e-49f6-9eae-e29b5ddb28f4"
        },
        "item": {
          "id": "d263916b-9e53-48ca-9a29-586c751065b0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fc798887-8892-4535-bdc6-27b9cd0c9b8a",
          "status": "Created",
          "code": 201,
          "responseTime": 3249,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "675363ce-cd03-42b7-9f7f-ff5caaa78ca3",
        "cursor": {
          "ref": "8076d7ed-faed-43b1-895b-5db7da7d7d76",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5fbdb6da-10a0-47de-8a0a-c914c2c4256b"
        },
        "item": {
          "id": "675363ce-cd03-42b7-9f7f-ff5caaa78ca3",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "badd6f44-80fd-4f33-8639-c7ced36e78ff",
          "status": "Created",
          "code": 201,
          "responseTime": 1803,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be90eba-cbea-477a-8d69-d20e3cfdeec5",
        "cursor": {
          "ref": "077e8681-cecb-4735-a35a-f0a1b3f46717",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ac702562-38f7-4028-a21b-4978ff0e73f4"
        },
        "item": {
          "id": "5be90eba-cbea-477a-8d69-d20e3cfdeec5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4c3f5fcc-7b50-4910-8fc3-898001c15a10",
          "status": "Created",
          "code": 201,
          "responseTime": 1709,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0925e039-2afe-4831-aba5-c9aa1a384858",
        "cursor": {
          "ref": "5a83a06e-e49d-42de-a163-697a8e6b2fcb",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "372efb70-67fa-4cac-aa58-6b165f5528b0"
        },
        "item": {
          "id": "0925e039-2afe-4831-aba5-c9aa1a384858",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "66a9a297-4cc9-488e-aa83-4cac30fc4e34",
          "status": "Created",
          "code": 201,
          "responseTime": 1581,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bee9018-880e-487a-93df-1af74ec30311",
        "cursor": {
          "ref": "dba42391-dd13-403a-8440-69fb102cbd72",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "15491977-18ea-4637-88f9-66ca715d9601"
        },
        "item": {
          "id": "5bee9018-880e-487a-93df-1af74ec30311",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8fd21b59-4a63-4d3f-b538-da8fa24c5b61",
          "status": "Created",
          "code": 201,
          "responseTime": 1868,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92438ab-e7d1-40b8-9663-903ff2d73424",
        "cursor": {
          "ref": "4ffcff79-c415-4bf4-8f57-35a4f0d75836",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c20c4ad1-1f46-42dc-af61-7b1ec93a75a4"
        },
        "item": {
          "id": "d92438ab-e7d1-40b8-9663-903ff2d73424",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "21898148-6b90-492e-b34b-bb14c452ad3c",
          "status": "Created",
          "code": 201,
          "responseTime": 2204,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53f53e7-4b65-4442-b012-a49eb39332d7",
        "cursor": {
          "ref": "069ee0e9-f422-410e-baa8-be94b21ea5f1",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7f16df62-c064-4f76-a522-bfbae9a834cd"
        },
        "item": {
          "id": "c53f53e7-4b65-4442-b012-a49eb39332d7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "629d562c-10d8-46f2-a595-1872df3850a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 457,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "c53f53e7-4b65-4442-b012-a49eb39332d7",
        "cursor": {
          "ref": "069ee0e9-f422-410e-baa8-be94b21ea5f1",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7f16df62-c064-4f76-a522-bfbae9a834cd"
        },
        "item": {
          "id": "c53f53e7-4b65-4442-b012-a49eb39332d7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "629d562c-10d8-46f2-a595-1872df3850a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 457,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "d761c8fa-1fa6-4949-86d5-6554074a96b3",
        "cursor": {
          "ref": "891ca3dc-15a2-4be5-ae4e-3cc52d31faca",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "22a4bdb6-b910-4394-b889-809aaa5a6433"
        },
        "item": {
          "id": "d761c8fa-1fa6-4949-86d5-6554074a96b3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "03a80fd8-eea0-4939-a243-b8d92c033856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 327
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "1a1361e7-8c67-4c17-bcbd-16b64ef0672e",
        "cursor": {
          "ref": "a3c802af-ff75-4c9e-87ef-970b9e9e5f23",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7ddaa6a7-df00-4d9d-8ebd-c53c3cef1330"
        },
        "item": {
          "id": "1a1361e7-8c67-4c17-bcbd-16b64ef0672e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7be25815-6c0f-4f17-b69c-8eee9bb76eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "83da2f4e-8e8d-4f22-a984-b022e0f77059",
        "cursor": {
          "ref": "aed25db9-fa49-4705-aeb5-a34ac301ab26",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f35d3da9-0e45-475d-a328-fdebc44ccff3"
        },
        "item": {
          "id": "83da2f4e-8e8d-4f22-a984-b022e0f77059",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "50b4882e-af9d-4699-935a-99387f9e6c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 490,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "cd714a04-4528-4d51-8324-ca141c1fad4f",
        "cursor": {
          "ref": "ff366fcb-a93d-4eb9-9c21-ce00ed1e9b35",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b619d590-2965-46e4-9b60-8234d305863e"
        },
        "item": {
          "id": "cd714a04-4528-4d51-8324-ca141c1fad4f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3ea0647e-aacc-4e9a-8c85-93cd8e904313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 282
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "3cc91d2b-0585-4771-8d37-1ebf7de9bdf2",
        "cursor": {
          "ref": "ccd04b1f-732c-48cb-85ef-2edc10b0556e",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7815fe3c-1352-4d56-ae98-853f25578040"
        },
        "item": {
          "id": "3cc91d2b-0585-4771-8d37-1ebf7de9bdf2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "957b8a54-a432-48cf-b363-22d5a70759f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 489,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "21957d82-9f63-49fe-8dbd-880063da25d9",
        "cursor": {
          "ref": "2a0bbabf-6ee7-456a-98b2-f362ba25ee5d",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c613a979-5ee0-4f24-855e-ee1f29e6ecc5"
        },
        "item": {
          "id": "21957d82-9f63-49fe-8dbd-880063da25d9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bbbd2dda-e1b6-4053-8616-4da99911de3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 433,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c44d437d-eb3a-4dbc-b246-46eb42123222",
        "cursor": {
          "ref": "24554513-23d9-4e4a-b674-539c97a112ed",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a5ce8015-8168-42e4-a893-e5537a236926"
        },
        "item": {
          "id": "c44d437d-eb3a-4dbc-b246-46eb42123222",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "90b2ab15-94bb-4f25-940c-f694149cdc5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 426,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "3d2e13e5-a714-41d2-ac3c-b6c8213e3318",
        "cursor": {
          "ref": "5632ba26-6dcc-4618-96f7-c2ac879801fb",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "42694dc3-405e-4025-a817-e7b9e1fb36fa"
        },
        "item": {
          "id": "3d2e13e5-a714-41d2-ac3c-b6c8213e3318",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dd2d2c06-dc75-40ab-9391-506aa7427cfb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 436,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "99f2cf18-5c21-4fb2-a4fa-1e4c607cd147",
        "cursor": {
          "ref": "cb6e2db3-84ae-4c5b-9a41-6c26284edeab",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "cf603829-258a-4e9c-bbcd-dbcccf2e438d"
        },
        "item": {
          "id": "99f2cf18-5c21-4fb2-a4fa-1e4c607cd147",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0bd7fab7-09bd-43c9-9359-5e34de4f0e15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 429,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "dd182fe9-e5a8-4910-8bf7-a62dbaeb7a2f",
        "cursor": {
          "ref": "61b65214-17a8-4e29-bbd1-07cfb8754642",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3284829f-82d2-4477-b0bd-4b233ea01c69"
        },
        "item": {
          "id": "dd182fe9-e5a8-4910-8bf7-a62dbaeb7a2f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "568e7b16-b460-4771-ac3d-6b17887def70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 421,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "625f0bf8-0b3f-48be-9eec-66132b29ed97",
        "cursor": {
          "ref": "d1cbf04a-c90d-4c5d-8a7a-09eb0b2d1d52",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e0219b52-6a5e-40ea-a859-b0aaa8b6fe57"
        },
        "item": {
          "id": "625f0bf8-0b3f-48be-9eec-66132b29ed97",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a9e94e41-6b2d-4d00-84d1-e5597387f6d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 447,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "dd229483-a58f-4813-8891-24a8f6d48876",
        "cursor": {
          "ref": "747bda82-76ed-49f8-bc22-f98f52550ea2",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5c7c3d15-f5ed-45c4-aeaf-9f6fe1d44f52"
        },
        "item": {
          "id": "dd229483-a58f-4813-8891-24a8f6d48876",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "83ee8d4b-d083-46cc-beae-f47c63cf9b46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 415,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f9f236a3-cfc9-4183-b329-64f67904a25a",
        "cursor": {
          "ref": "62c6f1bc-edfe-498b-bf28-95de55dff14c",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bd24bd76-338f-4767-9be3-a1b97be1c51c"
        },
        "item": {
          "id": "f9f236a3-cfc9-4183-b329-64f67904a25a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d44b59dc-d948-4a6e-9615-0a287e028ea2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 541,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "c165bcff-ad7e-4f95-93d1-9252b9813860",
        "cursor": {
          "ref": "8a3277b3-09b5-471b-aab2-45f54666c71c",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "92d4829e-02d2-44d3-94bc-34e11b113be3"
        },
        "item": {
          "id": "c165bcff-ad7e-4f95-93d1-9252b9813860",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "256f0ea7-ac0c-4a83-b280-595ec940d4e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 471,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "0ce5b230-26b3-41ec-89e3-c11363129869",
        "cursor": {
          "ref": "1823306c-826d-4d9a-9181-2efd7b0321b5",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2ff08a66-a442-468d-a7a2-8075e972335d"
        },
        "item": {
          "id": "0ce5b230-26b3-41ec-89e3-c11363129869",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "95703db5-8271-4510-bc50-569bb7cd26f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 610,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c4d0caf2-9e61-4407-853c-62d3227ea055",
        "cursor": {
          "ref": "07de6815-cad7-4a99-8a77-ab28c12e9597",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0252bc34-3449-47a2-a55f-252fd60900e2"
        },
        "item": {
          "id": "c4d0caf2-9e61-4407-853c-62d3227ea055",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dee63b94-4a5f-4d7b-ace5-2face03628c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 453,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d0e749df-9c65-4728-8f5f-1b9219090ccd",
        "cursor": {
          "ref": "67efe4cf-4e49-487f-b7e4-fff2f53133d7",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "87404ecb-3537-4600-b043-409f1df481ae"
        },
        "item": {
          "id": "d0e749df-9c65-4728-8f5f-1b9219090ccd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "32078d0d-e72b-4613-bbfc-e1845560e466",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 459,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f407c526-1b03-46bd-adab-8ae318699437",
        "cursor": {
          "ref": "765bf751-bc26-4ab0-9498-179e789552a4",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "921c9750-f7a3-49f7-ba98-0aaea3bf7c00"
        },
        "item": {
          "id": "f407c526-1b03-46bd-adab-8ae318699437",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9888a910-93a7-4f58-939d-7a9707117ae7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 420,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "b4501e67-d90d-4a58-a3b7-de467ec436f2",
        "cursor": {
          "ref": "ec8020fa-d681-44a3-a110-1d6ca554aefc",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8559e4f1-434b-4070-91d2-eda0ebee1a89"
        },
        "item": {
          "id": "b4501e67-d90d-4a58-a3b7-de467ec436f2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d282c7ab-0632-4db4-9a15-32120544dc22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 420,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f5d80913-f45e-4e3a-a263-d4859d977b7d",
        "cursor": {
          "ref": "190bcbce-eb79-4b7f-858a-960f5b287ddc",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "93b0afe5-dedb-4392-a6df-5b2a472898ca"
        },
        "item": {
          "id": "f5d80913-f45e-4e3a-a263-d4859d977b7d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "230bf5cd-95a3-4c93-846e-d3f0f6f268e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 442,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "b6bdd672-1a42-4aee-af53-3640e7fb3bdb",
        "cursor": {
          "ref": "d22df0ac-dcde-408b-873d-592a1e4e2c36",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "617a81d8-539d-4214-887a-230f1d2da728"
        },
        "item": {
          "id": "b6bdd672-1a42-4aee-af53-3640e7fb3bdb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7731f673-0369-49b3-9177-7206621736c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 451,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "6a09ce25-3fab-4a3a-81d0-d8f7b7200979",
        "cursor": {
          "ref": "555b099f-9fb4-4590-908b-562cfee7a4e6",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "99f6fe61-0423-47a5-8996-8735364cd4f6"
        },
        "item": {
          "id": "6a09ce25-3fab-4a3a-81d0-d8f7b7200979",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c09bed40-8bb9-4509-994a-f0cca3160b0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 431,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "591766e7-1b10-4308-a621-2bf95887abc8",
        "cursor": {
          "ref": "09df4ed0-4e2f-44eb-af32-64c5b63e88dc",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e6bbb7e3-609d-4a6b-8538-70cc5927ad19"
        },
        "item": {
          "id": "591766e7-1b10-4308-a621-2bf95887abc8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e2830fa7-c5da-4fd5-8742-9023d1833a4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 444,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "02793fda-01b8-4ff0-a72a-a62f229b7aa1",
        "cursor": {
          "ref": "5592df8f-46bf-4648-8c36-3761e1883878",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "440dd118-3df6-46e9-a527-00e908dabcc4"
        },
        "item": {
          "id": "02793fda-01b8-4ff0-a72a-a62f229b7aa1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e5ca2c73-7df7-4f5e-b5fe-e158a3166dbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 524,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c4c7acf7-c184-420b-8c4b-25c436066b06",
        "cursor": {
          "ref": "ba88aaaa-8b85-4fc1-8458-35eef63bb2e9",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bf10e4bc-2eb6-4944-b283-115ed6522931"
        },
        "item": {
          "id": "c4c7acf7-c184-420b-8c4b-25c436066b06",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2194089b-a731-486c-a4e8-fa3af361c374",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 454,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "da6ad454-4ba4-497e-8cf9-9a225e068058",
        "cursor": {
          "ref": "84c2327a-a834-4d2c-9771-75db388538a1",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a4366fde-2806-4eef-bebe-9ab4295ed61c"
        },
        "item": {
          "id": "da6ad454-4ba4-497e-8cf9-9a225e068058",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e3631f86-8689-4e1f-88e7-968fc35aac42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 463,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "dc4d6eb4-54c9-456e-9893-2771b463ff10",
        "cursor": {
          "ref": "31c23ce1-81fb-494e-adfa-3d66bb4bf8c6",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "78c14a3d-a7cc-4e07-9c52-d33e0e72ba95"
        },
        "item": {
          "id": "dc4d6eb4-54c9-456e-9893-2771b463ff10",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cf00a9a4-a469-4ab9-b92f-15e9d58fb939",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 912,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "870933a7-d2e3-42e5-88e7-1f546c567ec5",
        "cursor": {
          "ref": "9a51f269-b92d-4686-9028-e8be0f91d383",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a69c03f7-f90e-47fc-b011-516573424067"
        },
        "item": {
          "id": "870933a7-d2e3-42e5-88e7-1f546c567ec5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "874dfdea-0b54-4213-b482-8759e55ef53a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 820,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "289836b3-3a45-4338-b99f-4e8d5c576670",
        "cursor": {
          "ref": "702659f4-cfe8-4acc-9165-be4d4a8330f2",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e01a748b-ce5b-4b90-b3db-39d7fd507c2e"
        },
        "item": {
          "id": "289836b3-3a45-4338-b99f-4e8d5c576670",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8184a14b-a84b-4e2f-9edb-ad07459856a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 692,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "ddeca9a9-2709-4200-a65e-2babe4ac2475",
        "cursor": {
          "ref": "a724944d-bc43-47fa-a43e-1e55837e7fc5",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8826f700-4e20-4bd1-95f4-b2c9947cd491"
        },
        "item": {
          "id": "ddeca9a9-2709-4200-a65e-2babe4ac2475",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3689ef8b-fe11-4d4d-a729-ede34c6b9252",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 664,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bc27ccd9-004e-4478-a106-26a004b52b44",
        "cursor": {
          "ref": "8ae706d8-78b4-49f8-8084-4f41dcfc3619",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d17524ff-2c4a-41bd-82e4-19b8658dc029"
        },
        "item": {
          "id": "bc27ccd9-004e-4478-a106-26a004b52b44",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "25147cc7-ffc8-4e0d-9045-f93dabcd8a04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 769,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e68faa94-c697-4591-a148-71366d3786b7",
        "cursor": {
          "ref": "a4cd283a-5eac-45ce-978b-051dfdd837ca",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5a7e4cdc-7f89-4851-b9a8-dbdc495fb1aa"
        },
        "item": {
          "id": "e68faa94-c697-4591-a148-71366d3786b7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b7d039a5-66e2-488d-93e9-4dcf086bb572",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "41a1d284-658d-46d8-8d56-986850e87291",
        "cursor": {
          "ref": "e9293f5b-53ae-4b5a-ae39-34f1f05b8487",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "74c0afa6-5121-4ded-b493-0ad38c1ddd92"
        },
        "item": {
          "id": "41a1d284-658d-46d8-8d56-986850e87291",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "11298084-f235-4d26-b215-44fb587aea17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 723,
          "responseSize": 206
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "bc747672-18d5-46b0-8aee-1769cc35c428",
        "cursor": {
          "ref": "8ef2540c-b2a2-4f57-9155-b4345e1a9acb",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "32d9b5da-9566-4d93-b74d-ae5658565004"
        },
        "item": {
          "id": "bc747672-18d5-46b0-8aee-1769cc35c428",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "59dacb36-3183-4a9f-b79e-64e6e6f60f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "bc747672-18d5-46b0-8aee-1769cc35c428",
        "cursor": {
          "ref": "8ef2540c-b2a2-4f57-9155-b4345e1a9acb",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "32d9b5da-9566-4d93-b74d-ae5658565004"
        },
        "item": {
          "id": "bc747672-18d5-46b0-8aee-1769cc35c428",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "59dacb36-3183-4a9f-b79e-64e6e6f60f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "b6a18bb0-c151-4970-85ca-6e4ef8486ef8",
        "cursor": {
          "ref": "7e6568db-c0d3-4b39-a052-698a79b8bd93",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "344e932f-04a4-4130-9507-706451ec2ae5"
        },
        "item": {
          "id": "b6a18bb0-c151-4970-85ca-6e4ef8486ef8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0c1a7a98-3499-40c4-98ee-5560ad39bb70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 234,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "42146de9-f0b8-4237-915d-5d54818225b1",
        "cursor": {
          "ref": "d9232adb-da8b-4fbe-8985-8a99f28017ff",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "316f3d9f-166d-4fdb-8779-eba95bbceb56"
        },
        "item": {
          "id": "42146de9-f0b8-4237-915d-5d54818225b1",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "85f3813b-3c5f-4bd3-b739-a8a5af86f9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "d167c018-8eb6-49b2-bdda-c6a1bf38868c",
        "cursor": {
          "ref": "c0cd6216-f610-4312-9db4-b50671b84e50",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "19e3f83d-57fd-4346-be64-407ec923f592"
        },
        "item": {
          "id": "d167c018-8eb6-49b2-bdda-c6a1bf38868c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "90b1e9b0-f4f0-4bdb-843a-870666af7dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 540
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "48cf878c-3959-4ba4-85ab-1aa0f3106d71",
        "cursor": {
          "ref": "6e77be87-db73-491e-a2f8-d347854ee8d6",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8238a180-8e85-4208-9b5a-bbcda21fc115"
        },
        "item": {
          "id": "48cf878c-3959-4ba4-85ab-1aa0f3106d71",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d39acb88-c9ee-4e52-b01f-3a7286d87d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 392,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "deaae0b6-178c-473a-8a92-a89d268f39ef",
        "cursor": {
          "ref": "c56f7538-3be1-4a7f-bf65-24cd76b5d7fc",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4331b72b-4d41-4321-9338-8b5bfef44019"
        },
        "item": {
          "id": "deaae0b6-178c-473a-8a92-a89d268f39ef",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "188af735-b62d-4dc9-ba3b-2d1a9cbabcf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "afc6a8bf-4589-4e07-be61-835bed7688e1",
        "cursor": {
          "ref": "4a1c7374-018e-45f8-a335-80da8a607cdd",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "37bed5a2-8586-4bb6-b7eb-92fca69bee0c"
        },
        "item": {
          "id": "afc6a8bf-4589-4e07-be61-835bed7688e1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fbab86b6-4aca-41fc-88e1-3b8317755c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 1154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "a16eff88-30e0-435f-bb96-fe02cd9e7eb3",
        "cursor": {
          "ref": "11a33149-b944-4249-a463-6626e6d2169a",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "13883b7d-c89e-49f9-85fb-5c363831c6fd"
        },
        "item": {
          "id": "a16eff88-30e0-435f-bb96-fe02cd9e7eb3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9784eb66-6d2f-4a42-bf9d-07c88e2f8899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "d258d371-0f0c-4de4-9647-08609c8e8fda",
        "cursor": {
          "ref": "f7e2388a-f8c3-4721-9be8-91b6856be194",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d34c40ba-1cff-47e0-8424-657e1b19b568"
        },
        "item": {
          "id": "d258d371-0f0c-4de4-9647-08609c8e8fda",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c6f40b6b-703b-4927-a7b8-7b92872719de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 1699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "321ccace-284c-484b-b068-54de0f722d1a",
        "cursor": {
          "ref": "8e523c52-2623-437b-bdef-fb852e2704c5",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0286c085-6e4c-41dc-906b-236027aa4df2"
        },
        "item": {
          "id": "321ccace-284c-484b-b068-54de0f722d1a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a155eba0-bcc0-4644-9e92-5cd2a20caf8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "45b9624f-bc84-4a6b-82f8-ca68ef23f7ad",
        "cursor": {
          "ref": "83e85f2f-7a4f-4f82-9af8-a9d150fdbd7b",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b888bc64-c7a1-424e-b801-8867dc63a3df"
        },
        "item": {
          "id": "45b9624f-bc84-4a6b-82f8-ca68ef23f7ad",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e97058c4-7164-424c-b292-743d950cf623",
          "status": "OK",
          "code": 200,
          "responseTime": 285,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "32809b73-95a1-4308-b647-4ad75eb02a4f",
        "cursor": {
          "ref": "2cf87225-0e35-42ba-b852-d6c5c44d9ec6",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "91221ef5-9231-4751-b3f6-b3a68eeb8cb6"
        },
        "item": {
          "id": "32809b73-95a1-4308-b647-4ad75eb02a4f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7ee47e7d-d5f6-4bf0-a04f-2d205cf474c8",
          "status": "OK",
          "code": 200,
          "responseTime": 277,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "ba97d241-27a8-4c19-b791-fe3e53d93428",
        "cursor": {
          "ref": "65790e8a-df82-4ca2-a8ec-d2d0d4bc4569",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e40f0bed-b0d5-4701-a72a-a321c3bfe4c4"
        },
        "item": {
          "id": "ba97d241-27a8-4c19-b791-fe3e53d93428",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2bb9c861-3c85-4528-b480-3d68403e7a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 2187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "438a16b7-dc52-425f-b74f-24b96daa82b3",
        "cursor": {
          "ref": "8dd655ee-6bae-4690-9a38-52c2a56b0e6a",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b3605451-6764-4c86-ac3d-f4e81fe67a76"
        },
        "item": {
          "id": "438a16b7-dc52-425f-b74f-24b96daa82b3",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "960ec8a3-3463-4f1a-9690-e87534cd8a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "97246b69-3ad5-4518-b6d2-59f619f0abd0",
        "cursor": {
          "ref": "99486474-5100-4dc3-813f-1e1ce2e54637",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "076a8d7d-7bc5-49d4-aac0-06e344c7e25c"
        },
        "item": {
          "id": "97246b69-3ad5-4518-b6d2-59f619f0abd0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c7798cc1-50a0-4be3-83a8-665540dfefcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 2176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "60490d57-1226-45a6-8587-9a482a4fd0c6",
        "cursor": {
          "ref": "2219e96f-eee2-4372-895a-578ce19067f5",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7b301df8-7d81-44a0-aa07-627477cdb87f"
        },
        "item": {
          "id": "60490d57-1226-45a6-8587-9a482a4fd0c6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "71406ba3-c818-4e6d-86d5-e03975aac8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "395b7fee-c630-4e73-9c7e-e1ec34585204",
        "cursor": {
          "ref": "d9983bd8-950c-48e7-baf2-6a875a94859e",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fe5997fd-9af0-48d0-b86f-82402be95e1c"
        },
        "item": {
          "id": "395b7fee-c630-4e73-9c7e-e1ec34585204",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5f2eea44-71db-4bbd-9523-ed31274c312b",
          "status": "OK",
          "code": 200,
          "responseTime": 269,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "1c7e970a-d4f5-4e31-a244-dbe0e2be2200",
        "cursor": {
          "ref": "e6ba575e-5d1c-410e-8486-bb1533338864",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d9362199-020d-4fb9-88be-ff3d30be90fa"
        },
        "item": {
          "id": "1c7e970a-d4f5-4e31-a244-dbe0e2be2200",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "96650955-33f0-466e-a724-c667da41c00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 1235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "a37669e1-8f32-44db-8543-4c43f1c2d801",
        "cursor": {
          "ref": "aed84127-a508-4bd6-b185-9cb9d1f817da",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "662133b1-1226-424b-b956-90ec8eb6836c"
        },
        "item": {
          "id": "a37669e1-8f32-44db-8543-4c43f1c2d801",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2fdaeef2-87e2-495b-bc35-b1e5cc5dee22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 1191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3e891492-7993-45e5-bf27-e1e65007bd72",
        "cursor": {
          "ref": "bf93b7eb-4c8b-4d21-9517-85162ee2db11",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "59601634-cc5c-4800-8c04-c1942be94b95"
        },
        "item": {
          "id": "3e891492-7993-45e5-bf27-e1e65007bd72",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7aaa7f73-932b-447a-9c90-756a81922f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 1189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "e33e991b-7266-452d-a8e7-ae30389f5515",
        "cursor": {
          "ref": "350b7688-b1b0-4092-9087-de52cf8b367c",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "67d1df85-7531-40f1-aa23-c106d2d69c09"
        },
        "item": {
          "id": "e33e991b-7266-452d-a8e7-ae30389f5515",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cc9ee0c4-723e-4e6e-87b5-889a89bfbafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 1190
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "67d7ef3a-82ca-42b3-baf3-76a841529451",
        "cursor": {
          "ref": "39ebb7a4-c446-423e-a70c-c4f65971269b",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "184c8fd2-d604-4262-985b-5197902ba14c"
        },
        "item": {
          "id": "67d7ef3a-82ca-42b3-baf3-76a841529451",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4d34bf3a-f8fd-4eb1-9332-eb4b74012c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 1241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "5de51e39-5341-4e79-83ef-9edf1e60e3f4",
        "cursor": {
          "ref": "71feb9f0-4991-45ac-9aa2-24fb9a77e964",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "90b4d797-f90b-4716-b1fd-aa33f12e1105"
        },
        "item": {
          "id": "5de51e39-5341-4e79-83ef-9edf1e60e3f4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0d10872b-8764-4b1b-ba1c-85079fad4783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 1168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "fb443cb2-1ec0-45f1-a59c-4acd3d177ad7",
        "cursor": {
          "ref": "2a0ef20b-5366-4671-8e59-cc1dd0ea983f",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7b7836a4-c370-49ed-aad8-e78551313a5f"
        },
        "item": {
          "id": "fb443cb2-1ec0-45f1-a59c-4acd3d177ad7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bb48c55f-de26-47d4-af41-c9d9d0a93ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "0ff6a5dc-b10b-4939-bf67-be40d9a50c99",
        "cursor": {
          "ref": "912f2490-8a50-4036-b81c-d25a76a9b76a",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "aee6c6f7-80ac-4f0f-beab-62f02d8cfccd"
        },
        "item": {
          "id": "0ff6a5dc-b10b-4939-bf67-be40d9a50c99",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "97bc559e-a1cf-451d-ac95-065b297ce020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 1488
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "49338a9e-7c54-4457-8598-50796dc0f4df",
        "cursor": {
          "ref": "e084df9f-1b75-4f65-a888-ec5b6b0a6a89",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d587cd8b-0ea2-4f62-b1ae-25b639b0d46b"
        },
        "item": {
          "id": "49338a9e-7c54-4457-8598-50796dc0f4df",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "79985171-75b1-4ed6-aa50-ff5290dd34ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "8d5e2899-2d88-4bf4-b9ab-e86a1218fc86",
        "cursor": {
          "ref": "d33a1223-28e4-4d2c-a116-b444d27d7dd5",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "70afd58d-0473-41bc-8f7b-ec00a247ea5e"
        },
        "item": {
          "id": "8d5e2899-2d88-4bf4-b9ab-e86a1218fc86",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "69187280-d1f0-4c29-9fa4-6aa7a58a31f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 1515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "5d84da4e-f92c-4671-8352-e22029fc3b0a",
        "cursor": {
          "ref": "d08372f6-151f-4a7e-aa6c-26af943e55ca",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "63c09e79-53d9-4eaa-b594-f850993f183b"
        },
        "item": {
          "id": "5d84da4e-f92c-4671-8352-e22029fc3b0a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6538830c-8b14-453f-bcbe-f3ce1ad86545",
          "status": "OK",
          "code": 200,
          "responseTime": 319,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "3c8fe265-b5a0-403a-9831-75457f39b466",
        "cursor": {
          "ref": "70bc197f-ede7-4ddb-893e-ebef1ee95925",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fd3d69b2-e470-418f-8dd7-e7a0cdc84886"
        },
        "item": {
          "id": "3c8fe265-b5a0-403a-9831-75457f39b466",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "63e8b52f-c144-4b9f-9b09-fc03e3610497",
          "status": "OK",
          "code": 200,
          "responseTime": 245,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "4725b9d2-ab5d-483b-8e91-76c27905d706",
        "cursor": {
          "ref": "a577a272-6d85-4b58-a18b-45dbc92655b8",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e5a3cea4-7e41-4f87-a51e-733ab52612fa"
        },
        "item": {
          "id": "4725b9d2-ab5d-483b-8e91-76c27905d706",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e588db12-d931-418a-880e-5b420dc73135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 1534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "40f6a50a-a176-4390-a905-61beea3383f4",
        "cursor": {
          "ref": "36955115-6d3d-4c6f-9b88-fa47264aa7c4",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ba2a746f-15e7-46d8-801c-0eae514ea028"
        },
        "item": {
          "id": "40f6a50a-a176-4390-a905-61beea3383f4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0d375225-1dd8-421a-921e-d630314b2edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "3d75fd33-517c-448b-87de-41fdf0f1e843",
        "cursor": {
          "ref": "c0e088e7-d673-423d-a505-71090dbf30ef",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ad45ad5b-7b90-4de0-a24a-976d0026ceaf"
        },
        "item": {
          "id": "3d75fd33-517c-448b-87de-41fdf0f1e843",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c2a2eb22-9a44-4ea9-95d0-3061ceb6f806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "b6ab53e7-953c-4fb3-98b1-cd167e79cee3",
        "cursor": {
          "ref": "c18e00da-7049-4809-ab1d-0f23a33d004d",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f042f410-50ad-4e48-8346-7fe8861d729e"
        },
        "item": {
          "id": "b6ab53e7-953c-4fb3-98b1-cd167e79cee3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2e1fb3b9-51f3-4f6f-8fec-93364c08d7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "1cdfcd7c-6837-4a86-be10-9ffedd53072e",
        "cursor": {
          "ref": "df87afeb-c5f7-4492-95af-b3b226715d0f",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8be110cd-db0e-4aa5-a11e-6fd2df97d973"
        },
        "item": {
          "id": "1cdfcd7c-6837-4a86-be10-9ffedd53072e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "40017dd6-3095-4866-b3fb-35b66613b4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 1550
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "2c9b7d3d-96d8-4ebc-982a-df1c348296e0",
        "cursor": {
          "ref": "61c05f50-d415-4c44-9292-8cec2e60cf4b",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9df643b2-ced6-4baf-9bf6-6fae802ac8f9"
        },
        "item": {
          "id": "2c9b7d3d-96d8-4ebc-982a-df1c348296e0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "85c18fb5-5ad3-4a47-8e5c-22cb353ff50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 1136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "64e09d22-9fe5-4b33-be8b-6cae2a87e8c2",
        "cursor": {
          "ref": "5ea35382-a09c-4623-bcc6-66b0294a74e4",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b2e05671-4b5e-4a4f-bd55-ad7dd628a50d"
        },
        "item": {
          "id": "64e09d22-9fe5-4b33-be8b-6cae2a87e8c2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "de54e733-1104-4df1-a521-c1860003ea30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 1445
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "0cb52c64-5530-439e-a664-573724f6e670",
        "cursor": {
          "ref": "1ab97927-98b6-432f-9acc-5c90f2e30c17",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1b5ed95c-9dd1-4b30-9185-96d8052297d4"
        },
        "item": {
          "id": "0cb52c64-5530-439e-a664-573724f6e670",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2c7c5b3b-dd6c-439a-a55c-ceaa74ae6ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 1431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "cf6b6da4-c601-4e1c-9c4e-790d42cbbcbf",
        "cursor": {
          "ref": "4561b421-917f-42cc-a7f5-f2bbe07fb652",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "94327a37-eb9f-44cc-8ee7-0d71b0ea8531"
        },
        "item": {
          "id": "cf6b6da4-c601-4e1c-9c4e-790d42cbbcbf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a4a8931a-3507-43dc-8a5e-4fa647933b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 1429
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "5910ea22-9ea2-49c2-8db0-e3310901dce4",
        "cursor": {
          "ref": "5461edf1-6ba0-4bc0-a73b-2bf9e31150f8",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "741f3940-c5b9-426d-b8bb-8267b6334e04"
        },
        "item": {
          "id": "5910ea22-9ea2-49c2-8db0-e3310901dce4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a304a7b2-866e-4410-8bf6-ada286c93b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "6763ed10-33ec-4ae6-a510-3fe66af7d3f0",
        "cursor": {
          "ref": "ad4c5cfd-0c4a-4027-8eff-ed0a20234a42",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1008ebc0-e7be-472d-9dc7-6fc076c941ca"
        },
        "item": {
          "id": "6763ed10-33ec-4ae6-a510-3fe66af7d3f0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "52de661a-dbdf-480e-868b-a40608eec61f",
          "status": "OK",
          "code": 200,
          "responseTime": 295,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "e8ef1925-b5e7-4646-9712-1948e9047d40",
        "cursor": {
          "ref": "104c61a4-5d43-4f29-a245-5392efcaae0f",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5afe2ed4-d378-4d39-beb5-409d69750352"
        },
        "item": {
          "id": "e8ef1925-b5e7-4646-9712-1948e9047d40",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "09cc0eff-07a0-4f97-ac3d-dfb94289fb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 1470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "40bbcb28-d03e-401f-8cad-c07b5304aca1",
        "cursor": {
          "ref": "45964bf0-7edc-4424-87c0-fc5f536c1153",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "07c273c8-c30e-4ce1-8606-8f308964fb0d"
        },
        "item": {
          "id": "40bbcb28-d03e-401f-8cad-c07b5304aca1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "09be2a60-35d0-45f9-84f1-492d2320062e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 1456
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "5e7f7d12-98bb-436a-9ad2-b0a1badb6055",
        "cursor": {
          "ref": "220c412b-f140-4355-8f8a-c748ecf447db",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9bfa5a6f-5eb5-42f5-9ecb-875a5c0e6ca6"
        },
        "item": {
          "id": "5e7f7d12-98bb-436a-9ad2-b0a1badb6055",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "eb8c4457-8f9e-4d2e-a9f7-7faf3443fcd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 1454
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "51eaa41d-7320-4bfe-bcec-104d56e26bca",
        "cursor": {
          "ref": "bc0ed8a1-4e9d-4efc-9f4d-19d80e8776a3",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9d373db8-cb04-41e6-a9c9-1ba2054e1a77"
        },
        "item": {
          "id": "51eaa41d-7320-4bfe-bcec-104d56e26bca",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3acecc87-bae2-4164-b668-453b40fbecff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 1455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "263aa515-17d1-4ed6-9bec-1688c14e932f",
        "cursor": {
          "ref": "d8241afb-3b38-4251-a281-34651eb830af",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "aa9b478c-702f-4b10-99fa-1c3e8560ebe3"
        },
        "item": {
          "id": "263aa515-17d1-4ed6-9bec-1688c14e932f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "dd6c49dc-3bb0-437e-a986-7879ebe3e2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 1476
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "1cf2b4bb-c29c-4f97-99ff-3eff1357bfd0",
        "cursor": {
          "ref": "dedbacef-5be0-4040-94fe-c4719e73f3af",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ecb7b945-76db-4fbb-8c29-2234269dabad"
        },
        "item": {
          "id": "1cf2b4bb-c29c-4f97-99ff-3eff1357bfd0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9c16548b-d9fd-4910-a452-d66d697b0faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 1178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "20c87b8c-7e94-4c6a-a002-87afe515aa31",
        "cursor": {
          "ref": "1b9473ba-4f55-404b-b13e-380791925c1f",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7ed35de1-b6e0-43a7-9b17-904e2063f953"
        },
        "item": {
          "id": "20c87b8c-7e94-4c6a-a002-87afe515aa31",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "62ec323d-0787-40e3-ac60-e5c81fbc1c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 1202
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "6ee0d3c2-2f2f-4f85-a9f7-1d5715f5f867",
        "cursor": {
          "ref": "618e6c72-9d08-4557-83fa-ab9687a82f70",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cb34efe1-ac96-455e-be4b-ef32b1e80071"
        },
        "item": {
          "id": "6ee0d3c2-2f2f-4f85-a9f7-1d5715f5f867",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "dabfd48f-21c5-4214-bb8f-f6bd42d35c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 1183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "7a0e6a28-2e9c-4fd1-8e3d-91643481f000",
        "cursor": {
          "ref": "34ac3ad0-e265-4073-829c-5596a97ede30",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "976be578-b269-49d7-b526-5d1375d1737d"
        },
        "item": {
          "id": "7a0e6a28-2e9c-4fd1-8e3d-91643481f000",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d1932c59-ac9f-4b09-926e-3c3099745203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "071c71d4-bc3f-4f9d-97b9-8302ea3301aa",
        "cursor": {
          "ref": "101965ac-8228-43b4-988d-313f676a5640",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8b91bee1-5aef-4cf4-bd4c-07e2ccef7512"
        },
        "item": {
          "id": "071c71d4-bc3f-4f9d-97b9-8302ea3301aa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ff5fb375-f78f-4004-abee-f2fe0f1a4131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 1182
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "d2004f2a-109a-498a-a7a0-ef1bf4f72f7d",
        "cursor": {
          "ref": "730f0d79-b8ec-4443-beaa-bf44f83eb078",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f4877352-3302-4996-98ab-75e235486e39"
        },
        "item": {
          "id": "d2004f2a-109a-498a-a7a0-ef1bf4f72f7d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0fbc175f-e2af-435d-8acf-9f292ee64f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 1208
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "05ba2fbb-2709-4a02-b805-660de3a1b541",
        "cursor": {
          "ref": "bd7b926e-9925-4d20-a468-fcb85e3a2ee8",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "25bf1032-8e9e-4c65-be5e-db7b62ace757"
        },
        "item": {
          "id": "05ba2fbb-2709-4a02-b805-660de3a1b541",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6951c340-1c67-4ef5-ac8c-eb31568900e2",
          "status": "OK",
          "code": 200,
          "responseTime": 288,
          "responseSize": 333
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "2595c549-9c87-4e2b-a504-ff1f8e25ce1c",
        "cursor": {
          "ref": "0f619435-1672-4933-b313-cad06f050324",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "987943ff-5233-4146-92bd-2996300ded28"
        },
        "item": {
          "id": "2595c549-9c87-4e2b-a504-ff1f8e25ce1c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "92ba8f09-e952-4ad0-8be3-b93a364b8e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "007bf38a-5f89-4cc2-81cd-e11b78c885ba",
        "cursor": {
          "ref": "96eecb60-9af8-4ba2-8f8c-5c3fcd896a27",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d0f0dd1c-4c15-44eb-86c3-68ef9cb88c19"
        },
        "item": {
          "id": "007bf38a-5f89-4cc2-81cd-e11b78c885ba",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0fdd5949-d5de-4578-a0fe-8b60d6780f62",
          "status": "OK",
          "code": 200,
          "responseTime": 295,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "924eb45c-1f2e-4fde-8f56-c8b1f834f99d",
        "cursor": {
          "ref": "003510fd-8d22-4d0f-a15f-270a67cc9227",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f7f6128c-8648-4663-b121-3c4d84411691"
        },
        "item": {
          "id": "924eb45c-1f2e-4fde-8f56-c8b1f834f99d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8ceacf10-08f8-4a72-93cc-a9b9a8268d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "e2b7aa81-7659-4874-b6ad-db9468a51e0d",
        "cursor": {
          "ref": "bc521663-f392-4dd4-947e-116a55bbe2b4",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7caf78c1-91ec-49ab-8e38-c2c3bcf7c8b4"
        },
        "item": {
          "id": "e2b7aa81-7659-4874-b6ad-db9468a51e0d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b4e72380-7eaf-4b06-a99b-d6b66f4d3cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 1654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "94f6a5ad-d854-4a3c-a64e-f5e8ada9fb0b",
        "cursor": {
          "ref": "0e377454-4712-47e1-8584-ceac7a4d67b8",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fd2ca126-2d8c-46e0-b72e-1519eaff72f2"
        },
        "item": {
          "id": "94f6a5ad-d854-4a3c-a64e-f5e8ada9fb0b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bf7858b6-7a1e-44eb-b925-1731d8edca3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 1655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "0a9e27bd-b638-47eb-be57-32be9b76220a",
        "cursor": {
          "ref": "9592457c-72b3-4453-9549-44d00c71f657",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a7ab27c1-978e-42c6-a689-746d1c2d23b2"
        },
        "item": {
          "id": "0a9e27bd-b638-47eb-be57-32be9b76220a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bf6592c4-d1bc-4af1-b0c2-01228200320e",
          "status": "OK",
          "code": 200,
          "responseTime": 321,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "216e0378-b443-45a2-922c-6ff52c359aa8",
        "cursor": {
          "ref": "aaa76fb8-841c-48de-bf6e-06040b305546",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "31afba2b-c23c-4ab6-84b6-6c7bccbf9497"
        },
        "item": {
          "id": "216e0378-b443-45a2-922c-6ff52c359aa8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e20b7c02-5345-44ff-86e9-6c5787bd8519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 2014
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "24b45377-e7a0-4eaf-85ed-734baa6f28b1",
        "cursor": {
          "ref": "03d4eddc-569c-4e88-bb7a-dd90f813420e",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cfe79f7d-7e9d-4bec-a31a-886432dbf2f1"
        },
        "item": {
          "id": "24b45377-e7a0-4eaf-85ed-734baa6f28b1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "df1b2c7a-6728-4534-b2ad-80726789cb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 2000
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "7355a429-159d-45e1-acc1-89dcbb7a4faa",
        "cursor": {
          "ref": "deab616d-37ea-4405-a98d-5ce637f0b55d",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8caa2ad0-4d69-4827-825f-34dc235b0984"
        },
        "item": {
          "id": "7355a429-159d-45e1-acc1-89dcbb7a4faa",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "99dfe81b-9628-4250-8a4b-4c13cb07210a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 1998
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "47a7d0f1-ee41-4778-b5ad-78ef881b83c1",
        "cursor": {
          "ref": "16342aa0-4cbd-4a81-a532-bc8ced8a3571",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b6bf022d-99f0-4cd5-8b43-d642497e368a"
        },
        "item": {
          "id": "47a7d0f1-ee41-4778-b5ad-78ef881b83c1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3d7a31d0-24ba-4fa2-bde5-05dc649f9d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 1999
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "ed68df70-e9a4-4af7-acf9-7f1192712733",
        "cursor": {
          "ref": "6a98ec0a-cfc8-4b57-9b00-966124c6f885",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e8a1c045-9fdf-464f-8c1e-0cd74d583d66"
        },
        "item": {
          "id": "ed68df70-e9a4-4af7-acf9-7f1192712733",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5ba6c818-81eb-43a9-861f-22fc313fc9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 2020
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "109118f8-bdd6-492e-bec5-2a8e119190c3",
        "cursor": {
          "ref": "99795c25-e04b-4b6e-84de-68dc4bc2b2a4",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "30e19296-305b-4f62-b967-02611f93afa3"
        },
        "item": {
          "id": "109118f8-bdd6-492e-bec5-2a8e119190c3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "44cebfcf-71d8-4363-8ea8-6aededc142c7",
          "status": "OK",
          "code": 200,
          "responseTime": 224,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "967db4c0-da9c-47d8-a039-15b731584fa1",
        "cursor": {
          "ref": "5637e380-6769-4efd-9990-a737a36f0f9b",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fc7d9625-03ba-426d-bd83-148b69b1c1c9"
        },
        "item": {
          "id": "967db4c0-da9c-47d8-a039-15b731584fa1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9b12daef-be51-4df7-8a93-0e5bfe7d9ef9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 238,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "462ee4dc-d012-46c9-987a-0b028464bd1d",
        "cursor": {
          "ref": "497cce16-6a71-4b34-815f-5f8dd702a1e9",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fae451d4-ac49-44e2-ba2f-8c6826fac701"
        },
        "item": {
          "id": "462ee4dc-d012-46c9-987a-0b028464bd1d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7d72a358-5bab-40fb-af01-9ec562130090",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 226,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "2ad7caac-8359-4a5c-a786-c3d6960db1c5",
        "cursor": {
          "ref": "14660eb9-99b9-4f56-9b86-d4323566ccb3",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "80451405-8e84-4c69-a2ab-43d3342d154b"
        },
        "item": {
          "id": "2ad7caac-8359-4a5c-a786-c3d6960db1c5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8d53f1e5-e9db-4101-b4d9-68a5c666a6b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 271,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "4aa98e89-2a13-419b-a6f4-5e09b39d5a7a",
        "cursor": {
          "ref": "dbf6ee4b-04c6-4d58-9ede-897cf32f5acb",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5ababf16-e5a4-4d77-8151-c4fc8a9154ed"
        },
        "item": {
          "id": "4aa98e89-2a13-419b-a6f4-5e09b39d5a7a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2e98c738-b2db-4b64-834f-1e37c3248660",
          "status": "OK",
          "code": 200,
          "responseTime": 238,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "cabdbe89-586f-4ec3-a1ff-a25db7041549",
        "cursor": {
          "ref": "ddab66c1-7106-459c-ad8a-b591da010b83",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c35003bf-0f9a-47d4-9c62-e419fe97b870"
        },
        "item": {
          "id": "cabdbe89-586f-4ec3-a1ff-a25db7041549",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1dd828c6-d9d0-46d6-8767-dc5dbc01ca8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 211,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "0beeec6d-aa63-4ea2-aa81-06e591aa0bce",
        "cursor": {
          "ref": "1d107dbb-d09f-4e38-bf11-31514eb12c75",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4edf8707-351b-4a8b-b709-ca95f1420e70"
        },
        "item": {
          "id": "0beeec6d-aa63-4ea2-aa81-06e591aa0bce",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ccd3c4c6-5f50-4a2b-a09f-811e28c031c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 218,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "ce637258-462c-4fa7-bd9f-2c712c7cf1bd",
        "cursor": {
          "ref": "cf271fe6-4891-462e-b317-a4b529b8529f",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d06a3633-7db1-4b68-90f2-7134a7416e05"
        },
        "item": {
          "id": "ce637258-462c-4fa7-bd9f-2c712c7cf1bd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "783d6a60-cf57-4fdc-bafc-59b2c1b4c9a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 253,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "f6b281a7-0943-4cd7-a920-1e9929404d60",
        "cursor": {
          "ref": "1a02fca2-5380-423d-bdd2-38bdd362ec5e",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ec300b64-4fb7-4a4e-832a-481a5ffc055a"
        },
        "item": {
          "id": "f6b281a7-0943-4cd7-a920-1e9929404d60",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d44c1f16-21af-4b3c-9a7c-e40ad12ee9c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 206,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5542cb35-a207-49ad-a171-a7ae16e0cbb2",
        "cursor": {
          "ref": "72fc6d70-668b-400d-9c9d-15813e55f283",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7c0476e7-9058-4aee-8bbc-22e03e21b746"
        },
        "item": {
          "id": "5542cb35-a207-49ad-a171-a7ae16e0cbb2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "75fa5480-ccaf-4d34-8a10-cab5f252cdee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 218,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "76e1a2a5-be54-426c-9109-c5b2bf312b32",
        "cursor": {
          "ref": "3e6d8b62-8108-4301-a6f8-b137c77095f0",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "bf6704ed-b040-43d0-b211-60f8ff6ed6a8"
        },
        "item": {
          "id": "76e1a2a5-be54-426c-9109-c5b2bf312b32",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1a699bfb-bb17-41ab-af91-e70c1bb934bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 210,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "770f9b10-7c0c-4516-8dcd-6d19d14535af",
        "cursor": {
          "ref": "2da5a2b6-f703-4a86-a296-be30b0b5c0dc",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a75792d2-4b20-4c56-891e-246ed2e462b9"
        },
        "item": {
          "id": "770f9b10-7c0c-4516-8dcd-6d19d14535af",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9183bec3-c902-49f8-8d6a-2093b56ba77f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 242,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "07b538cf-7b2b-432c-8761-f3a32305ebbe",
        "cursor": {
          "ref": "4949147a-4651-4a55-84dc-7ddd2d1d583a",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "69d3a906-04e9-4316-945f-18be880eb5ab"
        },
        "item": {
          "id": "07b538cf-7b2b-432c-8761-f3a32305ebbe",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "05b4f8ae-5ee7-4210-a515-5fdd77d60f2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 221,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1e2b8fae-b3a7-4800-b964-fab89fc49108",
        "cursor": {
          "ref": "33f44d1f-7c80-410e-af00-9986f1839bb3",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f0287dc8-cc2c-4ad6-b296-a79ed17e1a13"
        },
        "item": {
          "id": "1e2b8fae-b3a7-4800-b964-fab89fc49108",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b2aa02e7-ab5b-443e-9bd6-52f3d34eeed0",
          "status": "OK",
          "code": 200,
          "responseTime": 303,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2e8fafbb-f2c5-4c2e-8915-959b6d3f1e2f",
        "cursor": {
          "ref": "5f876ec5-d644-4d9d-84d2-8fb09b2881dd",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4b4de0e6-fd70-4079-8ac9-9a52c3552954"
        },
        "item": {
          "id": "2e8fafbb-f2c5-4c2e-8915-959b6d3f1e2f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cfaf4ff4-ad13-430b-a4ff-7a4a482a95ae",
          "status": "OK",
          "code": 200,
          "responseTime": 303,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3dbd2588-cb88-4c80-8260-34594a30caba",
        "cursor": {
          "ref": "443b3a33-96af-4b5d-8c6c-c2b7ad3d3e4e",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "acc518e8-79d9-4149-8c3e-4ae59f9481ba"
        },
        "item": {
          "id": "3dbd2588-cb88-4c80-8260-34594a30caba",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "08f239fb-4010-4d1f-853c-065735205945",
          "status": "OK",
          "code": 200,
          "responseTime": 310,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "388b5c9c-bdba-414f-8fa5-744c83dcc965",
        "cursor": {
          "ref": "3f6108d5-fa76-4cda-9983-93d2ab3c3140",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6caf45b0-fa93-4e41-8a23-3c8b0b5b32cb"
        },
        "item": {
          "id": "388b5c9c-bdba-414f-8fa5-744c83dcc965",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a7b339c4-8151-412e-a4fb-4acf4c96d1fe",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "82013278-60a6-4643-b8eb-6224bc03b27f",
        "cursor": {
          "ref": "77681fce-a086-461c-aa0b-d3c3eaf55a48",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9d900f95-236d-4280-a399-14b88158c482"
        },
        "item": {
          "id": "82013278-60a6-4643-b8eb-6224bc03b27f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6fb216a1-25ff-4869-b4c2-71b7d85aee60",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "641505ce-2a51-43b0-96a1-b802385901a7",
        "cursor": {
          "ref": "bde508e2-3e04-4727-bc55-61618b8bfaa3",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0bf34490-f48f-46f4-b0ae-dea9f9ef8a12"
        },
        "item": {
          "id": "641505ce-2a51-43b0-96a1-b802385901a7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "259f9fb6-ab35-4566-8f5b-13da968f45d4",
          "status": "OK",
          "code": 200,
          "responseTime": 274,
          "responseSize": 303
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "a2ebc61c-04f4-4526-bc4d-01b8e6cb50cc",
        "cursor": {
          "ref": "033e7ee8-ce42-45a6-abd4-21d55a80e1bd",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ad4ef9b8-6092-4f6a-84af-ca1e30e82daa"
        },
        "item": {
          "id": "a2ebc61c-04f4-4526-bc4d-01b8e6cb50cc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7a585660-1b4b-47b0-848c-1dcd75836732",
          "status": "OK",
          "code": 200,
          "responseTime": 242,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "2eccefb5-bf58-4754-9207-61fb889ab743",
        "cursor": {
          "ref": "f0eca5cb-97f5-44ff-97cb-6049d634cdd3",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a6a9e467-121b-47ed-9a35-f671aed31bd4"
        },
        "item": {
          "id": "2eccefb5-bf58-4754-9207-61fb889ab743",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "75a83bf5-df07-42c1-8614-388ec6588845",
          "status": "OK",
          "code": 200,
          "responseTime": 237,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "89220c89-185e-460b-8301-a875af8a8ba4",
        "cursor": {
          "ref": "d776807f-59e0-4576-a906-bbf740b83542",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "aa2ef55c-d96c-4304-ad37-1fa84414c235"
        },
        "item": {
          "id": "89220c89-185e-460b-8301-a875af8a8ba4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dc841e43-bda5-4a0f-8224-19266e0bcebf",
          "status": "OK",
          "code": 200,
          "responseTime": 220,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "878351b5-d5b8-4b24-9ad8-acee62e4467c",
        "cursor": {
          "ref": "a12ee6c5-2c07-4ce4-9abb-5a9c0d4ff25e",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a77a5725-c588-4aab-b923-2d20ebd065d5"
        },
        "item": {
          "id": "878351b5-d5b8-4b24-9ad8-acee62e4467c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f2dc63df-a810-425d-8b11-7d89ab8b24a0",
          "status": "OK",
          "code": 200,
          "responseTime": 236,
          "responseSize": 309
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "ff82434e-8180-4c7e-a685-f325ad3d2f79",
        "cursor": {
          "ref": "c278c2a4-cdd7-43fc-b957-af80444c6c72",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "48db3e9d-bb58-4047-9cd8-1fd4e897573a"
        },
        "item": {
          "id": "ff82434e-8180-4c7e-a685-f325ad3d2f79",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "27b05e97-12c4-4793-8714-e5642a8aec00",
          "status": "OK",
          "code": 200,
          "responseTime": 281,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "efda1e6c-3bcc-4738-81bc-91c96fb4c998",
        "cursor": {
          "ref": "d9ad5d7e-a174-4693-a0a4-05a756df399e",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1ee2214d-1390-4e34-97dc-6688f84e1043"
        },
        "item": {
          "id": "efda1e6c-3bcc-4738-81bc-91c96fb4c998",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f6d8e4b4-0f5e-47e5-b192-3a42c2071f69",
          "status": "OK",
          "code": 200,
          "responseTime": 246,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "9dd53778-37de-43b4-8525-f9db1fb7300f",
        "cursor": {
          "ref": "626ad941-064c-4487-9a45-241a53f81c05",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4c6de5d8-bfd0-4c62-af87-bfc35dfe93e2"
        },
        "item": {
          "id": "9dd53778-37de-43b4-8525-f9db1fb7300f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2cd885b9-1b3b-4f27-9b79-5508cd276e88",
          "status": "OK",
          "code": 200,
          "responseTime": 245,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "68b0e072-b89f-4425-8897-bdc16b2bea96",
        "cursor": {
          "ref": "a895f724-cd47-4928-ba85-9941594d433b",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "687311bf-7aa0-4efa-b4cc-da6358c3e1db"
        },
        "item": {
          "id": "68b0e072-b89f-4425-8897-bdc16b2bea96",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8b33ee66-0e6d-4ec9-a5da-52794a128be0",
          "status": "OK",
          "code": 200,
          "responseTime": 263,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "bee0f126-f12c-4b50-8041-7376f2777e0b",
        "cursor": {
          "ref": "279af700-0c01-4231-a6b4-f413ef5daadc",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fcc0f968-dd7a-4380-87c0-32961432fbc2"
        },
        "item": {
          "id": "bee0f126-f12c-4b50-8041-7376f2777e0b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a06d352a-d114-41b2-9f47-4acc27dd9143",
          "status": "OK",
          "code": 200,
          "responseTime": 339,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "70abd76a-7795-4662-b208-928f8b8eef96",
        "cursor": {
          "ref": "cfb61fb3-02e9-4dbf-bdb3-b75544cabdb2",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "31d7ee1a-5ac9-441a-b206-8b6907539f67"
        },
        "item": {
          "id": "70abd76a-7795-4662-b208-928f8b8eef96",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d095283f-217d-4db5-80a0-900c71777541",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 382,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "027c07a1-52f7-4636-a0cb-557483ee7021",
        "cursor": {
          "ref": "3b9916eb-6c7c-4397-88e8-0f121646f0cf",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a21bc405-788d-41bb-86ab-6d076781a153"
        },
        "item": {
          "id": "027c07a1-52f7-4636-a0cb-557483ee7021",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6e928978-a46c-4c62-9a30-ef52111d6d7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 706,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "66e8f598-af97-4db3-81e1-ed1cce668046",
        "cursor": {
          "ref": "63ecbfe6-3ded-43e8-988d-b8717fc58c52",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2a07a348-96df-4d9e-8205-889550aa55ee"
        },
        "item": {
          "id": "66e8f598-af97-4db3-81e1-ed1cce668046",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "538cbd3f-94ba-46d4-948e-b630c77a9353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 512,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e6d8907b-c4ab-4648-a21d-1966864bd2d1",
        "cursor": {
          "ref": "39146b20-d652-4766-bef7-bc726bf91207",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1b18416d-4670-4fe1-a5ca-7970373c4d18"
        },
        "item": {
          "id": "e6d8907b-c4ab-4648-a21d-1966864bd2d1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "75024448-6df6-499d-98b3-e798f7ddbb7a",
          "status": "OK",
          "code": 200,
          "responseTime": 447,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7ba5878d-2047-4af4-a6e0-b3d9cd9254bc",
        "cursor": {
          "ref": "56b514ee-e29f-4526-8db7-80b6668d1b16",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bf573013-bcbd-47b9-9160-279475aeb62c"
        },
        "item": {
          "id": "7ba5878d-2047-4af4-a6e0-b3d9cd9254bc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f8027f00-662c-422b-975d-81720e470735",
          "status": "OK",
          "code": 200,
          "responseTime": 536,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "db5dcdcf-ba9c-4978-b958-84af140a8e3a",
        "cursor": {
          "ref": "3574c2f4-bb0f-4b5d-ab74-00a4f0239715",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "788a4c8b-4dc7-47ab-860c-9160b2fd07d5"
        },
        "item": {
          "id": "db5dcdcf-ba9c-4978-b958-84af140a8e3a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bb5758f1-0e6a-4a3c-a05b-60904bbd3fe6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 555,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a53918df-841d-4a83-a756-595cac01d2b2",
        "cursor": {
          "ref": "17dd2ddd-ad24-4334-be6a-7598023be1c4",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f093a151-ff46-4229-993d-53e46671ccc7"
        },
        "item": {
          "id": "a53918df-841d-4a83-a756-595cac01d2b2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bd3acdce-66f8-4c68-9cfb-75b4fd1bd53b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 40,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 403",
              "stack": "AssertionError: expected response to have status code 401 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "19fe2b46-2c64-4e0a-a5a5-f299ceb07c13",
        "cursor": {
          "ref": "140f01a1-aaad-4449-8717-af812e4d52a4",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "95f73a3b-a047-4787-ba45-cde083b1c799"
        },
        "item": {
          "id": "19fe2b46-2c64-4e0a-a5a5-f299ceb07c13",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "311eb730-f2b3-4051-8d4d-72c511b09d6c",
          "status": "OK",
          "code": 200,
          "responseTime": 623,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5cc3b92a-07f2-4e28-9465-afd0b0a8b4c3",
        "cursor": {
          "ref": "56f5a868-2bbd-4565-8510-8887edc67ba4",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e1e5013f-89ca-4e2c-8393-f2e2c540d9cd"
        },
        "item": {
          "id": "5cc3b92a-07f2-4e28-9465-afd0b0a8b4c3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "34add3f8-79c9-4768-8aeb-e632c1fff150",
          "status": "OK",
          "code": 200,
          "responseTime": 753,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "66706050-9cbe-475e-a3bb-be18dc88ec93",
        "cursor": {
          "ref": "94f37ead-1fc5-47a4-8b27-0cac6dca8909",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c84ff046-5177-4690-bfcc-0e6d2b55f567"
        },
        "item": {
          "id": "66706050-9cbe-475e-a3bb-be18dc88ec93",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "60bd9595-2af4-4a6e-89b0-4b7c0eb8b77e",
          "status": "OK",
          "code": 200,
          "responseTime": 637,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "82ee9ef1-9744-43f4-8497-bd095bbf1456",
        "cursor": {
          "ref": "247eae83-dc21-4c51-a543-a9d2603a3b84",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e32de889-1e23-414d-bfe4-80b931de3c65"
        },
        "item": {
          "id": "82ee9ef1-9744-43f4-8497-bd095bbf1456",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "175bf8a6-f366-4aa1-b9ba-cde858acee90",
          "status": "OK",
          "code": 200,
          "responseTime": 633,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "c7f00beb-cc0f-48f4-8b50-072c5971fac5",
        "cursor": {
          "ref": "f681e430-9f6c-463f-aa7a-7876a180a9a2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5f33d2d7-22b1-4ba9-8be0-fff3fd0d8cf0"
        },
        "item": {
          "id": "c7f00beb-cc0f-48f4-8b50-072c5971fac5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2c9dfe0b-3183-4543-ae42-2aaaebf98943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "c7f00beb-cc0f-48f4-8b50-072c5971fac5",
        "cursor": {
          "ref": "f681e430-9f6c-463f-aa7a-7876a180a9a2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5f33d2d7-22b1-4ba9-8be0-fff3fd0d8cf0"
        },
        "item": {
          "id": "c7f00beb-cc0f-48f4-8b50-072c5971fac5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2c9dfe0b-3183-4543-ae42-2aaaebf98943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "c7f00beb-cc0f-48f4-8b50-072c5971fac5",
        "cursor": {
          "ref": "f681e430-9f6c-463f-aa7a-7876a180a9a2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5f33d2d7-22b1-4ba9-8be0-fff3fd0d8cf0"
        },
        "item": {
          "id": "c7f00beb-cc0f-48f4-8b50-072c5971fac5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2c9dfe0b-3183-4543-ae42-2aaaebf98943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "356bd204-cbb7-484b-b7b6-5d1c1500d9ea",
        "cursor": {
          "ref": "b0de6498-fdbb-4b0d-bada-d098ca415622",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "354c5b76-7bc5-4ab6-9df5-d7d44ed196ca"
        },
        "item": {
          "id": "356bd204-cbb7-484b-b7b6-5d1c1500d9ea",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "39d5d15f-d7c1-4b54-8bd3-b95d3821a28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "f5ba97a9-cf9b-4b22-8b5e-a46bbb12780b",
        "cursor": {
          "ref": "d828d1e0-7a81-4986-8105-7d8a9605cced",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e824d10e-4444-4340-835f-1c616f5819e5"
        },
        "item": {
          "id": "f5ba97a9-cf9b-4b22-8b5e-a46bbb12780b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "28070d75-b42b-4c15-8bae-428db3490de6",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f5ba97a9-cf9b-4b22-8b5e-a46bbb12780b",
        "cursor": {
          "ref": "d828d1e0-7a81-4986-8105-7d8a9605cced",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e824d10e-4444-4340-835f-1c616f5819e5"
        },
        "item": {
          "id": "f5ba97a9-cf9b-4b22-8b5e-a46bbb12780b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "28070d75-b42b-4c15-8bae-428db3490de6",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b6bde6f7-b620-47da-a2f7-7e8e32c57e0e",
        "cursor": {
          "ref": "de75e4a9-2329-47e0-863a-3ca60fa7ccd1",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e570a161-932d-4aef-9b9a-35320640a2d7"
        },
        "item": {
          "id": "b6bde6f7-b620-47da-a2f7-7e8e32c57e0e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "7b6a1acf-ded8-48eb-8832-3cdb48ee9ca7",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "9c04be14-bf56-4a0e-af7a-7682b0705f1b",
        "cursor": {
          "ref": "4ebf3d32-9153-495c-b906-9fd0615bcc1f",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "30c204ef-98a2-451b-9fdb-896f78c682fa"
        },
        "item": {
          "id": "9c04be14-bf56-4a0e-af7a-7682b0705f1b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c76af073-8955-421e-a713-7c1e14fa6275",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9c04be14-bf56-4a0e-af7a-7682b0705f1b",
        "cursor": {
          "ref": "4ebf3d32-9153-495c-b906-9fd0615bcc1f",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "30c204ef-98a2-451b-9fdb-896f78c682fa"
        },
        "item": {
          "id": "9c04be14-bf56-4a0e-af7a-7682b0705f1b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c76af073-8955-421e-a713-7c1e14fa6275",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1ce67401-c983-4a0b-bcc7-65b298fbc3bf",
        "cursor": {
          "ref": "d665ddff-7346-47de-9d83-74f7288927a2",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a9cc9e18-1e1e-47dc-966a-f93ec790e7f2"
        },
        "item": {
          "id": "1ce67401-c983-4a0b-bcc7-65b298fbc3bf",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "ef9e8cf2-e126-4d94-9f3b-22e00a25e1ae",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}