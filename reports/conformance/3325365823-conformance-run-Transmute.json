{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2657d991-d240-48b7-aa64-69a3e1cd0161",
        "name": "Clear Cache",
        "item": [
          {
            "id": "23c2d6c6-b3c1-403b-b968-2cbd05fd0f1b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9abf22b-c533-415e-8ac4-3dc3521a698f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a8298ef7-4456-4d2b-9560-c62e82f8062b"
                }
              }
            ]
          },
          {
            "id": "73b8d6be-2907-4402-b798-81787df42340",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23a63d58-94a8-412d-ac37-1267a48d4067",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "36e9d9b6-dd4e-47ed-b8f6-8b3fe0ee2e6e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c1b6ed6d-4570-454e-9f7d-287b6b737231",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4f3a130a-a414-4c83-b300-082a347237ae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2c63ad3e-e3e0-4580-a906-15f0ff98d271",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c713704b-9c37-4642-91db-d28f60321862",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc9b0eaf-dfa2-419d-95b1-475adc4c58f4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "85b0f843-d7b9-4f6d-96c5-fc6bb38729c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31644ad2-a7fb-43dc-8375-2c15813a3d64"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aacafd64-7937-4a6d-9757-6ac5677fe0ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51f17855-2ada-4ad1-9f5c-92cc6fdf6513"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c3676aa-44a2-42d3-aba1-40b45950d524",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "46d7a668-e4a7-42ed-9ca0-bf021fac1903"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72214b0e-ba04-4a46-ac37-5f984ba2c0f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0b42c35-723c-4db8-8f7d-5c8baea046a0"
            }
          }
        ]
      },
      {
        "id": "c5af5af0-40ba-47de-a60f-dba4cf0d5684",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "30b4b370-31d5-4d98-9d39-a01ed4665589",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41f4aaa2-148c-4b4e-a90c-519ff68cc099",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6907be53-e6dc-49ba-be85-d5e81b1b5771",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160ec134-e470-423b-b207-7cfc8361219d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "958cd624-4ecb-4137-9141-c36886dd836d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95670c1-4c6b-4549-93b2-b723e0ac2964",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e9ee72-d94e-4e77-baec-a3e59f02a2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "888de6cf-02dc-41fa-a8be-1ccf16a00006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03273d62-e4bb-4bef-b6df-2f4e9922a90d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc570f5c-2eb6-427c-a1f3-73929d819986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "699e97f1-e34a-492a-b409-0647efd60b3a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "beac5328-edd3-46d2-a249-c90710093ebf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12840b5b-6252-4394-8118-f3c2ba4998ff",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83477f32-5463-47a3-87c4-449fdf0be814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99744654-f733-4fed-bec1-877cf86b228e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf829e7-bb22-447d-a922-dd0a96d86c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d6e3d6a-7631-4ecf-b044-f3d2cdb9792d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e94010-af4b-4558-bbbb-89f6e39aa5ae",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3948480c-681b-48de-9356-cf2a80d727a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "315cd654-0305-4056-a916-49ea873fb6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4177160-19e7-49da-9482-5c86ef387ff4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f5fde5ca-f2c4-43b5-80f1-fd33190df42e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8b3c18c1-5b51-4b66-8d46-01ce5c603bf2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "037da095-c8b7-4c49-8980-f3e78575934c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a60eb935-77d2-4d9b-862c-c83fc48d7b06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "18d89353-1f6f-416a-ae80-61fdfecf3edb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87dead5c-6cf1-444a-b656-3ea6463702ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "50944e81-ab19-4c72-a805-97e7238fa7b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abc3df03-a67e-4804-b2e6-484103ad6883",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4e39334-0520-4be0-a8cd-3ef3378a32e7"
            }
          }
        ]
      },
      {
        "id": "b034ee6d-f23c-4ecf-b5c6-4b39efb004aa",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bc46dce8-5bd2-47b5-8e4d-c2b02191697e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f8571c9-17e2-47c3-a30a-c36693d9847b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b778bda0-0591-45ba-8e25-d7fd361747ce",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d497450-4a26-4864-8227-c559830c5287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3ef1c8-d930-49e6-b7ba-da79f4fd2da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56dd342-be15-40f7-9ff5-96152c0506b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8d0da7c-bb1e-4c24-85eb-3381610cfdaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d65f041-ac4d-4787-a086-eed2faf92dd1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50401dd6-e00e-4e0d-9422-08dcf69c2b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcfe4a4-0360-45eb-8ea6-9d06092e0ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941c02c2-48d6-4f84-ab89-6732ffa97249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1412791f-7351-4ee6-b95e-e867338eb667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fa1b4f-1591-4bb1-9e34-e228b2e62059",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da0b878-f9e5-4b91-a056-784ccd3f8e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc9b1b2-0b49-4252-a58b-b111716085e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04436b1-cb64-4d42-82c0-ffde91134283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1088314-af9f-4e92-8937-b60fe98234b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d192b6-6734-48b9-ab47-7f7cb7f244d8",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54f05be-8af9-48f0-9fe7-cfded7ff1831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4013f06-0b18-4a38-aa5c-1d68c943f3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45324ea9-3ad7-42d2-99ef-70f8aa5ce13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13a628f6-dd36-4747-8ecb-b818be73a49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b09abb-8b77-41d2-adb2-ef333e73d0b4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78767ab7-da0c-4a0e-bf0b-442a8ed40a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d1528d-b4df-4aa5-bdb4-6bdfe1aa15dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7ec9b7-023f-48bd-a541-036f536a6ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "787ba822-aa51-4430-9d7f-e2edb5d37480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e0a6c3-12d2-461c-b851-6b7d8d31848b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3018b39-aa00-420b-a80d-d087e534adf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed5fcae-673d-48e2-b1ec-f2f9794489ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab20bfec-f8ac-4eba-a57a-071c58e1f9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7836b56-3561-49c7-881a-3cd06a673cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054c187e-84b4-448c-ba19-7c9b1ce8eff7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9e6105-e12b-440c-b6ea-1f153184a501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f344b5-c916-49dd-a41d-4871b8240527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6e6441-c535-49f2-bedc-a2df4b2fabec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efafda2e-8203-4e38-a94a-22b047c11385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2d2c6e-4790-4bfb-87e7-99ceb3ffc55e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918e406d-843d-4f9c-af1c-a96e2e100290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae3ee78-994f-4b57-a2ed-5c4833f64618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e62de3-c304-4c34-82fa-77865fe292d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c4138ef-c03c-48a9-b952-b2d0551c53b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cfb02f-631d-490f-94b1-04efc3f993d4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72b513d-eecc-412e-be2c-b644218e00a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90716d2-950f-4cf7-ab8e-531d66ed7270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e3abd2-6320-47b1-958f-f47311008de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8eeeb50-de0d-437c-9385-8dc59d8c2522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deadef40-9122-4ab6-a4f0-e5445c2e6e3a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8ac6c4-4def-4c0d-b6aa-e1e7faa02c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8eee9cb-dd5b-48a4-9ee0-209764ef1b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6f0733-e1e2-48db-b588-c747760b2264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3304738-b439-4698-bb1b-b30cc34cae0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3bcb9e-93b9-438c-99ba-9f9808036b20",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81848b2e-8827-48ca-80d9-9ded535f13ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80da099-94e2-4133-89ec-66ff9a71227b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1143ab-fee7-4696-9dfb-9369d10e448d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76579d8f-d15c-4470-8e6a-e4bef6df1667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74fee85-e694-4a45-a21e-d7991f353cbe",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e08096f-f898-4461-b838-f11cef501a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01096b8-729a-4385-80dd-c5eaad53b2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fa83b8-b097-4b37-b311-002ab79562fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "387f8a32-c7f9-402c-bd66-5b2d365c6680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4da9d35-87b8-4e22-87d5-f0ce9c57cc43",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc54eb4-8de2-4fe2-8c3a-abcdc161bb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd0d9e4-ffa3-4d2a-8232-8f70bf3cb75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ceabe1-3c7f-4fed-bf75-81e0b5449915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7581579-3e52-47dd-8243-4936c597040f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bdc1046-b7c9-45b1-8987-3f6a47ab090a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d67325d-cc07-4b36-ab9e-e8eaffe5cbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9435f1e7-d28d-43f4-a46e-072bd918a09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d384312b-6789-4143-8f44-9c23fb018eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88355d76-653e-407b-b5fb-504f1a5d08e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61312a0-83f8-4f62-9fbe-b1f353dc5ece",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189c5f62-cd96-4bd9-959c-ba7844e31267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e1770e-5614-47d7-8f91-c2b54c23759f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee9a992-9280-4a14-81b6-ac7e529fafa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d921f8ff-9112-47b9-a67e-8e4a63c2568b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b59ffc-37d9-463e-9a0a-3caf11a8c244",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575322fb-1e1c-41c5-a8f9-4aa81cfa5ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22450391-7e0f-49f1-809e-da99e58d2ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d7fed7-63fa-4358-978c-c39215340658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99288cd0-7a55-440a-acd4-340b120fbc37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82cbb79-4d91-47b8-aedc-5c375e28386e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3805ed12-207f-4f92-9f7d-d667cc6f577b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50dfc7f-6d51-4583-b8b9-7d0e88728b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482c85a9-0e98-4771-9756-23bc9b6c90d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2efdb98f-084f-4e58-853e-1e8994997a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec1f021-69ad-4fbf-b663-a2ede02fac94",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595bf238-62e5-4c1e-a803-ebf246a989a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4debe7a3-605f-4007-aa7a-11de6588af70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793a5c68-b302-41e1-9613-a5a58136fbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "306d1e93-dc51-4bb0-a29d-9baee6f711f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5f0224-9ebb-494b-b45b-538668ca53a6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48485132-f84c-4b96-9c1a-3c167c48af57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec75c3e-6997-4e66-8c09-9ed4bf38c68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ef5480-ed36-4984-a441-b671d74ad459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b8a752d-58b4-4353-bfd5-efae2527104c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f81b0c-3c3a-4acf-adbb-39ebcce7634d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e73759-34d1-42f5-9985-df869c45080b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac21998-cc45-411d-af0d-58a7f7207066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300487c5-1082-4c3a-a187-27c9b30d62ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7ae241-f1f2-41b6-9970-61d38f919128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590f18a6-7733-46bc-8b8d-df0cbedd130b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8fb7bc-f678-4802-8fab-eba5a739192b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8634e74c-6a18-4708-833f-494749247e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0d7422-e7ca-4311-bb22-ac20c96c40f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc333e6e-bb6b-4668-9d8d-0a5fdedd5127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d447d1ae-e74c-46e6-bfe7-b5f75d211649",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6867a78d-3e0e-475a-8601-57b5deba277c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d348136-8fc7-434c-a710-582a6ff94694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f5705d-3423-40b9-bb61-f9ea02651ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dce51640-e669-4f50-86c3-0ea5bf6bbe99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa38b803-a9c5-458a-901f-69a0c04a2697",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cc1b61-6210-44c4-a615-83d220a1b37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590ce06d-bd1f-4f26-a154-139ed3e49da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d09b890-32d4-44be-9da0-782c1d204d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c103585-a37d-4257-a9a8-1dd75a257109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785c50c2-4086-43a0-90d7-8092285ad19e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a510a3-d2d8-4ba6-ba17-2a5232dee235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250951bc-17f2-44d7-a658-d4649b09bb6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa5790a-c1dc-4b6f-a345-cda94722065d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "99d6f8a3-c1e2-4dc1-bfc2-99817623aa99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab354aea-fa4f-4ed4-8cc2-8694e576a59d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f13338e-df80-4a2a-8f84-239ac8b0a473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488b7cac-f602-4184-82d3-80c4514a0bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6226070b-c50c-4cda-a3f2-065064460c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "41fc6fc2-e94b-4891-9062-6c90d0356d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713b5561-0d5a-402b-9038-1231da1abaa3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4202668-55e6-4c0e-bb23-2f799dad48d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8396019-4053-4144-81fc-70da0afb0768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981d660f-86ac-4d47-ba09-d502672251af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a65f1c06-3880-48c4-aeb0-4b29833c63c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53b8a2a-6ed3-4182-b92f-f044f1904d43",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3398db-9a8b-4f0f-804d-22e4e5f4ec2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfebec34-1b38-4114-979a-b7ead8602baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fd35b6-3bbe-406b-8a77-bbd6097121ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d40d5cc-869b-49e3-98a2-94054823eb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327665b5-19d3-4e79-8e2c-d41bfaab9044",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3142df92-37d3-49fb-bd0f-570d041a93bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba6b4c44-8ed3-4181-9578-a13fae8496f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc89463-521b-4a04-996e-ddbb8bee122e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3603b5-c09c-4aa5-aa17-70c9338114e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fb35bf-3ec9-451d-af24-3884d927fdc2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cefa9c-eab8-4423-ae17-4e908434e7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1ac585-f063-437d-b589-45d8b3a48e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0751bd60-b00f-4464-9af5-8c995625d2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70370dc9-e921-4f31-8cef-4704f7ab3809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f891af-0e80-40a9-8f3a-71f8bcdda6e4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c176baf9-6c38-425c-9e63-08e0b656f691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4482d78-4d58-40a4-8d54-e2f81f3f14aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f083bf-8f9f-49f6-a8e6-a21a451ffe59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0f5cd1-0547-4a8b-848d-cb8c961525f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd1f518-57b1-43d0-9608-8de5ccbfaf13",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04224085-09ec-42bb-9aa0-7b16d759a747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96fe180a-96ce-4334-b0a0-c67ba5b14e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88380219-79f2-48c0-95cf-66ae753cf5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c21aac7a-3f90-44b7-b0be-21cf212e7758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743ee07c-649f-4884-8da6-3b0f42c627ad",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88c905c-63e4-452a-91d5-ffac7056bf92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c99c97c-85a1-4f0e-ab30-e9120330ed49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0daa16-42bd-4318-b65c-4026e4847f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25ca4636-bde9-4dec-a50c-cc87c704a8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6fa909-a336-432a-baee-b1096f4824b4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599ded6b-a123-4c66-86dc-4251d3717337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ccf262-2936-4b0e-96e1-5ccfed84f6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871addee-aa4b-46ee-a77b-def75dacb7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8f199d-c54e-4478-ab8a-8ab29cf7d9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f46fe1-48ab-4576-bef2-0019308bf287",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c819989b-b6ee-4779-b602-fb280dbfbca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a75bef-f0f8-40aa-a66a-47d1ba1e7572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf60024-f371-4422-a4c7-74a0a0a9ee05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c77e17b-e63a-491b-ab52-cac7a1ae9b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec5c0d9-ec64-4edb-b40d-9ab2b43e33ad",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed748335-8c44-47fe-ba6b-fc3f7c8c51a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2977d674-9a54-4a96-a96b-83c4c83f0aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89581675-fbd7-4080-8369-5af5f17454b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b596c5-d522-48ce-9483-4edb22daf2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a51272a-3e13-4181-8e14-7db9cbc474ec",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8778e1-9069-432c-84d1-07b3c0c94490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70a99efa-8b33-4910-9e23-d3a85be49e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549c94d3-4019-4986-9b5c-16679b4f8e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "feac5853-4a6e-492f-b1c6-e564e4410c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444c31d2-995a-4e0b-bced-2b5193f518c3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02ee1ac-f45b-43c9-aad4-069b0d04ba6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d2c0b57-8d19-4913-9c55-b6ed8de72f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f204dd-148d-45d5-8650-7dcfcfbd037c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4d1d76-c5b2-46e4-9203-a6e108422f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a385d7-0a3d-4e9b-9a8a-5f122176c4f2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb74fa0-1ca7-4144-9d71-08713d608e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66b4b7f-798d-4b47-b0de-c541bb7483ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0857bd7e-6a41-40f9-8506-bd3a88601feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "34b5f27a-7706-4370-a7e3-dde963acfeac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48da9b5a-8556-4c9a-abab-7a8e6263801e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce62325-cc30-44f4-990a-bc836b1f395d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d3d41a-20cc-4f7a-b198-4a93123953e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ce572e-e279-4b01-982a-0e388c20c6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad5358c-2272-4203-93c1-c3a7beeb7db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85eee8cb-31e2-46b9-8b7a-d4bd4cc9ec90",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043c44ea-135f-4a74-b6be-d1989663904c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68885f5-f2d6-464e-96b2-1fb5970ae3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7347276b-aa32-4cf4-98fc-cabdbb1626fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6993399a-e34a-4fef-9fe8-250611d5280b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46697fcd-bc14-45b1-ae36-716a21749ca6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdaa821-f944-4f6b-aadf-e2656226a754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c322b9-d897-46b2-bdd9-c18286bdc61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21d7274-f219-4391-b008-50bfa0ad5ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c00583e7-b208-4792-94ad-6ad9a240ef98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad1d550-0a27-407a-b173-3a2f844107ad",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb18530-e3a3-427d-9cce-695d9aa24ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266df796-382b-4222-bcd3-c380ca74adc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdf1bd6-176d-46be-9578-d418ace8700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "44685410-af19-4580-bfa4-ebb8b9ef28b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bc9827-9d30-4c0b-b9f5-67b93d86d490",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78723d10-8ffd-4982-964b-df82e5099731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0d6261-f2d9-4ab2-b81c-dadfe2924970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c21c4fa-c61b-421d-9346-4f384f98bc07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eee3d6e-4c08-474e-9a56-b5c7328f10d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ce4ef7-ea35-4dae-a00f-5355c5296609",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "997e096f-9b0b-4ee7-89fe-358a43627f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3c3654-b3bd-4c69-9ab5-ac962658eec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be30fe37-6926-4275-8b38-8e7270022504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "83fbe0df-5402-4823-b467-27485e3c6037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b18aa0-726e-424b-b44d-219d53727d9d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "815b97ac-7b98-4fef-bcb9-e9b581a24bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde0273a-ea17-4d3e-9f69-ea0bce0c4eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe4945f-38fb-4cea-86c8-2ce07fe75f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8539c93-241f-4dd7-9457-89e50822e42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6160d1b8-db5e-4743-9e0e-52a06c114de4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2eda8e-12d2-41b0-b01e-42dc1e36c09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a05fd0-f18f-4400-bc7e-a97aeb2a8c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9715985d-f553-47f3-9923-c82cdc4d7b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd8c2d4d-714a-4cff-af92-f103ae1b04e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3846738-c862-45ce-952e-2eef89f6aadc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf463fe-20cf-4e0c-81cb-ab2becfd9faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcdc648-2c16-4733-9fd4-bf971d95d51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc16d47-26c5-471c-b965-dabb45192d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f9b56f3-3ca0-4f0d-bcf9-09f03ab2b980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26719421-2264-4e82-afd8-48f4c56fb3fe",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66ed8e1-2b9c-4e9a-9792-0c76fed33f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "020b5a5e-0758-4803-a7f0-160d7033a83c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ad9a80-86b8-471e-934d-88dc85ba17b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6e066d-cadc-4358-b1bc-068671a7c90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffba95c4-90ea-4426-9db4-22f5292744f8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da821095-1902-4a10-a58a-2660cf344063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9082ee3e-ae8e-4b49-a936-9e1ba2976f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7d5352-0ac1-4ec5-8f0c-8d468959f0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af004c2a-5a9c-45b6-8039-8ea58f966126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422340eb-f063-475e-b5b2-49e5322e07c8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e546e2f0-9872-45c3-b987-9952703727c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0067b0e0-f03f-4b88-a8fc-2a161fd44987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aae19f3-bf57-4a88-8555-66b83416cd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7633f50-9847-4a1c-92f2-7c00b58ed39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad5a6f8-addc-4462-b6dd-8266f3a60837",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c1ef84-7751-40dd-b2f7-1700909ea41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687515a9-e08f-4fd2-8c53-abc562f39565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fc92b5-5d17-497c-9a67-4fa6fc01d6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f48b14b2-18e7-4261-8fb8-6fb02aff5472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ad082e-2716-47a0-8a5f-47513cfb7351",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8843656e-605d-4198-b1f6-15f9b28ca961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5e76d3-c5be-42a8-88a2-30a28a3489f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a928ec-d9aa-4c84-a06c-ca7a6ae26542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f93d4a42-2ef6-4ec4-92ec-6d39e87fbd3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f15d2a7-fb43-4afe-aabb-081e1b786cf4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2244351a-1df6-4889-b84b-0e8a99640636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16687ad3-68bb-49c3-9b87-3b20d7826918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424b0d65-c0f3-4ff2-9890-c37116ba6f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4785039e-a24d-4b47-87a8-02514b292bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a2fd8a-9b79-4aca-b2c3-0c970f7a8d1d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579cbc46-855e-49fa-a45d-160b8d933f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b154d1-fb73-42af-877b-18f8bcc881b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742b4a19-ed96-4c31-b484-af61eca71be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59485e7b-54f5-4db3-baa9-57fdb3d321d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54166e30-43d5-4b56-baee-ffaea84190bb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6198c802-cbd6-4655-b05d-aa0be425badf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b7c3de-aeb8-493c-9d9c-554bdcba0fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4218591-3e3b-4a31-bb43-45456a04e8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "117f9e9d-cb74-4f37-a10b-a1ae016fb2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ade1845-822c-4b6c-9c87-ba2941e697d2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64301be2-c344-4217-a57a-6e1c888098fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "645dc1ee-2b45-4358-a684-8ee5c446e69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a43755f-ec52-427a-9a76-baa188352fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "080f4a77-b83c-4252-b062-90ff30972578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb35f21-2dbc-4a40-aa5d-07368459678e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d936e12f-121b-4c4a-b230-433089b893c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53036c7f-22a9-4ccb-b0b6-e53e493e42f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dd89cc-8262-4c9e-a3ba-ee33a78c02a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "47e5ba79-5e81-47df-b95f-9a86e7ec264b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368d8af0-34ce-4b56-bf4e-4df0bef03730",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d725e96-5ae9-4d0a-93a6-9ae96877dcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3159a4-0741-4610-b2a5-725fe95a95b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cde91d8-7646-4ff8-b163-cecd8604bd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "77f89258-1ec9-42d9-9405-3c1c46924ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30e4fe4-3317-4c8b-9618-cf691bd5f093",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59eca274-6cef-45aa-90c8-f047822a2af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5738b73-4e51-410d-a4ea-8d0d617cd6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394af42b-d0fa-4c0e-9a88-5903f68a51ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "da935b66-4f1e-463b-b652-c53b1e879e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e9e3ac-ecdb-4f61-b4c7-ab79b010218b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf1780e-3f1b-481b-80be-d2137ec6a375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e089ffca-8012-4ec1-af1a-69e98352108b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813f865d-587f-4aa5-b077-6ffb0cd4ae23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b879f750-ded6-4525-8f67-ffd64801dccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fae322-ef2c-4185-96fe-8eca160a81ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ed41dd-080a-4da1-8890-d84960169927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd0e3e6-3d3b-4e19-bc0b-265231fbc78d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c428bed6-2de7-47fa-a2ec-6e7eafee07f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7509ad-36b6-4e9c-8245-54825f042cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9a1997-52a2-4025-9b94-4963a10afb22",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8bf7b5-505a-4c02-ac49-410348ba0205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71db612-1027-43e9-8e23-0cd3b2c70e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383da098-2b85-45ea-8e1f-54d6bf11ebdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "10032e78-1991-4a48-985f-e5b2afecbe5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb6a363-22a5-4cab-a452-3d57b374e255",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70a4dc2-4e60-4e92-a5f4-8fcb882bb938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91001203-7d62-46da-86ec-866d15b1d74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae1ff69-43f3-4d75-8c5f-f780e97496e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "febb5ef3-a164-498a-89ec-436b2d99b0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4fd5d7-6f0f-40c9-abc4-261e8a00bad0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f267d42a-db60-4f86-be0f-498521053015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc93a3ae-0268-4e4a-8a43-7bf984814685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cd6a59-e5fd-4dfe-87f9-c3ae63166b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc83e2c-be26-451e-a127-15757d8648ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7174581b-28d5-4766-871f-ac77fe345b44",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febbc1dc-d918-41ec-bcf6-e1adad2c808e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3533eb9-db89-470e-b43c-d04dce1eed25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2dc9c5f-1513-449a-8c6b-36c0d5cbf4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "66513427-39ae-4963-ba00-d65891ed2da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f986743e-5d49-4224-b0c7-18b90b70a111",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc75215-9612-4864-bb81-3afe4aa65251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07fb501-99c2-4adc-aed8-b092c09bc6b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b42565-859e-4e91-9996-afdc41d66399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57a33df1-9911-4483-a554-f0e8353dc716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d99aed1-6587-4333-a1fe-89e958300637",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b542de5a-f87e-4121-a5c8-e4901c0b4def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3b448c-03ff-4f9e-8b10-98e0206616d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3484bb-0d74-407c-9032-2ed53c5616ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a617e95d-ca72-4c50-a0a3-f185e01b4274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5026de0-ead0-411e-a595-41613d1069ac",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03363542-0d14-4793-9725-1ba4b49574c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cd7fe9-f43c-4b05-9f7d-b0a0913679da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50645fa6-3966-4830-80d8-7fb4c2df7c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4cbe5a4-5ad1-49e2-8a8c-d370514911e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87872ac6-bfda-47f4-a7e9-00a1b652039c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc46214-bf35-4c68-9c82-89837a54f351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81e3f0b-2e05-4b12-a276-b0c89ecda5f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bac9675-477f-40cc-b413-27446f14f72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae873ff1-0a34-4035-9f22-b16d3b337731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc32dde-78db-4d6a-8302-223c6d9ce1ae",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932d61d4-409b-4d00-8b65-697d8b90b52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be0493f-5a1a-4776-99cf-dd596cd9b49f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d3b470-348a-4033-aa8e-316f06837883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01e5320a-3038-403c-b1fa-6d885309b11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602beec0-8b6e-465c-b937-3349d84c647f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c952cae3-2191-4adb-993d-97431190826d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a626bfba-cbda-43d9-948c-d175018e6958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ea7a39-ac2f-4899-af0f-6fe801d660c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb703e6b-f3ac-46de-88ee-b7d748acd9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f58410c-8d49-4f50-9a1b-fde12aea798c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723d10c1-2c6f-4f92-94bc-82afb9279fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7636df84-7dcf-4e7f-a2f8-aed043528fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb541dc-c95d-41e6-9d2d-bd025df63a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82d5643b-b48b-4f21-bbe7-54d60e2aac08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bfe7b7-2730-420c-9745-c8c6399e5dd9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44f07db-0c2c-4e7d-a9d1-215cf6e56f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d80f196-66ab-4d75-a2b2-73bee05e038a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1597038-2918-44a6-90d9-9c1d33d589e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "25f24c3a-f743-459f-bb4b-dc883467cb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55685a79-6dd5-4937-b165-1b329f3df03c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e2718c-b3e8-4576-9eda-c5ea5d883099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e4d005-6a57-4543-b20f-ed9e8c302962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0957ae-4cb6-49b1-b4ef-c60139a0404c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0497fdc9-3fa3-46ba-9fb4-3cac67e2f671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217e6260-6bd1-44fb-84db-205f439dfc8b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2740c34b-aa43-4f9c-9695-a77ab646631a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae46776-b524-48ec-8553-dc22dbe7ceb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d35249-f67e-4bf9-8306-2f93bcc91dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "47c16aeb-e2fb-42cc-87bc-6a99538159d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c54fab1-51d0-4fc7-8c7e-f1997b134a82",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41caae7e-2909-4faa-9cc0-d8f50072e0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815e0c9b-a830-4ef3-873a-ed6e7055ced8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdf6ce8-6152-455a-8535-0cabca3c657c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "329f306c-c42d-4128-a917-9b74b48d119c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf955241-26e1-46e2-ba83-c864c76c34fd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6ea13f-1e51-45de-8bbc-99d7306c9359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5184401b-cab9-4e7a-aca2-34851295bdd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26bde96-e7f2-49ee-89cf-d93dd980669e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6f6e03-ea2b-4a28-8f03-41e58aa2d1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa8efe2-f429-4a0c-b906-f99e1e21377e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405f1002-1bec-4b4e-8df9-84ebc082bfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b52fe9-4209-4043-9bbd-79f17d0e2b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe3a7a4-c5bc-4966-bd51-d6f838545bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd8d14f-7a77-474e-ac39-8b0d92a8c90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6fea5f-b539-476f-ad59-4f01c0c5e1ab",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c839544d-3323-411e-8898-119b52ea6878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb70030f-fa8d-4fc3-8fbc-83bd10777ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a2cf41-2f5b-4d03-b774-357aaa179101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd4f7fc-c068-4d62-942e-2483e9f33f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaf8f09-0682-47b8-bc11-84716dfea0cc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cd89e6-51d7-4771-8741-2a7306b9fbec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9c35f7-4db5-4740-93a7-ffbd7692dd7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364883fb-bef0-446d-99c6-1585ed8c0426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14cf3f9a-7b91-491c-9f35-cbabeb8752a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c93b8d-0e25-4373-a1da-3f47b1c30a14",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63a8e4b-699d-4948-8a05-c12ef435e104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a92566-9e13-473c-a3b8-14b60d2e51e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e514d42-83c3-479f-9bee-2064a47f4e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "17b9c706-43a9-4725-be62-a57132eeb9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1594b19-2b5a-44ae-b9ca-3824690f027c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5b7674-e6b5-4a2f-89ea-be4bdc97fd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d024dd2-e8ed-40f5-956d-13c347123c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af31a399-df3c-48ce-a265-944ccbbc10d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a392c1-7b31-46d3-8650-46eec7e14c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e504b52-45ab-4987-abd9-3797f2fbca36",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd188e8-22de-4bca-a3b9-37d5dbf304ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48fbcc23-034b-4760-a116-5996d6e0252a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db128e7-4109-45a1-a6c2-e82060d7b60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eed2eaaa-8843-4b16-85c2-9b89f8989e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c110c88e-31eb-4ad3-be47-b6177a64e211",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301328ea-15f0-481d-b049-5fae01f5b438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5edfcc42-5361-4c0d-a13b-4018a256f82c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c48e51-fb23-4c02-bba7-4bdb03af5a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "167cd209-8f3d-4b3b-8ef5-ca16601fd607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18aebe8-3617-461c-b2e5-7b524414116f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e399b2e-d10f-4a52-9581-3893e8b71966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e5b9d9-d2ad-4d20-bd7c-5ae908b171b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3fb9285-3c83-46fc-b498-d1c4c91ba754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a580ad88-a01a-45a1-aab9-d77e8a1d4296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e93517-6195-4d67-8866-ca8fea437371",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1d8f3b-a4b0-41cd-829c-6b622256222f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec5ef05-e098-4af3-ac48-653bc9b4b570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31234150-2d55-4c52-8bc3-bdeb8ca1099c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b41154-28c7-438b-866a-fc20a04a1dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11fd8be-2d0a-4d2b-92d5-dc6a1c01a3ec",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf61706-081d-44fc-a436-34b75fe2a10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b4ebab-61c7-4530-886e-88509787513e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f678ac5-280c-44cd-aa07-064cafd26b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "aebeca05-abe4-44d0-9da5-b7c5bbec3fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109c4daf-fe21-48b9-b337-af1a633fb0ba",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6653df96-44fc-47c1-ba4e-3bfab8669c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a1f770-d6ed-4dca-a36d-5aeae4b0bfc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bc7737-5066-430f-b160-b49247d4f8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd39ea0-43d5-49e1-b982-d598830530ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69658f84-4898-411a-babe-61e4fc6f58cd",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58c2b36-617a-48ab-8e2e-388efc9fc035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b33243b-f2b3-40bc-9977-567d64728a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79765f72-fb29-421f-9c4e-b69b5f1d0297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "64741ee8-8534-47df-ab3d-f328b95dbd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8c46f4-1937-4184-8873-be186e5c0f0b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f470e65-b32a-4a97-a508-568b01c6134d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bf5c16-b445-412a-a253-d6f168d94005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a479283-7afe-49fb-8ef4-8fda36d24c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "83bb9b52-7dd8-449d-95e6-3dc30eb62571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1928553b-71cf-4558-b488-e772987820d8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e018e4ec-c6f4-4981-be97-c50d2b1a0be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba0c5902-9ebb-483f-9af8-f0c30fcc24f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67aa4b6-602d-4c96-be3e-f16094edf8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4add1f8c-bd91-4e1c-accf-714a88a49c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7d7458-7d6a-49ff-8a2b-aa58a9dac1e6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60869691-ff6e-48d6-8ac1-ca637b674bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "80c16d14-7f85-40af-ad65-3861815e4351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a055d02-b322-4ff2-882c-bd477c23430c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d200a5d-6999-46d7-8149-55a4fcc24731"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "530f65d1-1675-49ad-9aba-17ed1460581d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b41d4b7a-62de-4841-b812-5ab72de10f94",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629339ea-da3d-40f7-81b7-3c179b28956f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96e2030d-c7c4-4f47-8251-b46fd8f624ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db766be-1f56-4a81-938f-37519dff1a5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "be5fdd25-3e68-431e-be4c-f46446d05435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf50412c-5ff9-4cc5-9a1e-d932f3f285d3",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba17865-5126-47f7-9775-d8d0fa0735aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fea31b6-5a6c-4948-a6f7-f75b357cedd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdf9c7a-952a-4c79-8925-61b8dc03721d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3155737b-acef-49e5-8963-b50b5a29cd7d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0322841f-7ac0-47f8-b4b9-066df8cb171e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a208a82e-f3e0-4b06-a4d6-e9b6e6b61daa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5bf20c1d-0158-4227-a6c7-31f0e9e99bc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "640dc530-7363-4239-a259-cdb51aa7617c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "556b9eeb-0816-4067-9c24-73fda1930608",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9ad1038-f68c-4293-9e49-24f246c01e78"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "adf21740-93d9-464e-8725-d26d0197d974",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f296318-e318-4eef-8de8-3a2ce363b16e"
                }
              }
            ]
          },
          {
            "id": "a0d210c6-48ff-4aaf-82ba-40f5d4d95470",
            "name": "Positive Testing",
            "item": [
              {
                "id": "108f4457-2b3b-4627-9e4f-0573f9e08c1d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8597a23b-2d94-4bd2-8da1-c225338ba88c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a21c656-4ba7-4c1c-8b2e-511889f92894"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b03a579c-b8ac-4d3f-8d16-7311b03613a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f0036c36-0c4e-4196-95ea-289d17c322d9"
                    }
                  }
                ]
              },
              {
                "id": "d7839be0-3f0a-4551-9445-c66615170bec",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "595ed169-3c63-44ee-8f34-f09394a5c81a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91bcf9c9-3325-4816-b09b-dfa10254559c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e47a711d-8927-40b1-8ed7-089c81d223fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2fc028d0-c2c5-4332-9406-ef10882ed5b0"
                    }
                  }
                ]
              },
              {
                "id": "955265f8-0934-48dd-abeb-f37c6660d0e1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a3dc428-d39a-4cd0-9e0e-c0b785dc2548",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7e1b84b-ef09-422f-a4a6-aab8abeb816b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ed56d28-81a0-48f3-9af9-adc2e4b22fcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3336d1cb-8b9e-4c93-9715-2ed5d6176bd8"
                    }
                  }
                ]
              },
              {
                "id": "eb2ca3fe-57a0-4611-b318-30681d6e6c24",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e08d5e6e-b9d7-48ba-9bf9-26df66b51081",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b48e927-19be-47a0-bd0d-df611a9d540f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3af371ce-7182-413c-8f4b-04898c0aafcb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a51805f5-64b1-4a86-905d-4003a442dee3"
                    }
                  }
                ]
              },
              {
                "id": "e2b5d447-4def-4467-9ae9-9a7da3eddd62",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9a740bd-5dd9-4d47-9bf1-51a65e3eb4dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd08cd5c-b260-49aa-a215-2ff149740288"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "082a8314-9a3b-4689-9fc6-2acd9f9cf2fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "86e4a972-bfd6-4ce4-834c-3c09f3550885"
                    }
                  }
                ]
              },
              {
                "id": "767c3952-8a62-4dd2-89cf-aa2d4c994717",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b0dddb3-0e1b-4fc5-a623-1ed3c0c16c44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b479e864-fcc6-4244-85f9-49d33b264dec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28b4ff66-f4ae-4c1c-a52d-8078141aee2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b9930cb4-bc8b-4b82-b470-71b8eaf9c98a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "04524055-96de-43a1-9f40-fb9b0f869931",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f775bd91-ee28-43d1-a5ce-540a19f9b55f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a4df822f-0275-417c-8607-0c9c556bed63",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "90b8f270-fda1-45fb-9bb2-957ec4c4b8da"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f74ac8d0-bd84-4b3d-9de2-1a0d94fd55c8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f1dde6a4-3905-4ce7-8fd1-4b02d4d6b673"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "818e943f-5a5a-4fd7-9100-5d499829d874",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ee3477e-619d-41c3-b102-7a6eb1964372"
            }
          }
        ]
      },
      {
        "id": "36fd979d-68cd-4353-b6f8-32face240075",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "39ff3bbc-6d73-406a-96b1-3dab1f2711ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce6cb829-b27e-425a-aaf1-22159222dfb7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8df30c39-95a3-4135-af9d-248d041e2a79",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f71da1-23ed-4d9c-bef7-924d9a0a0bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43879e8a-d7b7-488f-bc19-9d3b3cacb2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e77cfc8-18d7-4e82-bbfb-990f3da5a9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "48a71ff6-059e-4c9e-983f-91bb4af1556d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699b02ca-77dc-42cd-846a-63cac9ee1422",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b3b4ef-0b5a-426d-90e6-a9bff4bdaa4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dec226d-4bdb-4adb-b663-99dd9591f5c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c93fe4c-19cb-43e6-b5a7-59c941e9f826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "306ff1e8-b24c-493b-b8b7-a1294185b865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b8622a-15b9-4c99-b491-844caaa08315",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697f9f7d-75ea-4e6b-9442-b1736d1b588f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d824f36e-b336-400c-87e0-9e44991556cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2a38b5-762e-4f9a-96bb-5b874372c325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31bea8c0-4c26-45e4-b436-93f47586fa2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208af90a-1458-4706-9464-0ffb86dfc1e2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee71d0d1-245e-4de7-95d7-5ddcb943b6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be818ce8-3bbe-44ce-ba84-a9da7d4fa76d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e5e4a2-349f-49aa-bc74-b930552c7c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e17185c9-5f70-40d7-bc45-a5a4d1f4569e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ecc6fde-e460-421b-8033-18d394638134",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b2f03d-842b-4aaf-8a3d-450e7cb36191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ce3d91-8a89-482e-a092-31231235871d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7f859b-2312-49bd-a997-86a3539093f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2490e961-91db-463e-943d-3b4329ea66d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5ee845-8753-4f27-9eaa-48864ad29dc8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608064b5-c7c1-48f6-b74d-aa47534e2132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39820b84-ca76-49b6-a2ac-488c84c2203a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd422bd9-bdbe-4362-b645-81e835eb3a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6405ea44-362b-4caa-9f42-ebd50856d082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93eccfcf-58bb-4d2b-9380-6fafe5908155",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89fc533-640e-46c1-a3a0-a629530c09d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa62af6-4c1c-4010-ac62-8fc76c7be282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba641a2-98f4-4820-89bb-1cf7d7b2668a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d010675b-7255-444c-b8fe-cd67bcd0e04f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fccf624-b474-4e78-9d41-013f60a0e35e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620c8322-910d-4755-922a-fca82aba540b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6959923e-0881-4a5c-ac53-c1adf2eb29ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ba0819-219b-4bdb-9ebe-843e50c2c4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41a43346-726b-4266-95d0-863774854408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b152e8c4-f124-44af-87d6-de0735a06ef1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37d336c-34ea-4138-96ca-3cd52751f529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de01a1fc-1dcf-411d-815a-cc4b71a599bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77be7113-8dc9-4ae3-8710-fae2079af296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7da601d2-a7b6-45e8-b96a-59739645e37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93703ea3-bbaa-4cd7-90bf-c0240eab07ab",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fdf4e6-62bb-4c56-a7de-389ab0b693ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5bd2a04-35d7-434f-989f-cef89db68e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51636e7-81a1-46cb-bcb7-692a1eafc078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9df7e9d5-e344-4b7e-ae65-c388fe725059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b7a5a5-0378-48f4-b54c-9b26f9c12d68",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841f8273-d898-43ce-9fce-0f1049e2279b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a77ada7-b6b4-4f99-ac3b-9844b853ec76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60510e9-2d74-492b-aebc-9d1a09894fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "545006fb-ee76-495e-abaa-0125b6f2cd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4791c5cb-e38b-4e67-8a8a-d9ffc8751489",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7031b015-5010-4362-9334-662aa3221e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94bdd09d-0347-4fb4-8673-1e90f3309683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c43e7de-33f4-4257-8857-0ee2102437c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba5e99b-25b5-4bef-9a84-ff8f0ba21b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56bace0-ce83-42fb-a28b-01477d36a2c9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6dc52c-b2c7-41ea-996e-b99b17905837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9584cf-4c31-4ca3-8869-9657e3b0416c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa69bc26-2244-442f-9038-7737f42ec562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "75d8f0df-0552-4539-8267-52453b9e5c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8530cc54-a27e-4a97-b30a-fcf5f6d059da",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c76679-8d78-4717-9f07-b7e06e400c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd5b34e-0523-4130-b51e-cdb068f41146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527a1528-6508-4514-a00f-d11c36ca7c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "539cf840-f3ca-441f-9d8a-540dd51c6a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdfff30d-01c4-478f-94af-39ae363d8a68",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b403543-f680-4d47-bb1b-2835c56b21fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4fb423-2482-40e3-89f4-5d4b79400c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1649810-5bed-4d3b-b515-d4ba3627200b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0a8811-2444-42ec-8d89-522fbf0df911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab49dd47-25ae-477e-8f9b-19c7609e5918",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a739546e-408f-48fe-acc4-e648516006eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70dc2c0f-e1c7-4476-b4f1-4f1c03166176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9985dc2a-16f2-427c-b5cc-070a9e1ca59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "254b3e04-c243-4451-acdf-ff6747873c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80f4e20-8779-4321-a58a-287f829d4003",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98bd937-c3bd-45d7-81d5-206397eae11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7aee4f1-2c39-4384-ba53-2f097e000492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146a387b-7311-49f0-9489-b221158fee31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8486c72a-07b6-4bc3-8fc2-585dff7dab5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84db3182-5d16-4c92-a541-d8342bb74249",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079a9c68-2378-4d25-91f8-a2619a182e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba53b9d9-62d5-4f8d-af68-a4d2376e1161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5f989c-4783-47a3-b13e-64ff8914f813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "26d38327-74a9-492c-8c9c-cd294531a349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f19049-29d5-43cc-8ba4-90cfce6f3dc4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20570c1a-d8ed-4d80-83dd-8248dbf66e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658639f0-9181-481c-9272-b26df73a1141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede20fa8-6c87-449f-9243-4740fd346c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af02f746-c232-40b9-b3c6-6417b8c90d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dccd8e3-7a72-4233-affa-a20e1276609f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f306ad96-8f28-4457-a356-cec91b963ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3659de-56e1-4358-ba45-a02f81b06661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b0925b-91a6-4935-bc83-dc125a9964a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c469d65-28af-4587-bf49-1d5431e74313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac5d0e0-5d19-4133-86bb-c3406eddb82f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e5d2c1-81ea-45db-b878-3f77be30fbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0e4366-849e-4070-bd59-d57360487830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38cc986-8dfa-4e90-8b95-133ffeb9150f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d05aee06-dfa2-4c80-98ca-056711d2bcb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaeea54-2997-407d-9803-bd8191e4ba82",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6a6917-f873-425f-a306-8c8ac9f59c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1210ca-981b-4267-b4be-efedb2c8e20b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16820de-2e50-40e2-b39e-6ac7b2cc1824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2016051a-6038-4e03-9373-9091628f093e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671addd7-fcb5-41da-9522-96e11d04cc0b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e179d1-ceb5-4a91-bd23-9da0c77c8162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4700731-4f35-437c-bcee-f318c1ecefd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839a71e3-12bb-479b-a9c5-3984ff735294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f21841c-b04d-43ec-b80b-668c509b9d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4f8803-4462-424e-afdb-867dc393b006",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5218ed8f-3c8d-430a-b35e-0b04a37ca0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b39707-24d0-4dd5-8111-7bce6f61f0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f311a3-27d6-42bc-8c5a-19823809976d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "610e35c7-b279-4cd0-b548-863437969e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1cef0f-a913-4189-ab64-a551f4921510",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b71a1a-9279-46c1-b1dc-b57c8b96b4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64f9292-a97c-45bb-ae75-af2993c8e66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8c8f99-ba08-43ea-b17d-b6834a3c6bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57667f4e-1181-4154-a954-0b1f6f037d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557b1f01-c2c1-4795-8302-acd52d4624e5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3b76db-4f0a-42cb-8df7-9335e85fe06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c7605e-c161-43fe-95cf-f6f7117c9981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e259f7-241a-4fc7-90ec-a25e5dc018c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b899123-1eaf-410d-b43d-0cce5652d3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee17f88a-90ec-424f-b777-754581d1f6ce",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2385e3-7910-440b-a439-d2ddcd576abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f2ae89-859e-43e9-8274-53effaf2fa3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618d7f90-1139-459d-a00b-a98afbf4d9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be88b489-43aa-4041-ae4e-5f64fbdf865a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1354a4-6cb7-4488-9421-b81611484a15",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6009f7-cfb4-49a9-be24-7c8436e52507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a2246e-e9aa-4eb0-be43-bdd2cf919cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4c6587-770b-4f18-a79c-11d36b0570bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa456a5-0876-45d0-b225-9906c0758429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16631eb9-84ba-4220-b59c-0f163119ef9c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084c211f-8175-4c45-b3a3-ce3199b40b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85eb39f8-f01b-47d7-828c-67aa7cc07b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba43bd6-b999-41f0-bb78-fa042ad13acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d407a7a4-1310-405e-838e-16c2b2a28d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa3ea25-7529-4821-925a-ff0cc7fa02f9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "169bc58f-4a67-45ac-b442-66894edccb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac6d09c2-201b-424a-8c49-43842ccae99c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a71c9f0-cfca-4805-8165-9e6fd098a97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33ea6291-5970-49c3-a4d9-a285268c9d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1358adac-36cb-4cac-8c75-2d8e6c818ada",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab90076a-0553-4186-88f8-80b8549d0b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21cb0071-591a-4243-b9b9-42312f051dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b59325-cbc1-4453-9b75-07283098c933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1faeac25-c043-494e-b59f-4ad2470f825a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c580d4a-c6af-44ed-974f-b111191326b4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89792556-8c04-45c7-8b7a-9f8290b8882d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb68ead-2bae-401c-a15b-af767e4587c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeaab711-9823-4ac2-95fc-ec10c4567f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8873d8-2865-48e4-beda-435845692b0e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "36cd0ccd-2c96-4b88-9523-899740018378",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c69aea27-96ef-49d5-98e5-33f4cb16b100",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d93f123-4e25-46c2-bfb9-bfb617b1b09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7182c6c9-2081-4baa-bd8a-8d243d4de25b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2610979c-4c50-4911-8985-16cccf2ac01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1436f98-81e6-4572-9c1b-29457f86a06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb0997e-f239-4c37-8613-54361d38b654",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936b114f-3409-4fe4-aa12-bab9ae0f7947",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9110cf29-1826-4779-a85c-a45f0d9be018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00150c95-bc58-4e88-a362-2dc88d6aa44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d1398d0-b829-4de8-a0df-bfba501edba1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68103d41-103c-4a57-aae0-f792ed8d4c10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8783d16f-4ef1-4cd1-b646-413d0195256d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06c3000f-171a-4a8c-8b41-c8244e37e703",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a228f62-b2b5-4767-92e7-9fb803c49915"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d213225-78b7-46a7-ac49-71e3fcc7aca7",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "52444918-c88e-47a2-94b3-794749ecc98e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d428cfbe-daeb-44c7-a777-d3d1c4010d4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fd21eae-db8e-4671-9cfe-f79099b30668"
            }
          }
        ]
      },
      {
        "id": "2191595b-e297-40b8-a917-2e61099d6897",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "aebc3f28-92bc-437d-b4b3-aa912a0cd6f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ef491f3-e6e8-49c1-8902-e5769a7cdd35",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44644b03-b8aa-4a0d-a783-6ea156cef914",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f5e6b3-b0de-42f7-a21c-763a06315bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5aa724-595b-4179-89c7-270c914be118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686c0022-bc1b-4aca-ac3e-0c190f879b2a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e997f1bb-b57f-44b5-ac13-a3f3a38a014b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6170e770-3a83-418c-b80a-2614debf4207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedd5e90-35a8-4c6d-9893-ca8155185df4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391470dc-51e1-4fb2-aa07-3bf703c98c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b991ebe-8919-4d7e-844c-890c46abaedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d314fcd8-ec90-4d60-8062-e3fd25caaf15",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2c4ae7-80e7-43a3-a2c6-7c655a778ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801224d4-80da-4e38-a1b6-2a1c725ad15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09eef092-7e11-48ab-aec7-9bf29fdf73dd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65d0fcb-5207-44a5-bbec-596b3e87fb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc89656f-8f3e-4d2d-9a8b-35af0d326a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cd55db-dda3-44d3-a2ce-33f5a024dcbc",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc0429f-cf2b-406e-8291-54c615133e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcc42f6-9289-4ef8-9c6f-c57462027841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cce6083-a42c-492a-a0e3-ca720fe0e4fd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebe8f51-61ac-4cc4-865a-f6e0671d0e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc442109-581f-4212-9e5b-0aea10a401e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbf55b9-6ab4-4809-a646-4ef73bd88008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864cccbb-6bba-404b-a879-ca88a504d2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5acce6-4fa0-4d7b-a695-929889cbffc2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f0369f-cf1e-40d7-a36c-48c64efadd61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "349bbda5-5f39-4e93-bcce-6479be83a91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2c30e6-ca6a-4e90-acd3-a33ed02f2c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758b7da5-0325-4b8e-b2d2-ec556b8a5d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f78e41a-f862-4247-ab4d-d10d9c8a6407",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0c6f2b-f020-41e6-aa15-32b3040a495c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71a63744-60d8-44ff-be0a-3384607e09c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9774db39-4c3b-4f0e-a19e-49733140b17a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eca162d-ddd5-40ba-95af-2c21c87a8a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45330708-a3ba-4761-bfaf-f93f4c7c53cc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ea15c5-e902-45d0-a1a0-5029b12d14bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c611d1a8-daff-41d1-9439-89f948ce023e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd7b566-bd76-430c-84f7-50c291ea230c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212dc48f-a0c8-4bde-b8ed-b777ba1767ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded64f76-a248-43ef-8d32-6adcdbfd5cdf",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796a6eb7-bd39-4e1a-a160-b640d0656dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956e016e-6e2e-47b1-af59-8b55b7cb5ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9cbd41-2589-4c72-89ee-69c2836537c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6768865c-6bdc-4d3f-af92-1bdd8eaf282e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a07fca-0edf-4cce-946e-4e2d1d6307bd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b5e628-9176-445b-912d-dad82a097f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a074a5-f716-4dce-9e42-dd3901862187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef995c98-e7fa-47e2-9187-e19596fbce4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cebc6f19-5042-4ac0-8d49-bf1d95b6d105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf12d4e3-06ec-48d1-b21f-01a4d7b7237c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6e09c9-ea65-468b-ad2e-6d950cdf28df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c7b6c2e-2563-4351-88a8-e004f58da3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35394e98-8084-49b2-8d24-7bdb019f67d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a3e720-85cf-464e-8aee-2c730fabddf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c8aa99-b5c9-4b45-9d99-b523e78f1cb0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d439683e-2f78-4baf-86f6-94d3e6f9e7f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ff37d2f-d84b-46b9-b40b-6a7b084cab6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e480121-95f0-4f2e-b6cf-f0c764b1560c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33353002-9aa1-4b5d-a458-5542e1ed7adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e985b2-66d6-42aa-a888-b73e0c7dbe0e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a07ebe-237d-4d0c-b266-7c0420885773",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f17f125-64db-492d-9018-7ce81363358f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a8301f-87b8-41ce-92f5-b6147ef8041e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa6a178a-5398-4be2-8c25-11834d3b817e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ad8839-b1df-480c-992f-9f72975a0c44",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61274b6b-670d-403f-946a-2668ca1e3c0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85156d68-48b8-48a8-9c72-b801eb19bc9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3db2fd-086b-4122-9ff1-cf94e8e89e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370eecb0-0879-45a7-85ec-98e766e64e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ee2e13-633d-4549-bf2a-4a0920b88248",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a772b74-b6f0-4db5-ab96-1a5e4e0f7db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24789dc-3a9d-4cb6-ad71-2dbde8475de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce06dd30-e9c8-41e3-83b7-da9955474134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc99c5ba-ec68-44ac-9d11-e59e5f4a233a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26d2579-d4ec-4a1b-808b-34c10189b5a1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da18d369-5824-40d8-b081-efd6e1e7763d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5cab83a-deb9-47dc-b3df-63b9f70e02b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4821f2-90c8-43a3-a0f8-d8707964290c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a308d333-419f-4675-a742-618f828028fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c7a45c-2567-44f6-b0bf-6e646ed7d5fd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075bb1e4-f378-4f1e-967a-ea9dca1a8cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e52a6d-87ce-4e0e-b602-97da624db60e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f023c0-31a2-41f1-9aaf-7c70db19c9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1727490f-c714-46c4-88a1-8754d3c2df91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5aa1294-c54f-4c4d-bf62-b553b9868a0a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19d5bdc-c4d3-4012-83e8-81b294ab3c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2529126c-392b-4e09-95a8-3f1668b81b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5df2e8-d1b7-4b56-8914-a02aab6f64fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a8958b-abf9-49da-a9a5-900efd6dd988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121114d3-7bec-444d-a3e6-25e8c6a34d37",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5617fc33-f246-47a5-ba0b-1b720540f3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b71f821-5e19-45e1-8537-3f4e9e40d941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9a2502-d0ea-4692-951a-3ae9c59b6b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b91f8a2e-4e0e-4f47-b4c7-50d0931f5de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7024afc8-e453-49f8-9ba8-f7066e179412",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e283f21-ff99-4a0e-8edd-74b9519e547b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b2091d-3f00-4d4e-9b50-d3025769da3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6452d2e6-86ab-4486-b652-964bf1b62f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06edc38a-e3f7-4820-9bbc-51d802ea8cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be946ceb-9e09-4340-925e-f7326b9c1585",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45448909-7049-4d10-844a-f9f07a9eecc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ad4781-e613-4486-af34-88e90da393af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3634005-152a-4074-b46e-e2894a5df36b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a57001f-2d73-4b51-87c2-306df7ee4a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3abf6960-3995-49d8-b29a-b8ba838df0dc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f59877-5f46-447d-9ff5-afa12521e2f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2733c108-26d6-49a1-8158-9f5df3a3b6d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edd3540-fb8f-4075-a804-fe90e4388bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88463c39-8d8c-41b3-a564-7ae5113ed6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9d1b95-9e54-4c12-a705-8e9da5d9cf75",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10f5634-7cfd-4b7b-a9fa-9ef03cfbe8f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e60b7de-0a84-45f4-ad5c-2ad7bdc7efd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31aafc19-6f26-48a4-bf2c-3d8afee64a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c55214c-bcfa-43e4-8abb-7165009e5c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b2630b-526c-4c87-9819-ea1699c23889",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640c8592-906e-43ff-8be3-658976cb2e0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1e7caed-0c14-4b84-9bf5-70882ba05a7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3395528-7614-4034-86ba-5feb5ca239fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "635659d9-4c46-4a75-ad5b-af4f047f8559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5aedc70-95f5-4531-a440-3be1fb73c1c8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23832c16-3e7a-4267-9131-d239da291501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f04c98d5-075d-4328-b1f2-068e06da134c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bcbd7a-e7f0-4c63-b158-68ef7a4cb2f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336697a6-8488-434a-88ba-77dba47dd2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e87015-b464-4f45-92ad-80fb93cdcb30",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a755d51-ab23-43c7-b4b1-b783099dcca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e19d78-54e4-404d-b5f6-84c6a9719cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f476e1ca-2ee6-4f79-9609-d36241789469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d58b80-f32a-44dd-8213-5dc7a36eb1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f81da3-f33c-4533-81f5-887997884101",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14226c47-955f-4b59-aa53-8ce8007ad567",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9ab4f9b-dbe9-4730-86e0-b7b2a289c816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459d3c1e-32bb-4ce4-96a7-1c4099c1babe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc31d23-cb5c-436f-9111-1b85bb25b63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579dc289-933e-4b30-93d0-e6a0f89c06c9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b077031b-35da-4b8f-9670-90c31d2dad6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e39ab037-c965-4362-94f7-207a079335bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef3eaf3-185b-4095-bd22-2b2fe07e2918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2192a926-9667-4188-ab75-1870f89bab70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac7dc82-aeaf-4017-8eb4-368e4db97e94",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bae4a0-eb56-4572-87d1-6a5dcdb3c945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ee1707b-4052-4559-8be2-3724110f37f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2c7fda-5cf7-4296-8387-a301dc82062e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba75482-efa8-4d15-afb6-29bbb5ae4702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f31562c-befc-47c6-ac61-b5d1438756a6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce77fcf9-97d3-418f-a204-1eec66140f7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffa363ae-9798-4e2a-940e-058c78c298e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fad2c51-1579-4b45-8460-82a50d765cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8ace01-789a-4d18-bd72-45d8b73ccf5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e770c5c7-4d11-4d6a-adf4-a3d38aafa10a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2c09ce-9756-4b64-9092-91e554142f12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18df99ac-79e5-44ff-9af2-8fdb361bda7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd635bdd-63dd-4255-b701-0873364d9951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c813848-1fd3-43c8-8585-037fc8115587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53c2c21-69ad-44ae-a13a-923f700f351f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbecd6e-394b-4b5e-b0a8-9cb209d5ffde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d495228-cbef-426c-a9c2-6b0acc8944c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df007fa-2986-4fe8-8293-7e0e55bfdb2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42e3dee-dea0-42fd-81c9-26371a2cb87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4aacb56-a848-47e2-ac51-01b7314e287e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38af46f8-5ede-405e-8be5-4f1e565ea05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da4b782-4159-423f-8a8f-f8f3bf7e7165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e260ce77-bdc2-499f-bd14-0e104782de6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83a0485-4020-4724-94db-5a7b64b45858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0511c1-0321-4196-9ac1-72257d54fc66",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5283bc-0f32-462b-aebc-18fb867d3d17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ef8f19-8028-4a18-9c26-bdc13be9fc65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f9a7c7-594a-4461-9c5e-657de107fc18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91496725-ad80-4f00-bc8c-bd8d6f2d5d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d86ec6-766e-45e9-abb3-64ca3e32a13c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14ee579-f1d6-45d8-acef-06a227e0a262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "313f08c1-b6d9-44c6-884a-0dda85c71367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d159a5-4bcd-49b5-9e8e-6dd563fbc376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da413795-c705-4381-b8df-4fb53f3f24db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bffcfb-b21f-4304-9e02-3bd78c393e16",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87e2fbb-43a4-4a8b-8b0e-4778b10c32f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11064a87-69fd-43cd-a254-2a646ab029aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf113dd-242b-47ea-a985-9976e4c98334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c50eaa0-f81d-41fb-a900-5a4dabe21901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba76abe-1905-46e7-bc50-1881fcf041ce",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9604e17-0871-4522-bfeb-f2d86b4a4086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8149e1b1-ea6f-46a7-a2ba-7b5db69930f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba7b92a-647a-4c09-962c-ffe1ee27420b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c83017-d933-4abb-bf62-f31f45c85fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f935df9-3376-48b0-99b7-8fae90ff1e24",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ada550b-39d9-4a06-83e8-feb8cc63b9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "813d2016-366b-403a-8d77-60526b5a877d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8562897f-ed81-4b9a-bbe2-658038dcbe21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1878915f-8adb-4a84-80f2-df721522371c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8913a57-7aa3-426f-84c4-239e69a96176",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725e4e68-5ec7-4754-9b68-5947434aa4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9bcfe0-4568-4063-9b92-da6f28af5fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8f9ef3-2479-41ed-aac8-d569a45bddfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbab05c5-60d6-4c03-921f-a7094db6e5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b052cf-ca0e-4373-9a48-e7059e8c303c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5b1f8c-0dad-4667-a25b-214b516c41c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f138f1-07a4-4ba0-abb5-84563889219b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c80d147-29bf-4f54-9423-c4dced02d14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbcd69e-21b8-407e-a3b2-bf03d0437436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca25b056-ffc5-43b7-a791-9b52cb91cdf3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a1fff2-ed4c-4337-988e-c3a3d40ad3f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e39db2-15ee-4a30-a143-b9a4c9251fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a2af5c-f085-4d81-8807-f5ff1d2e246b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102e73b0-ee31-4b62-842e-4e96fce3a96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdb11e9-78e4-4660-8265-2aa2aadb1e30",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199791fa-2c62-4551-a39a-80fca97eb661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "090b606c-e67f-4157-a76f-c50e68af32a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e675176f-1986-4bcb-bbb3-dab1f8087ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd48c21-3420-4ff9-ab35-a2864f7b0a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb14183d-7b87-42aa-a713-547a1c4f54a8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d10990-055d-4257-903c-de92fdfbf098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d434cfec-e0bc-44c8-bac4-a601e4b2516f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4132c66f-be0c-47ba-ac89-7a63c2e5351b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b89a076-75ce-4231-8720-d0637b15fb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edddc8fa-390d-446e-8ae5-a527a1f9865a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e53573c-2869-45a1-8085-0b4d3e153969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ecd4d8a-e966-4d4e-83f5-9952d50ac178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafd7b8b-94a7-49e5-9862-4043d8f94b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d80d784-2d3f-4b2b-9721-306c205afefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1854058d-4fc1-4167-a23a-551b2bc2e1c5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169aef8e-5054-448b-9277-95157f0c99a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d57663-bf50-4e3f-9a2a-da397b9fe09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a11435-a99c-4f03-b7c7-3ec38217a063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0112ca73-6e3c-4b3a-ab40-93dd8412c266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3cf27a-b55c-453b-96a4-85accda7b85d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164001f1-4bf9-4842-a139-febc3cc948d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eea3cce-355f-4c99-bbde-1d281252d7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97765b09-7b45-47e1-9901-67c51807e232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "901edd69-7514-45ca-a3d5-82ea2880ffe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7a12a3-d15e-403e-a7a6-ba87003dd9b4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35b29c2-b1ee-4b00-8a5a-8b730aec9329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179158fe-7338-4054-8643-50f947ac9a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de5c028-7a0f-4057-a9ee-d5544f525af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4fda93-d2cf-462c-8a4c-444dff4b2336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2a6a31-546d-47a9-99d9-c89fa24a70b1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da7a299-004b-464d-a638-b5b1b39466a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ea1061-a1e2-462b-ae5c-0dd6b97f9ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2157b4c9-fa37-4b12-8785-3975e9eee62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb1a30e-d203-47ff-99b1-6ce4740137cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260632bd-bea4-453c-b11b-526e8bef9869",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc2fd06-5ae7-4f73-b7bd-6a24350a278d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3f22a1-a0bf-4a2c-a03d-d122558dbddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "257a2f43-d459-4130-bfa5-e1e5ab00abde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28734e25-b31c-4b22-b441-d86351cccc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b17884b-462b-4004-bb93-34c4960afe4b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e050ac57-8cc8-4cea-922d-382bf9195d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a653695d-59fb-4fee-9935-6a5088de49ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c75632-f559-4140-a35a-606be58940cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bdad47-d0e4-4832-9913-c160e4f0899e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22af0a33-cff2-4bd4-8d1c-5f9dc74a286d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fde0b0-11bb-40d8-81af-9031a8af3266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f522b28-4d86-439d-8234-1b3bd127f9e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428c4930-bc40-45b6-ae20-3e2c72a6648d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43aff48b-1c51-4c40-acf7-7127e20be5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7843e071-e796-48de-8f8b-6607c6c77c88",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9143437b-d579-45e7-85b7-c2a6e5f3cd0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6bd65f-5fa9-4043-95ea-d69c99da6804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a23bd4-3401-4ba0-ae7f-41eada8f6ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac7dd95-d607-4da3-89ac-c3870013c631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cd87e1-f9f2-436b-87cd-27bbecfcc2f3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2181f47c-cad0-4ba4-b0fa-ceeea9396e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3f014c-d0f9-4b20-8361-d67365e2617e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3884c99-03b0-49e8-96e9-76fa1e197da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5fbf73-86ba-4dde-9f77-f6c6cf28c0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a0d449-a745-4e65-98bf-d6c38b198967",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bbaf63-9060-4c3a-92a1-c54a71faa532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a525898-0f21-4c7e-bab4-229c04a06247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbfbfe9-8eff-4b2f-912d-11f46a480d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c26bfbb0-29f9-4f21-b160-b1620068dc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151df284-e3a2-43ca-b17d-2f54e3a4190d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22001735-b3a4-4516-bcd3-fe744326ef46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21eac62-cf6e-48ce-bf7b-93e3b022b24a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ad8703-eca4-415c-8fa0-f7853e1a34c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02a135d-8364-486f-832f-fbf569e58871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4cd634-df86-465d-98b8-4a46a89ac6cb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf635f0-a173-4ab4-a585-cbf751b5624b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5cc82ac-47d7-49b9-a75e-369fca89a1f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec1cae5-69d1-422a-b0c1-f205bea50667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a8b5042-e8b0-4e59-bcd9-3e6362126897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf740c5a-7ee9-4aaa-869c-ffef4e26b158",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b271128c-f706-48fb-8324-4aad730c66a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4477e4-4b1a-4c0b-be14-459ef07e4e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733fba9d-fb96-4246-a5b0-6f23af6d8f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8bf3d9e-ede3-4ce0-a5eb-eebbef253046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ed46a5-8851-4ac4-990c-2a3c05e103eb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822999e9-b768-4660-b3c3-59ef8570de1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32eee6e-f084-4906-8fe9-82206cd5e0ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8bb049-61be-4166-b3a7-a7726492526a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d84231-9de2-4570-8bc1-5959ab3de7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4e5665-61e8-4600-ab28-3378ca767427",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c25ed13-df6b-4353-8040-efb6592d89eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aad076a-40ce-457c-ae0b-b620539e1aeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb96350-3dce-4b26-947a-94d80467224b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a6d9ac-864d-48ca-af38-0f09314699f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef737ef-8c6a-429f-93e8-1c2ef198f523",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3370dd-5e39-46b1-bafb-796deda3daac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96c1543-cd49-4c9b-b7d1-f74dc9599c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17092a52-a251-48cb-801c-c636f49e59f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651c8dd1-d163-4638-8125-25667867a7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8fd67ff-3181-421a-b59c-b2dae2bbb97d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b47e6ae-5175-4dfc-8eb8-7da4dfb04781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6675524-0252-4bd3-bba5-c58861b7dc85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc9f340-8311-47d8-9819-e32b6597f00d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2148e2d0-3791-4a5b-92da-6d7697a9c5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b74cd6d-2248-4e81-bb32-ceb37ff0563e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2d3fa3-dace-4058-85ca-f7b6d1055928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b143af46-b650-4f00-a81b-44180f05693a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f0a756-6c56-4452-b567-5a282814f3f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b6efce-c220-4297-9ec5-e6ac8e9c7b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd981a3-f026-4c89-87c5-dc869d91c505",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887cc02c-408b-45f8-a1ae-db842cec5b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a46d08c-e2ff-4af3-9b33-99343a1d3863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cc8c84-d9ad-4c86-aad0-26138aa9ceca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406dbef3-c0fd-4e50-9b54-772f1b535786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931851a8-b68a-45c1-876a-550c523d0bce",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a05abcf-a793-4d50-96df-f772143397ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ee73ca6-de03-477e-8ca3-60cf28ce454a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "827e2e58-4a03-43e7-8842-96e88a84c37d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01178e16-754a-4497-b6b6-9139b59ca2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2eab10-7145-464f-85f6-1ad04c88a77d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c256f2c-9e35-4c8d-b305-3619b384db9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9752389a-760e-43f3-8623-c357bbb3b6e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05577a27-a25b-40f6-b477-e823f1c2f6d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec58376-c46f-47bd-b1da-2c5a1ce288bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a722d54-818a-4bea-9d80-dbc6aa144efd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f7135a-1f67-4aac-b356-aa53c2ffeb1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec674561-5d0a-47ca-8b72-61ff2090af76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62baa11b-a323-423a-b5cb-29845ba2330b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084f8e02-b485-4291-a032-6000754ff805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b52bfa2-3776-482f-81fc-77b17e05415e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918338d8-36ab-47d9-9d9b-43bf1796d52b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04462e70-0be5-4d1a-8665-1bd1e8e007b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41d7d85-1f87-4ea2-a3cc-2bd59988cf54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b496a2ae-35f2-444c-b871-368aa72e4866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0319e3-9683-4bf7-9f42-bc3abb8246e9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d89d99-bd13-4ddf-87ad-c61e5a691adc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e334ec6-8b32-4c00-ad78-1212bad42508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f9057f-62ad-4585-99b0-b054c59e6016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9b1f50-bd42-4871-8d14-b4f492a0025b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2508f84b-d98b-40c0-864f-cc433b18f611",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffb1e56-28c9-4a31-a0b2-d7eab91729ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fde83024-feed-4aea-933d-dd25b85cc926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35cf6f75-632e-46c8-aa3e-2ffa7f19fbce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e1cd68-7430-4872-8e54-40781bdb7c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6603f90d-f5a4-4cba-8ddc-f3b0edc39d76",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0eefde4-86f1-4812-a774-6f51da5b5095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dad9beaa-42d8-46a1-81cf-fc0279532153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdae335b-8448-4cbe-95b9-45be9c4f7cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61609bc9-9f0a-42ab-af48-b56ee322d96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edbd0fe-08e0-4455-93ce-c8866058f2ad",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5eaf65c-add6-4226-9ba8-74d15d04ed1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccf7954f-5372-4b6a-8926-9ac00d90374f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb94238-1439-43f9-848a-a31d6563e4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed582e6-9d98-494f-9dc8-e1c08282e4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71730c20-3a84-4aa6-9b7f-6fa1005383a5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b92208-a948-4fdc-b08b-353e3d380b8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d5e8bf9-073f-40b3-a727-63979e86d351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7af736-77c1-4e64-9d4a-c23278ceb389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ff2c2b-4acb-4329-b917-86031fee2589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cae118-34c8-4f03-aecb-067cece78c96",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3120b8ef-4e17-4cf0-a99d-eeee7fff4061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9e05805-a175-4d77-a2d5-de68589c03a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4236fe73-ead7-4e60-ab62-0b8d4ce439f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e48ff5-c2ec-4f67-9f3c-db7960627cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b937f5dd-f257-4f72-b6e5-0c14087a2d0d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e96b83-8ac6-4f7f-8384-1451b86f5a88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3790895b-1237-4138-bceb-2d2463b58ce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e389d63-388c-4629-842f-0319e5a58719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30127ab0-9104-42ec-96ab-d04a1b811013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2d1803-cdce-4024-8be7-d98aad0a5cf4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dc807b-c2ca-45a3-b20f-211de1608685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "454e5338-1432-4358-89ca-5578bc21d55c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9629ef34-77f5-40a3-b09d-784ba983ace9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f031a53-8ff0-4deb-8a36-d98f74a20ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89dbac95-dd0b-404b-b2f2-20767f21cfb0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f600957e-c4ae-41c8-ade4-6ff4f90e8a4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a64f015-9ecf-4c25-aea7-30a506f9acce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e745af5e-9320-481d-bc70-60337ec16f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaff1901-15d8-4c22-953c-ba1c5cb908ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422a1f2c-5867-46ba-aea8-dd04a15aba5a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec171387-9574-487e-970d-bf07789d1915",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4012b503-2186-4fbd-8196-26ab6bc84408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e29023-0596-4f5f-b5ff-493b4f7b145d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ee99a0-914c-4cc5-b2f4-a275b89d59ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0fccdf-751f-45d8-824f-4166abaa3138",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec15a29-4710-423b-bc08-522b7dc1e192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f469c1d-6d37-4238-b7ba-11a76fe1d0ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf64d36-e531-4260-9139-470560e337c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41031b33-e0c4-431a-800c-347362d9479b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2607a3ce-ea86-4709-a9ab-39eacf428632",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5531c772-c6bc-49e5-a57d-b51dd8ad6f2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe6edaee-9dbb-4b41-b77c-4bc78af82bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0b4fd6-24df-4c57-bfdd-d694f48f4800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeccbcda-8f14-4ff9-8d59-90a2b35f0bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10092a43-2653-4963-89bd-79532d878ef4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b9b1d6-12c3-457f-9e9a-d4049baf396e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a05de864-4d10-4600-88bc-fc9d22293dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b7f907-355d-42c2-ab3c-e7aeaa6719a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7c17bd-4d12-447c-9063-7549002d090e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6b86d6-2ca9-48e5-9f3f-0c74e51a18bf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21720cc4-ea47-453a-9d6c-dc7bd292dad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d54685ad-d4aa-4429-8a6f-7eab4b01d7c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c3aae7-4680-4e63-bb5a-f8b78dc05122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f85057a-4679-4003-b96f-c9ff652f1dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355a6510-0ca8-4588-8c78-cd1c4a30a63b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2becb2c-5088-4554-ad9a-c3c42f41ff40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ffe8ffd-e492-46ef-bf2a-6fbedf1b0d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723a384f-f70b-4cf1-805f-320bda89970c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888d4a17-61fd-45e8-af6e-448b3aadfb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0808389-c5cd-4f60-bbec-20ef117c9ec3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e340cb-3c1d-4f84-bb08-8bd309b09a0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7af3794-3489-4a1c-955a-f4042850655e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61f029c-a070-47d5-a3e8-e37e84dc8e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8356cffe-9712-454a-ad06-27df116c6680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898540d9-9025-48af-9968-c5222524143f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7d23e1-00b7-4392-8db1-e8ad85f99adf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef9a7599-a1bc-417d-aa31-a4f936f85609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e7e808-a3cd-45fd-b83e-12a9260d86ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b57f999-8cce-4302-800b-161456db70a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59c7d6a-42e7-4c69-8e11-7dc26ea06e50",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b80560-28fa-480a-8240-c303feb36406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2e9e9c7-db54-44f1-b245-fa9d6db5df04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "539c6f0a-5edd-4394-b94e-c86056318d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2e6a5c-48a3-4bf3-b875-712024bc3224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254c323a-2166-41a5-87ef-a20c4ca671fb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ac42de-4883-4c88-8f9a-e16790483123",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af4c5f9-67ec-4979-940f-c31a21e431da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfee322e-4529-4a6f-a1fb-90db1b4caef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4df179-6e22-4e13-88be-daba2c193cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3fe91f-7995-4976-b0fc-716867b6c975",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cda79b-abac-486c-81a4-17bff31029cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f739ec4-0884-4683-afd4-f703ee044e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcf2ea8-c5f7-4428-838f-8e30baf36a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffff2ac-35ea-4290-82cd-7f9b1101eff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afeb606-6e8a-48db-91ce-1c22409d1c1c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed032ad0-59c1-443e-9222-276f0f5dce9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "115afa4f-adf8-49d4-a938-f72e83bd52e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3a8fac-76d4-48dc-8a34-aaa45cac4616",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800eb52e-8a24-4e5c-a3ee-817745e6e901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6252532f-f37e-4ea1-bca3-1f352fef0fb8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83cbefe-88d5-4ce6-af4e-7ec3d933b5a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bf56da2-58bf-47ba-a8fe-8642b52d2b25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71395120-b1d2-4c6e-86b2-39eb59fb5dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65b11f2-c225-44e1-8c46-410f1be627f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4a22c0-1c30-46e2-ae7b-a50e1238957b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea75aea2-4243-457e-86e9-6bdb9cd095b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af7918d8-af89-4d58-a90c-ae8d59c800f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8c16a7-f46e-4d70-aafc-e9775528cdd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c554747e-4997-4f6d-911e-b73e2f690e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413c2c08-0e45-4bc3-a8e0-0c79a13f8ccb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452767c3-eabc-44f0-948f-ec4b0155987b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab771c46-0375-423b-987a-f6ef30b65861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc50437-0b45-45b9-a58f-a492a6022e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba4791c-ad42-4f3e-b067-bd592d1539b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe27911-2d71-4e0c-8ae2-47e97f680716",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c85fc5-2b7d-462e-92d4-10c905961fa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed3431b7-1595-4ba4-adcd-948a35a6fdd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e0a29a-18a9-49f7-93c8-d8ab448a521c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb46381-1a83-4734-906f-5505439871a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fb061f-738c-42b6-b01e-52bbe699938e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a369fe1a-e122-4d19-a26f-cea52d810dff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba636839-01e2-427c-940a-06b2dff02ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ed7afd-0d91-4f4c-ba05-febdf0fcc11e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7551f0ac-ba13-4d2f-8638-512ee34baa72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde2146a-90cc-4308-8bdc-08e5bc1d8f98",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9012cbfa-f95f-4fc4-a459-49cb88b67458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7ec54e5-0dca-48dd-af78-7f13177e5f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebda505-0d29-4135-8140-5487976f9fdf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a29bdbd-7dd3-400c-9ba2-22cdfa153762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a272718-2faa-4dc9-b4f9-601109b671bb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b8deac-6d0a-4406-a464-ea515a995557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ada43db0-e1bb-4b90-91ad-9a2458789cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42918077-db45-432e-85ea-00c4fdef337a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ed066b-1efa-42d9-8cb5-7be5fb007723"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ab9f9ec-d5f8-4670-9311-98e527d2fa38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "167502af-7ac8-4758-965e-64e6421ef4c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26f15dfd-8852-44b5-8466-8d9c03888964",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ebe1acdb-0d4d-498e-ae0a-793cfa02c5f5"
                    }
                  }
                ]
              },
              {
                "id": "bfcdcb56-da3c-4009-9f6e-eea5bcbe6390",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05073cfc-4481-4787-b135-3ce238988610",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8225592-e1b9-4163-98da-ac76c32531db",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fffe0483-0c1e-4380-9dd6-62e8a28b20f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f7aa86-3338-4e04-8d80-77d6dc91a786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb5ce7c8-63e1-48c7-a7ae-0bc394376c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2221044b-4744-4fc8-8dc7-89ba60e3e275",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eefe7a8-5173-469f-8257-de00c279be0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4ef4fbe6-37ca-40e3-9aca-7d0aa9bf2d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1349f0c-937a-44cf-a107-a825c9531e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e42c4c32-54dd-4f74-a978-66b7c5d1cccb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab02815e-0350-4bed-998f-7c09f65606a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce9ed475-21e1-4a2f-a35a-5ecb0f7cff55"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41637d41-6455-4f8b-a42b-fe1540772748",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7070838-9b7b-4bee-8722-562d68dd77f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "45431369-0c65-4f50-a06e-9df0673682bf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fcf51460-daee-4254-943a-8085c1a1f196",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f959910-f43d-436f-a829-d1c4fb3c220f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "137a10c2-63a7-4656-8ee7-eb3a519c8828"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c24004a8-e68f-4fd4-a319-224f2c833a25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5becf4f3-42b3-4d4b-805f-f57cdb7123d7"
                    }
                  }
                ]
              },
              {
                "id": "68a11fcb-8942-45f7-a5a6-7efeb61888bf",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb2e6850-9cdc-44c8-9a04-fc24f5b2aea3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e29e134e-a997-4255-bb1e-b4c373f92987"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f37ec55-2c9d-4c85-a6a4-143ddda19849",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b975617-dfd5-4053-ab9e-0d134cef2750"
                    }
                  }
                ]
              },
              {
                "id": "0c9afda8-1832-4d84-8b3c-76ac48dcc829",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8bf771f-415c-4121-bac3-a2cfa7b5ec3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7351eb89-f008-426c-a32d-7befe09545a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb420baf-3070-4f5b-8063-66903f6af9cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b706b3cb-484d-4fa7-a76d-e68938ae3afe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc1985b5-4905-415b-a875-1dcd1c9bd89b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5201aecc-d374-4457-bcf9-63a34472de79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2d391ed-2a36-41ac-8320-2d13e2435113",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71192376-a201-41b1-a987-358963588939"
            }
          }
        ]
      },
      {
        "id": "0a5e4f63-dd17-4cd6-a6c8-f21b01301d8f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "69016b47-ab72-4ca2-b381-5abf8885f369",
            "name": "Negative Testing",
            "item": [
              {
                "id": "512e446a-fe84-4e39-b7f3-10bca3f9e6e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04ba2f24-221a-4efa-b52d-0327c03d5b3a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3763ed3-ba8d-40a6-8551-ea4fdd3c11b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e3934eff-d728-40b0-ac27-32b0ff649d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49cd8fe-5a34-4112-9357-46ba724f3500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa2b3500-fa9e-4a8d-b2c7-77d35c771eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3031dde-b8b2-4d11-85b6-6b6618d0fc45",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e95f420-6164-49bb-adcb-27f986b3c2ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8e11d1d6-2629-46d0-a64a-5d8e5c26b15c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bb7df3-83a7-4e49-8573-a15e665482a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d88b7c6f-a2ba-41a6-9fc2-c19fd62a427b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64ee3fbb-cbe9-40c4-bd25-c1348ae8cb65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a4bb882-1946-4778-8ed4-e754a5830b43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "436431c0-1b18-4743-86fe-a6c55329aec1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a88a8aaa-2cd6-4373-84ce-b2ace1cd2fda"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddc4f760-e54e-4620-a593-9b4edcbdfe8e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "96aefa24-8eca-4413-8e66-4efdc3afea64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db3ccedb-7335-45cc-8e42-aac6cf77b242",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97be8259-adbc-40ee-a8da-cf7acca8704c"
            }
          }
        ]
      },
      {
        "id": "5277c496-385b-4c42-812b-20c70a70ae1f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5eba2ba6-291c-4e9f-be89-67b28c362c33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ed8f59f-1af9-4647-bdb7-74df4ba8b1ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6d9cd05-f38f-4d6f-abb1-d955bf004734",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7b07ab-38bd-44e8-bb14-a92b826fab67",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7c451324-580b-4b03-a8f8-f0bef6af5e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4e3d35-d0b3-4968-a326-ad6f29c6057c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d99974a-b19c-46d1-b88f-94902fe6c462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f4a04c-d9f7-4e99-869b-0d4eec736cfd",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f012df2-2f4b-45be-89f6-a4d1b15c8ffb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "040b6355-989e-4f4d-8a5f-854ad5416aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ba7a99-08f0-4c31-a631-83970a6533dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b8cbc39-d69d-4866-b59a-f5e8e5f69a68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bed8cf7f-1073-4717-ba9e-f268addd99ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46aa08a2-3606-4c6c-afed-1c62fccc7561"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74a4ae26-d27e-4a3f-93a1-8810b625e622",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4ab2636-1606-49f8-bb10-c18918002f72"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f09149c-a54f-466c-aa23-662957c41c34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c528eea0-5a86-4503-a24e-8d4e8e862593"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52f1fdb1-c4ad-4714-9a6f-51d301df5dcf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69a97644-6374-49d6-b44b-e04969fd2147"
            }
          }
        ]
      },
      {
        "id": "3099bbfc-2b70-4dde-9b4f-2dc33406188c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "346e7841-2f3e-421d-9b6c-b6481ab8d1da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0b754dc-60bc-49ab-b1e3-329ff3a8d78a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "169563cc-9a91-47a2-bbd5-00c4c742333d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deffb175-a18e-4855-843b-63274f07311a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "178b8345-bac3-4833-bca7-8efac928d5af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "561f96c1-2019-495a-a3ea-697e28262436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "785bdcea-1054-457f-94b4-5c5c040d013f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0de3916-a2a6-4d9e-be38-1994d2fea7ac",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a83e5b-a093-4ca2-a7b6-9ee04fd5e22f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "75a80725-3a52-45fa-b183-feaf56521036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fd2935-3641-48f2-8566-cdd49d027be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20bf8f19-6fdf-4ad6-a75f-3e328de48afa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1431b452-4f39-4213-9849-eaef1f07e965",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "241f8d86-e3b8-48f0-b972-a7a3194e515a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1f5ae6d-7dbe-4576-a38c-073c4a7fb355",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5f62783-50e6-4948-a081-2cec8ba92907"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a062af9-d7a2-48bc-be6e-2fa1e7279074",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "de112836-1a5f-49f8-a625-dc550cf779c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3721dde0-045a-4c86-a40e-bb5edf1f0dbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0177970-6acd-4fc5-9b35-4e425c2096cc"
            }
          }
        ]
      },
      {
        "id": "864206f3-e1d2-477e-a358-eae2ef8f524c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5780d51e-05c4-4b0c-9ace-4584f11f56c7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c99531c-c804-466b-94dc-948ddaa33e53",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "892c9cc9-7b4a-4906-b993-e83e1ec2e3cc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b923de3d-0a8b-474a-bb3a-14aa85687372",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf1cfadf-9917-4807-a3a0-144936bee902",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 338
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 460.2653846153846,
      "responseMin": 11,
      "responseMax": 3943,
      "responseSd": 479.00421022905385,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666745452921,
      "completed": 1666745583950
    },
    "executions": [
      {
        "id": "23c2d6c6-b3c1-403b-b968-2cbd05fd0f1b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "845d8688-bbdb-4db1-b2b3-4d809a20285f",
          "httpRequestId": "72bdecb2-a641-4ba8-abeb-002dbb6232b8"
        },
        "item": {
          "id": "23c2d6c6-b3c1-403b-b968-2cbd05fd0f1b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b7897ccc-8729-4124-b6d9-d3ca7ce9aa4a",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "73b8d6be-2907-4402-b798-81787df42340",
        "cursor": {
          "ref": "f6c432d4-df56-455f-a053-bdd983de03ed",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0b0a244c-3d56-4959-b170-f3a562c621ca"
        },
        "item": {
          "id": "73b8d6be-2907-4402-b798-81787df42340",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "813aa88e-870d-4ad7-b752-5b373bb718df",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "2c63ad3e-e3e0-4580-a906-15f0ff98d271",
        "cursor": {
          "ref": "6cfc2b79-905c-46ad-b993-e5938ea822c3",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7f7166b5-ec0d-4d72-aa5a-4359c62cf216"
        },
        "item": {
          "id": "2c63ad3e-e3e0-4580-a906-15f0ff98d271",
          "name": "did_json"
        },
        "response": {
          "id": "29eded55-30af-478e-83f1-0262cf5499f0",
          "status": "OK",
          "code": 200,
          "responseTime": 575,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6907be53-e6dc-49ba-be85-d5e81b1b5771",
        "cursor": {
          "ref": "93922a37-c742-4211-a0ca-bc05ac54c8ba",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d7d7928d-2225-4649-b48a-c984ce18fcf5"
        },
        "item": {
          "id": "6907be53-e6dc-49ba-be85-d5e81b1b5771",
          "name": "did:invalid"
        },
        "response": {
          "id": "9f04bd25-a42d-4c82-aa4f-ebb43c4aeedb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 556,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6907be53-e6dc-49ba-be85-d5e81b1b5771",
        "cursor": {
          "ref": "93922a37-c742-4211-a0ca-bc05ac54c8ba",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d7d7928d-2225-4649-b48a-c984ce18fcf5"
        },
        "item": {
          "id": "6907be53-e6dc-49ba-be85-d5e81b1b5771",
          "name": "did:invalid"
        },
        "response": {
          "id": "9f04bd25-a42d-4c82-aa4f-ebb43c4aeedb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 556,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e95670c1-4c6b-4549-93b2-b723e0ac2964",
        "cursor": {
          "ref": "973d3cf9-4e0f-42d9-bab3-df3fc45e8381",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3dcc125d-aa4f-4697-b840-640a7f74aef3"
        },
        "item": {
          "id": "e95670c1-4c6b-4549-93b2-b723e0ac2964",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9283bf88-6f6e-4e2a-b323-1bab8b3dfd69",
          "status": "Not Found",
          "code": 404,
          "responseTime": 618,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "03273d62-e4bb-4bef-b6df-2f4e9922a90d",
        "cursor": {
          "ref": "c085b924-d44f-4b19-944b-34770c2e859e",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9adb7815-cb09-4187-8a3a-7c244d1e6110"
        },
        "item": {
          "id": "03273d62-e4bb-4bef-b6df-2f4e9922a90d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0bda6f77-2229-4b48-ae47-0aabae94c534",
          "status": "Not Found",
          "code": 404,
          "responseTime": 398,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "12840b5b-6252-4394-8118-f3c2ba4998ff",
        "cursor": {
          "ref": "f9f8f325-0039-4181-b8e3-e49eb4dc1b9b",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f587e041-fd86-48ff-bdad-611431539bb9"
        },
        "item": {
          "id": "12840b5b-6252-4394-8118-f3c2ba4998ff",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "03a119ef-4b14-4fcd-8d8d-c65ae3853919",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "46e94010-af4b-4558-bbbb-89f6e39aa5ae",
        "cursor": {
          "ref": "499da7a8-c689-43f1-80a4-2565c9ceeeae",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c8a75e60-593f-40e2-a899-b6e017d6fff5"
        },
        "item": {
          "id": "46e94010-af4b-4558-bbbb-89f6e39aa5ae",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0da96d31-7a63-4ba2-8258-bcb93568233e",
          "status": "OK",
          "code": 200,
          "responseTime": 564,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "46e94010-af4b-4558-bbbb-89f6e39aa5ae",
        "cursor": {
          "ref": "499da7a8-c689-43f1-80a4-2565c9ceeeae",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c8a75e60-593f-40e2-a899-b6e017d6fff5"
        },
        "item": {
          "id": "46e94010-af4b-4558-bbbb-89f6e39aa5ae",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0da96d31-7a63-4ba2-8258-bcb93568233e",
          "status": "OK",
          "code": 200,
          "responseTime": 564,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "037da095-c8b7-4c49-8980-f3e78575934c",
        "cursor": {
          "ref": "f47e8a64-6fde-46b7-8f7a-0ef0ef0150d2",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "14c927be-34e2-44fd-9846-5aeb2642898f"
        },
        "item": {
          "id": "037da095-c8b7-4c49-8980-f3e78575934c",
          "name": "identifiers"
        },
        "response": {
          "id": "77d4bf2b-60e5-4ac6-b8ca-04ac5a5ab32a",
          "status": "OK",
          "code": 200,
          "responseTime": 637,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b778bda0-0591-45ba-8e25-d7fd361747ce",
        "cursor": {
          "ref": "93529c12-39a2-4ea7-9431-de958271a206",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2dda477f-7f94-440b-8ba8-745b4da71eff"
        },
        "item": {
          "id": "b778bda0-0591-45ba-8e25-d7fd361747ce",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "272b7b14-83c6-41d0-96cb-a2d24f20186f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 432,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "b778bda0-0591-45ba-8e25-d7fd361747ce",
        "cursor": {
          "ref": "93529c12-39a2-4ea7-9431-de958271a206",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2dda477f-7f94-440b-8ba8-745b4da71eff"
        },
        "item": {
          "id": "b778bda0-0591-45ba-8e25-d7fd361747ce",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "272b7b14-83c6-41d0-96cb-a2d24f20186f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 432,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "9d65f041-ac4d-4787-a086-eed2faf92dd1",
        "cursor": {
          "ref": "ae20c927-57dc-4409-b489-e926bc152cf2",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a297534f-10a1-47b8-a045-5e465945c50f"
        },
        "item": {
          "id": "9d65f041-ac4d-4787-a086-eed2faf92dd1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "adec53e7-573f-4fd1-bc31-786796016353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 441
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "f6fa1b4f-1591-4bb1-9e34-e228b2e62059",
        "cursor": {
          "ref": "6327b47e-a7d2-4bbd-bce6-df93cc1f3093",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "40d7fea2-a82d-425a-bc09-1fe276dd0da4"
        },
        "item": {
          "id": "f6fa1b4f-1591-4bb1-9e34-e228b2e62059",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8879a14e-78a7-48d7-98a3-c0afe099bf85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "33d192b6-6734-48b9-ab47-7f7cb7f244d8",
        "cursor": {
          "ref": "e4d38baa-aa2c-4110-8172-58641167273b",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "912d6f1f-30af-4cbc-9f45-75faeb142b97"
        },
        "item": {
          "id": "33d192b6-6734-48b9-ab47-7f7cb7f244d8",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e9160211-e096-4e2d-abff-7ced46025806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 454,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "74b09abb-8b77-41d2-adb2-ef333e73d0b4",
        "cursor": {
          "ref": "43397f94-dcc8-4ab3-bf36-820587479f93",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cfbe5232-ab92-4984-a356-63b52358007d"
        },
        "item": {
          "id": "74b09abb-8b77-41d2-adb2-ef333e73d0b4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "64200316-d636-47eb-b6de-b1c6f2c071f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 959
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "d8e0a6c3-12d2-461c-b851-6b7d8d31848b",
        "cursor": {
          "ref": "dddcc06c-e1b6-43e1-80b8-20113c6886fa",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2f9524ba-75e1-4b4c-b022-e916cdeb5f96"
        },
        "item": {
          "id": "d8e0a6c3-12d2-461c-b851-6b7d8d31848b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "847d1a3a-e5e0-4d16-8043-eaea69eb7194",
          "status": "Created",
          "code": 201,
          "responseTime": 1683,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "054c187e-84b4-448c-ba19-7c9b1ce8eff7",
        "cursor": {
          "ref": "9ab5ae82-3d91-4cb3-b3a0-cede2a65946a",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8815ad5a-7a44-475e-8016-158fa5349fa6"
        },
        "item": {
          "id": "054c187e-84b4-448c-ba19-7c9b1ce8eff7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2f06c897-b09d-443f-88e1-b051948a3f29",
          "status": "Created",
          "code": 201,
          "responseTime": 1618,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ad2d2c6e-4790-4bfb-87e7-99ceb3ffc55e",
        "cursor": {
          "ref": "d6f1012a-2425-446d-b0e0-54d46767742f",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8e7b1d89-2d6a-4a02-a871-15c121c75d74"
        },
        "item": {
          "id": "ad2d2c6e-4790-4bfb-87e7-99ceb3ffc55e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bbdecd0d-8720-405d-b9eb-fc373521f6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 1448
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f4cfb02f-631d-490f-94b1-04efc3f993d4",
        "cursor": {
          "ref": "65caa02e-3c7b-4dcb-b911-473768f4b568",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "287438e6-ffb4-4800-9b44-e323ba94b5c3"
        },
        "item": {
          "id": "f4cfb02f-631d-490f-94b1-04efc3f993d4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7dbaa885-1801-4414-a23b-4c0305d0d92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 419,
          "responseSize": 1417
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "deadef40-9122-4ab6-a4f0-e5445c2e6e3a",
        "cursor": {
          "ref": "0e287b92-69e3-40f7-b976-a6cec06c1b59",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d3b9b041-37c0-49cd-8eec-9038d748387b"
        },
        "item": {
          "id": "deadef40-9122-4ab6-a4f0-e5445c2e6e3a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8df8af0a-93f9-48c2-b293-5dc25599504b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 472,
          "responseSize": 1414
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "dd3bcb9e-93b9-438c-99ba-9f9808036b20",
        "cursor": {
          "ref": "8c753287-0f80-40de-a050-ee3fe9a00348",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4b3eb2cd-2749-4d68-8e8c-ed673ba097d1"
        },
        "item": {
          "id": "dd3bcb9e-93b9-438c-99ba-9f9808036b20",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3b57fdcb-1713-444a-abd8-1342465726c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 469,
          "responseSize": 1416
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "a74fee85-e694-4a45-a21e-d7991f353cbe",
        "cursor": {
          "ref": "46dbd288-6349-445b-92e6-bea17045e544",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f70ae322-9d5f-483a-be59-cd1d6e503bc7"
        },
        "item": {
          "id": "a74fee85-e694-4a45-a21e-d7991f353cbe",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bed8033d-17a2-4c14-bee7-c7adc18863d6",
          "status": "Created",
          "code": 201,
          "responseTime": 3672,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e4da9d35-87b8-4e22-87d5-f0ce9c57cc43",
        "cursor": {
          "ref": "d93d1025-6d0b-4b43-b541-bba6c5f35c6d",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5450a9f3-0c4f-4b8f-805a-28ad41bc061e"
        },
        "item": {
          "id": "e4da9d35-87b8-4e22-87d5-f0ce9c57cc43",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f4ff0984-6b0a-44ae-ac5a-90469019a962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 932,
          "responseSize": 522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "7bdc1046-b7c9-45b1-8987-3f6a47ab090a",
        "cursor": {
          "ref": "850d9603-46e8-4591-b5bd-6ea4c0537d76",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c16978a6-6128-4023-9daa-2bc1a8f55198"
        },
        "item": {
          "id": "7bdc1046-b7c9-45b1-8987-3f6a47ab090a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "545a3860-881e-4315-b616-b3648a2b0326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 955,
          "responseSize": 478
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d61312a0-83f8-4f62-9fbe-b1f353dc5ece",
        "cursor": {
          "ref": "22361fd9-46d1-4af9-8c72-67863275edb9",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "abcec3eb-3dcd-424c-8009-7991cf1f955f"
        },
        "item": {
          "id": "d61312a0-83f8-4f62-9fbe-b1f353dc5ece",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1c0de8a5-6637-433a-b980-12208b1d84f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 542,
          "responseSize": 475
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "14b59ffc-37d9-463e-9a0a-3caf11a8c244",
        "cursor": {
          "ref": "c392f0f1-7131-4a9c-96f6-cba80e8c7f0d",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ddea9eb8-9e88-4e5b-b305-30d95678de58"
        },
        "item": {
          "id": "14b59ffc-37d9-463e-9a0a-3caf11a8c244",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4c354f40-5a09-439e-b53c-9a408d84fcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 477
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e82cbb79-4d91-47b8-aedc-5c375e28386e",
        "cursor": {
          "ref": "8e346d1c-1722-448e-9f2c-95c6f5857b4d",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1a2d2074-aa32-4449-a02a-a78831bd5610"
        },
        "item": {
          "id": "e82cbb79-4d91-47b8-aedc-5c375e28386e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "863c7934-3b6f-434f-93eb-cea862255580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "fec1f021-69ad-4fbf-b663-a2ede02fac94",
        "cursor": {
          "ref": "b6fd1ef8-3767-4464-b629-89c762c72f0b",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6c6d84c9-5205-424e-b9bb-5832a3a130de"
        },
        "item": {
          "id": "fec1f021-69ad-4fbf-b663-a2ede02fac94",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a6434960-b528-4c3c-88ea-e609627ca761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 409,
          "responseSize": 455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "0b5f0224-9ebb-494b-b45b-538668ca53a6",
        "cursor": {
          "ref": "8358e2f0-9e6e-47f6-a4e5-95b394b2a059",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e8e1b3c1-a9c0-45f5-908f-0ee14317cfa2"
        },
        "item": {
          "id": "0b5f0224-9ebb-494b-b45b-538668ca53a6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "211772c6-ca27-406f-92d6-fb7bfcc82e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 757
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "d2f81b0c-3c3a-4acf-adbb-39ebcce7634d",
        "cursor": {
          "ref": "bed0767f-28de-46af-8d24-26f641cd8497",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "311e360e-f3e2-448a-9b4e-795db1f86d1d"
        },
        "item": {
          "id": "d2f81b0c-3c3a-4acf-adbb-39ebcce7634d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "81971a25-6f52-4f1e-a92f-cf4a1d03e676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 454,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "590f18a6-7733-46bc-8b8d-df0cbedd130b",
        "cursor": {
          "ref": "469e405c-3348-4874-b779-3a2340541583",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "eac77fdb-195e-4d74-aad9-f5f7180aa45a"
        },
        "item": {
          "id": "590f18a6-7733-46bc-8b8d-df0cbedd130b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d5c153dd-e552-47fd-896b-ef7978f7ff37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 419,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d447d1ae-e74c-46e6-bfe7-b5f75d211649",
        "cursor": {
          "ref": "a83b36cb-0c01-4268-b0c4-bd580a3a0c7b",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "360b7e2d-4527-4d97-b2fe-baab18756718"
        },
        "item": {
          "id": "d447d1ae-e74c-46e6-bfe7-b5f75d211649",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5041fddb-335d-495f-8dc9-208fb949290b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 496,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "fa38b803-a9c5-458a-901f-69a0c04a2697",
        "cursor": {
          "ref": "b911a57e-bdab-481d-b95f-f7d78262ab1d",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fe7e55a9-bbe8-4618-b5ca-23a17e2246c5"
        },
        "item": {
          "id": "fa38b803-a9c5-458a-901f-69a0c04a2697",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d7baad3b-a591-46ec-b07f-75fb4bd5e4f3",
          "status": "Created",
          "code": 201,
          "responseTime": 1733,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "785c50c2-4086-43a0-90d7-8092285ad19e",
        "cursor": {
          "ref": "9545ec4b-a3b4-4935-91b4-1c7178dfe889",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2ed49187-c8bd-43bb-8c18-10f67e31cc69"
        },
        "item": {
          "id": "785c50c2-4086-43a0-90d7-8092285ad19e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a5338db3-184d-40ea-b89d-6b7874f1be03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 449,
          "responseSize": 174
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "ab354aea-fa4f-4ed4-8cc2-8694e576a59d",
        "cursor": {
          "ref": "cbbe9295-83e9-4550-8443-831a5ffcd586",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "006c2f8f-7fc5-4233-90bb-e5c2274c7bcd"
        },
        "item": {
          "id": "ab354aea-fa4f-4ed4-8cc2-8694e576a59d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "993fda1f-5405-48dd-b62b-a680e8e675b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 802
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "713b5561-0d5a-402b-9038-1231da1abaa3",
        "cursor": {
          "ref": "84a9a70e-75d7-49ce-9ecb-36510554db77",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e8252a98-b8fc-42c4-a3a6-993728f6a32b"
        },
        "item": {
          "id": "713b5561-0d5a-402b-9038-1231da1abaa3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9c438328-49e4-40e7-a6e0-97d09dbb879a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 410,
          "responseSize": 792
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d53b8a2a-6ed3-4182-b92f-f044f1904d43",
        "cursor": {
          "ref": "aacbea6f-a433-4758-a12e-e8439d756f1c",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b48c17d5-cf97-4fa7-9f88-a0d64168be35"
        },
        "item": {
          "id": "d53b8a2a-6ed3-4182-b92f-f044f1904d43",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e79485b9-512c-4099-be41-3a195bd12090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "327665b5-19d3-4e79-8e2c-d41bfaab9044",
        "cursor": {
          "ref": "4b40acf9-a956-4359-ab80-53523c6349d5",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "188378fa-208b-4740-a9b6-f8c252ff8929"
        },
        "item": {
          "id": "327665b5-19d3-4e79-8e2c-d41bfaab9044",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d2a675c1-69c2-4cc1-a310-7bb3c25d5b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 495,
          "responseSize": 791
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "b8fb35bf-3ec9-451d-af24-3884d927fdc2",
        "cursor": {
          "ref": "aca0ef36-19ad-4669-ac19-544ddb28b5b6",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9969f766-57e3-499a-9e1c-86e5c0b58773"
        },
        "item": {
          "id": "b8fb35bf-3ec9-451d-af24-3884d927fdc2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "967f009f-d7ce-4da6-acf9-f2d37d6e3cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "b2f891af-0e80-40a9-8f3a-71f8bcdda6e4",
        "cursor": {
          "ref": "269649be-a19a-45d6-9cb6-3801f0f78d0f",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d2eca240-e37f-4304-99b1-a0087e0ed2b6"
        },
        "item": {
          "id": "b2f891af-0e80-40a9-8f3a-71f8bcdda6e4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f7c62e7b-eafe-448d-9b95-1c13da05c467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 407
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "dcd1f518-57b1-43d0-9608-8de5ccbfaf13",
        "cursor": {
          "ref": "7a9eb07c-6b6e-4087-af6e-74f0448227a4",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f3b5c8d6-909a-425f-b413-cfb57cc6e797"
        },
        "item": {
          "id": "dcd1f518-57b1-43d0-9608-8de5ccbfaf13",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "961dde4a-3672-4e4d-a2ef-4cfb3a7e6928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 417,
          "responseSize": 753
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "743ee07c-649f-4884-8da6-3b0f42c627ad",
        "cursor": {
          "ref": "9de8010c-e205-4ed9-a1d7-a7110fea5dd2",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "06cbd256-f4a3-4373-9166-f4935c9b4646"
        },
        "item": {
          "id": "743ee07c-649f-4884-8da6-3b0f42c627ad",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2197c647-c99d-4b59-9a7a-f011d7fae0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 411,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ea6fa909-a336-432a-baee-b1096f4824b4",
        "cursor": {
          "ref": "f2807d44-50c1-4df1-8dd5-9753e6091883",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "660b9360-d5d7-4898-a651-5adc211f3b1d"
        },
        "item": {
          "id": "ea6fa909-a336-432a-baee-b1096f4824b4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "19a1fb59-76f2-408a-962d-c9c3a74723fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "c1f46fe1-48ab-4576-bef2-0019308bf287",
        "cursor": {
          "ref": "9f2df064-368e-490f-9372-4aea0e89ead5",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "aad9c1ec-9d41-4bc2-91ed-8b37c59d4abe"
        },
        "item": {
          "id": "c1f46fe1-48ab-4576-bef2-0019308bf287",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0766b4d8-3f55-451a-ab8b-0080681d4ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 681
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "aec5c0d9-ec64-4edb-b40d-9ab2b43e33ad",
        "cursor": {
          "ref": "845d0e5a-ed2d-4eff-8628-20a5d2100571",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fd91aac5-5a31-49f8-b13a-3fea3e614b78"
        },
        "item": {
          "id": "aec5c0d9-ec64-4edb-b40d-9ab2b43e33ad",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "11051215-13f6-4cdf-9423-82020a1c6d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 930
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0a51272a-3e13-4181-8e14-7db9cbc474ec",
        "cursor": {
          "ref": "54bcc39d-6ea3-406c-9f62-80740f3baa6c",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "87d7fb15-d8b1-4b6a-9e67-f5cabca9bbfb"
        },
        "item": {
          "id": "0a51272a-3e13-4181-8e14-7db9cbc474ec",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "90d456e6-e1f5-4e83-9c6d-54a285dcb846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 465,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "444c31d2-995a-4e0b-bced-2b5193f518c3",
        "cursor": {
          "ref": "2d0c3c4b-be73-4738-a443-70b6a19c7c64",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bd198b2b-b17f-45c4-9c43-96f52ed19240"
        },
        "item": {
          "id": "444c31d2-995a-4e0b-bced-2b5193f518c3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "97508729-2540-4ddc-b267-68864ed0d2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "48a385d7-0a3d-4e9b-9a8a-5f122176c4f2",
        "cursor": {
          "ref": "532f1b81-4704-49e2-952c-6f464d150f39",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8c68f20b-cea5-44bf-a5c5-722b02ebd570"
        },
        "item": {
          "id": "48a385d7-0a3d-4e9b-9a8a-5f122176c4f2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5838a2c6-1927-429c-b671-30b0341a337a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 778
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "48da9b5a-8556-4c9a-abab-7a8e6263801e",
        "cursor": {
          "ref": "ed9a8471-f3c3-42eb-a1bf-aa9d865b5d9b",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f4d38c7e-b8e6-493e-b077-dabd8d22ded7"
        },
        "item": {
          "id": "48da9b5a-8556-4c9a-abab-7a8e6263801e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0838d0b8-ef99-4c66-955c-e24b674fdb7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "85eee8cb-31e2-46b9-8b7a-d4bd4cc9ec90",
        "cursor": {
          "ref": "21c29c13-5acd-48bf-a0c0-05a6cc34a15c",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8e3c5dd8-2a57-4bc0-97c1-9a0fc95ce15b"
        },
        "item": {
          "id": "85eee8cb-31e2-46b9-8b7a-d4bd4cc9ec90",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a26fad35-8235-4a34-879e-bcd30dd796de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 479,
          "responseSize": 704
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "46697fcd-bc14-45b1-ae36-716a21749ca6",
        "cursor": {
          "ref": "3de9aade-14bf-4462-affd-a31acf0ad52e",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ec7389f6-7a06-4c9a-a18a-20bdfc3a1557"
        },
        "item": {
          "id": "46697fcd-bc14-45b1-ae36-716a21749ca6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9f176ca1-a6dc-4534-81ed-2ffa478f1df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 706
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "aad1d550-0a27-407a-b173-3a2f844107ad",
        "cursor": {
          "ref": "3da91b35-652c-4262-a812-8c45698979d0",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6ffca8e5-87af-4a95-9988-463c1f3808ff"
        },
        "item": {
          "id": "aad1d550-0a27-407a-b173-3a2f844107ad",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ca872781-f2a1-4def-b6f1-852fc50c6b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 536,
          "responseSize": 955
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d3bc9827-9d30-4c0b-b9f5-67b93d86d490",
        "cursor": {
          "ref": "d7c9e089-4f69-4298-a8f6-e74a90aed130",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6f6ab99c-7498-4403-a02a-5a75330bec05"
        },
        "item": {
          "id": "d3bc9827-9d30-4c0b-b9f5-67b93d86d490",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "80cd81bd-093c-4195-be6f-59761446931d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f6ce4ef7-ea35-4dae-a00f-5355c5296609",
        "cursor": {
          "ref": "49a5ce5d-86e6-4e47-8289-ff6ac2a448a9",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "153112c4-9137-49f8-8b40-fd0bfccb3bf9"
        },
        "item": {
          "id": "f6ce4ef7-ea35-4dae-a00f-5355c5296609",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0c594c6f-dfd3-43dc-b25c-28716ba774bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 407,
          "responseSize": 465
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "42b18aa0-726e-424b-b44d-219d53727d9d",
        "cursor": {
          "ref": "44030e10-de3c-46e3-8a87-e568a49d061a",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "41bfa91e-6adc-4a6c-9719-8ec02fb063c1"
        },
        "item": {
          "id": "42b18aa0-726e-424b-b44d-219d53727d9d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e1780e2d-9229-45cb-b38e-60171d645c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 497,
          "responseSize": 489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "6160d1b8-db5e-4743-9e0e-52a06c114de4",
        "cursor": {
          "ref": "c11d87af-24c3-435f-a329-d6619b205bb9",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d9c86efe-c334-43da-8f93-a1f35b24b088"
        },
        "item": {
          "id": "6160d1b8-db5e-4743-9e0e-52a06c114de4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6ff47a82-f0dc-4212-b3c2-a87504effc77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "d3846738-c862-45ce-952e-2eef89f6aadc",
        "cursor": {
          "ref": "08fe7e77-ee02-4014-9446-2387cdf63b3a",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "cb0978bc-389f-4439-8653-67a9be54aa4f"
        },
        "item": {
          "id": "d3846738-c862-45ce-952e-2eef89f6aadc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "22372125-f055-45c6-8aef-a4cd0c12241f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "26719421-2264-4e82-afd8-48f4c56fb3fe",
        "cursor": {
          "ref": "00f58f98-777f-42a0-8985-2a4ea2276e54",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4de3251c-c1f7-4a59-a123-417ed0cb64d7"
        },
        "item": {
          "id": "26719421-2264-4e82-afd8-48f4c56fb3fe",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bc4ff92f-5a38-4aac-beaf-903562928d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "ffba95c4-90ea-4426-9db4-22f5292744f8",
        "cursor": {
          "ref": "c2b94e34-6159-4368-9b18-8bfe0b8c8f67",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "29ef9126-491b-45fd-8fa0-01db6f1ff198"
        },
        "item": {
          "id": "ffba95c4-90ea-4426-9db4-22f5292744f8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5021a772-0606-4e36-94a1-fd629096a0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "422340eb-f063-475e-b5b2-49e5322e07c8",
        "cursor": {
          "ref": "1259104b-b65b-4ea9-b8c6-a790e050e36b",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8b8e4574-5d14-4924-8095-3a1322e8bf72"
        },
        "item": {
          "id": "422340eb-f063-475e-b5b2-49e5322e07c8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c84112d3-cbe4-4d38-a82e-41a8736b9ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "5ad5a6f8-addc-4462-b6dd-8266f3a60837",
        "cursor": {
          "ref": "592cd114-a8f5-49b8-9814-8557a258bd32",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fc48ed52-b712-4a91-ae96-856355dd7bd7"
        },
        "item": {
          "id": "5ad5a6f8-addc-4462-b6dd-8266f3a60837",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "110e00c7-35b7-4d02-b092-3d90d00a6c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 403,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "75ad082e-2716-47a0-8a5f-47513cfb7351",
        "cursor": {
          "ref": "86940c30-6970-4f81-b8d4-886c52f23094",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3fc1075e-4057-492b-94dc-ae69c8221a43"
        },
        "item": {
          "id": "75ad082e-2716-47a0-8a5f-47513cfb7351",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "326f3c24-9c8c-406a-bf89-2e277ead26f3",
          "status": "Created",
          "code": 201,
          "responseTime": 1723,
          "responseSize": 653
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "1f15d2a7-fb43-4afe-aabb-081e1b786cf4",
        "cursor": {
          "ref": "defc237a-1ace-488e-8c82-c5f0ad7e3a60",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7aea3bd1-a8a5-4f78-b22c-ef66f35f842b"
        },
        "item": {
          "id": "1f15d2a7-fb43-4afe-aabb-081e1b786cf4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7da99f65-4d6e-44ab-bedd-607e2ff55a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 935
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "85a2fd8a-9b79-4aca-b2c3-0c970f7a8d1d",
        "cursor": {
          "ref": "5881d27e-81f7-454b-828e-1e80ea46b892",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "03c1d243-b708-4a6b-a17b-38802d175805"
        },
        "item": {
          "id": "85a2fd8a-9b79-4aca-b2c3-0c970f7a8d1d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b4e071a7-e840-4650-a714-80ee99827b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 475,
          "responseSize": 932
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "54166e30-43d5-4b56-baee-ffaea84190bb",
        "cursor": {
          "ref": "fcd91209-7f2f-4fa4-a738-2d0fe52cb71b",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "55e91abb-feb8-4270-8a89-32eee8b97d37"
        },
        "item": {
          "id": "54166e30-43d5-4b56-baee-ffaea84190bb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b9b00541-c187-4a0f-ac99-aee386c85d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 934
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "1ade1845-822c-4b6c-9c87-ba2941e697d2",
        "cursor": {
          "ref": "49edc42d-265b-4667-80ca-e6ac76f96282",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b83c0f77-53f0-41be-817d-1fcaecf5440a"
        },
        "item": {
          "id": "1ade1845-822c-4b6c-9c87-ba2941e697d2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2b6b9822-c80d-47f1-9126-3f7e13a7eb0f",
          "status": "Created",
          "code": 201,
          "responseTime": 1764,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3bb35f21-2dbc-4a40-aa5d-07368459678e",
        "cursor": {
          "ref": "036f21b2-d978-4963-a388-60eca40e32a7",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "88ce35d6-3486-42eb-8b15-6a6f5b1395e2"
        },
        "item": {
          "id": "3bb35f21-2dbc-4a40-aa5d-07368459678e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "eda23389-2616-427a-84d9-cb743f0d9c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 1273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "368d8af0-34ce-4b56-bf4e-4df0bef03730",
        "cursor": {
          "ref": "84f3ebba-ef68-4cfe-8cbf-5bf92903e0c7",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ec8907bc-e1ed-4d3e-91cb-773a9b5d2370"
        },
        "item": {
          "id": "368d8af0-34ce-4b56-bf4e-4df0bef03730",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cbe123b9-d8c0-4fce-8673-e658eb85dec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 409,
          "responseSize": 1259
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f30e4fe4-3317-4c8b-9618-cf691bd5f093",
        "cursor": {
          "ref": "39c0a56f-7c23-4915-a8eb-09f4225eee54",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9f03c486-e125-47d7-b6bb-8f0d7105a334"
        },
        "item": {
          "id": "f30e4fe4-3317-4c8b-9618-cf691bd5f093",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a4a48ed1-89f7-428b-afe7-5b9bfb953882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "70e9e3ac-ecdb-4f61-b4c7-ab79b010218b",
        "cursor": {
          "ref": "19875d8d-bfd4-4e46-ade0-bcb92b45d85c",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "21c60e8e-4812-4bf9-ac24-aa7ecaf65770"
        },
        "item": {
          "id": "70e9e3ac-ecdb-4f61-b4c7-ab79b010218b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f3f39696-0b79-41b2-86bd-3a1705993398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 409,
          "responseSize": 1258
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "62fae322-ef2c-4185-96fe-8eca160a81ad",
        "cursor": {
          "ref": "d723761e-bd53-4b2e-9527-1c2557187329",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d3668852-b8a3-4064-b41b-e0accceb9945"
        },
        "item": {
          "id": "62fae322-ef2c-4185-96fe-8eca160a81ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b88d4d02-21db-4b28-93be-9c50fc220abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "8c9a1997-52a2-4025-9b94-4963a10afb22",
        "cursor": {
          "ref": "f76c52da-b271-4f5e-871a-dc9c47b81f55",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c9ffcc12-ae95-4005-aeb8-634d08e5860d"
        },
        "item": {
          "id": "8c9a1997-52a2-4025-9b94-4963a10afb22",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1e97121f-5ce3-40e5-b1e6-29c59cabbe36",
          "status": "Created",
          "code": 201,
          "responseTime": 1697,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "bdb6a363-22a5-4cab-a452-3d57b374e255",
        "cursor": {
          "ref": "d043dfda-b1b1-4355-8bd3-a9ea59404dd2",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d4caca1e-cb08-40eb-a411-2f625d3e62a7"
        },
        "item": {
          "id": "bdb6a363-22a5-4cab-a452-3d57b374e255",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e9a851fc-618d-4ddf-a9ed-74bbb6f00e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "cf4fd5d7-6f0f-40c9-abc4-261e8a00bad0",
        "cursor": {
          "ref": "85222993-186c-4b21-b9a9-7810525881fd",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c38f461a-51e4-4178-ae1c-e0649c8df759"
        },
        "item": {
          "id": "cf4fd5d7-6f0f-40c9-abc4-261e8a00bad0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "94e37f03-c7b3-4d4d-984c-39fd4fd463ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 463
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "7174581b-28d5-4766-871f-ac77fe345b44",
        "cursor": {
          "ref": "1556653c-7724-4cf9-8359-41e1fe5a3da8",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9e0e8dda-1890-4a84-901b-0d5aae600f6d"
        },
        "item": {
          "id": "7174581b-28d5-4766-871f-ac77fe345b44",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "86d0bc0c-21f7-4406-8bde-cd7eed9d0525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 391,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "f986743e-5d49-4224-b0c7-18b90b70a111",
        "cursor": {
          "ref": "14d79c14-9aa1-4fba-a043-a49a07b2c805",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a74b22ab-9d76-42e3-aabd-b91c1705a132"
        },
        "item": {
          "id": "f986743e-5d49-4224-b0c7-18b90b70a111",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "dd768abd-ad9b-4692-99bb-51ae1d79aa2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 462
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "6d99aed1-6587-4333-a1fe-89e958300637",
        "cursor": {
          "ref": "71852ee8-52c7-4a70-b5ea-86ed12daf3dc",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6677e261-89a2-427e-a946-f3cd1a5002c6"
        },
        "item": {
          "id": "6d99aed1-6587-4333-a1fe-89e958300637",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "61ec726d-1b71-44ba-a657-1aae93453917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 427,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "e5026de0-ead0-411e-a595-41613d1069ac",
        "cursor": {
          "ref": "541db5f4-7a98-4f0b-b8b2-857ab1d3a8f8",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a8ea9332-6d12-4f8b-a425-1c696c425da3"
        },
        "item": {
          "id": "e5026de0-ead0-411e-a595-41613d1069ac",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4ba7541f-77b3-4cb3-890e-1292269de20e",
          "status": "Created",
          "code": 201,
          "responseTime": 1540,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "87872ac6-bfda-47f4-a7e9-00a1b652039c",
        "cursor": {
          "ref": "7906c195-a945-4388-9ac2-22ee48dba2f2",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "200d54db-7cb2-4874-828a-45b6aa21579b"
        },
        "item": {
          "id": "87872ac6-bfda-47f4-a7e9-00a1b652039c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "549f1dea-0436-47bc-b69f-0123f27b73c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 512
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "dbc32dde-78db-4d6a-8302-223c6d9ce1ae",
        "cursor": {
          "ref": "3a22d959-c5ed-4a44-b5ff-36112bd69d6d",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4a3e6f72-7c97-41f0-aadf-21a13d0372e9"
        },
        "item": {
          "id": "dbc32dde-78db-4d6a-8302-223c6d9ce1ae",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6378100c-7801-42c0-a052-79aae737ec20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 493
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "602beec0-8b6e-465c-b937-3349d84c647f",
        "cursor": {
          "ref": "3d00d722-e63f-41c3-b314-ce4e9c7749e8",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "633a193b-0d8b-42de-8b20-9d5720b52ea0"
        },
        "item": {
          "id": "602beec0-8b6e-465c-b937-3349d84c647f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "465456d5-49dd-4cc7-826b-3b3f81e86a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "0f58410c-8d49-4f50-9a1b-fde12aea798c",
        "cursor": {
          "ref": "0c2f8226-1ff0-4acb-80f3-4882f40c178a",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f631942f-699f-44d2-8a8c-13ef3b7e3cb5"
        },
        "item": {
          "id": "0f58410c-8d49-4f50-9a1b-fde12aea798c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5f9c2731-bca3-423c-9a2b-d18ca0e10e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 384,
          "responseSize": 492
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "f8bfe7b7-2730-420c-9745-c8c6399e5dd9",
        "cursor": {
          "ref": "51eb1385-0e87-4951-badc-114cbf7e43bb",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2b9413f8-4f0b-4bfe-b5ee-04582e0c8d8f"
        },
        "item": {
          "id": "f8bfe7b7-2730-420c-9745-c8c6399e5dd9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8971f342-79ba-41a3-a978-9ffa5340319c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "55685a79-6dd5-4937-b165-1b329f3df03c",
        "cursor": {
          "ref": "8370d9d4-89b6-4435-b3b5-44b201fb1925",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bdee3764-5483-4cbc-9aad-cca8b90eabde"
        },
        "item": {
          "id": "55685a79-6dd5-4937-b165-1b329f3df03c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d98b38be-612e-40bc-b716-702877cfa742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 398,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "217e6260-6bd1-44fb-84db-205f439dfc8b",
        "cursor": {
          "ref": "add0544e-8e3c-4704-9900-2aec280531ff",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "765cb122-a293-4414-b5d5-d73b3b673791"
        },
        "item": {
          "id": "217e6260-6bd1-44fb-84db-205f439dfc8b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1ea9b2cf-f983-4770-b280-8307c9a1318b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 551
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "9c54fab1-51d0-4fc7-8c7e-f1997b134a82",
        "cursor": {
          "ref": "210778ee-2315-4f23-a2cb-73468d83dcca",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "59d6c172-a8a6-4c03-bc66-42e1ab832de6"
        },
        "item": {
          "id": "9c54fab1-51d0-4fc7-8c7e-f1997b134a82",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bdbfc3be-59a2-4783-b07b-4a11986849b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 532
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "cf955241-26e1-46e2-ba83-c864c76c34fd",
        "cursor": {
          "ref": "ba705d05-524b-4ec5-9960-8e245950dd1d",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "667dc8c8-dfda-4cc6-8441-2aa068d217e6"
        },
        "item": {
          "id": "cf955241-26e1-46e2-ba83-c864c76c34fd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7a16e973-303d-4537-bad5-3a955f71658b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 449,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "7fa8efe2-f429-4a0c-b906-f99e1e21377e",
        "cursor": {
          "ref": "7ff8dcb7-e4a7-4b5d-8e13-e0a66521a538",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4a07dd6a-bc22-4661-b0d9-585435731f68"
        },
        "item": {
          "id": "7fa8efe2-f429-4a0c-b906-f99e1e21377e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f687a4ef-1054-40ff-94bf-94ade390d0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 393,
          "responseSize": 531
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "7d6fea5f-b539-476f-ad59-4f01c0c5e1ab",
        "cursor": {
          "ref": "5727e527-b8c5-4067-8d37-d82742f2020b",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1eeb5615-cffd-40fa-af7d-eac141054241"
        },
        "item": {
          "id": "7d6fea5f-b539-476f-ad59-4f01c0c5e1ab",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "77fb7f96-8cf1-4975-a0a8-584667584d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 389,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "cfaf8f09-0682-47b8-bc11-84716dfea0cc",
        "cursor": {
          "ref": "70e637bc-853b-4dd8-b014-465cf5d59085",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "641bc09f-0ab0-46eb-8ff4-56ab53f04845"
        },
        "item": {
          "id": "cfaf8f09-0682-47b8-bc11-84716dfea0cc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2ae854d8-97ac-428c-b387-8a0b0c2605b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1848,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "b6c93b8d-0e25-4373-a1da-3f47b1c30a14",
        "cursor": {
          "ref": "e6fe0cad-c470-4cb6-b21d-ebb2dd0bd572",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "641bab77-a36c-4051-a5c1-237d127dd7e9"
        },
        "item": {
          "id": "b6c93b8d-0e25-4373-a1da-3f47b1c30a14",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c66a392e-0f26-451b-a3cc-3647f5a27018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 628,
          "responseSize": 582
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "c1594b19-2b5a-44ae-b9ca-3824690f027c",
        "cursor": {
          "ref": "bb218126-5604-4511-8943-413fdd1061d8",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "27b1c654-6224-43e4-8637-85ac7f3cf77b"
        },
        "item": {
          "id": "c1594b19-2b5a-44ae-b9ca-3824690f027c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4c120287-240b-49ce-be82-e372ff6950fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 711,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "4e504b52-45ab-4987-abd9-3797f2fbca36",
        "cursor": {
          "ref": "0e4da76a-f682-4593-847a-748880ea300c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a622f2f0-c87a-4b61-b931-797049e23485"
        },
        "item": {
          "id": "4e504b52-45ab-4987-abd9-3797f2fbca36",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "60f30200-84ee-4cfd-a8f5-9f34f2be51a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 924,
          "responseSize": 556
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "c110c88e-31eb-4ad3-be47-b6177a64e211",
        "cursor": {
          "ref": "8b83ad73-3705-4f09-9eab-2ab07c410960",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7ed82189-97f4-4064-848c-eac95e10b309"
        },
        "item": {
          "id": "c110c88e-31eb-4ad3-be47-b6177a64e211",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f3a10af5-25aa-471f-810d-aab87a675c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 927,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "b18aebe8-3617-461c-b2e5-7b524414116f",
        "cursor": {
          "ref": "1d778558-3b37-4cc8-a2b2-e71b641fad4e",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "eeae4eb2-f071-41a7-a4f6-87cfe0960e04"
        },
        "item": {
          "id": "b18aebe8-3617-461c-b2e5-7b524414116f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "19a13408-46ee-4c94-9e0d-c4741f05a82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 823,
          "responseSize": 580
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "f3e93517-6195-4d67-8866-ca8fea437371",
        "cursor": {
          "ref": "2beec365-4495-4d1d-bdd5-443694a99b48",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "550cc0d1-b399-4c14-8595-c9c8bf4c2d88"
        },
        "item": {
          "id": "f3e93517-6195-4d67-8866-ca8fea437371",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e30a44e5-a4a6-4d23-9394-aa5dc5f52c43",
          "status": "Created",
          "code": 201,
          "responseTime": 2534,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "f11fd8be-2d0a-4d2b-92d5-dc6a1c01a3ec",
        "cursor": {
          "ref": "861cd28a-d115-4d1c-8ebe-cc63619b9866",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "738398a7-d027-4fc6-851f-795719281f52"
        },
        "item": {
          "id": "f11fd8be-2d0a-4d2b-92d5-dc6a1c01a3ec",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e81eb0f4-2edd-4649-8230-a4fb21231e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 417,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "109c4daf-fe21-48b9-b337-af1a633fb0ba",
        "cursor": {
          "ref": "229bc165-aa20-4dad-9a9d-047d7a80fcdc",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "93492600-72e8-4fee-9f04-8f5ad7f55c7d"
        },
        "item": {
          "id": "109c4daf-fe21-48b9-b337-af1a633fb0ba",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ec3ed1d9-b96b-41e1-aebd-7c6ef2271efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 473,
          "responseSize": 589
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "69658f84-4898-411a-babe-61e4fc6f58cd",
        "cursor": {
          "ref": "8f9f7709-9379-4801-b2d9-e951cac7400b",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bf0346de-7402-4519-86d5-4df895f73445"
        },
        "item": {
          "id": "69658f84-4898-411a-babe-61e4fc6f58cd",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b43ed1f9-59dc-4b09-8d1b-a3525b8cd0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 411,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "be8c46f4-1937-4184-8873-be186e5c0f0b",
        "cursor": {
          "ref": "4ec11cc7-a431-492b-ac9b-dbb48eff3988",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fa4599e2-39a6-4d18-990b-bc3a1ba66514"
        },
        "item": {
          "id": "be8c46f4-1937-4184-8873-be186e5c0f0b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "709b32c5-bf83-4508-9de4-fbbdbf33722d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 467,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "1928553b-71cf-4558-b488-e772987820d8",
        "cursor": {
          "ref": "0d10f751-0035-4b08-a235-fe1f85932076",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bdf1f593-799f-4273-b631-143afdad3f52"
        },
        "item": {
          "id": "1928553b-71cf-4558-b488-e772987820d8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e1a0a384-5ef1-453e-b117-847a85717f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 470,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "4c7d7458-7d6a-49ff-8a2b-aa58a9dac1e6",
        "cursor": {
          "ref": "c722f878-d484-42af-9eac-0d0bec6ee5a1",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "561bb2d5-8d0a-4583-8b6a-f3d3ab629615"
        },
        "item": {
          "id": "4c7d7458-7d6a-49ff-8a2b-aa58a9dac1e6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "73cbf11a-f330-460e-ac6e-e21255905fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "b41d4b7a-62de-4841-b812-5ab72de10f94",
        "cursor": {
          "ref": "603c8064-4d0f-40c7-8aed-34fd8988f9d7",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d0d420f5-c170-4995-8d1a-c31dd07834ae"
        },
        "item": {
          "id": "b41d4b7a-62de-4841-b812-5ab72de10f94",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6af76dbe-6f06-4459-91ad-c6982c1a4745",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "bf50412c-5ff9-4cc5-9a1e-d932f3f285d3",
        "cursor": {
          "ref": "6da8895e-a82f-46b7-bc04-e99354737bb6",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cc9acbe9-93b8-4b2d-b300-004208ec1b61"
        },
        "item": {
          "id": "bf50412c-5ff9-4cc5-9a1e-d932f3f285d3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1bd5a06f-1453-4064-a8be-e3b80de87e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "108f4457-2b3b-4627-9e4f-0573f9e08c1d",
        "cursor": {
          "ref": "ca696812-f8e5-4de6-8139-0656d7c74336",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "844f862b-1740-40df-8d06-41b148fc3214"
        },
        "item": {
          "id": "108f4457-2b3b-4627-9e4f-0573f9e08c1d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "73f85faa-3ea0-46d9-bbf5-5e49d0ffea59",
          "status": "Created",
          "code": 201,
          "responseTime": 1720,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7839be0-3f0a-4551-9445-c66615170bec",
        "cursor": {
          "ref": "0a8f8032-73ec-426c-b3ff-6cd79058db86",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "220e67b4-9bb8-4b4f-8263-11b82cbfbb11"
        },
        "item": {
          "id": "d7839be0-3f0a-4551-9445-c66615170bec",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "0fc96bd3-9934-4e45-940a-5a9a067634f0",
          "status": "Created",
          "code": 201,
          "responseTime": 1658,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955265f8-0934-48dd-abeb-f37c6660d0e1",
        "cursor": {
          "ref": "fdd93cd6-f4af-4f18-9665-c7447c068d05",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0cef2bf1-1bce-4448-916d-6784483b1965"
        },
        "item": {
          "id": "955265f8-0934-48dd-abeb-f37c6660d0e1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "97c04f18-7cce-45dd-bf60-778968d374ee",
          "status": "Created",
          "code": 201,
          "responseTime": 1895,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2ca3fe-57a0-4611-b318-30681d6e6c24",
        "cursor": {
          "ref": "01ebc1fa-211c-41a5-ab5b-469495359fb9",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "efba8014-6291-4973-878e-22edf7bb1315"
        },
        "item": {
          "id": "eb2ca3fe-57a0-4611-b318-30681d6e6c24",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8eaf0af2-9969-491c-8f1b-d2485436f77f",
          "status": "Created",
          "code": 201,
          "responseTime": 3943,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b5d447-4def-4467-9ae9-9a7da3eddd62",
        "cursor": {
          "ref": "cc9bbc0f-5546-4bf0-a9c5-8d05eed45071",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "eb6e4794-5f69-49cc-b8f7-c42279841e61"
        },
        "item": {
          "id": "e2b5d447-4def-4467-9ae9-9a7da3eddd62",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d9191e58-e81b-42fd-8425-f45126c936d6",
          "status": "Created",
          "code": 201,
          "responseTime": 2497,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "767c3952-8a62-4dd2-89cf-aa2d4c994717",
        "cursor": {
          "ref": "ca7c0559-67bd-4af1-9556-af5963913296",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c3b08e66-64cc-457d-8ab1-68e7b6af6416"
        },
        "item": {
          "id": "767c3952-8a62-4dd2-89cf-aa2d4c994717",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "69374eeb-2918-444a-81ba-a003869d1113",
          "status": "Created",
          "code": 201,
          "responseTime": 2191,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df30c39-95a3-4135-af9d-248d041e2a79",
        "cursor": {
          "ref": "d50e42d0-8a87-4116-9a85-70c7c33f3c6a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "618eece3-dd4c-4416-9449-8405d0817359"
        },
        "item": {
          "id": "8df30c39-95a3-4135-af9d-248d041e2a79",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9712485d-e9bd-44c7-a223-e7643a748fea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 428,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "8df30c39-95a3-4135-af9d-248d041e2a79",
        "cursor": {
          "ref": "d50e42d0-8a87-4116-9a85-70c7c33f3c6a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "618eece3-dd4c-4416-9449-8405d0817359"
        },
        "item": {
          "id": "8df30c39-95a3-4135-af9d-248d041e2a79",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9712485d-e9bd-44c7-a223-e7643a748fea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 428,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "699b02ca-77dc-42cd-846a-63cac9ee1422",
        "cursor": {
          "ref": "487baec0-8cf3-44f3-bf6d-5b2342eb19d2",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9263908f-f66c-495f-8ae1-c8662f5877de"
        },
        "item": {
          "id": "699b02ca-77dc-42cd-846a-63cac9ee1422",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "12ccb99a-a114-4cac-9499-ca73c044f930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 414,
          "responseSize": 327
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "16b8622a-15b9-4c99-b491-844caaa08315",
        "cursor": {
          "ref": "20c21364-b3e2-40b1-a1bb-799fb710f8c0",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7ae85e8d-07ff-4d9e-922a-127a6a5f6dfb"
        },
        "item": {
          "id": "16b8622a-15b9-4c99-b491-844caaa08315",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c51a68af-e8b8-498f-b481-17c8669f5d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "208af90a-1458-4706-9464-0ffb86dfc1e2",
        "cursor": {
          "ref": "dd3923c6-0f81-4026-9b09-14142971d8a5",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ba573962-01ac-4c3e-a5b3-42a50b70a413"
        },
        "item": {
          "id": "208af90a-1458-4706-9464-0ffb86dfc1e2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e5177d57-e537-4a21-b1a2-936d574966ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "4ecc6fde-e460-421b-8033-18d394638134",
        "cursor": {
          "ref": "b80f7219-56eb-4f0d-881f-62788e33f413",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9b018015-5a25-430a-b162-1146b78b9438"
        },
        "item": {
          "id": "4ecc6fde-e460-421b-8033-18d394638134",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9d4ef9cf-142f-4bed-adfb-28b6a4b03ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 464,
          "responseSize": 282
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6c5ee845-8753-4f27-9eaa-48864ad29dc8",
        "cursor": {
          "ref": "681ec862-26e9-4a87-b6bd-ffc700c2ffdf",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0a25e8e7-f826-4d0a-b271-ee8c4b823e4d"
        },
        "item": {
          "id": "6c5ee845-8753-4f27-9eaa-48864ad29dc8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fd7bf357-1a45-4613-9933-aa682d0379d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "93eccfcf-58bb-4d2b-9380-6fafe5908155",
        "cursor": {
          "ref": "c43586c7-e206-4960-9db8-c1718b384300",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4ffb851a-0a20-4387-aa32-4e26d4c9b7f3"
        },
        "item": {
          "id": "93eccfcf-58bb-4d2b-9380-6fafe5908155",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "529cf891-242c-4f51-b358-db14a0616670",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 422,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "2fccf624-b474-4e78-9d41-013f60a0e35e",
        "cursor": {
          "ref": "c1358784-ac10-4498-af81-efff1052c99f",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "062fc742-22ee-4b32-90d1-631ac0ff4de1"
        },
        "item": {
          "id": "2fccf624-b474-4e78-9d41-013f60a0e35e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fe0d89c9-1f56-4c51-ae62-2f03f37fc9ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 538,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b152e8c4-f124-44af-87d6-de0735a06ef1",
        "cursor": {
          "ref": "d9ac8027-8844-45a4-a1d2-7c71f93dae05",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a20936e9-3d83-4a37-994d-7ffffe978718"
        },
        "item": {
          "id": "b152e8c4-f124-44af-87d6-de0735a06ef1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "aea0badc-a33b-4ea8-a4a7-516475195ad5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 467,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "93703ea3-bbaa-4cd7-90bf-c0240eab07ab",
        "cursor": {
          "ref": "d1fdd66b-92a1-47fd-a98e-e8eb33e52a8e",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0b111f21-d13d-47b3-879c-57aea5ef001b"
        },
        "item": {
          "id": "93703ea3-bbaa-4cd7-90bf-c0240eab07ab",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "72f9cac4-252e-44ae-8d6f-7355d44b5164",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 477,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "49b7a5a5-0378-48f4-b54c-9b26f9c12d68",
        "cursor": {
          "ref": "0cf7e555-68f3-4020-bf92-abbf7c4b1d8b",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "355ad385-e77d-4121-920e-0f94336f1cb0"
        },
        "item": {
          "id": "49b7a5a5-0378-48f4-b54c-9b26f9c12d68",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "35cafa6f-925b-4d97-ae9a-0c0625670ae8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 454,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "4791c5cb-e38b-4e67-8a8a-d9ffc8751489",
        "cursor": {
          "ref": "4a6b0f9b-e9ae-455c-9773-a7b1c6e669f3",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5dbfc3a2-1f68-49b3-9a7d-3349ef5254b3"
        },
        "item": {
          "id": "4791c5cb-e38b-4e67-8a8a-d9ffc8751489",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "27d62ad9-5e95-493d-8813-8ddaaf981605",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 442,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c56bace0-ce83-42fb-a28b-01477d36a2c9",
        "cursor": {
          "ref": "8ced866c-e7f3-4124-9b95-8b37e580a9b9",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d67788b0-920f-448b-a4ee-c06bc9e027d0"
        },
        "item": {
          "id": "c56bace0-ce83-42fb-a28b-01477d36a2c9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bd88a5f8-320e-48be-a1a4-803ae69ce2c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 424,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "8530cc54-a27e-4a97-b30a-fcf5f6d059da",
        "cursor": {
          "ref": "1f2c9c82-bc67-4ec6-99fa-ef058f936e2b",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "50df5f26-9f66-4ad9-8730-073fb744028e"
        },
        "item": {
          "id": "8530cc54-a27e-4a97-b30a-fcf5f6d059da",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8e0cf02b-2bea-4dfb-9e26-7886c72f2531",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 435,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "bdfff30d-01c4-478f-94af-39ae363d8a68",
        "cursor": {
          "ref": "a2a157c6-506b-4faf-80a1-f6f8d5e77fcf",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a1d6426f-721c-4379-a18b-3cc462580363"
        },
        "item": {
          "id": "bdfff30d-01c4-478f-94af-39ae363d8a68",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "209e8fdf-fb4a-4763-9ee1-19f7fcf31db6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 467,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "ab49dd47-25ae-477e-8f9b-19c7609e5918",
        "cursor": {
          "ref": "4aaba3f9-6c46-4295-a219-c82a8545b9d3",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7c7cfb48-5c0a-4424-8550-f2ec3a9c630f"
        },
        "item": {
          "id": "ab49dd47-25ae-477e-8f9b-19c7609e5918",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "48a22e19-de17-4888-9753-94365e698734",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 443,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "e80f4e20-8779-4321-a58a-287f829d4003",
        "cursor": {
          "ref": "bd9eae9e-839a-41b7-a981-0817110bf89e",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "643c7c7a-9c49-4e84-9140-1adf67b27509"
        },
        "item": {
          "id": "e80f4e20-8779-4321-a58a-287f829d4003",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cea193f2-f1e2-4ea6-8f81-1123beb31ea5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 481,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "84db3182-5d16-4c92-a541-d8342bb74249",
        "cursor": {
          "ref": "a26b103f-9efd-44be-926d-90b4d07c4ff9",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "642a3b5b-8b91-4512-885d-7e2eab91c16a"
        },
        "item": {
          "id": "84db3182-5d16-4c92-a541-d8342bb74249",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "809234fa-02a8-4b6a-bc17-d10d36ba3631",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 469,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "43f19049-29d5-43cc-8ba4-90cfce6f3dc4",
        "cursor": {
          "ref": "56f149ea-f21a-472f-ac98-ad3cf0ae70bb",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ec21523e-b856-4bd9-8f31-8b0788a36dc3"
        },
        "item": {
          "id": "43f19049-29d5-43cc-8ba4-90cfce6f3dc4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f697c2d9-16ce-40d7-a4b2-548e17d1f3f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 474,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7dccd8e3-7a72-4233-affa-a20e1276609f",
        "cursor": {
          "ref": "a4c7eab7-a02c-400d-99e4-14ebb25e9187",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d06ff799-6513-486f-a9e1-f625241d1289"
        },
        "item": {
          "id": "7dccd8e3-7a72-4233-affa-a20e1276609f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d7c2f971-508f-40d8-95ea-57ded8fce8e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 481,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "5ac5d0e0-5d19-4133-86bb-c3406eddb82f",
        "cursor": {
          "ref": "ab985b9f-aa64-4e1a-a868-b2c5e55889df",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c7c52b7a-0e67-4f2c-a72d-eb985cdb45bf"
        },
        "item": {
          "id": "5ac5d0e0-5d19-4133-86bb-c3406eddb82f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f4a937b7-660e-4529-9bf4-48e3206f881b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 552,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "2aaeea54-2997-407d-9803-bd8191e4ba82",
        "cursor": {
          "ref": "9bd9c556-8ea3-4450-9cd6-cc77e5a1f524",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a9dd70e2-16d7-4fc2-8eb6-d73209164c49"
        },
        "item": {
          "id": "2aaeea54-2997-407d-9803-bd8191e4ba82",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "032570ed-0f3c-4bc2-aff9-c8aad4be6ba1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 452,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "671addd7-fcb5-41da-9522-96e11d04cc0b",
        "cursor": {
          "ref": "50155181-e541-41f6-85d7-00335d434707",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "85d217f4-5642-4704-80a5-a94ff3fca8f8"
        },
        "item": {
          "id": "671addd7-fcb5-41da-9522-96e11d04cc0b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a17dded5-06da-4198-a923-85ff035cd04c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 475,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "ce4f8803-4462-424e-afdb-867dc393b006",
        "cursor": {
          "ref": "8989163c-0705-4c34-a043-10b3d969dae7",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4eedf182-dc37-4148-90f4-44cbc0a97611"
        },
        "item": {
          "id": "ce4f8803-4462-424e-afdb-867dc393b006",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2899900d-0a52-409e-8cb7-978667ff5e99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 426,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "db1cef0f-a913-4189-ab64-a551f4921510",
        "cursor": {
          "ref": "ffc55bca-ad3f-4df1-8d66-aa9a6f9c43e0",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4c1c0573-5805-42b5-bdb2-846f3b7826be"
        },
        "item": {
          "id": "db1cef0f-a913-4189-ab64-a551f4921510",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f9c35613-fb3a-4c03-9ef7-679f9e65ec33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 463,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "557b1f01-c2c1-4795-8302-acd52d4624e5",
        "cursor": {
          "ref": "cf1c9395-5d69-4817-a952-8e8e3e87848b",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d98df0f4-800a-4160-ab6e-a825472cff7a"
        },
        "item": {
          "id": "557b1f01-c2c1-4795-8302-acd52d4624e5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ef065b90-8df5-4472-b912-889e72705a24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 435,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "ee17f88a-90ec-424f-b777-754581d1f6ce",
        "cursor": {
          "ref": "4b41b97a-7d7b-469d-8c61-6026853b8327",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1cecdf50-7c5d-411e-9978-abd31b5ff3f4"
        },
        "item": {
          "id": "ee17f88a-90ec-424f-b777-754581d1f6ce",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "35b14429-20c7-44d6-92eb-9f8a936f8fb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 444,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "8e1354a4-6cb7-4488-9421-b81611484a15",
        "cursor": {
          "ref": "cbb99849-5261-4bcc-a8a6-33ace2dac8c3",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9170d12b-fb4c-4d63-859b-da78f70fd497"
        },
        "item": {
          "id": "8e1354a4-6cb7-4488-9421-b81611484a15",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "afe63496-f8b7-4788-86f2-45e4380991e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 440,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "16631eb9-84ba-4220-b59c-0f163119ef9c",
        "cursor": {
          "ref": "4bed8452-4214-4071-9e12-022dcbdfa593",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "30b129aa-9275-4c25-ac24-4202e5a8cc1c"
        },
        "item": {
          "id": "16631eb9-84ba-4220-b59c-0f163119ef9c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2bbf5380-b228-4f55-a599-fd619700f2a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 455,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "4aa3ea25-7529-4821-925a-ff0cc7fa02f9",
        "cursor": {
          "ref": "3ba4d865-eb4a-4983-be65-d0f070eab16a",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3dffe2f6-f729-4765-8258-230fd8f88849"
        },
        "item": {
          "id": "4aa3ea25-7529-4821-925a-ff0cc7fa02f9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fc156cd6-138b-49c4-8dab-cf12fcc3e95e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 480,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "1358adac-36cb-4cac-8c75-2d8e6c818ada",
        "cursor": {
          "ref": "6b145508-582d-4aee-891d-471614e6cfa5",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "04878579-a0e7-4b07-b7a2-ee5c5e9c76ca"
        },
        "item": {
          "id": "1358adac-36cb-4cac-8c75-2d8e6c818ada",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "41197987-df0e-4855-8e67-75fa1c8941cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 456,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3c580d4a-c6af-44ed-974f-b111191326b4",
        "cursor": {
          "ref": "fa16d2fe-2eb5-4ac3-9777-dd0c1cf55368",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bc9550a1-f6d3-4366-895c-39229b62ed00"
        },
        "item": {
          "id": "3c580d4a-c6af-44ed-974f-b111191326b4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "eaa55ea5-4edf-428e-8a89-43a9730f032d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 440,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c69aea27-96ef-49d5-98e5-33f4cb16b100",
        "cursor": {
          "ref": "d846beba-0edd-470b-9645-42c5de4782ae",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "973a94ce-6521-49bd-aa98-229f8336494a"
        },
        "item": {
          "id": "c69aea27-96ef-49d5-98e5-33f4cb16b100",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2b0cb236-a870-45b3-a543-32e3887c1990",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3eb0997e-f239-4c37-8613-54361d38b654",
        "cursor": {
          "ref": "978918fd-ebac-4362-a11a-38501536adfc",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "52101a90-ee3a-46b5-8987-c01e05c42606"
        },
        "item": {
          "id": "3eb0997e-f239-4c37-8613-54361d38b654",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3ceebea6-d2e6-44e2-a8bf-524fec5e7336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 455,
          "responseSize": 206
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "44644b03-b8aa-4a0d-a783-6ea156cef914",
        "cursor": {
          "ref": "a8693f82-9be9-4518-8d80-837d68de2f75",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dabf4e28-829c-42e9-8405-05623640f722"
        },
        "item": {
          "id": "44644b03-b8aa-4a0d-a783-6ea156cef914",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "81925a22-21bb-48c1-9044-b952e1d587fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "44644b03-b8aa-4a0d-a783-6ea156cef914",
        "cursor": {
          "ref": "a8693f82-9be9-4518-8d80-837d68de2f75",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dabf4e28-829c-42e9-8405-05623640f722"
        },
        "item": {
          "id": "44644b03-b8aa-4a0d-a783-6ea156cef914",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "81925a22-21bb-48c1-9044-b952e1d587fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "686c0022-bc1b-4aca-ac3e-0c190f879b2a",
        "cursor": {
          "ref": "26416b30-ea20-46d2-a84f-cdb6293f1f80",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7f1aad6e-7429-4b63-ad20-5de5ce8cac7f"
        },
        "item": {
          "id": "686c0022-bc1b-4aca-ac3e-0c190f879b2a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7cd0aa3f-fd40-44b7-a586-aa4c77e55df2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 212,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "cedd5e90-35a8-4c6d-9893-ca8155185df4",
        "cursor": {
          "ref": "8e087082-8465-4fe3-bb91-bb7a2e699a3a",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8e4de99d-9e6a-4177-9d97-6043f6422ce2"
        },
        "item": {
          "id": "cedd5e90-35a8-4c6d-9893-ca8155185df4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "60742290-6b03-4a55-b913-1dbb3838226d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "d314fcd8-ec90-4d60-8062-e3fd25caaf15",
        "cursor": {
          "ref": "7f7aacd5-dff5-49f3-a902-ed60618dac58",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4026991b-1a27-4a08-8ca4-dfafbc4e685d"
        },
        "item": {
          "id": "d314fcd8-ec90-4d60-8062-e3fd25caaf15",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1cbfe950-982b-43a3-9836-205bb3377cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 540
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "09eef092-7e11-48ab-aec7-9bf29fdf73dd",
        "cursor": {
          "ref": "1120ccfd-7a59-4cc0-9e02-d84fca41eb98",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "95f1030a-8856-4a10-9b86-4aa455c9530d"
        },
        "item": {
          "id": "09eef092-7e11-48ab-aec7-9bf29fdf73dd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "acd3bba3-b266-4c74-88c2-1f86460da8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "30cd55db-dda3-44d3-a2ce-33f5a024dcbc",
        "cursor": {
          "ref": "3c49d46a-7822-4f48-b324-15d4820e7dc6",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "45817b7d-2231-4a45-8af2-338be4ab2979"
        },
        "item": {
          "id": "30cd55db-dda3-44d3-a2ce-33f5a024dcbc",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6996d073-7225-49bf-8ec1-cc860321dbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "1cce6083-a42c-492a-a0e3-ca720fe0e4fd",
        "cursor": {
          "ref": "0cbd4df2-567e-4100-b89b-a87b5a22c92b",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7587ead2-5ee2-41a6-864b-49b0cb5b60f4"
        },
        "item": {
          "id": "1cce6083-a42c-492a-a0e3-ca720fe0e4fd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "68c6ac84-faa4-46a5-8fc9-123f57b62b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 1154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "5f5acce6-4fa0-4d7b-a695-929889cbffc2",
        "cursor": {
          "ref": "51a5eee6-bd06-45fb-9f7a-8473876ca719",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "01fb959e-8fc2-4820-be18-cfd871fc0d5f"
        },
        "item": {
          "id": "5f5acce6-4fa0-4d7b-a695-929889cbffc2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e5aa98fd-c9c9-43cf-9caa-f460ec4049c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "8f78e41a-f862-4247-ab4d-d10d9c8a6407",
        "cursor": {
          "ref": "9bc0d2e7-ef9f-4f6a-9f39-899b92e9f565",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2436452b-d522-43c5-a673-f84df51661b7"
        },
        "item": {
          "id": "8f78e41a-f862-4247-ab4d-d10d9c8a6407",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "38c49bb0-02c1-4f17-98c7-fada86ac7d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 1699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "45330708-a3ba-4761-bfaf-f93f4c7c53cc",
        "cursor": {
          "ref": "803c1894-bdb2-40c3-b5c3-feedd5fb0818",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f8989535-056b-4a84-a172-1f1efa439f0e"
        },
        "item": {
          "id": "45330708-a3ba-4761-bfaf-f93f4c7c53cc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a4111b69-d9e4-4a97-85c7-57f396d0d5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "ded64f76-a248-43ef-8d32-6adcdbfd5cdf",
        "cursor": {
          "ref": "a4da2bee-d74f-4bb9-ab3d-5e31ad0da2bc",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "accb9553-05f5-4eb1-92e2-d6777cc7e91f"
        },
        "item": {
          "id": "ded64f76-a248-43ef-8d32-6adcdbfd5cdf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e85aa3e8-b0a7-43d8-9471-ca8d9a42f09e",
          "status": "OK",
          "code": 200,
          "responseTime": 308,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "b1a07fca-0edf-4cce-946e-4e2d1d6307bd",
        "cursor": {
          "ref": "03eedbc3-a6e8-4d51-80d2-ad80f717db4d",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0d7ad51f-a1ff-4875-bb8b-6394cb7b72ac"
        },
        "item": {
          "id": "b1a07fca-0edf-4cce-946e-4e2d1d6307bd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3ab755d0-e51c-459d-8fe0-765e04e7b36c",
          "status": "OK",
          "code": 200,
          "responseTime": 343,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "bf12d4e3-06ec-48d1-b21f-01a4d7b7237c",
        "cursor": {
          "ref": "fd1730fb-6530-45cb-ab6a-dde8aefb4bde",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a387b794-09f4-4ab0-a9aa-7f8d4f1d4614"
        },
        "item": {
          "id": "bf12d4e3-06ec-48d1-b21f-01a4d7b7237c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "64f5ae0c-df99-4a2f-b38d-c310b0bcaf2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 2187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "c6c8aa99-b5c9-4b45-9d99-b523e78f1cb0",
        "cursor": {
          "ref": "0a2474e6-4b43-4b3a-852e-3c738846f5bc",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "277921d0-1779-4252-b4a3-1d2a85022c35"
        },
        "item": {
          "id": "c6c8aa99-b5c9-4b45-9d99-b523e78f1cb0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "450922d5-e31a-47e4-a764-6ff275ca2221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "39e985b2-66d6-42aa-a888-b73e0c7dbe0e",
        "cursor": {
          "ref": "1343f3af-244b-44a7-a086-ba45f63f8c78",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9f20a967-8a4f-4cd1-bc3d-413db3209ba0"
        },
        "item": {
          "id": "39e985b2-66d6-42aa-a888-b73e0c7dbe0e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c7d8fcd7-783b-4a36-aff4-ee24c99a8667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 2176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "f7ad8839-b1df-480c-992f-9f72975a0c44",
        "cursor": {
          "ref": "7e102d6c-f19d-441d-8f84-5d27c522bb2a",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "197ec84e-0247-40eb-80ea-05699d1e3c0f"
        },
        "item": {
          "id": "f7ad8839-b1df-480c-992f-9f72975a0c44",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "421f315d-ed6e-4cc6-93aa-17cf7a73ca4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "68ee2e13-633d-4549-bf2a-4a0920b88248",
        "cursor": {
          "ref": "615329ce-7694-45e0-b4a1-9bff7788c27d",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "dc4b90a7-d2ff-49de-8351-17afc36388f6"
        },
        "item": {
          "id": "68ee2e13-633d-4549-bf2a-4a0920b88248",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ecf9d2a3-75f4-40cc-92a1-bb9ca081a717",
          "status": "OK",
          "code": 200,
          "responseTime": 323,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "a26d2579-d4ec-4a1b-808b-34c10189b5a1",
        "cursor": {
          "ref": "453fa4b4-1a52-4c90-bffb-2b2b0faa0700",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fc8854f1-8d8c-41e9-86fc-811a7bf6af0b"
        },
        "item": {
          "id": "a26d2579-d4ec-4a1b-808b-34c10189b5a1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "57e8e9e8-395f-45ee-a507-0b02e5e4cd05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 1235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "e6c7a45c-2567-44f6-b0bf-6e646ed7d5fd",
        "cursor": {
          "ref": "bb8ba9e6-dd0d-40f8-8ca9-031a422e2d42",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "85c2c29a-5408-4203-9c19-71a79945fb44"
        },
        "item": {
          "id": "e6c7a45c-2567-44f6-b0bf-6e646ed7d5fd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3f2a90cd-f5f0-4df4-8deb-768fabf7d10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 1191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "a5aa1294-c54f-4c4d-bf62-b553b9868a0a",
        "cursor": {
          "ref": "0d99833b-8174-44d1-acf4-f3737bd0af06",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "867d9ba0-4ab1-4bfc-a8f0-5ac3c81b5222"
        },
        "item": {
          "id": "a5aa1294-c54f-4c4d-bf62-b553b9868a0a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2c0b8ca4-a13c-4618-a432-d5aa5d552b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 1189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "121114d3-7bec-444d-a3e6-25e8c6a34d37",
        "cursor": {
          "ref": "31e2a7ce-a89c-4ea1-8097-e368bf9c309f",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "96a88eda-6f6e-49cc-9af5-58d3fd551b0e"
        },
        "item": {
          "id": "121114d3-7bec-444d-a3e6-25e8c6a34d37",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "40971290-efcb-485e-9055-3d9ca4165a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 1190
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "7024afc8-e453-49f8-9ba8-f7066e179412",
        "cursor": {
          "ref": "786c0f1c-efde-4975-9cb8-badbfcdf4864",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "75e7ccaa-1cbd-4c3d-8564-565483289fed"
        },
        "item": {
          "id": "7024afc8-e453-49f8-9ba8-f7066e179412",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e304fc0c-dec1-4e96-9025-2afd0d34cb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 1241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "be946ceb-9e09-4340-925e-f7326b9c1585",
        "cursor": {
          "ref": "7300eaeb-61ab-4c96-b851-009e59ec56aa",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fea2a280-d65e-4615-8bf7-f997c1785a0a"
        },
        "item": {
          "id": "be946ceb-9e09-4340-925e-f7326b9c1585",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fcf92ba2-7acc-4a9b-9c34-57691bce4725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 1168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "3abf6960-3995-49d8-b29a-b8ba838df0dc",
        "cursor": {
          "ref": "ece6dda4-3645-4a2d-a955-6106a5d738d8",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8bbadc63-89b7-4be9-9b5e-2bfb82a900dd"
        },
        "item": {
          "id": "3abf6960-3995-49d8-b29a-b8ba838df0dc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "39d414b0-6b65-4b1d-96db-e4b9683f566e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "4f9d1b95-9e54-4c12-a705-8e9da5d9cf75",
        "cursor": {
          "ref": "14fb6c7e-2bef-4101-a424-f53c67c5db1b",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b35b4567-26a5-4e80-aa65-784e7754e23f"
        },
        "item": {
          "id": "4f9d1b95-9e54-4c12-a705-8e9da5d9cf75",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "968bf6bc-bdc6-43c0-8527-3e1eea1518ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 1488
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "19b2630b-526c-4c87-9819-ea1699c23889",
        "cursor": {
          "ref": "6f7c247e-557b-489e-a79b-c1603bcb51f8",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0585d316-fd30-4037-b3e9-cac4542a80ae"
        },
        "item": {
          "id": "19b2630b-526c-4c87-9819-ea1699c23889",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b909ea6e-7b71-4967-881e-f4a840c5af90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "d5aedc70-95f5-4531-a440-3be1fb73c1c8",
        "cursor": {
          "ref": "b4c692a3-c0e2-4dc3-b69c-378fec86bcb1",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6a8f7385-3c72-45b2-a954-b9a1413f8fd9"
        },
        "item": {
          "id": "d5aedc70-95f5-4531-a440-3be1fb73c1c8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "07083662-4e8a-4573-b523-d623045998d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 1515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "f1e87015-b464-4f45-92ad-80fb93cdcb30",
        "cursor": {
          "ref": "cfd0d9fb-e0ca-4e11-af8d-ebf812b47053",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c58d8b9b-97be-4062-a09b-c637eacda186"
        },
        "item": {
          "id": "f1e87015-b464-4f45-92ad-80fb93cdcb30",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "87226173-cd01-4332-8a38-ecf89ea2d631",
          "status": "OK",
          "code": 200,
          "responseTime": 301,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "89f81da3-f33c-4533-81f5-887997884101",
        "cursor": {
          "ref": "3d769c0c-0b24-41ac-a7b9-ca41f9dbea8e",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "963e1d8c-f7a3-4951-8085-98eb01a190f2"
        },
        "item": {
          "id": "89f81da3-f33c-4533-81f5-887997884101",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b935faea-543f-4a76-89be-8f3cbfd5c029",
          "status": "OK",
          "code": 200,
          "responseTime": 249,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "579dc289-933e-4b30-93d0-e6a0f89c06c9",
        "cursor": {
          "ref": "927309b7-253f-4238-8a36-120417bf47bc",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0331e138-96e5-48ea-8576-4b15cd841a00"
        },
        "item": {
          "id": "579dc289-933e-4b30-93d0-e6a0f89c06c9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f6b04e69-580e-4266-b637-9199994eed81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 1534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "6ac7dc82-aeaf-4017-8eb4-368e4db97e94",
        "cursor": {
          "ref": "f38ae9c2-aa1b-4bea-bf9c-7b1683f29c84",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dedadb0d-0887-4389-87e4-90eeed53053b"
        },
        "item": {
          "id": "6ac7dc82-aeaf-4017-8eb4-368e4db97e94",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a0df9be5-8be4-4715-a30b-8ae8939f8c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "3f31562c-befc-47c6-ac61-b5d1438756a6",
        "cursor": {
          "ref": "f1bd5309-5080-491a-8e9e-b5d674eda486",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "df2cfb8f-30e1-4510-acb1-24c769fc226f"
        },
        "item": {
          "id": "3f31562c-befc-47c6-ac61-b5d1438756a6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "93cbc334-f153-4ba3-bd13-449a38c7be7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "e770c5c7-4d11-4d6a-adf4-a3d38aafa10a",
        "cursor": {
          "ref": "9c6135f9-4f52-42bf-b907-081f66d42354",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "238d4b23-01ff-434f-8906-77540abf9fbe"
        },
        "item": {
          "id": "e770c5c7-4d11-4d6a-adf4-a3d38aafa10a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "425a5d37-7d16-44f0-9bcf-e26963b9b84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "c53c2c21-69ad-44ae-a13a-923f700f351f",
        "cursor": {
          "ref": "c9c84651-57a6-4742-b7ad-ae85a7c582b6",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "720c6886-4987-4b56-b26f-9660a2d4edf3"
        },
        "item": {
          "id": "c53c2c21-69ad-44ae-a13a-923f700f351f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "624baac6-519c-4193-a959-c9e8f92e6987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 1550
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "c4aacb56-a848-47e2-ac51-01b7314e287e",
        "cursor": {
          "ref": "54158ffe-5ee3-48d1-9ffd-7aaea4204a08",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2394129e-9d9b-4cff-860e-e39c44aa0de3"
        },
        "item": {
          "id": "c4aacb56-a848-47e2-ac51-01b7314e287e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "99fd88a0-3357-4ceb-b3f0-2768f5607c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 1136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "bc0511c1-0321-4196-9ac1-72257d54fc66",
        "cursor": {
          "ref": "caa57720-acf7-4c92-a6d0-28ddb30dcaf2",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "514e0bc2-4328-45db-a981-1c6c99423296"
        },
        "item": {
          "id": "bc0511c1-0321-4196-9ac1-72257d54fc66",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9307d7d8-54f3-47e5-8800-756d64e5f9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 1445
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "47d86ec6-766e-45e9-abb3-64ca3e32a13c",
        "cursor": {
          "ref": "28b42328-c5b9-441e-971d-d81873a34871",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f1d5679c-1bdf-43e2-8fa5-beca983c15a2"
        },
        "item": {
          "id": "47d86ec6-766e-45e9-abb3-64ca3e32a13c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b3790c27-3118-43a0-90a8-0b93b664b544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 1431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "40bffcfb-b21f-4304-9e02-3bd78c393e16",
        "cursor": {
          "ref": "5c6dc9e8-4a8f-4fae-8d69-d243ad7d974b",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "803c0845-eb9f-431f-9155-f47744c02954"
        },
        "item": {
          "id": "40bffcfb-b21f-4304-9e02-3bd78c393e16",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "371b6668-3e11-4bed-8368-e1cf53ea47c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 1429
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "3ba76abe-1905-46e7-bc50-1881fcf041ce",
        "cursor": {
          "ref": "11cb0e7a-6bd4-4149-9527-c4af943d9247",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "97291e73-2a45-4fe4-9075-5ed491b179a6"
        },
        "item": {
          "id": "3ba76abe-1905-46e7-bc50-1881fcf041ce",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "08d891e2-90c3-42fa-80f3-9e090d0e143c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "7f935df9-3376-48b0-99b7-8fae90ff1e24",
        "cursor": {
          "ref": "77764eca-e58c-4d59-96a9-eef863cf5d23",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7f355736-872b-457b-9d41-06058f22523d"
        },
        "item": {
          "id": "7f935df9-3376-48b0-99b7-8fae90ff1e24",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ffa8c42b-48c0-40c6-b224-b1a4fa3039b7",
          "status": "OK",
          "code": 200,
          "responseTime": 238,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "f8913a57-7aa3-426f-84c4-239e69a96176",
        "cursor": {
          "ref": "4c521f7d-7029-4bed-be34-58549e2b050b",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6818d216-9b44-4256-999d-886f9e39804a"
        },
        "item": {
          "id": "f8913a57-7aa3-426f-84c4-239e69a96176",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2ce77e75-7fac-499a-a638-8f3aa13beaa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 1470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "22b052cf-ca0e-4373-9a48-e7059e8c303c",
        "cursor": {
          "ref": "69997761-0ccb-412e-abb8-02a634fe22cd",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0ebdf74d-c664-4e27-b55e-da0c23812f05"
        },
        "item": {
          "id": "22b052cf-ca0e-4373-9a48-e7059e8c303c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c6c87d45-6345-48e1-a4ac-eaf0aec34640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 1456
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "ca25b056-ffc5-43b7-a791-9b52cb91cdf3",
        "cursor": {
          "ref": "51712aa7-647c-43e7-b30a-7aca0e4ece39",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5ffdde70-9f5e-449d-b82e-7f58663e2025"
        },
        "item": {
          "id": "ca25b056-ffc5-43b7-a791-9b52cb91cdf3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "31237427-e048-4a4c-89b9-f7dcb7c0a43d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 1454
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "ccdb11e9-78e4-4660-8265-2aa2aadb1e30",
        "cursor": {
          "ref": "081c24d0-d04f-46b7-937e-aa95fca4903d",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d2455761-240c-4fc8-af0e-e683a7be67c8"
        },
        "item": {
          "id": "ccdb11e9-78e4-4660-8265-2aa2aadb1e30",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "80e454a1-a0db-4d74-8682-e2683d6bd05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 1455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "bb14183d-7b87-42aa-a713-547a1c4f54a8",
        "cursor": {
          "ref": "55cc3ede-f7d1-4a7d-8af5-a7a7716bf67b",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9d110f0f-1eee-4076-b534-b00d4a3fc963"
        },
        "item": {
          "id": "bb14183d-7b87-42aa-a713-547a1c4f54a8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d401d43d-1f8e-4149-b5fb-48f2f47dabf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 1476
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "edddc8fa-390d-446e-8ae5-a527a1f9865a",
        "cursor": {
          "ref": "7064b16d-8354-4571-8023-30654b70b80a",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "adbdbb43-b565-4e70-b873-48a81960b50d"
        },
        "item": {
          "id": "edddc8fa-390d-446e-8ae5-a527a1f9865a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7c407689-038d-4eef-be20-d6763cea71a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 1178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "1854058d-4fc1-4167-a23a-551b2bc2e1c5",
        "cursor": {
          "ref": "2edd93e7-cfd9-4398-bdb8-e4dc3a792c6d",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1acef899-c2eb-4fb0-8f0b-266a9a75bbb4"
        },
        "item": {
          "id": "1854058d-4fc1-4167-a23a-551b2bc2e1c5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3a880fa3-a0ca-4aa4-aee2-3d8a802c51a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 1202
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "1d3cf27a-b55c-453b-96a4-85accda7b85d",
        "cursor": {
          "ref": "d0900cfa-de34-4cd9-a7cc-73b8035d11d0",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4c5cf1a4-2e07-4737-aac1-e411224feb8d"
        },
        "item": {
          "id": "1d3cf27a-b55c-453b-96a4-85accda7b85d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f212c9b1-8ba3-4bc6-8714-b17008357ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 1183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "fb7a12a3-d15e-403e-a7a6-ba87003dd9b4",
        "cursor": {
          "ref": "9b289f8d-5e0a-4204-97d9-11f95aa2f085",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7e02bb29-4264-44b6-b50a-8560a2c0cb86"
        },
        "item": {
          "id": "fb7a12a3-d15e-403e-a7a6-ba87003dd9b4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "edd3acce-b897-4c53-81d3-ea373f3ae5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "4a2a6a31-546d-47a9-99d9-c89fa24a70b1",
        "cursor": {
          "ref": "05a9206a-8073-4747-8f52-43dfc91f3298",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "41fae5a0-2921-4c86-a709-4d4567e40ed8"
        },
        "item": {
          "id": "4a2a6a31-546d-47a9-99d9-c89fa24a70b1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4d947c4b-8ba2-4b2e-9743-55a44926d658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 1182
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "260632bd-bea4-453c-b11b-526e8bef9869",
        "cursor": {
          "ref": "2be6de4f-8d3b-4ca9-8e8e-a5590747a6e8",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f97c1f7d-fa49-4b8e-86ad-60f36b46cbf6"
        },
        "item": {
          "id": "260632bd-bea4-453c-b11b-526e8bef9869",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e311c5c1-5b2b-4715-bec3-bff0251faa72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 1208
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "0b17884b-462b-4004-bb93-34c4960afe4b",
        "cursor": {
          "ref": "0876fba0-c31e-4077-8287-58c758c55cfc",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2f2b31cf-23eb-4a54-ab76-9a6883285bc5"
        },
        "item": {
          "id": "0b17884b-462b-4004-bb93-34c4960afe4b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6f58cc0a-8ca0-4692-a88a-4c0bf924994b",
          "status": "OK",
          "code": 200,
          "responseTime": 307,
          "responseSize": 333
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "22af0a33-cff2-4bd4-8d1c-5f9dc74a286d",
        "cursor": {
          "ref": "9ce6c5b9-c775-453f-bd95-3465d4d727ea",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a2da29d0-7ebb-4733-8dfc-a75703f7739f"
        },
        "item": {
          "id": "22af0a33-cff2-4bd4-8d1c-5f9dc74a286d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "413772af-b3fc-4905-aa82-2d5cbf72ad29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "7843e071-e796-48de-8f8b-6607c6c77c88",
        "cursor": {
          "ref": "d701f2ca-9bca-4630-bc4b-5f7d0cce643f",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "91ee1741-d659-4cf1-8a3d-4eb7071d2f53"
        },
        "item": {
          "id": "7843e071-e796-48de-8f8b-6607c6c77c88",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "da64f300-8070-422c-ae9f-2c8acdbf77e3",
          "status": "OK",
          "code": 200,
          "responseTime": 296,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "26cd87e1-f9f2-436b-87cd-27bbecfcc2f3",
        "cursor": {
          "ref": "00328400-a3ea-4c7c-a962-ece3b6d867b9",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "56f52c26-27ce-4eff-908f-ce0658bc5205"
        },
        "item": {
          "id": "26cd87e1-f9f2-436b-87cd-27bbecfcc2f3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "65869f81-9956-4d06-b2b7-fadd2c500069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "e0a0d449-a745-4e65-98bf-d6c38b198967",
        "cursor": {
          "ref": "1f79f6fb-e585-4dc2-bc4f-e018598754eb",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "688ad876-a69e-4010-a73a-42abac849039"
        },
        "item": {
          "id": "e0a0d449-a745-4e65-98bf-d6c38b198967",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4e6e96ce-7b34-4fd5-a000-cd89d71d305b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 1654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "151df284-e3a2-43ca-b17d-2f54e3a4190d",
        "cursor": {
          "ref": "d4acc844-eb65-41e3-b18b-19997259ef33",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "df61c5a5-3e56-49d1-9577-84ae8b1eb4ac"
        },
        "item": {
          "id": "151df284-e3a2-43ca-b17d-2f54e3a4190d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "272d137f-8064-48f5-a111-48706b266226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 1655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "ab4cd634-df86-465d-98b8-4a46a89ac6cb",
        "cursor": {
          "ref": "2ba89e46-a660-48ff-a99a-f530a09f7acd",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7d0839f6-c821-445f-a6d1-070843174f5c"
        },
        "item": {
          "id": "ab4cd634-df86-465d-98b8-4a46a89ac6cb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "454f41ad-fb58-41b6-8f71-1d22df645c61",
          "status": "OK",
          "code": 200,
          "responseTime": 288,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "cf740c5a-7ee9-4aaa-869c-ffef4e26b158",
        "cursor": {
          "ref": "c7ba0777-c73b-4883-9711-41ba17b12650",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9ddb01af-ea58-4edb-8258-4ac285887317"
        },
        "item": {
          "id": "cf740c5a-7ee9-4aaa-869c-ffef4e26b158",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bc4f7456-447b-4f87-9c71-56d479aa8c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 2014
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "b8ed46a5-8851-4ac4-990c-2a3c05e103eb",
        "cursor": {
          "ref": "84850e57-73e8-4320-809f-ce7a2505bcd1",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "56c9a43c-dea8-4ec5-8c47-f8a0e3915a3a"
        },
        "item": {
          "id": "b8ed46a5-8851-4ac4-990c-2a3c05e103eb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "517fe04d-3bff-44ca-9d0c-8503156fb9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 2000
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "ea4e5665-61e8-4600-ab28-3378ca767427",
        "cursor": {
          "ref": "866f6be4-6f59-4c25-87bb-f457fa3ed7b5",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "94449f96-a577-4a6f-bd4c-e35dae61ba38"
        },
        "item": {
          "id": "ea4e5665-61e8-4600-ab28-3378ca767427",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "40fdaae3-a2f2-4fcd-8f4b-8723ce519b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 1998
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "3ef737ef-8c6a-429f-93e8-1c2ef198f523",
        "cursor": {
          "ref": "1e1877b0-df7e-46cb-9299-9716ae78125b",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "aea9a258-cda5-496e-a569-94cb16ec4e77"
        },
        "item": {
          "id": "3ef737ef-8c6a-429f-93e8-1c2ef198f523",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "62c1f338-9d61-4845-bc58-26b0d63a3b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 1999
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d8fd67ff-3181-421a-b59c-b2dae2bbb97d",
        "cursor": {
          "ref": "33c54b27-1ed0-4889-a463-f52c49534d8c",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "00ca1b78-cd0e-4064-b0b4-b9d0a195b0ae"
        },
        "item": {
          "id": "d8fd67ff-3181-421a-b59c-b2dae2bbb97d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "df3eca24-8a33-4106-9b4d-36e3fcf1d6eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 2020
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "5b74cd6d-2248-4e81-bb32-ceb37ff0563e",
        "cursor": {
          "ref": "ca208b5e-efdc-4681-8ab7-66cfab9a08a5",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fd0ee3a4-8fe1-4539-a13b-e5861b59b7a1"
        },
        "item": {
          "id": "5b74cd6d-2248-4e81-bb32-ceb37ff0563e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "04f0f3a5-1494-4f35-8f2d-93dc4782e7fc",
          "status": "OK",
          "code": 200,
          "responseTime": 225,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "4bd981a3-f026-4c89-87c5-dc869d91c505",
        "cursor": {
          "ref": "6caab1bb-c84e-485e-8506-899b5813f09c",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b8a23cd4-f0e8-4008-9495-8a826da35519"
        },
        "item": {
          "id": "4bd981a3-f026-4c89-87c5-dc869d91c505",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a41f7ccf-b495-47c7-843a-dfb070ea49a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 219,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "931851a8-b68a-45c1-876a-550c523d0bce",
        "cursor": {
          "ref": "f5e37a25-9982-44df-99cd-74a36e2e19c9",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "600cab4e-7749-4816-a636-4483dfb6b5b6"
        },
        "item": {
          "id": "931851a8-b68a-45c1-876a-550c523d0bce",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5f33576b-c9d1-4315-be3e-d0b4fe538e92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 219,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "cf2eab10-7145-464f-85f6-1ad04c88a77d",
        "cursor": {
          "ref": "05b2284d-1043-456d-9452-61f5c4e4feb2",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2fb43eb8-7c88-4cfa-85a5-57610fe280b0"
        },
        "item": {
          "id": "cf2eab10-7145-464f-85f6-1ad04c88a77d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3462df7e-6c59-47e3-86d9-c49fc20bb309",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 219,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "6a722d54-818a-4bea-9d80-dbc6aa144efd",
        "cursor": {
          "ref": "ed61f6c3-bcec-4f04-a709-ff4e2411a285",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9aa3f100-d8a0-4362-abbd-7db9b59ef3db"
        },
        "item": {
          "id": "6a722d54-818a-4bea-9d80-dbc6aa144efd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d0b6c6a6-ce49-4aad-96fe-9b55752561c1",
          "status": "OK",
          "code": 200,
          "responseTime": 244,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "1b52bfa2-3776-482f-81fc-77b17e05415e",
        "cursor": {
          "ref": "0f47567a-2c47-4790-9fba-05585a1a80ac",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5371ee24-566b-4990-a095-35247028d5af"
        },
        "item": {
          "id": "1b52bfa2-3776-482f-81fc-77b17e05415e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d913e3cc-71d0-4a82-8a45-5742a036311a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 234,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "6c0319e3-9683-4bf7-9f42-bc3abb8246e9",
        "cursor": {
          "ref": "2c9a6bfe-018a-4a29-a16f-0f8edbab09f5",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "44a8536a-cc52-48d9-b4a8-4c867e387afe"
        },
        "item": {
          "id": "6c0319e3-9683-4bf7-9f42-bc3abb8246e9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "03f90258-64e2-4cb8-8ec4-de239f4a410b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 210,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "2508f84b-d98b-40c0-864f-cc433b18f611",
        "cursor": {
          "ref": "c7ff2714-9b7c-46fc-a35d-796682e55b89",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c89382d8-b412-4295-a8b7-32edfe54fa18"
        },
        "item": {
          "id": "2508f84b-d98b-40c0-864f-cc433b18f611",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "420c3bbd-b81a-4b9c-938a-5ae3771fe3d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 222,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "6603f90d-f5a4-4cba-8ddc-f3b0edc39d76",
        "cursor": {
          "ref": "91422e0a-2796-4f5c-a9ee-841629b5e31e",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fad3380a-ed08-4907-a4e3-77936ee6c9f7"
        },
        "item": {
          "id": "6603f90d-f5a4-4cba-8ddc-f3b0edc39d76",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2dd56b1e-e845-43a0-b7c6-61c5c96ba89b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 246,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5edbd0fe-08e0-4455-93ce-c8866058f2ad",
        "cursor": {
          "ref": "1040ce39-834e-4373-8cb9-4532ad64cb37",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "045a5367-f29b-4a05-b5e4-42d3e5c52e50"
        },
        "item": {
          "id": "5edbd0fe-08e0-4455-93ce-c8866058f2ad",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ec43a8fd-68bd-4425-a2f6-178d3b98d224",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 225,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "71730c20-3a84-4aa6-9b7f-6fa1005383a5",
        "cursor": {
          "ref": "79d0fb9b-efa6-4c7c-879e-0b7f47fb4835",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "31a124ff-f84e-4585-bef2-0c168e37700f"
        },
        "item": {
          "id": "71730c20-3a84-4aa6-9b7f-6fa1005383a5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2a7cb010-27c9-4bfb-b45b-dfaf7813a940",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 235,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "54cae118-34c8-4f03-aecb-067cece78c96",
        "cursor": {
          "ref": "43b22dc5-6ef9-44a9-80ad-980754497fcf",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1e21ca82-3467-44fd-99a1-c178dc25890a"
        },
        "item": {
          "id": "54cae118-34c8-4f03-aecb-067cece78c96",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "530288e8-f87a-4167-904c-6087b26fa8c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 276,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "b937f5dd-f257-4f72-b6e5-0c14087a2d0d",
        "cursor": {
          "ref": "0669ae0d-3918-4a20-b8c2-439fff086ed4",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fa0ce830-3e24-43ba-aabb-f0ab88bcc520"
        },
        "item": {
          "id": "b937f5dd-f257-4f72-b6e5-0c14087a2d0d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "efba3147-c5c8-435b-b64d-69d7defc640f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 309,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0a2d1803-cdce-4024-8be7-d98aad0a5cf4",
        "cursor": {
          "ref": "c91cd815-1c7d-4d9d-845c-fb514bcd182b",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f17a361f-8c2f-4af6-acb0-4a53875c2dca"
        },
        "item": {
          "id": "0a2d1803-cdce-4024-8be7-d98aad0a5cf4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e283c57a-e413-4732-9706-37e5f865fad0",
          "status": "OK",
          "code": 200,
          "responseTime": 269,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "89dbac95-dd0b-404b-b2f2-20767f21cfb0",
        "cursor": {
          "ref": "d8f92c65-2fb0-46dc-b5b0-dd8d9a92b1ee",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "393c1eb9-3596-427c-a2f9-983aedbc9bba"
        },
        "item": {
          "id": "89dbac95-dd0b-404b-b2f2-20767f21cfb0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fb854d87-8fe5-4b67-ad7f-1964b688ca89",
          "status": "OK",
          "code": 200,
          "responseTime": 298,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "422a1f2c-5867-46ba-aea8-dd04a15aba5a",
        "cursor": {
          "ref": "6bd031b3-c406-44f9-8616-2ad9d93e75f7",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "51396310-ef49-4c81-a0d9-05d83d615787"
        },
        "item": {
          "id": "422a1f2c-5867-46ba-aea8-dd04a15aba5a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9963b067-3b3a-4a56-9c30-29b3d86b03bc",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6d0fccdf-751f-45d8-824f-4166abaa3138",
        "cursor": {
          "ref": "0f5b2c7a-4e20-436a-b7f2-741e62f31b78",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a58c2bb8-62f1-44c4-8d2d-d38bc7c098be"
        },
        "item": {
          "id": "6d0fccdf-751f-45d8-824f-4166abaa3138",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "31765f35-733d-4a6d-bbac-a5355e10f7f6",
          "status": "OK",
          "code": 200,
          "responseTime": 254,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "2607a3ce-ea86-4709-a9ab-39eacf428632",
        "cursor": {
          "ref": "8a209601-dfd3-474b-900e-8825cc1203cc",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "72d6d517-6fc9-428e-b8c7-1e685ab3f688"
        },
        "item": {
          "id": "2607a3ce-ea86-4709-a9ab-39eacf428632",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fa41ee25-558e-4b93-ac4a-5a10cb6e26f6",
          "status": "OK",
          "code": 200,
          "responseTime": 238,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "10092a43-2653-4963-89bd-79532d878ef4",
        "cursor": {
          "ref": "ff7d4ef9-eb4b-4cf3-964b-3a0d4e250934",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "fbae21e3-1904-40db-ab89-43d3dfd47070"
        },
        "item": {
          "id": "10092a43-2653-4963-89bd-79532d878ef4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6a9ad739-9fdf-4d26-905b-60d9ca2e9d91",
          "status": "OK",
          "code": 200,
          "responseTime": 248,
          "responseSize": 303
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "db6b86d6-2ca9-48e5-9f3f-0c74e51a18bf",
        "cursor": {
          "ref": "5b28c8ef-870d-4717-a728-8cfd5ea6bbc1",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f7cc700e-970e-40c9-b38d-51402e2da6a9"
        },
        "item": {
          "id": "db6b86d6-2ca9-48e5-9f3f-0c74e51a18bf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e135e516-df90-4c8d-9f9e-aba956fdaa8d",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "355a6510-0ca8-4588-8c78-cd1c4a30a63b",
        "cursor": {
          "ref": "d80b76e9-39e2-4132-b4e0-c27697c02bac",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a8e937f1-bde7-411e-925e-9a925c30ab43"
        },
        "item": {
          "id": "355a6510-0ca8-4588-8c78-cd1c4a30a63b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3c96b4eb-ea85-49d9-89bf-d1778fbc5c19",
          "status": "OK",
          "code": 200,
          "responseTime": 265,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "c0808389-c5cd-4f60-bbec-20ef117c9ec3",
        "cursor": {
          "ref": "8f6c4bde-8af8-4e89-b541-712e328dc3ad",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6d019d6b-1c91-413f-8c5f-cfc9df49a347"
        },
        "item": {
          "id": "c0808389-c5cd-4f60-bbec-20ef117c9ec3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4ad1879b-14ff-4663-9262-d9d36c718690",
          "status": "OK",
          "code": 200,
          "responseTime": 248,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "898540d9-9025-48af-9968-c5222524143f",
        "cursor": {
          "ref": "1c60ef04-4d94-48b3-8e31-ba2542e1a91f",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "63591190-9224-422a-bb78-1f313681638d"
        },
        "item": {
          "id": "898540d9-9025-48af-9968-c5222524143f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ef75c339-7f86-4e5f-803e-3498ea6a8736",
          "status": "OK",
          "code": 200,
          "responseTime": 245,
          "responseSize": 309
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "f59c7d6a-42e7-4c69-8e11-7dc26ea06e50",
        "cursor": {
          "ref": "3a327a0b-1519-47d7-ac06-ed26cfa2815c",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a57643f8-9dae-45ad-8292-66a31efa04bc"
        },
        "item": {
          "id": "f59c7d6a-42e7-4c69-8e11-7dc26ea06e50",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5e6b6c2e-f2f7-496d-82aa-5bcc6e9b9bd5",
          "status": "OK",
          "code": 200,
          "responseTime": 328,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "254c323a-2166-41a5-87ef-a20c4ca671fb",
        "cursor": {
          "ref": "b945debc-6f04-44c3-932f-1f6cbb63a3c6",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "879392f0-d98d-4bc5-8c97-94f54c37fd5e"
        },
        "item": {
          "id": "254c323a-2166-41a5-87ef-a20c4ca671fb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2152534b-1ddb-428b-a407-227c9c20f6a5",
          "status": "OK",
          "code": 200,
          "responseTime": 268,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "8b3fe91f-7995-4976-b0fc-716867b6c975",
        "cursor": {
          "ref": "56881b36-ee52-47bd-9c47-d3365ffc4323",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d8bb20ac-65e8-4af6-9aba-83c8eb51d4ca"
        },
        "item": {
          "id": "8b3fe91f-7995-4976-b0fc-716867b6c975",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1fc05f0f-f522-4d7c-b13b-ac5e3c35aac2",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "0afeb606-6e8a-48db-91ce-1c22409d1c1c",
        "cursor": {
          "ref": "f9f252cc-7531-45a1-be5c-6d56f5999939",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0ac7a26b-c2d0-4f1d-af9e-6a031ad847b8"
        },
        "item": {
          "id": "0afeb606-6e8a-48db-91ce-1c22409d1c1c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bcd72894-7d93-45a0-92cf-e2ea5402c14b",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "6252532f-f37e-4ea1-bca3-1f352fef0fb8",
        "cursor": {
          "ref": "996a6990-4f98-4d39-b030-084aab1b2c85",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "371ab573-b479-4c1f-97b9-551b765ef30e"
        },
        "item": {
          "id": "6252532f-f37e-4ea1-bca3-1f352fef0fb8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "78cd5c70-46a7-4bb3-9d5f-161a2c6e3919",
          "status": "OK",
          "code": 200,
          "responseTime": 261,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "ab4a22c0-1c30-46e2-ae7b-a50e1238957b",
        "cursor": {
          "ref": "db25f218-5e7b-4a54-bb46-009950b01e8d",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "31932e6e-8f25-4d35-af19-b094db47c4fe"
        },
        "item": {
          "id": "ab4a22c0-1c30-46e2-ae7b-a50e1238957b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "703e1cca-4da1-4e9a-95c8-8bf01e2f88b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 227,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "413c2c08-0e45-4bc3-a8e0-0c79a13f8ccb",
        "cursor": {
          "ref": "f28542a1-0ab0-42ae-b841-5532d10b8734",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "505e8d35-9c7d-4e34-8dad-024c00263956"
        },
        "item": {
          "id": "413c2c08-0e45-4bc3-a8e0-0c79a13f8ccb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bc5171ca-c43b-457c-b1d8-fe9ba2463bb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 228,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "dbe27911-2d71-4e0c-8ae2-47e97f680716",
        "cursor": {
          "ref": "8b766c57-bf59-45e5-b9b2-36ea9e4daf7b",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "52802cb8-4e0c-41d2-9655-662d92d2d71e"
        },
        "item": {
          "id": "dbe27911-2d71-4e0c-8ae2-47e97f680716",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "29c4d1b3-ab5a-4579-88ed-24fbe3e1dbdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 226,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "02fb061f-738c-42b6-b01e-52bbe699938e",
        "cursor": {
          "ref": "452baa25-e5d7-479a-97f6-319318f57296",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a9133dfb-4b0a-4822-8db4-8dd5080dbe7b"
        },
        "item": {
          "id": "02fb061f-738c-42b6-b01e-52bbe699938e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "393d5a3f-a9be-41d3-a428-241e5fa674bd",
          "status": "OK",
          "code": 200,
          "responseTime": 241,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "dde2146a-90cc-4308-8bdc-08e5bc1d8f98",
        "cursor": {
          "ref": "7f9df491-b9b8-493e-8545-1dac67d7a128",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8cc36663-98d8-4b23-9c9d-8398e01962b8"
        },
        "item": {
          "id": "dde2146a-90cc-4308-8bdc-08e5bc1d8f98",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dfc8b9f8-98a4-47b0-babb-10bdad3e4131",
          "status": "OK",
          "code": 200,
          "responseTime": 234,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8a272718-2faa-4dc9-b4f9-601109b671bb",
        "cursor": {
          "ref": "20a87c4a-0c63-4663-9f93-5189c40cea1a",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "41aab5e1-4a03-4272-a987-46b061f36fe7"
        },
        "item": {
          "id": "8a272718-2faa-4dc9-b4f9-601109b671bb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4c7f7c5a-815b-436d-ac20-2b57cbe16312",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 258,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "05073cfc-4481-4787-b135-3ce238988610",
        "cursor": {
          "ref": "1513e8e4-70ff-4aa9-8213-342a4a86242f",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "069bbba1-8fef-4849-88c1-3e9b578b05c4"
        },
        "item": {
          "id": "05073cfc-4481-4787-b135-3ce238988610",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4ebf96c2-65bb-4fb1-bfaf-5c617115413c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 42,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 403",
              "stack": "AssertionError: expected response to have status code 401 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "2221044b-4744-4fc8-8dc7-89ba60e3e275",
        "cursor": {
          "ref": "36244492-ed90-4afb-ba7d-8f5d981f74d9",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7ec2ae03-6b20-480e-9901-4c1f72a36d6b"
        },
        "item": {
          "id": "2221044b-4744-4fc8-8dc7-89ba60e3e275",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c6238234-b62e-4f53-8a6d-14e7d070a672",
          "status": "OK",
          "code": 200,
          "responseTime": 422,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "fcf51460-daee-4254-943a-8085c1a1f196",
        "cursor": {
          "ref": "9ce738fe-6436-42f7-b2ea-abafb9c5dd09",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "63c20479-b39a-4b6d-87ce-2305d0213e53"
        },
        "item": {
          "id": "fcf51460-daee-4254-943a-8085c1a1f196",
          "name": "credentials_verify"
        },
        "response": {
          "id": "43072115-db38-4ff4-bfa7-5a1724963721",
          "status": "OK",
          "code": 200,
          "responseTime": 290,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "68a11fcb-8942-45f7-a5a6-7efeb61888bf",
        "cursor": {
          "ref": "88a5be11-75c1-4afc-84c1-a562a272159d",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d71d1ca5-b5ae-415c-a7d1-f1b31b2c43c0"
        },
        "item": {
          "id": "68a11fcb-8942-45f7-a5a6-7efeb61888bf",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "8c48acaa-f4ea-4bb5-a9b1-a01a4de3cd37",
          "status": "OK",
          "code": 200,
          "responseTime": 361,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "0c9afda8-1832-4d84-8b3c-76ac48dcc829",
        "cursor": {
          "ref": "07a662bc-4785-484a-9521-0d6675492e66",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "86858e3d-6581-4ce9-9874-da8441d9e295"
        },
        "item": {
          "id": "0c9afda8-1832-4d84-8b3c-76ac48dcc829",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "aa047bf4-ca45-4f1c-a025-e3a13e62cea6",
          "status": "OK",
          "code": 200,
          "responseTime": 495,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "04ba2f24-221a-4efa-b52d-0327c03d5b3a",
        "cursor": {
          "ref": "fda50a0b-5602-4072-a47b-2a166dfee371",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e0c27182-fc9e-4721-931b-8ac4a2b1a4bd"
        },
        "item": {
          "id": "04ba2f24-221a-4efa-b52d-0327c03d5b3a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dfc6bf52-2dfa-465c-8745-06a69d1227fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "04ba2f24-221a-4efa-b52d-0327c03d5b3a",
        "cursor": {
          "ref": "fda50a0b-5602-4072-a47b-2a166dfee371",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e0c27182-fc9e-4721-931b-8ac4a2b1a4bd"
        },
        "item": {
          "id": "04ba2f24-221a-4efa-b52d-0327c03d5b3a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dfc6bf52-2dfa-465c-8745-06a69d1227fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "04ba2f24-221a-4efa-b52d-0327c03d5b3a",
        "cursor": {
          "ref": "fda50a0b-5602-4072-a47b-2a166dfee371",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e0c27182-fc9e-4721-931b-8ac4a2b1a4bd"
        },
        "item": {
          "id": "04ba2f24-221a-4efa-b52d-0327c03d5b3a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dfc6bf52-2dfa-465c-8745-06a69d1227fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f3031dde-b8b2-4d11-85b6-6b6618d0fc45",
        "cursor": {
          "ref": "d2e19d89-b04d-4c79-a6ae-3eb9ce39012c",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5f89c108-e709-4482-9d41-f436f09e5256"
        },
        "item": {
          "id": "f3031dde-b8b2-4d11-85b6-6b6618d0fc45",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5345c52d-5296-4bf2-b802-7eb84f4eca56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 558,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "b6d9cd05-f38f-4d6f-abb1-d955bf004734",
        "cursor": {
          "ref": "219b342d-11b9-43e0-a920-43c613fd5d88",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "78788db1-b9da-4739-be18-1303f7a19a20"
        },
        "item": {
          "id": "b6d9cd05-f38f-4d6f-abb1-d955bf004734",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "68eada12-75e0-4c49-bb9f-ad3f3def9a86",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b6d9cd05-f38f-4d6f-abb1-d955bf004734",
        "cursor": {
          "ref": "219b342d-11b9-43e0-a920-43c613fd5d88",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "78788db1-b9da-4739-be18-1303f7a19a20"
        },
        "item": {
          "id": "b6d9cd05-f38f-4d6f-abb1-d955bf004734",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "68eada12-75e0-4c49-bb9f-ad3f3def9a86",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "57f4a04c-d9f7-4e99-869b-0d4eec736cfd",
        "cursor": {
          "ref": "4f1bb668-d943-409b-b000-ba880d717e24",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "14f07ac9-29b0-4034-ae01-17207ad12435"
        },
        "item": {
          "id": "57f4a04c-d9f7-4e99-869b-0d4eec736cfd",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "258f27f0-e63f-4d6e-a384-80fc4c0bbd83",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "169563cc-9a91-47a2-bbd5-00c4c742333d",
        "cursor": {
          "ref": "fb3bc9c6-58ed-43dc-86df-2cf209c2e93e",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c30dc816-19e6-4c6b-89da-cc1425d277ae"
        },
        "item": {
          "id": "169563cc-9a91-47a2-bbd5-00c4c742333d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8016328b-33a3-41bc-9d5a-46d9bbdc1d1c",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "169563cc-9a91-47a2-bbd5-00c4c742333d",
        "cursor": {
          "ref": "fb3bc9c6-58ed-43dc-86df-2cf209c2e93e",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c30dc816-19e6-4c6b-89da-cc1425d277ae"
        },
        "item": {
          "id": "169563cc-9a91-47a2-bbd5-00c4c742333d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8016328b-33a3-41bc-9d5a-46d9bbdc1d1c",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c0de3916-a2a6-4d9e-be38-1994d2fea7ac",
        "cursor": {
          "ref": "47ad834e-e209-431a-a481-981c6a2bb1c0",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2acea19a-1666-4849-a457-1a0f88e03ad0"
        },
        "item": {
          "id": "c0de3916-a2a6-4d9e-be38-1994d2fea7ac",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "ba014f21-ebc1-4a70-ab82-2b4d3c6b3edd",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}