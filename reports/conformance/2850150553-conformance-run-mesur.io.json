{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4f950557-9739-480a-adb9-2b1030c0a374",
        "name": "API Configuration",
        "item": [
          {
            "id": "afdc571e-a029-40b3-b3ad-e34f6a9094de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a99fdd69-4263-426a-bcee-2adf90bd357e",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7f114b8-14c0-4a1e-9c8a-012912eb7f2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f33136a4-edb9-44bf-b284-9ce049a8de33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "3515de4a-1fd2-4602-80ef-838e621856f4",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "cbfb62ee-5a3b-4500-a044-f96211a8e5f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7ebfe6e-b4a7-47b1-b16f-23173806df41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d322fb3f-98d6-4b20-8c29-d636c91a679b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3958f545-0b0a-4e4e-91b9-7f8b909dc9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bd825e6-8b64-4aa5-a8c1-b8110e57c168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6076ee93-0683-46d2-acec-70d91ceedb46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad60134-8c17-413b-8e16-99aa3a68a2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95315385-73bd-4a42-ae57-79069b676de6",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf5de84-0d1f-4e48-b71d-4a59c284851a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6eefd230-6a66-4475-a75c-6970d30cb521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5939d59-81f0-4b7a-8acf-5d6ccd506ebb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "794b02b5-f7c4-4d1d-b5dc-a248867c8499"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c4d1510f-74b1-455f-a3ff-5a8e0046396d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0d270724-a529-491c-b789-50d016832c55",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f91b7757-4d88-4f81-8506-1a2ebbb7e2e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b9abd31f-e978-4ebb-873d-b24e04e46e7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de2d24e7-bb2a-45df-ae83-5074161c2b73",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "3bae61b5-0042-43b4-a005-bc67e1ef9b69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec14d216-68bb-48e6-ab6a-a18005b2e302",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82e96884-568c-4602-9085-602294bbcc8b"
            }
          }
        ]
      },
      {
        "id": "2e6c5892-99ca-486c-aa49-1000d16fc14e",
        "name": "Issue Credential",
        "item": [
          {
            "id": "116c5321-22de-4b27-8d94-b5cc85aa0960",
            "name": "Negative Testing",
            "item": [
              {
                "id": "089a9810-aad5-49e1-9511-21fa716c2a87",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4c8bb3bf-3ce5-484b-8b5b-ef3b70e60077",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83431602-ba6e-42c5-baf8-12c355ed56fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aeba2e2-4e52-40be-9566-7cf2958291bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928f462c-6d19-451e-9d7f-5b9721cef88d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5473079a-bb7a-49f9-a9f4-514837b8df48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b601f2f9-5aaf-44de-802e-12dcc9fd16c3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb50ef7-0a67-4bdc-a263-243539f5a54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034037af-caf9-41dc-9ed3-e92d2e424b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964c31e5-473f-4901-8b01-e4f958c2fb99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "add0a9ad-7f82-4281-a83d-bcc215b4d4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc925ee2-105f-4014-97df-e52c4cfb18a6",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b10e4a0-f2e4-45fa-b40b-3d0ac3763937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4434d23c-e3df-4a92-a2c1-7596e7c36943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa5ffb6-6da9-4419-b829-1b51af5bfa01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7061d4e-1a69-4670-94f4-bed23510c0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb55959-5e9c-4834-9d37-400a0043bd2e",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d043a7-9d88-4f39-94cc-8ac35d165a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e1bf32-0949-42c9-9454-48a4c9141b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd5e4f5-c2b1-4612-b5e4-0ccd7014517e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33e7ee47-6cfb-4410-b5be-d4a054e52064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94ffe8f-8500-443d-8741-c10205b4ccd4",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c61c5cf-1160-4f85-a844-2f6ff7b32cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13e3d2b-d23c-4128-b478-0dc38645a1f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b7b72c-28b7-4022-8219-4b67dd47c7bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "919e6abe-d962-4fd9-bf19-132cb54a6146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df81d0d0-6129-4482-9e4a-d19124f5cba5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54524ab6-36c3-403a-85ba-070c17dd4ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf4f0b15-53f3-4c22-ad3a-61310ddb7a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca1f44b-8e2b-4233-9d28-d662622885d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c60c2a7-e1ff-4e62-8561-96604248bc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815efc2e-c53e-4767-8dcf-b1d9db0bee00",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd56dc8-47c1-4d8f-8e95-484bc9c499a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f484e695-25b2-4195-a341-ddbc00f8d48a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1995c86e-908b-493c-9e67-0a4455e78990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11527fe4-1a71-4661-801a-5deafa6a1f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cd6fad-61fb-4900-95b2-260716014aa2",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920fc7cd-95df-4ec0-8ce4-e7863ead5544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b652f7-b7c5-4dc0-9c15-1c45a96b24cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee1de83-9480-474a-8bbf-9e4f3d090067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab361dae-3072-4a69-9e12-108ffe8b755a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bad2684-a8c2-4307-9259-5fc671b9617c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab198237-b62f-4f9b-bf0f-0783fde4933b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f59c4c8-488f-4ac6-8868-9c5acc546945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0acf81-c0ea-4e7b-8c92-5dc4b71b4fb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53b3a5cf-0e47-497c-beb9-ef54b9793a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e181ca15-8a91-4f75-8d6c-233cef1c61cb",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "becea6f4-cae8-43e0-9c3c-b1899f19a2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16c5afb-0b67-4689-9f32-1ad5f28f6249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1d0472-c959-4ca5-b141-30e0838eb25f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc2f690d-1c9c-429f-b277-403ef05ebc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc429e0-03b8-46c2-b309-1f9fbd46b3fd",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67d4cd9-eb5b-4687-97ad-a6b8f64ceb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4532e09-0149-406b-bc17-dfc49cac7d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da16bd82-ecf9-4482-9ed5-39b6de2f3895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "bf97873e-a7d7-4f9c-89cf-f48651091a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f925c3-2a2b-4e0d-8ad8-2e5a166d8c4e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a009dc9-cf82-4b9d-b6fb-c9b977012c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e782b321-bae8-4fc3-9598-949482631c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b2aa75e-a2bb-45e5-9d69-0923631259d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "e1ed3885-d684-4892-8fcb-78cb6c264fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75a8afd-c3b5-4df8-966e-0c03434280e2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305fd476-09d9-4134-bb67-a9559b8df261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef1eea4c-7b18-4057-b1b0-564c0a32c3bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd03868-d774-489b-9f80-7a0d8bcb9391",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66a3e7ec-8e77-4552-ac11-728e1ef0eaa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b6be45-d6f2-4869-bc89-67b47062f1ba",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45f1870-3d40-4251-9aaa-5eeb20cd2aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9edf95a-45d3-41f9-8c0c-7852952c384b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75171cc-f159-4c46-b9b3-69d0b73434be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b23976a-f72d-451b-bbbc-e3e6e0a722cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81fa024-7fc4-4334-be06-413cee622024",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede31b15-ee12-4cb4-83fc-210e9082528b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7f4944d-43cf-4c27-a781-22158178417f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6ca229-d469-417d-8404-ef073a042a2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8f41729d-d6c9-44ec-99ca-87bbd6f3ba09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c59f4b-f260-4b66-9833-4e9f06ca6c90",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639a2eb5-c5df-423b-88cc-ec470ff6f5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485987ab-c291-4187-9714-42625f544cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9cd50c2-d0e6-48dc-b71a-6f3a527fa0cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b3481087-4b3a-4191-903e-61a38e4fe15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88bf1a0-08b5-42c2-8c3a-57c8980f4d0d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bee186a-4032-47b9-a6d9-c3c86435630d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6feb23-8021-4442-8aad-77bea9240a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f02ec5-0b92-4aca-a214-7a2c06fd7eb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df95b178-f5a7-491d-831f-f3d178be1fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecb42b2-581d-48b2-b8ef-b3fb9277d08e",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6c8e75-85b2-44c8-8022-7a118fb064af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b029a5f7-0a6a-41dd-89f6-1382382f1241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0457c7b-5f94-468b-8be8-483169d7360c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20970262-9f16-436d-8830-1b2699d3cc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3ca415-263f-4a56-8199-0279cb7f21a3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dc64ef-2aad-4fa6-a382-32ead40df2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607647d4-05bc-49ba-a643-652155069229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b73281c-4d89-450e-afe6-9abfffbaae76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7a2423b-74bc-492a-8d4f-b9f92156cac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5f7ed9-035d-4123-bb01-7da0c0a1ed64",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8b4013-d2bf-47c5-a5b5-88c427a8b635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c873c0bd-1c0d-43e6-ba74-279da67789ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68bb921-6b76-4e44-bf8f-49827c67e588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e76c0461-8cec-44a2-8933-e63ae8b45009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbfa336-3d70-4634-9e43-8238bb8531f1",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8328ad36-5c38-41ba-8b9f-2571ea4424db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8785dc-1acf-47ee-864b-e091acae22c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a066e490-7768-49d6-bb3b-df379fdc1703",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58b7e4ff-5241-447b-87ae-3d9fabe7a1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3a2848-99b2-45f1-91dd-4ede2fd1306c",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af26818-65a5-4cf1-ac8b-04e34efb3843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ce6567-4036-4363-a3a6-78061d065285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7458b535-be8c-4315-8ef9-93603ad9fc6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3941744b-e35f-4009-b95e-6fb66d78647f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6948758-3ebf-4983-85b0-68c62d32471b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e3b779-a183-444e-af8d-1dd046c8f489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0042ec03-3580-46f5-bb4e-62cf74ad23dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fb5499-8f9e-4b58-82d8-7404a54033f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5675ce79-ce3f-4610-a78a-af22185ab890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356ddd3c-56d9-4c7e-a2ba-5887becde4c5",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cb8b94-7ab2-4f07-b61f-5ac13d5151a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f23d803-7795-4c8d-9320-3b1cb837295c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc5a2b4-4ce0-4371-93f7-143ca4c4ac92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdef90ac-6cdd-46fc-aa7e-98d09ce77509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1c516b-6243-4a77-82c0-8f71d62b0924",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaa309a-c11f-4966-8c04-dde15ce2f4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423e124b-d415-43dd-9d93-bfceeb309dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fedfb67f-3eda-4a3e-ba8d-791cf4145e71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33eefb95-479d-4572-ab08-36739888b350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ce7f9d-f314-491b-8155-b323391da4b6",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e92e2c-bf26-4512-986e-9d63b41d3902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29464922-fb26-4cf1-adff-3befb3a35fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b041ab61-70fe-4625-a0f0-a2d7fc2fa803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15c26281-ca3c-4929-94da-55f1fb400d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56bb06ca-0be2-4f9e-a979-242ad7f9be69",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15129e90-e126-41aa-9b62-767a89cb67c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccba1414-f0b7-4d57-9f31-7247ce235bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b473b3f5-e6b4-4c7e-bcd1-23a2ab59811f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da1c2b56-f093-4545-a38f-d12384751cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8305435-018c-4036-80c9-2cb2d7604062",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5039515-ac62-48ab-a1ff-11f6df79e10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65245f12-47c4-4b88-b6d8-e87cc6e084df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60653240-bbda-490f-8fe8-e1dc282e42f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c96d25e-e679-4800-a178-86f31a4c2a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f47f2b6-d9cb-49a1-9c31-5cb42a82b27d",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d22572-dad4-45c2-8148-f53362bec525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab633e2-81b2-4c01-93c3-c5c9de31b6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a037d37-466b-4f5d-ac14-a8b7f184b167",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e219326a-7705-46b6-84f1-9406e2bf501e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49290c8a-ffb3-401e-b03e-5f6fa6a091b3",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0efa652-79e0-414d-b793-ee88db067331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd2e269-bffb-4421-9fc0-7c78724a43d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ead800-8611-421b-869b-bf6a85d18355",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4553f1a-108b-47cf-a67f-48132aee0360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23382f5-bc68-4435-916b-deca6a3f4434",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec3d392-cfcf-469a-aec0-597c47585906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "31ed8191-45e3-4fb2-bab9-1294bb49ac34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e419eba-4f38-4072-9adb-9059ded145e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15e63006-b0f9-4261-90fb-129492b9faa2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3aea7f8f-a640-4ad8-a023-20128dfa16e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb720f62-284c-4fc8-a53b-ff20989ab055",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826b60c9-51f1-41aa-b6b1-f56bd0fb7da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2db6b492-2579-4aa0-bdfe-6d3ea4a53c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859cc729-fa63-4ca4-81b6-00a6a758a144",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2e39a58f-e6e8-4c27-b735-197fde980c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e38498f-0094-4c53-bd37-47ad861285b0",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c0df7e-3589-4834-8617-d7d71ddf117c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4197ff35-fd95-489d-ba7b-0cac85a8826e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fd5459-c80d-4804-aede-fd5534134e92",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "75ca8889-b249-40e6-abdd-c11826633d1f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38e0005e-4fff-4b62-a97b-d2046ff82f72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f8763aa-fda8-4b84-90b3-891c49e423cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41ea9b7f-5e61-422e-98eb-c4be50de4ff2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfb6ac7e-7fcd-4295-8a6a-ee0123c5ddc3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1635a75a-c4ca-4252-8e5e-28e770bbe7e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff5fe5ed-6729-4b07-ac02-b6aaeff71fa5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0034164a-d6ba-425c-965f-f55dbec3455f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bdc992eb-e05f-4cba-9b43-4f0525cba0ba"
                }
              }
            ]
          },
          {
            "id": "835d78ff-70ec-4b07-a1bf-f279f188a507",
            "name": "Positive Testing",
            "item": [
              {
                "id": "26abd9e4-6c7b-4b1c-89d7-eedcc94113c8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "96d3da6c-e5b7-4ae3-b99d-314680e79d1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b4001861-257f-449c-80d5-40cb9880bcc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5ebd6d6-7d8b-4e00-ad87-3d0f7438329f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0a70fa07-ca0a-4a10-aea5-05a8ed942e39"
                    }
                  }
                ]
              },
              {
                "id": "79f6f152-79c8-41f0-9cf8-4468b362a8d0",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5f26d6e-e4f5-4b17-a397-5ef902452104",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da41727d-1e68-4487-86e8-5bfd97dd17e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba4eb08e-6ffa-48af-8bbb-fe770dc4ed44",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b60930f8-8300-4753-a041-9ada9ff6bb8d"
                    }
                  }
                ]
              },
              {
                "id": "c5c6108c-b525-4e52-8e54-19af930e7821",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94719899-271b-473e-aa2a-c355d965b9e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "031b634a-c584-4546-a257-5e4f07653788"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d8d7555-9844-448d-832a-4504f12cf7be",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "679c23be-92e6-41a7-be90-723a3f1026f4"
                    }
                  }
                ]
              },
              {
                "id": "a2ae7f06-ce59-4164-8f8d-5fb1fd6108a5",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e37b3c7b-5833-4944-9194-8aeb4b31a820",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8398d353-f7e1-48cc-bdf8-bbf1e2ad6e16"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35504da6-491e-4390-a566-f79adcd4d7a6",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5ac2e320-b6c0-4c23-a23a-4cbed259da25"
                    }
                  }
                ]
              },
              {
                "id": "a7130511-0126-490a-b76e-4432fd9aa78e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63d6bbaf-8192-4ed0-956d-3f4c537f4e1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "6c8f59c3-1313-44b4-887a-8830a12e15e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e2f084e-f54c-4001-af67-07cc6f62f36f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "437a2bdf-b134-4b5b-89ef-8553172506b3"
                    }
                  }
                ]
              },
              {
                "id": "75785563-5798-45aa-8b15-217e3561e425",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4027a80b-8f00-4c7e-aeb1-23dd74c1d8f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "615d5011-ef5a-4110-9dad-ca237812f4f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9cf5c47-6d78-4b2e-9961-1af0bcbe9564",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a8a34678-f47c-4fdb-a23b-83c397eacbb4"
                    }
                  }
                ]
              },
              {
                "id": "c46ffc25-fd21-4ae6-9c32-2e195be956b2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2438750-266e-4ef3-80bd-322761a4b63c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63e7b3ef-d539-4e25-b1b1-278d08de8554"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93103d46-1f46-41da-8731-e230cb7fad4f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "db057df2-9db6-45b8-9b26-f0bfeb404c6b"
                    }
                  }
                ]
              },
              {
                "id": "efa67869-6b2b-4418-b65a-e93927777cd8",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc46faf7-5dea-42a3-ba94-b0de7fe17f42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de1454e8-a6c2-4223-8833-8465829c6dcd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "258029f4-dab1-4429-a812-29da922de9fa",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e5e0e9c7-ade4-4fb6-a71d-71321e5be48f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc0bf4dc-bfa0-44fc-bf45-34298a6b38cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7194787c-11b9-4b0a-b09c-f8f6c40bf9f5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "09dd8d2d-e964-4ac1-9a58-7b829c678a3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a4c591c7-1a70-4c84-b478-c3c0ac2b2ed8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e7f9903-6322-4278-b1ed-118b3ef373f7",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "6e9df9d0-a273-43d2-8bf2-1706eeaa827b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d2c4243-6600-4512-bcfe-cfae65b7ce9d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3254353f-a442-46eb-ae3f-6a381add86d2"
            }
          }
        ]
      },
      {
        "id": "c1cbf6f3-2fbe-45ff-86a6-247080de3916",
        "name": "Credentials Status",
        "item": [
          {
            "id": "9fcb8b9c-68e2-4980-8335-ac5e1db386ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ac429cb-0c5c-4a8a-9000-270a89067657",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66e1c2cb-2922-4961-b676-89ba031da6b5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fd5886-aa38-4809-bced-d70824d77554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6352d0c8-348d-4c8f-b6d4-feb9bbeb52b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "324f84ad-98b4-405a-b580-04d44e1b3827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31e312cd-0b16-4c32-97b4-10016f86fe2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7cef9bc-fde6-4662-9945-1725fe256fc5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f275dd0-ea23-4914-81be-21d8f04c4227",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b0b29689-cd81-4604-a432-7af23f5aa5fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07689025-21dc-4c6b-8dca-0376cf994c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a94d8fca-33e8-4da3-96c1-e1eb25603406"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79693c01-85fd-4261-89f7-441f305f81e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f3added-b9cc-4888-89a3-72b86de35457"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eafc0130-ca88-467d-93df-9a3300434029",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04525dbc-907a-47bb-8529-bae8ae337858"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38c8266e-0192-4d41-aa23-18b629cb9ab8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "c610b076-0399-4b6b-9ad3-955b0f229f05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "392816ae-1e2d-46c1-937c-cdbc67e78bb9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "adee7a59-bc34-4957-bbae-4cf4f01809ee"
            }
          }
        ]
      },
      {
        "id": "3b0cd243-8271-4653-aeca-ab7bab446acf",
        "name": "Presentations",
        "item": [
          {
            "id": "b59173ce-ca3b-452d-a52d-9565543a3db6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b045071f-b566-4991-b45c-26ceec011cb6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2084408-f25f-4c12-84ba-c6bcaa163a0e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03869b62-8607-45ef-9109-ab7c598abfba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b8c886-98f3-48a5-b637-c692a4b193f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1def86c-621f-48a8-bacb-43e63d27d196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72166e40-ac4c-4297-ae37-cb04f918860d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007e8297-e9ef-4f2f-9400-5392e468c199",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d6977f-79e9-48a9-ae5b-9cf48dca5aa7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2fd23db9-5159-4e96-82e8-3d47f49c3de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40547943-eded-41d8-9b3b-e451827f9c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51deea2d-38b2-4fc1-8adf-e99fcd94c292"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8215b035-2996-4f78-a40c-716f7a952bff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a360edb-0203-4653-9a04-391c027ecf57"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d1df25b-aba3-49c7-9f30-4619f5117a16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c51f257b-5a59-415d-9f12-5fdc8a1837cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22a0ba2c-f9a1-46fb-8736-0e4de434c74d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "b3f83164-9740-4451-9b3b-ba784e800db1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e41fa7c-5647-46a3-89f4-1f21ccf68768",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a24be73-36eb-4e2f-a2d2-d65de3ec68d5"
            }
          }
        ]
      },
      {
        "id": "04eb04fa-8fde-43f7-b6ee-ac9f00dd8b1e",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "39f39e81-483a-4a24-8a74-b5ed20c13059",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7057a2e-b92f-4ed9-a486-5e3ef2917924",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c71f9bd-aa96-4de6-a492-827242831e80",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64fd1ce-dce6-4b55-a9e9-d82d399ec4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed56004c-120e-4261-97f7-e54cc44a29c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f44d18c-2446-45ab-b171-345cbc61b93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7640a6ac-22ec-4a94-859b-750fcd5bfcf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc49e6be-b0a6-4343-be59-c3cfa3f2d157",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3a6aba-0014-48fb-8932-73e51b6bc3c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8c20ed74-fe24-4c21-aa91-f388ddb42d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b3522b-20f4-44f4-a37b-bf04e10bac70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7ebefa6-898b-44da-92a0-6243b20a9c4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59a85b47-f5bf-4eb4-a4f6-eec10ab3e652",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19ec346e-b7a8-4e80-bd7c-585904bbb9a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0df3cfe-ee53-46fe-8d90-5e13c33c2d0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb48b569-c47c-4d8c-964f-2e842997abe6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34292a08-e288-4d4f-b73c-0d5207ae4f15",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                ""
              ],
              "_lastExecutionId": "ff428837-ccdc-465c-ab43-6205fb82aded"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59f878d8-a5e9-433b-a11c-64e9258df576",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c41e535-cfc7-44e7-b80a-a20ba524eafc"
            }
          }
        ]
      },
      {
        "id": "7d777f21-5742-41a9-92ac-d43b69638108",
        "name": "Presentations Prove",
        "item": [
          {
            "id": "c4c91306-2a98-4cff-bbcf-ed45276c0c61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5ce47fd-077b-45d1-9cf6-9ec2be37e2df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9e39fee-c27c-4084-9699-801c4d572e63",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a72246-648b-4143-963b-b3d383581328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560d2353-bd73-41f5-be8d-e4a420641058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e57cc1b-3181-43ab-ad6f-f01f4305ec3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b1e7f0d-d630-43b5-9f40-5b20293b764f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141ffb0a-806b-44ae-8638-d7afd116653e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce5b019-37ec-490e-94b4-8bd6fe2d28e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "1f584696-8bb9-47e1-ae1a-5ae308aef596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f9d520-dd3e-43d7-b64b-4f3bf1399499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65cc9af6-da92-4b91-a35f-e58dafa098c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3e6e080-fa89-4bad-814d-8a4aad6e6d26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "579da6d6-d3ac-4a69-ab72-ada02c39a6cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9990690-e7ee-4760-ab77-61a7370422a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "711fad00-bad5-43a8-8f0e-df102c3f1397"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "637b1f1b-f49b-472d-ae79-0be4212e473d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "2bc36271-ecdb-4966-9837-b07f1c655176"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5942972b-2d2e-43dd-b987-84e60d173273",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b1a515a-d689-4dbb-9cb8-8ea696d9f632"
            }
          }
        ]
      },
      {
        "id": "558379b1-6ae1-4298-b2e9-e69a6e17b98c",
        "name": "Presentations Verify",
        "item": [
          {
            "id": "9973e973-21c7-4330-aaae-484aea7c14bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fc9b9e23-211f-4d73-9ffe-b6028c45550e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d90a541c-797a-4b45-9000-29cd1456cb40",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2433ccf8-e47e-4a7e-bc72-dd9a90d6c267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0b51fe-3de8-4b99-b0c5-75f25a914b8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6e262c-6504-45b0-ab53-a5169ea9f257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d84a4ec5-26a2-44a3-b940-c9083323e3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0667ce1-73c8-4ff1-a9a6-51eeca713766",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f561e89-c4fa-4680-890a-6aa48620d50b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9133dbf8-a55c-45e4-bb82-ed461e81274c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f128eae4-f66f-43a9-8f67-f2c14bafff43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54a3f50d-ef54-43c2-aaab-db8ed4c69c73"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "899841eb-4557-43aa-b92b-53a9e1a1573e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e73576ab-c2b8-4ade-a62d-931303852485"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37d27465-78c7-4c52-913b-0a1e9443ed1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b3e222a-c7cb-4549-86b6-34d7ca7aa976"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed724af6-7d65-440d-8367-e71729dc309f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "64a2788b-6437-4a84-8ed4-a50f997dc895"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3abf726-6e7c-4a4b-b6e8-d3ce15a9aded",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92db949a-1c9b-420a-a419-57f06e70d8e4"
            }
          }
        ]
      },
      {
        "id": "1e6a56cf-ae46-4479-af41-5e0c4e27e444",
        "name": "Presentations Available",
        "item": [],
        "event": []
      },
      {
        "id": "09a625d5-0116-41ba-9ef1-9aaabebbaa62",
        "name": "Presentations Submissions",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 432,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 104,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 115,
        "pending": 0,
        "failed": 93
      },
      "testScripts": {
        "total": 217,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 215,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 80.0576923076923,
      "responseMin": 32,
      "responseMax": 433,
      "responseSd": 84.27596916849988,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1660351191709,
      "completed": 1660351202946
    },
    "executions": [
      {
        "id": "a99fdd69-4263-426a-bcee-2adf90bd357e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 55,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "85388e54-2215-42c4-bd6d-ce6e83423459",
          "httpRequestId": "8e31f26f-28ad-4169-b4d4-327f5b8a3881"
        },
        "item": {
          "id": "a99fdd69-4263-426a-bcee-2adf90bd357e",
          "name": "did_json"
        },
        "response": {
          "id": "089ab3fd-ec2c-458b-9a1e-7c6ab9f15586",
          "status": "OK",
          "code": 200,
          "responseTime": 206,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d322fb3f-98d6-4b20-8c29-d636c91a679b",
        "cursor": {
          "ref": "a3133186-4bcb-4c4c-95ae-fcdce9e46077",
          "length": 55,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b6fbd4ef-114e-4557-a012-f05ef332f0ae"
        },
        "item": {
          "id": "d322fb3f-98d6-4b20-8c29-d636c91a679b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b2c7eea1-f65e-4e3b-b3f3-a47e575a2afa",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "d322fb3f-98d6-4b20-8c29-d636c91a679b",
        "cursor": {
          "ref": "a3133186-4bcb-4c4c-95ae-fcdce9e46077",
          "length": 55,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b6fbd4ef-114e-4557-a012-f05ef332f0ae"
        },
        "item": {
          "id": "d322fb3f-98d6-4b20-8c29-d636c91a679b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b2c7eea1-f65e-4e3b-b3f3-a47e575a2afa",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "95315385-73bd-4a42-ae57-79069b676de6",
        "cursor": {
          "ref": "e8eb3a19-ad9c-4d0e-a967-72fba1d7e040",
          "length": 55,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "70d80eed-3e0f-4441-b93e-322fc5117ba8"
        },
        "item": {
          "id": "95315385-73bd-4a42-ae57-79069b676de6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c3602f70-6a82-4e21-83af-4970f54f7937",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "95315385-73bd-4a42-ae57-79069b676de6",
        "cursor": {
          "ref": "e8eb3a19-ad9c-4d0e-a967-72fba1d7e040",
          "length": 55,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "70d80eed-3e0f-4441-b93e-322fc5117ba8"
        },
        "item": {
          "id": "95315385-73bd-4a42-ae57-79069b676de6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c3602f70-6a82-4e21-83af-4970f54f7937",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "0d270724-a529-491c-b789-50d016832c55",
        "cursor": {
          "ref": "fa72a5d1-9a90-4846-8cd5-6a84430438cf",
          "length": 55,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2dd41409-b73a-48d5-909d-805fb7a3310c"
        },
        "item": {
          "id": "0d270724-a529-491c-b789-50d016832c55",
          "name": "identifiers"
        },
        "response": {
          "id": "1ea6532f-f329-4588-8213-317a84d547a6",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8bb3bf-3ce5-484b-8b5b-ef3b70e60077",
        "cursor": {
          "ref": "b886e1b1-69ee-4ea8-95f0-2544d161cfbe",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "36fb27d0-4673-4fb1-97bb-5ce28595e429"
        },
        "item": {
          "id": "4c8bb3bf-3ce5-484b-8b5b-ef3b70e60077",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "09c6031f-22b1-4377-a3f1-b7c162b26009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 410,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "4c8bb3bf-3ce5-484b-8b5b-ef3b70e60077",
        "cursor": {
          "ref": "b886e1b1-69ee-4ea8-95f0-2544d161cfbe",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "36fb27d0-4673-4fb1-97bb-5ce28595e429"
        },
        "item": {
          "id": "4c8bb3bf-3ce5-484b-8b5b-ef3b70e60077",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "09c6031f-22b1-4377-a3f1-b7c162b26009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 410,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "4c8bb3bf-3ce5-484b-8b5b-ef3b70e60077",
        "cursor": {
          "ref": "b886e1b1-69ee-4ea8-95f0-2544d161cfbe",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "36fb27d0-4673-4fb1-97bb-5ce28595e429"
        },
        "item": {
          "id": "4c8bb3bf-3ce5-484b-8b5b-ef3b70e60077",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "09c6031f-22b1-4377-a3f1-b7c162b26009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 410,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "b601f2f9-5aaf-44de-802e-12dcc9fd16c3",
        "cursor": {
          "ref": "6df05c6b-492e-48c3-964c-2da56fc7d431",
          "length": 55,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "142eea8d-86ab-4fd4-92ff-0b3b4977cd45"
        },
        "item": {
          "id": "b601f2f9-5aaf-44de-802e-12dcc9fd16c3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9f5cb013-005d-4792-8c98-a379f4f3125c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "b601f2f9-5aaf-44de-802e-12dcc9fd16c3",
        "cursor": {
          "ref": "6df05c6b-492e-48c3-964c-2da56fc7d431",
          "length": 55,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "142eea8d-86ab-4fd4-92ff-0b3b4977cd45"
        },
        "item": {
          "id": "b601f2f9-5aaf-44de-802e-12dcc9fd16c3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9f5cb013-005d-4792-8c98-a379f4f3125c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "bc925ee2-105f-4014-97df-e52c4cfb18a6",
        "cursor": {
          "ref": "6ecad01a-a163-479c-9125-6a8cec330248",
          "length": 55,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dbab0bcb-9de7-4138-bc69-5f696285cb5c"
        },
        "item": {
          "id": "bc925ee2-105f-4014-97df-e52c4cfb18a6",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "3646b576-7145-4650-9b6c-dbc0138f4885",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "bc925ee2-105f-4014-97df-e52c4cfb18a6",
        "cursor": {
          "ref": "6ecad01a-a163-479c-9125-6a8cec330248",
          "length": 55,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dbab0bcb-9de7-4138-bc69-5f696285cb5c"
        },
        "item": {
          "id": "bc925ee2-105f-4014-97df-e52c4cfb18a6",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "3646b576-7145-4650-9b6c-dbc0138f4885",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "1eb55959-5e9c-4834-9d37-400a0043bd2e",
        "cursor": {
          "ref": "401d7616-921e-49a9-8bc2-18abfaf56ad2",
          "length": 55,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "369f0e97-2523-43ff-a387-4709a7cc9b11"
        },
        "item": {
          "id": "1eb55959-5e9c-4834-9d37-400a0043bd2e",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "f0e762c2-b214-486a-bd9d-7a3313ca526d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1eb55959-5e9c-4834-9d37-400a0043bd2e",
        "cursor": {
          "ref": "401d7616-921e-49a9-8bc2-18abfaf56ad2",
          "length": 55,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "369f0e97-2523-43ff-a387-4709a7cc9b11"
        },
        "item": {
          "id": "1eb55959-5e9c-4834-9d37-400a0043bd2e",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "f0e762c2-b214-486a-bd9d-7a3313ca526d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f94ffe8f-8500-443d-8741-c10205b4ccd4",
        "cursor": {
          "ref": "022689e6-5c95-455c-aff0-c4f7e89ae549",
          "length": 55,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "07ea569c-de96-46d9-b5a4-630832574c33"
        },
        "item": {
          "id": "f94ffe8f-8500-443d-8741-c10205b4ccd4",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "10a1c962-d32a-4655-a87d-9ddc5d89d406",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "f94ffe8f-8500-443d-8741-c10205b4ccd4",
        "cursor": {
          "ref": "022689e6-5c95-455c-aff0-c4f7e89ae549",
          "length": 55,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "07ea569c-de96-46d9-b5a4-630832574c33"
        },
        "item": {
          "id": "f94ffe8f-8500-443d-8741-c10205b4ccd4",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "10a1c962-d32a-4655-a87d-9ddc5d89d406",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "df81d0d0-6129-4482-9e4a-d19124f5cba5",
        "cursor": {
          "ref": "c82c78f2-3d61-40e6-b922-421c729a8b80",
          "length": 55,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "36270c59-cd8e-43e4-8866-1d71c2977970"
        },
        "item": {
          "id": "df81d0d0-6129-4482-9e4a-d19124f5cba5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "212d1f10-cd26-4b31-a223-70512847e414",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "df81d0d0-6129-4482-9e4a-d19124f5cba5",
        "cursor": {
          "ref": "c82c78f2-3d61-40e6-b922-421c729a8b80",
          "length": 55,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "36270c59-cd8e-43e4-8866-1d71c2977970"
        },
        "item": {
          "id": "df81d0d0-6129-4482-9e4a-d19124f5cba5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "212d1f10-cd26-4b31-a223-70512847e414",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "815efc2e-c53e-4767-8dcf-b1d9db0bee00",
        "cursor": {
          "ref": "5176be7b-98d7-4846-9604-e3fc9116c47c",
          "length": 55,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "034f90b2-d5a9-49fb-9889-213f75964b3a"
        },
        "item": {
          "id": "815efc2e-c53e-4767-8dcf-b1d9db0bee00",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "973f98b9-f1be-4006-ad02-557b69396b8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "815efc2e-c53e-4767-8dcf-b1d9db0bee00",
        "cursor": {
          "ref": "5176be7b-98d7-4846-9604-e3fc9116c47c",
          "length": 55,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "034f90b2-d5a9-49fb-9889-213f75964b3a"
        },
        "item": {
          "id": "815efc2e-c53e-4767-8dcf-b1d9db0bee00",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "973f98b9-f1be-4006-ad02-557b69396b8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "93cd6fad-61fb-4900-95b2-260716014aa2",
        "cursor": {
          "ref": "01ea33cf-f628-43a5-9923-d60dd4189221",
          "length": 55,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "71978db3-59fd-4fd1-9563-0a5217be17df"
        },
        "item": {
          "id": "93cd6fad-61fb-4900-95b2-260716014aa2",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "ced6b8b3-f1df-40b4-b9a6-a2bb05aa751f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "93cd6fad-61fb-4900-95b2-260716014aa2",
        "cursor": {
          "ref": "01ea33cf-f628-43a5-9923-d60dd4189221",
          "length": 55,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "71978db3-59fd-4fd1-9563-0a5217be17df"
        },
        "item": {
          "id": "93cd6fad-61fb-4900-95b2-260716014aa2",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "ced6b8b3-f1df-40b4-b9a6-a2bb05aa751f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "3bad2684-a8c2-4307-9259-5fc671b9617c",
        "cursor": {
          "ref": "54be7cf6-8722-49fb-908b-fd24b2ee8ee9",
          "length": 55,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "93c26858-d22a-42af-a289-23643fed97be"
        },
        "item": {
          "id": "3bad2684-a8c2-4307-9259-5fc671b9617c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "097adb17-4864-43d0-b9af-62db3aed2df4",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "3bad2684-a8c2-4307-9259-5fc671b9617c",
        "cursor": {
          "ref": "54be7cf6-8722-49fb-908b-fd24b2ee8ee9",
          "length": 55,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "93c26858-d22a-42af-a289-23643fed97be"
        },
        "item": {
          "id": "3bad2684-a8c2-4307-9259-5fc671b9617c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "097adb17-4864-43d0-b9af-62db3aed2df4",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "e181ca15-8a91-4f75-8d6c-233cef1c61cb",
        "cursor": {
          "ref": "fe658f85-63a4-4ff4-b326-9f0cd66fa7f8",
          "length": 55,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3f918ec6-3f34-4d9e-a771-b67a4db9c6cd"
        },
        "item": {
          "id": "e181ca15-8a91-4f75-8d6c-233cef1c61cb",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "48f02c60-812e-41b3-8a95-f76a74dccfb6",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "e181ca15-8a91-4f75-8d6c-233cef1c61cb",
        "cursor": {
          "ref": "fe658f85-63a4-4ff4-b326-9f0cd66fa7f8",
          "length": 55,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3f918ec6-3f34-4d9e-a771-b67a4db9c6cd"
        },
        "item": {
          "id": "e181ca15-8a91-4f75-8d6c-233cef1c61cb",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "48f02c60-812e-41b3-8a95-f76a74dccfb6",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "0fc429e0-03b8-46c2-b309-1f9fbd46b3fd",
        "cursor": {
          "ref": "ea390082-847a-4df0-98ff-e25e8228e158",
          "length": 55,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a85cbd6e-3708-4305-8570-979546e1743c"
        },
        "item": {
          "id": "0fc429e0-03b8-46c2-b309-1f9fbd46b3fd",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "a604381f-26b3-45a1-aa80-e6bd4c49f206",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "0fc429e0-03b8-46c2-b309-1f9fbd46b3fd",
        "cursor": {
          "ref": "ea390082-847a-4df0-98ff-e25e8228e158",
          "length": 55,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a85cbd6e-3708-4305-8570-979546e1743c"
        },
        "item": {
          "id": "0fc429e0-03b8-46c2-b309-1f9fbd46b3fd",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "a604381f-26b3-45a1-aa80-e6bd4c49f206",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "05f925c3-2a2b-4e0d-8ad8-2e5a166d8c4e",
        "cursor": {
          "ref": "32816889-6c9d-40f0-9313-df07e2b7c4b2",
          "length": 55,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c67e3ad9-9d24-4522-807c-6fdb0efb49e5"
        },
        "item": {
          "id": "05f925c3-2a2b-4e0d-8ad8-2e5a166d8c4e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "626669a0-2c35-491a-8fe6-525c91a28572",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "05f925c3-2a2b-4e0d-8ad8-2e5a166d8c4e",
        "cursor": {
          "ref": "32816889-6c9d-40f0-9313-df07e2b7c4b2",
          "length": 55,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c67e3ad9-9d24-4522-807c-6fdb0efb49e5"
        },
        "item": {
          "id": "05f925c3-2a2b-4e0d-8ad8-2e5a166d8c4e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "626669a0-2c35-491a-8fe6-525c91a28572",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b75a8afd-c3b5-4df8-966e-0c03434280e2",
        "cursor": {
          "ref": "2444579a-0435-41ff-a9de-37d799e3fafc",
          "length": 55,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5f871cc3-2b48-403d-b830-3037b6920b04"
        },
        "item": {
          "id": "b75a8afd-c3b5-4df8-966e-0c03434280e2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6f873156-4ad8-47c8-bf82-4b119298567f",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b75a8afd-c3b5-4df8-966e-0c03434280e2",
        "cursor": {
          "ref": "2444579a-0435-41ff-a9de-37d799e3fafc",
          "length": 55,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5f871cc3-2b48-403d-b830-3037b6920b04"
        },
        "item": {
          "id": "b75a8afd-c3b5-4df8-966e-0c03434280e2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6f873156-4ad8-47c8-bf82-4b119298567f",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "86b6be45-d6f2-4869-bc89-67b47062f1ba",
        "cursor": {
          "ref": "3a688c98-49f9-41d1-9cbd-66be69dd5058",
          "length": 55,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "aa3a2c74-4486-4625-93c7-893aef538410"
        },
        "item": {
          "id": "86b6be45-d6f2-4869-bc89-67b47062f1ba",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "eadc6a0d-2880-4d65-a530-6970151cf4d5",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "86b6be45-d6f2-4869-bc89-67b47062f1ba",
        "cursor": {
          "ref": "3a688c98-49f9-41d1-9cbd-66be69dd5058",
          "length": 55,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "aa3a2c74-4486-4625-93c7-893aef538410"
        },
        "item": {
          "id": "86b6be45-d6f2-4869-bc89-67b47062f1ba",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "eadc6a0d-2880-4d65-a530-6970151cf4d5",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c81fa024-7fc4-4334-be06-413cee622024",
        "cursor": {
          "ref": "a5c7c847-42cf-4c3b-9533-47982e76fdff",
          "length": 55,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4f4fc6f7-7a1b-4797-8b1f-173c039d2946"
        },
        "item": {
          "id": "c81fa024-7fc4-4334-be06-413cee622024",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "4afff7d7-b24c-4304-9ee2-14940789b889",
          "status": "Created",
          "code": 201,
          "responseTime": 85,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "c81fa024-7fc4-4334-be06-413cee622024",
        "cursor": {
          "ref": "a5c7c847-42cf-4c3b-9533-47982e76fdff",
          "length": 55,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4f4fc6f7-7a1b-4797-8b1f-173c039d2946"
        },
        "item": {
          "id": "c81fa024-7fc4-4334-be06-413cee622024",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "4afff7d7-b24c-4304-9ee2-14940789b889",
          "status": "Created",
          "code": 201,
          "responseTime": 85,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "24c59f4b-f260-4b66-9833-4e9f06ca6c90",
        "cursor": {
          "ref": "c8b2cbc7-7cd9-4213-b556-6338f4da46bf",
          "length": 55,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "114c4a26-eff0-45a2-b59b-faac422aeb45"
        },
        "item": {
          "id": "24c59f4b-f260-4b66-9833-4e9f06ca6c90",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8551976d-9b45-47b5-8a17-e9d693a17fa8",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "24c59f4b-f260-4b66-9833-4e9f06ca6c90",
        "cursor": {
          "ref": "c8b2cbc7-7cd9-4213-b556-6338f4da46bf",
          "length": 55,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "114c4a26-eff0-45a2-b59b-faac422aeb45"
        },
        "item": {
          "id": "24c59f4b-f260-4b66-9833-4e9f06ca6c90",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8551976d-9b45-47b5-8a17-e9d693a17fa8",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "b88bf1a0-08b5-42c2-8c3a-57c8980f4d0d",
        "cursor": {
          "ref": "4615f978-5164-4775-a8e7-fbb8ee08349d",
          "length": 55,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bf0f1a80-94e6-4771-a40d-fb2067571557"
        },
        "item": {
          "id": "b88bf1a0-08b5-42c2-8c3a-57c8980f4d0d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9abb726a-789d-467e-bbc2-074a953866ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b88bf1a0-08b5-42c2-8c3a-57c8980f4d0d",
        "cursor": {
          "ref": "4615f978-5164-4775-a8e7-fbb8ee08349d",
          "length": 55,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bf0f1a80-94e6-4771-a40d-fb2067571557"
        },
        "item": {
          "id": "b88bf1a0-08b5-42c2-8c3a-57c8980f4d0d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9abb726a-789d-467e-bbc2-074a953866ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "aecb42b2-581d-48b2-b8ef-b3fb9277d08e",
        "cursor": {
          "ref": "da917191-a2a9-4ed1-b23c-91a9df9f3577",
          "length": 55,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3bfd0a6b-3c01-4109-b62d-a2949f8ce9b7"
        },
        "item": {
          "id": "aecb42b2-581d-48b2-b8ef-b3fb9277d08e",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "76fa681c-532d-411b-8b4b-844c4bfa6638",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "aecb42b2-581d-48b2-b8ef-b3fb9277d08e",
        "cursor": {
          "ref": "da917191-a2a9-4ed1-b23c-91a9df9f3577",
          "length": 55,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3bfd0a6b-3c01-4109-b62d-a2949f8ce9b7"
        },
        "item": {
          "id": "aecb42b2-581d-48b2-b8ef-b3fb9277d08e",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "76fa681c-532d-411b-8b4b-844c4bfa6638",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "5d3ca415-263f-4a56-8199-0279cb7f21a3",
        "cursor": {
          "ref": "217edbb6-cd60-48e9-a412-a5941b9791c8",
          "length": 55,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e1e9b891-4e1c-472e-8a2c-003dea4b76aa"
        },
        "item": {
          "id": "5d3ca415-263f-4a56-8199-0279cb7f21a3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bf0703a6-8793-4546-b667-69d1cf7ccef0",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5d3ca415-263f-4a56-8199-0279cb7f21a3",
        "cursor": {
          "ref": "217edbb6-cd60-48e9-a412-a5941b9791c8",
          "length": 55,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e1e9b891-4e1c-472e-8a2c-003dea4b76aa"
        },
        "item": {
          "id": "5d3ca415-263f-4a56-8199-0279cb7f21a3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bf0703a6-8793-4546-b667-69d1cf7ccef0",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5d5f7ed9-035d-4123-bb01-7da0c0a1ed64",
        "cursor": {
          "ref": "d6eea91a-8004-4ba6-b495-a077b01f7449",
          "length": 55,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6f7e1a86-60cf-448a-add2-d24fe13ec3f0"
        },
        "item": {
          "id": "5d5f7ed9-035d-4123-bb01-7da0c0a1ed64",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1249f547-d8f7-4e99-9e8e-28da2a947c0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "5d5f7ed9-035d-4123-bb01-7da0c0a1ed64",
        "cursor": {
          "ref": "d6eea91a-8004-4ba6-b495-a077b01f7449",
          "length": 55,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6f7e1a86-60cf-448a-add2-d24fe13ec3f0"
        },
        "item": {
          "id": "5d5f7ed9-035d-4123-bb01-7da0c0a1ed64",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1249f547-d8f7-4e99-9e8e-28da2a947c0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "0cbfa336-3d70-4634-9e43-8238bb8531f1",
        "cursor": {
          "ref": "bb11c660-b5c9-41fe-b63f-5576201bdbb3",
          "length": 55,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "82955580-8867-4851-b4c6-109c092575e1"
        },
        "item": {
          "id": "0cbfa336-3d70-4634-9e43-8238bb8531f1",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "daf8a8ba-020a-4a0c-8093-422654472903",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0cbfa336-3d70-4634-9e43-8238bb8531f1",
        "cursor": {
          "ref": "bb11c660-b5c9-41fe-b63f-5576201bdbb3",
          "length": 55,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "82955580-8867-4851-b4c6-109c092575e1"
        },
        "item": {
          "id": "0cbfa336-3d70-4634-9e43-8238bb8531f1",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "daf8a8ba-020a-4a0c-8093-422654472903",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "5a3a2848-99b2-45f1-91dd-4ede2fd1306c",
        "cursor": {
          "ref": "8c8fce5f-306a-4c6e-a52c-5d9b90734959",
          "length": 55,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1dd217f0-cc4e-48ea-8439-17bf6c47ff91"
        },
        "item": {
          "id": "5a3a2848-99b2-45f1-91dd-4ede2fd1306c",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "7c74a46a-2679-4710-bec9-746577dda2b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "5a3a2848-99b2-45f1-91dd-4ede2fd1306c",
        "cursor": {
          "ref": "8c8fce5f-306a-4c6e-a52c-5d9b90734959",
          "length": 55,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1dd217f0-cc4e-48ea-8439-17bf6c47ff91"
        },
        "item": {
          "id": "5a3a2848-99b2-45f1-91dd-4ede2fd1306c",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "7c74a46a-2679-4710-bec9-746577dda2b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "b6948758-3ebf-4983-85b0-68c62d32471b",
        "cursor": {
          "ref": "e44122db-f705-4311-a0d8-8a262a61f751",
          "length": 55,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4b822f8e-5fcf-4cc2-bb7f-11127ccec50d"
        },
        "item": {
          "id": "b6948758-3ebf-4983-85b0-68c62d32471b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "36e1f064-ac14-443c-9071-d99c65e1b389",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "b6948758-3ebf-4983-85b0-68c62d32471b",
        "cursor": {
          "ref": "e44122db-f705-4311-a0d8-8a262a61f751",
          "length": 55,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4b822f8e-5fcf-4cc2-bb7f-11127ccec50d"
        },
        "item": {
          "id": "b6948758-3ebf-4983-85b0-68c62d32471b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "36e1f064-ac14-443c-9071-d99c65e1b389",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "356ddd3c-56d9-4c7e-a2ba-5887becde4c5",
        "cursor": {
          "ref": "18b8f93e-cbf5-43be-9206-e8a7c0d16d0f",
          "length": 55,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c48f1a86-1205-4d4f-96a5-10ff44876262"
        },
        "item": {
          "id": "356ddd3c-56d9-4c7e-a2ba-5887becde4c5",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "3c4f0d5d-395a-495f-948b-b87b3d474a69",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "356ddd3c-56d9-4c7e-a2ba-5887becde4c5",
        "cursor": {
          "ref": "18b8f93e-cbf5-43be-9206-e8a7c0d16d0f",
          "length": 55,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c48f1a86-1205-4d4f-96a5-10ff44876262"
        },
        "item": {
          "id": "356ddd3c-56d9-4c7e-a2ba-5887becde4c5",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "3c4f0d5d-395a-495f-948b-b87b3d474a69",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "3c1c516b-6243-4a77-82c0-8f71d62b0924",
        "cursor": {
          "ref": "4f673297-57d5-4e3f-8220-23b5e51067c2",
          "length": 55,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "68405b63-4711-4f68-bd34-7f9775aecf4f"
        },
        "item": {
          "id": "3c1c516b-6243-4a77-82c0-8f71d62b0924",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0e18617d-9e24-4492-aa2b-0370913c2ab5",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "3c1c516b-6243-4a77-82c0-8f71d62b0924",
        "cursor": {
          "ref": "4f673297-57d5-4e3f-8220-23b5e51067c2",
          "length": 55,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "68405b63-4711-4f68-bd34-7f9775aecf4f"
        },
        "item": {
          "id": "3c1c516b-6243-4a77-82c0-8f71d62b0924",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0e18617d-9e24-4492-aa2b-0370913c2ab5",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "d9ce7f9d-f314-491b-8155-b323391da4b6",
        "cursor": {
          "ref": "eba7609a-ea3e-4545-af8e-6252dd42c290",
          "length": 55,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9cdbc986-0867-41ae-bce7-841a3ad3ec3a"
        },
        "item": {
          "id": "d9ce7f9d-f314-491b-8155-b323391da4b6",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "c0820a1e-25bd-4a2b-bb86-213cc558474a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d9ce7f9d-f314-491b-8155-b323391da4b6",
        "cursor": {
          "ref": "eba7609a-ea3e-4545-af8e-6252dd42c290",
          "length": 55,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9cdbc986-0867-41ae-bce7-841a3ad3ec3a"
        },
        "item": {
          "id": "d9ce7f9d-f314-491b-8155-b323391da4b6",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "c0820a1e-25bd-4a2b-bb86-213cc558474a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "56bb06ca-0be2-4f9e-a979-242ad7f9be69",
        "cursor": {
          "ref": "408b226c-8315-4374-9807-893a10662adc",
          "length": 55,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f6a4623f-155f-4773-b05c-78007794db2f"
        },
        "item": {
          "id": "56bb06ca-0be2-4f9e-a979-242ad7f9be69",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "660ff83f-df38-4c43-9551-037d9b0993e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "56bb06ca-0be2-4f9e-a979-242ad7f9be69",
        "cursor": {
          "ref": "408b226c-8315-4374-9807-893a10662adc",
          "length": 55,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f6a4623f-155f-4773-b05c-78007794db2f"
        },
        "item": {
          "id": "56bb06ca-0be2-4f9e-a979-242ad7f9be69",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "660ff83f-df38-4c43-9551-037d9b0993e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "e8305435-018c-4036-80c9-2cb2d7604062",
        "cursor": {
          "ref": "10de2b80-0911-43c9-bc0d-c28513b6f677",
          "length": 55,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "61b9dc90-7834-41bf-9312-bc3a507f80da"
        },
        "item": {
          "id": "e8305435-018c-4036-80c9-2cb2d7604062",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "a319c06f-9a6d-423a-b713-22beb1f4a33d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "e8305435-018c-4036-80c9-2cb2d7604062",
        "cursor": {
          "ref": "10de2b80-0911-43c9-bc0d-c28513b6f677",
          "length": 55,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "61b9dc90-7834-41bf-9312-bc3a507f80da"
        },
        "item": {
          "id": "e8305435-018c-4036-80c9-2cb2d7604062",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "a319c06f-9a6d-423a-b713-22beb1f4a33d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8f47f2b6-d9cb-49a1-9c31-5cb42a82b27d",
        "cursor": {
          "ref": "3659bc8c-37a6-4230-b653-6f33984773b7",
          "length": 55,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "84af8641-ec55-4024-89d2-fc342a48c51f"
        },
        "item": {
          "id": "8f47f2b6-d9cb-49a1-9c31-5cb42a82b27d",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "6da7b263-0aaf-46e3-b5d3-f3a5d6bb168f",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "8f47f2b6-d9cb-49a1-9c31-5cb42a82b27d",
        "cursor": {
          "ref": "3659bc8c-37a6-4230-b653-6f33984773b7",
          "length": 55,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "84af8641-ec55-4024-89d2-fc342a48c51f"
        },
        "item": {
          "id": "8f47f2b6-d9cb-49a1-9c31-5cb42a82b27d",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "6da7b263-0aaf-46e3-b5d3-f3a5d6bb168f",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "49290c8a-ffb3-401e-b03e-5f6fa6a091b3",
        "cursor": {
          "ref": "41a29fa6-543e-4af9-8acc-344a693794df",
          "length": 55,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "af603b73-55c8-4c7c-a97f-995f6b5d7004"
        },
        "item": {
          "id": "49290c8a-ffb3-401e-b03e-5f6fa6a091b3",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ea133af6-9b1f-459d-adb7-021886301b70",
          "status": "Created",
          "code": 201,
          "responseTime": 75,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "49290c8a-ffb3-401e-b03e-5f6fa6a091b3",
        "cursor": {
          "ref": "41a29fa6-543e-4af9-8acc-344a693794df",
          "length": 55,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "af603b73-55c8-4c7c-a97f-995f6b5d7004"
        },
        "item": {
          "id": "49290c8a-ffb3-401e-b03e-5f6fa6a091b3",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ea133af6-9b1f-459d-adb7-021886301b70",
          "status": "Created",
          "code": 201,
          "responseTime": 75,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e23382f5-bc68-4435-916b-deca6a3f4434",
        "cursor": {
          "ref": "3be5dfa2-f6bb-4570-98d3-e44166ad8994",
          "length": 55,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "746e56f0-f72b-44a4-81c8-ba2566ce38ca"
        },
        "item": {
          "id": "e23382f5-bc68-4435-916b-deca6a3f4434",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "1d41e3a7-f564-4f9d-828a-02d0f715b661",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "e23382f5-bc68-4435-916b-deca6a3f4434",
        "cursor": {
          "ref": "3be5dfa2-f6bb-4570-98d3-e44166ad8994",
          "length": 55,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "746e56f0-f72b-44a4-81c8-ba2566ce38ca"
        },
        "item": {
          "id": "e23382f5-bc68-4435-916b-deca6a3f4434",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "1d41e3a7-f564-4f9d-828a-02d0f715b661",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "fb720f62-284c-4fc8-a53b-ff20989ab055",
        "cursor": {
          "ref": "3f3050f0-647f-404d-9db2-d9977b8bba72",
          "length": 55,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b91ca945-5acc-411a-ab23-7ac54ef4f676"
        },
        "item": {
          "id": "fb720f62-284c-4fc8-a53b-ff20989ab055",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "74294b1e-a10a-4505-b44d-4c979af830f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "fb720f62-284c-4fc8-a53b-ff20989ab055",
        "cursor": {
          "ref": "3f3050f0-647f-404d-9db2-d9977b8bba72",
          "length": 55,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b91ca945-5acc-411a-ab23-7ac54ef4f676"
        },
        "item": {
          "id": "fb720f62-284c-4fc8-a53b-ff20989ab055",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "74294b1e-a10a-4505-b44d-4c979af830f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "3e38498f-0094-4c53-bd37-47ad861285b0",
        "cursor": {
          "ref": "e93affc8-656a-423d-8ae9-d568c142c8a0",
          "length": 55,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4a6ac748-5989-4b1c-b252-c7ac72d21fd2"
        },
        "item": {
          "id": "3e38498f-0094-4c53-bd37-47ad861285b0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "38f37438-f1cd-49f5-bec2-e3dd160184be",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "3e38498f-0094-4c53-bd37-47ad861285b0",
        "cursor": {
          "ref": "e93affc8-656a-423d-8ae9-d568c142c8a0",
          "length": 55,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4a6ac748-5989-4b1c-b252-c7ac72d21fd2"
        },
        "item": {
          "id": "3e38498f-0094-4c53-bd37-47ad861285b0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "38f37438-f1cd-49f5-bec2-e3dd160184be",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "26abd9e4-6c7b-4b1c-89d7-eedcc94113c8",
        "cursor": {
          "ref": "43f26a42-cbf9-491e-8156-73ed5c4c684d",
          "length": 55,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6891e767-d2ca-4dbd-a9df-4a737b915a63"
        },
        "item": {
          "id": "26abd9e4-6c7b-4b1c-89d7-eedcc94113c8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4014fe07-546b-4db4-bafe-287821744ec7",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "26abd9e4-6c7b-4b1c-89d7-eedcc94113c8",
        "cursor": {
          "ref": "43f26a42-cbf9-491e-8156-73ed5c4c684d",
          "length": 55,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6891e767-d2ca-4dbd-a9df-4a737b915a63"
        },
        "item": {
          "id": "26abd9e4-6c7b-4b1c-89d7-eedcc94113c8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4014fe07-546b-4db4-bafe-287821744ec7",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f6f152-79c8-41f0-9cf8-4468b362a8d0",
        "cursor": {
          "ref": "f77bff3a-819d-4d55-9946-915b50ed3f4b",
          "length": 55,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ff0a63fc-1c23-4dda-a3a2-3478a4a7dbf6"
        },
        "item": {
          "id": "79f6f152-79c8-41f0-9cf8-4468b362a8d0",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "d23e07a6-1dae-45ff-86a4-347a49084151",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "79f6f152-79c8-41f0-9cf8-4468b362a8d0",
        "cursor": {
          "ref": "f77bff3a-819d-4d55-9946-915b50ed3f4b",
          "length": 55,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ff0a63fc-1c23-4dda-a3a2-3478a4a7dbf6"
        },
        "item": {
          "id": "79f6f152-79c8-41f0-9cf8-4468b362a8d0",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "d23e07a6-1dae-45ff-86a4-347a49084151",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c5c6108c-b525-4e52-8e54-19af930e7821",
        "cursor": {
          "ref": "ddab08c4-e015-4910-917e-f07c4e847956",
          "length": 55,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dd6d6cee-0661-4200-9bbd-bfedd619933d"
        },
        "item": {
          "id": "c5c6108c-b525-4e52-8e54-19af930e7821",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "862c4236-9035-430b-a041-364a06cd36b8",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c6108c-b525-4e52-8e54-19af930e7821",
        "cursor": {
          "ref": "ddab08c4-e015-4910-917e-f07c4e847956",
          "length": 55,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dd6d6cee-0661-4200-9bbd-bfedd619933d"
        },
        "item": {
          "id": "c5c6108c-b525-4e52-8e54-19af930e7821",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "862c4236-9035-430b-a041-364a06cd36b8",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ae7f06-ce59-4164-8f8d-5fb1fd6108a5",
        "cursor": {
          "ref": "1dd50580-87eb-4a70-86a7-d9985d6c1c19",
          "length": 55,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b5dc0922-07d8-40c9-bb63-3582a2d3a781"
        },
        "item": {
          "id": "a2ae7f06-ce59-4164-8f8d-5fb1fd6108a5",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "b2beeb40-4be8-4a64-8b19-506acdc2addc",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a2ae7f06-ce59-4164-8f8d-5fb1fd6108a5",
        "cursor": {
          "ref": "1dd50580-87eb-4a70-86a7-d9985d6c1c19",
          "length": 55,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b5dc0922-07d8-40c9-bb63-3582a2d3a781"
        },
        "item": {
          "id": "a2ae7f06-ce59-4164-8f8d-5fb1fd6108a5",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "b2beeb40-4be8-4a64-8b19-506acdc2addc",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a7130511-0126-490a-b76e-4432fd9aa78e",
        "cursor": {
          "ref": "ab2c85a3-3886-4050-ad7a-55baec5fcffd",
          "length": 55,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "62f99b0c-e018-434d-97b9-81b2f683baba"
        },
        "item": {
          "id": "a7130511-0126-490a-b76e-4432fd9aa78e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "35fd343b-4131-4853-b413-f867ab4e428f",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7130511-0126-490a-b76e-4432fd9aa78e",
        "cursor": {
          "ref": "ab2c85a3-3886-4050-ad7a-55baec5fcffd",
          "length": 55,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "62f99b0c-e018-434d-97b9-81b2f683baba"
        },
        "item": {
          "id": "a7130511-0126-490a-b76e-4432fd9aa78e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "35fd343b-4131-4853-b413-f867ab4e428f",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "75785563-5798-45aa-8b15-217e3561e425",
        "cursor": {
          "ref": "727cec89-e360-4668-9d75-d452db1b87c9",
          "length": 55,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4b79b0db-1326-4923-9848-754d8b0e8442"
        },
        "item": {
          "id": "75785563-5798-45aa-8b15-217e3561e425",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c862893f-cb85-472d-886e-0ee9f5fa6cb6",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "75785563-5798-45aa-8b15-217e3561e425",
        "cursor": {
          "ref": "727cec89-e360-4668-9d75-d452db1b87c9",
          "length": 55,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4b79b0db-1326-4923-9848-754d8b0e8442"
        },
        "item": {
          "id": "75785563-5798-45aa-8b15-217e3561e425",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c862893f-cb85-472d-886e-0ee9f5fa6cb6",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c46ffc25-fd21-4ae6-9c32-2e195be956b2",
        "cursor": {
          "ref": "31a22971-da94-4710-90cc-dcddf8e66510",
          "length": 55,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cab7d701-cdca-4195-b3f8-a673a77acbcc"
        },
        "item": {
          "id": "c46ffc25-fd21-4ae6-9c32-2e195be956b2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "70cfe27f-b2df-43f1-a865-b0dd246942f0",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c46ffc25-fd21-4ae6-9c32-2e195be956b2",
        "cursor": {
          "ref": "31a22971-da94-4710-90cc-dcddf8e66510",
          "length": 55,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cab7d701-cdca-4195-b3f8-a673a77acbcc"
        },
        "item": {
          "id": "c46ffc25-fd21-4ae6-9c32-2e195be956b2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "70cfe27f-b2df-43f1-a865-b0dd246942f0",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "efa67869-6b2b-4418-b65a-e93927777cd8",
        "cursor": {
          "ref": "abbae288-e8b1-4e63-a6ef-50e33b82b4aa",
          "length": 55,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "12959764-6b9c-4da6-be0a-387259687253"
        },
        "item": {
          "id": "efa67869-6b2b-4418-b65a-e93927777cd8",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "5f4c2804-9ead-415b-b28b-691fb3a224ad",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "efa67869-6b2b-4418-b65a-e93927777cd8",
        "cursor": {
          "ref": "abbae288-e8b1-4e63-a6ef-50e33b82b4aa",
          "length": 55,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "12959764-6b9c-4da6-be0a-387259687253"
        },
        "item": {
          "id": "efa67869-6b2b-4418-b65a-e93927777cd8",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "5f4c2804-9ead-415b-b28b-691fb3a224ad",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "66e1c2cb-2922-4961-b676-89ba031da6b5",
        "cursor": {
          "ref": "bb989550-b247-445e-8569-512bf44cd6f7",
          "length": 55,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "173e2788-781c-4c3c-b711-b35ff21651c7"
        },
        "item": {
          "id": "66e1c2cb-2922-4961-b676-89ba031da6b5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "22aaf5a0-0c28-44fe-a7fc-681c542a6ca5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "66e1c2cb-2922-4961-b676-89ba031da6b5",
        "cursor": {
          "ref": "bb989550-b247-445e-8569-512bf44cd6f7",
          "length": 55,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "173e2788-781c-4c3c-b711-b35ff21651c7"
        },
        "item": {
          "id": "66e1c2cb-2922-4961-b676-89ba031da6b5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "22aaf5a0-0c28-44fe-a7fc-681c542a6ca5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b7cef9bc-fde6-4662-9945-1725fe256fc5",
        "cursor": {
          "ref": "01e44758-b1aa-4486-b526-1b18a54ecabb",
          "length": 55,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4531dd6a-fad1-4726-9a2e-db1383cd3748"
        },
        "item": {
          "id": "b7cef9bc-fde6-4662-9945-1725fe256fc5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "79367f60-3d08-4c34-87dc-e0b24155e2a0",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 33,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c2084408-f25f-4c12-84ba-c6bcaa163a0e",
        "cursor": {
          "ref": "27d25f22-bcbf-41fb-b852-f1ec4c5260ad",
          "length": 55,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "90b2f688-3f5f-4f3f-8def-aedb36029c2a"
        },
        "item": {
          "id": "c2084408-f25f-4c12-84ba-c6bcaa163a0e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ae0a942a-3bcb-410b-87b1-b6daad191d25",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c2084408-f25f-4c12-84ba-c6bcaa163a0e",
        "cursor": {
          "ref": "27d25f22-bcbf-41fb-b852-f1ec4c5260ad",
          "length": 55,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "90b2f688-3f5f-4f3f-8def-aedb36029c2a"
        },
        "item": {
          "id": "c2084408-f25f-4c12-84ba-c6bcaa163a0e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ae0a942a-3bcb-410b-87b1-b6daad191d25",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "007e8297-e9ef-4f2f-9400-5392e468c199",
        "cursor": {
          "ref": "305fa080-bf2b-4e57-94ec-1d5a7e6eed5a",
          "length": 55,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "90e7c643-0655-4905-9841-82fe2024622f"
        },
        "item": {
          "id": "007e8297-e9ef-4f2f-9400-5392e468c199",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2cb9cd97-894f-4f95-9a68-ce61f65211b1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0c71f9bd-aa96-4de6-a492-827242831e80",
        "cursor": {
          "ref": "8e0bbb31-f87d-48b6-90ea-a0b94b3154b4",
          "length": 55,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "68490c30-4376-46d3-a035-f37e6ab09724"
        },
        "item": {
          "id": "0c71f9bd-aa96-4de6-a492-827242831e80",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b24386be-a7eb-42f7-8290-99dd8f60c15e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0c71f9bd-aa96-4de6-a492-827242831e80",
        "cursor": {
          "ref": "8e0bbb31-f87d-48b6-90ea-a0b94b3154b4",
          "length": 55,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "68490c30-4376-46d3-a035-f37e6ab09724"
        },
        "item": {
          "id": "0c71f9bd-aa96-4de6-a492-827242831e80",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b24386be-a7eb-42f7-8290-99dd8f60c15e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "fc49e6be-b0a6-4343-be59-c3cfa3f2d157",
        "cursor": {
          "ref": "bff667a9-af69-4d75-ba71-34584eb9d614",
          "length": 55,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "856ee95a-ac81-45ec-9c12-d972e62869c3"
        },
        "item": {
          "id": "fc49e6be-b0a6-4343-be59-c3cfa3f2d157",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "47c579b3-521a-4ffe-8677-809f172ff850",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d9e39fee-c27c-4084-9699-801c4d572e63",
        "cursor": {
          "ref": "ddba21bb-b242-41d1-81cf-f52a19f8e028",
          "length": 55,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "85b0e128-864f-4c68-9997-f1e83097939e"
        },
        "item": {
          "id": "d9e39fee-c27c-4084-9699-801c4d572e63",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "37b1763b-d067-4182-8e9d-bc5813e76dec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d9e39fee-c27c-4084-9699-801c4d572e63",
        "cursor": {
          "ref": "ddba21bb-b242-41d1-81cf-f52a19f8e028",
          "length": 55,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "85b0e128-864f-4c68-9997-f1e83097939e"
        },
        "item": {
          "id": "d9e39fee-c27c-4084-9699-801c4d572e63",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "37b1763b-d067-4182-8e9d-bc5813e76dec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "141ffb0a-806b-44ae-8638-d7afd116653e",
        "cursor": {
          "ref": "8aa1d684-4b5a-403f-99ef-9be03fe6a720",
          "length": 55,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d79191a7-edb3-4b71-b0fa-f78bd6805d65"
        },
        "item": {
          "id": "141ffb0a-806b-44ae-8638-d7afd116653e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "3a18c0a1-c1b0-4e21-b078-7d0fdbde570f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "d90a541c-797a-4b45-9000-29cd1456cb40",
        "cursor": {
          "ref": "a21d2f54-6e01-4152-a019-a6006f526161",
          "length": 55,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5d5e9ec9-ed45-482a-82cf-85efb131fbe0"
        },
        "item": {
          "id": "d90a541c-797a-4b45-9000-29cd1456cb40",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5ade3589-7934-4529-8bf0-65a03c86cc86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "d90a541c-797a-4b45-9000-29cd1456cb40",
        "cursor": {
          "ref": "a21d2f54-6e01-4152-a019-a6006f526161",
          "length": 55,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5d5e9ec9-ed45-482a-82cf-85efb131fbe0"
        },
        "item": {
          "id": "d90a541c-797a-4b45-9000-29cd1456cb40",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5ade3589-7934-4529-8bf0-65a03c86cc86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "b0667ce1-73c8-4ff1-a9a6-51eeca713766",
        "cursor": {
          "ref": "71f7c53a-c19e-4e72-a770-6090fea39a58",
          "length": 55,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "df42e9c2-80b8-4ff5-9940-fd646deeb292"
        },
        "item": {
          "id": "b0667ce1-73c8-4ff1-a9a6-51eeca713766",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "4d0d8e1c-cdc3-4a06-9423-528e3d6822e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      }
    ]
  }
}