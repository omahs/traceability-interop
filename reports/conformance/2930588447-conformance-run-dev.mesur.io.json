{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f0af6deb-a43d-42b9-ac20-4af30e124d37",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e68aac32-bf95-4c7e-a253-10da820cbcf4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "00fcfd79-ab41-4b51-902a-13b83a86363e",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9da37e1-233e-4071-8649-0772b65b6e20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2692641-c0c3-469a-912a-4a71ed72af55"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "0e804ec2-3674-4ebd-9986-87d95061959c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ee21dd63-ccbd-4916-b760-75c5fa48fe67",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0902d08e-137e-4750-911a-217e6cd9a6c2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c70bc935-fd68-4bb9-bd0e-2625f3bf5a43",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0725a5ca-fee5-4fe7-9180-2b7c0e876e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4036fcbf-f9ec-4146-9733-597613240e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8e5f53-a12b-4302-8b5e-0bc010eff11a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2e6a3e-0393-4ccc-ada6-7ced867cd1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d824413d-b786-4963-9176-de7b208a1e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea6348a-281d-430b-bf24-5d31c4fc394c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01879572-c2ab-4e92-9bd2-4788ffb8a443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ab1b82c-adb4-42f7-9a30-6887bdcaebff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2323ab20-117d-4e87-8d83-0fc83401dca0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "057e7406-fcf9-41ec-b718-25cbd396d9e5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5631d666-66f5-4903-8d7b-1871de26a9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a5419ff-80a2-4159-bfdc-292b5c312671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372561a7-4bf1-43bc-8758-cc4130bcb7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a483f4e-d0b2-41ac-9ddd-dbd5e7232fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfd0d28-cd24-4f09-9924-8913bd9cff7d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded860c3-5216-46a4-b9a2-c1f7fa90f396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2306e511-99b8-404c-864d-4920e70bdecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dec0aa-238a-4b25-a1ce-c30b691c209b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "72e1206b-a216-4112-871d-bf10d4263125"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d0a82d9c-321e-4790-a5d8-2a336dfe39ef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e7c42294-5da7-4e9e-b6a9-755c6cbfd09d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a2bfec3-c70d-4a74-afb5-ca96cd991712",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "49888a2f-81d9-4edf-a774-d7954f603156"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3da1e295-d5f7-4fa6-a05b-423f52e4a292",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "fb382f69-8d22-4716-96e4-b2a52b9eaafd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75c36bed-66a0-4ec8-9e5b-058825db6027",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7682de7d-4b98-4329-ac06-b649431ed46d"
            }
          }
        ]
      },
      {
        "id": "f68bac58-910a-40f6-82ea-eff8661333e8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "249514d4-f61a-4845-8cd1-2b1104adc88c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0ad6464-a1cc-44c4-ade8-470381a0cef6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "22087836-a083-4c53-9e2a-386cc2e11c66",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a34010-7645-484e-8e80-7e5f34e34efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11982045-498d-4142-bc7d-16b9c8d85968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87bd787-c2c8-4feb-a63e-bfbe45919701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea7c3694-ca34-48a8-be79-86f70ce19c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8d1975-a971-4486-b9a0-768a235d6438",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045cf5b4-7174-4808-b703-2ae7d3ebfa5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a3381f-bddc-4d94-ab6b-0ddd6bd478b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625f6350-6eee-4f3b-8134-103a96945ba7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1e8e025-62dd-4d39-b00d-7398c316ddc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ea3c9a-4a74-45e0-87cc-2407b0c920eb",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c756af-e8e4-4d7a-bef9-9e55401098af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2283c20-f280-41d6-8268-acf2fe882f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be11fd9-a71f-4266-98fa-54117a8768cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7938a44f-ad87-4a37-af0c-6103fea13943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99d44ec-6ef8-4f55-805e-697267c138c5",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6575a2-1980-4c3c-9acd-3930825986aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57106c71-583f-401f-a531-eef20066f709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8439221-a5cb-4cec-bbb4-f1ce22bc786d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "716ea795-d0b8-4b7f-b097-61a748db0742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ac2d9f-9c49-41d3-ba37-1e5eab09d440",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3e3963-7904-4f3d-b000-0f2ee13a8ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec76a79-64f7-4443-a597-c786e65c291b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd0d120-0cf6-4fe6-92c1-a9dec511760f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9068238d-7245-4f5d-9ff2-28756a59cdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c9bd89-5e51-4881-b0c9-05da68bdd876",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0404588c-1d0a-434b-a3f4-4a4fb53ed567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3d95c5-dbc9-4083-90a3-73a96c01688a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b69ef99-cbfa-4dcc-9dd8-734a0d252a42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a450c360-45a7-48e8-9f63-2402579878cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039caf14-e78c-4f05-b334-6d7ec91886cb",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d3b5c7-e869-4b42-b24f-ffe0276122f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725b83c3-92ad-4ef8-b90b-0b695128f4b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d5214c-1941-4cf8-bd85-3c45ed9175cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ba42ce6-5b94-4b9c-99b6-4853e1b96142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b4c80d-3f68-4ff0-921e-073aa24ca714",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0dbee5-1737-461f-99b8-27e463cb43d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69911961-ee97-438b-89d2-ad218e7437e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe89c4d-80e9-419c-ab62-18a905909b46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee5c3201-0d1a-4ef4-8ad4-0f41fe6dc29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9aa482-9d7c-467c-8b0f-78c564adcf44",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c946065c-c78c-495f-8f88-efcacfdbe667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6542d059-ef00-4f72-8960-36d8f6453794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ebe540-e9a9-4833-bfdd-045f0944f9ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cf7b3ca-d465-49d7-880b-3b38e2373c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbda7f49-f541-4fd3-ba67-989ff7d3b101",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8697074c-2921-4662-bcfa-1b3c26dadf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f932f1b0-01d8-42f0-941a-bdc182b1463c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4a76dd-fa20-4b80-a30b-4b7080455d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad1f4397-283c-47d0-af38-c9c0ca3335c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edd4ac2-9254-464f-b760-0e13e3919c7b",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e895bf4-08fa-4987-bb10-fb3759b4ee3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa8aef77-83bd-4bc2-9b12-d9d29ca1c487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7837e192-4c6b-48fe-9403-72d744f75ad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "4b4c8a14-18e5-4427-8648-6e671f0f17e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cfc00f-5568-45ba-ab97-8d5668d36da9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "648dfa4d-0d91-4c52-b673-4cf300b5d2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ec0e74-47a2-4b9d-b8c3-35ef2fc51098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c248a713-aaa8-473d-bf30-c117a1616fc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "51024ce2-441c-4cf5-b851-2b5a68b0385f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfca9cd-ccbd-4cde-8407-2f65a18dfa17",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef27bfbd-2b4f-4709-8c65-5ce10021442d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bba94dc-1f0e-4961-ae42-1dec6383dc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c6b7eb-5406-46ed-a5b9-592a44a9fc48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "847c1e11-9197-4930-9a5a-ab1359acd0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67348d9e-abc0-40cc-9d51-3f35a74867c1",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906f1a9e-3f15-4023-87a9-3d64a65bfd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0141b6-e53a-4d0b-a851-949cc116bad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16101795-6b51-43da-9efe-e95c8160cd32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5161a9d-13bd-45b6-ae6e-3ffda91d53d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0130472-2263-43ba-a46a-276a5a3e42fb",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a4862c-fc67-4713-8b38-e2e5a7eb0aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067e6839-f3fb-42e5-8d72-a5479eae68b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1866e255-02d2-4602-b7f2-528b154de54a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "24050e5c-cac0-4c5b-ae9a-45a8b367a9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e42826-68dc-4c41-8f7f-e451dbb109d2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add028c4-0060-4894-9550-b41625455bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a420431-d6aa-4e5b-93c1-734e638e935f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d537d5c-f7af-4566-b728-8cf0db34b546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "2113d5f0-0e05-4d3d-a926-a4745d1a875c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6c943b-afbf-45d6-a141-f6065419e094",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bdda8a-42f9-4d9c-9ce5-a5432c16bb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e431d1f7-7292-4331-9c55-a7bc9481c25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d7b6cd-1937-4fef-845f-d12eddb76d68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa9deebf-2623-4626-8e84-9ced8651b71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b35575-6ac7-4d0a-ba3e-139ed6279d56",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3013ba-805e-4a22-8834-0cb9e74d07f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b9d041-8a5a-4496-9025-91d027479739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1471447c-0e8c-4ce0-9725-515ae22f4349",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeb7e165-46e3-4c0d-913b-a4f0986c26bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a1a56f-0236-4f7b-86cf-850794dbe74e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55e294e-c0df-4d42-8e41-d41c7340baea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044ab18d-ac5b-473b-831c-43801f243dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0b6bfa-c62d-4fba-9cae-c7196c475794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e2615c9-fdff-487f-aab6-5597e40a67b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53e92e0-2ebe-48dc-9f83-decc9a97892e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822a0428-679a-4439-b546-b92ce107a463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b224f556-ae61-4945-9c31-42d0cc1e2aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4a5825-7501-4b7e-84ef-b1cc55cc1d2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c73d81c-03e4-446e-9902-a1bb27338eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10ac324-4345-4b3d-90dd-3c02ca14f8fd",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3685f075-33f6-4813-96dc-d3765930e3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cadf4c-a14d-48ce-9c1b-4858e76f1f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407989d3-dc24-40cb-8f85-6cd408af1ed2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "203a9399-b0b0-4043-b31f-84db92280078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc11cd6-8546-430c-854f-2cfbdf7c8c3d",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706071df-e10e-4881-b249-fc18e9055073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ce37f0-0e19-4d61-8368-31dab8b1a9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9dd370-4196-4893-b773-27d3c0822a87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae8316d1-3dcc-426a-8041-ef2f77f040de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa1df0b-1b40-474e-b273-5a6097918322",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c0c8f2-a1fe-43ae-980b-c19589595a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7bc165e-7968-4777-a708-38f011c72d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6976d218-8cb0-438d-b884-99002ea314b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "657fc75e-5f8d-404c-95ef-2b3a09e2120f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215c1c4c-06f7-4fbc-bfbe-a2b51af5d101",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45b8b5b-e469-4f04-a922-5486fed42a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f538a3-9d8c-45cb-a52d-11ab0c6fc350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a4a89f-231c-4cd2-9e04-c4bbe70cbdc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "691cd623-e39f-46b2-aa6c-a9e9dc8e249b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f69036-cccd-43b4-a2fe-f012477e2bd0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2123458-c708-4312-b62e-f782168ab6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ab017e-0046-41aa-bd69-a0e83dbe0c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec1c120-7a03-4512-abc2-f254c1e746fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31dd406a-d140-46b8-9330-b52165e0ef12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c81d32-4247-4fbc-923f-12461b51f9b4",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dc8852-3f71-4024-a5c2-a1ceb9189e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f3d2d00-d7a5-4d78-8c41-0a43cd3acc06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e11f70-7df0-4606-972f-61e4bf874d0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebd40e31-e414-43ab-8003-635995eb8798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586b9b64-cf20-4d8c-80c2-5305cada06da",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558a5eec-7b04-4e5c-b674-92980acf8ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae52f9cd-1dbc-4b52-a2c4-c78a78b523fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70d15dc-8977-47fb-8a50-5fe21efa3290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2b07da6-d4a3-4b90-86de-9b9cd2b7745b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13af55e-ec34-47bf-9326-bf76e156fb97",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd03095-bbff-45a2-98e8-e6129a0b6053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8789561-9a84-4181-8f80-4f76530aace6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f60582-c8f4-44e7-a509-4b8c417a2ec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53dc58cb-8c05-4f63-be8e-7234d25f20bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085de0d3-e4d0-41d1-9543-10dbc0d3a03f",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996a0ede-e040-42e0-801c-66b2731b084f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0c70b6-3ece-4c0a-ac7b-b5500daa9959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cff7150-56c6-4e71-9265-8999598e710e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d4cf556-ffe7-47b4-a9b1-e0a5d3135a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05837838-1f0f-4e0d-9ff9-fddb06495a70",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4e9716-2b5e-4726-affc-7ec93947f736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0148d9-6034-4d58-972d-2fb255f4a2d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5de75e1-8101-41c8-9c63-cf875d38be15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e766b97b-9b7d-4ad2-b612-08330dbcc42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd964540-e61f-4346-b752-02ee639cacd7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41d83c5-e7b9-4660-8764-257ac2ff339f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "360de4f4-b025-4486-b7c9-64ba57e44a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9e6403-2bf8-4a9e-8f02-a3abe230f352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5756b76-7c77-4da4-8285-a92a798c44d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5c2aebd5-a602-4444-a77e-852a24df1674",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9327c03d-1657-418b-8645-b374d8bed4d3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986c470a-24dc-4fdb-ab07-8bb96982e338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9227921f-e75d-4fb3-a578-088c59db76bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a40a00d-de0f-415d-9e0b-637c5cfbf3f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4ca1741e-204f-4afe-9078-4ad64b0289ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715fa26b-e030-47ab-935f-eaca95454033",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892c2b17-1f7c-4c2c-8595-bd68efceb5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15904f09-c839-46ef-b429-b92248ad9245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d10bc4-877a-4cd0-9ba2-f2ac60b78f30",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3facb77e-43e2-41dd-9141-c9fa6caa360d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3a5a490-ca61-4eb0-b63c-317027ee850b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d74b7527-d1cb-44e9-a63e-bd8d30605820"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f261450d-85fa-40ee-9cff-d67be7949443",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c40e18ef-9ea8-45cf-8b2d-d8b0567ef59d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ad416780-6a95-41a2-b132-b176f12539ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e9cc76e-79e0-4c84-ac22-abb2e9f0af8b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4c4d868f-9a85-4bc7-aa8b-ceb8c72520b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe02b16b-9fe7-4687-8bc1-2608c3b548ac"
                }
              }
            ]
          },
          {
            "id": "1128420b-36de-4169-b160-efb210d7a04f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4731d972-0482-4448-8f27-f586085e1fc0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97ad33c2-4deb-4566-8e10-68fb07d8ad87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c5b72a1-2b4d-40af-9e1b-468522de14f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5abe7661-e6f7-4a8c-9db4-f8bf95a8316a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e516839f-5085-4025-8871-b10c48c87665"
                    }
                  }
                ]
              },
              {
                "id": "dc9a3dd3-88d8-4604-a7e4-8e164ea4d300",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afa3563a-d9bc-4364-83e1-ab8acb533875",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8cc4a59e-7dc0-4eb7-ba0e-f0c505b9dbd5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "970e0a7a-3cc1-4693-8955-5d6c20fb0d51",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8c7c6080-0a81-46d1-95d9-18de035ee48d"
                    }
                  }
                ]
              },
              {
                "id": "48459f15-a451-4496-980e-933ec2869704",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d8f6780-0fc2-438a-b4d5-37fb3cc81e9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "564b1db1-28c2-4a5f-95fe-0f282c466374"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cf4cbc1-fd1b-4a73-9f51-f22d9a7e7f60",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "110a16c5-abc1-4af9-aa24-0be515dae9e5"
                    }
                  }
                ]
              },
              {
                "id": "3f6a63d8-80b1-4885-9810-624dc6f09958",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb04cb2c-62db-4c9e-8d45-0b1699f1f298",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9af688e-edb2-4891-9b1b-ffa50f8877e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5944f82c-1a0d-427d-804c-e161d4fd3c43",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9a477277-0f85-4920-a4df-7884137ac606"
                    }
                  }
                ]
              },
              {
                "id": "ac45dbe1-9130-4278-82b5-7abdc8245432",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bba81cee-9c62-4904-b9ce-157b0a85b02e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "d0dfaf82-066e-4546-ac2c-1785a60ebb66"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33600aee-d18b-4de3-80af-a05fc2c4d718",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "14deb353-0593-40ad-84e7-45b75d52e217"
                    }
                  }
                ]
              },
              {
                "id": "00342560-6442-49f1-ad1f-e96ba1ee3590",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7e4274e-c03c-4e39-8d6b-6b55bcdc4785",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2db655b8-ab9b-4e0f-8b1f-594d8aa2d46b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0182458-f8e8-4c6a-81a7-46c6d1c3be41",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f33fdceb-5d90-4ece-a05b-cc3130635a4e"
                    }
                  }
                ]
              },
              {
                "id": "633e785a-39c0-4274-a343-327716bee714",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7725583b-419f-4720-8ee9-941a6e9392cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09e03b6c-6367-4861-9f8e-5c80557e62ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a94a1488-0590-4c1d-b158-222b26e82287",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "39aaf9c3-21c1-4438-9bed-c392dc8acbe6"
                    }
                  }
                ]
              },
              {
                "id": "ae83e294-29b3-42f3-9ccf-524b717f92fb",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88918702-3daa-415d-a6e6-c1f6b6569c30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26e5534d-e4f6-49d5-ae8b-210654699ffe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7add93bd-941b-4de3-baeb-9df8d61673f0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "372b97c0-52ef-4177-9601-b34c3badafe8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23bfac3c-4830-4bb1-963a-4cf6c2fc52e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7aa3b7b8-edf9-4dcc-b372-f244bb726098"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "495564ce-ccb1-4310-acff-bd662166d289",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72c4128a-c4fe-47ad-805d-484900583d74"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd534008-a064-410c-a6e0-bb22b5f98c46",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "04575c85-408f-45f0-a265-0a54e7fb7d98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "568af532-5cc3-4de7-bf8f-0c082a254f49",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dee7a738-8640-4e03-96d9-2ee6dd2c47f5"
            }
          }
        ]
      },
      {
        "id": "a43dc319-4412-4e84-9435-6ca6f35f6226",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6bd08c6e-fe72-4638-958a-9bdb892b45e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66abb300-a82b-4940-be31-aafd3fe94265",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c550f336-a13c-40ec-bc32-d03026d35ef4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ccbf77-1917-4dc0-b928-9efb9b637b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2898ada-db92-4c6c-8be7-db97fd5be937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b02c13d-b468-47d9-a8f9-58e0d02b88fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "510ccd8a-21d7-4872-87db-7cfa9b8c4294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067ca8a9-02cc-47c8-a614-0652b2b9fe3b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9d5ad0-52a4-4e05-a286-c8fa22992147",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "568c2264-1e73-467f-b906-7f35d3787e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e172b1e-9459-4c64-9dbb-441e4dad3ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b898b9b0-ec27-4dce-bfba-8bc9759c06d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5f33a49-a397-4217-8ef1-cb245c1cd804",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4b5ac6d-61ab-408c-a49e-ced1348cbfc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fa0b140-69c8-4e67-b7c2-3d6f76ee644d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "caed2de8-3528-489d-b8f4-8fd05b9540a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6a4b786-43de-4a45-934c-1cbab9205b93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "41859b34-cae1-4fa7-be46-c2faea03d38d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6faed791-2d25-4a79-87f2-f6ace62cd8da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18d38d28-a31f-4766-8eab-bdb5a7251510"
            }
          }
        ]
      },
      {
        "id": "fc8bf41d-bb6b-456f-b07a-45a6f65240d9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "64e78c4d-d453-4064-8bd2-3e7be7077be5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb188170-21fc-4866-9087-ea376dd3a3c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76d5c01d-f9d6-4db4-98d9-8b7b5bdda874",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a20a568-e2f4-445c-a6ff-2c1859c38b3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "54241bcf-5d68-42d7-8874-56a5df0f3d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad095b71-b70d-4c08-a49e-1f0aa0b65069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa98257c-c6cb-4fe9-81a3-2513451b792c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08aa92fc-7695-4edb-9e5f-c0e67cad5be3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa32b9c-6c53-4715-8515-90bacaf3ea64",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "b33135b9-666d-48e6-927c-c42e6fd0ebd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b9590c-753b-4594-9cfd-4fa7ed0c53e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b97b223d-1f15-4977-922c-f2750da950e6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e61c38e4-8d34-49ae-8a4c-0d5474141d41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60352591-07a2-4aec-a012-0dfb579c3c67"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e66c3c0-341d-410d-abfd-ff41e2b16e22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "456afb3f-74ae-4023-9c1d-1c793005e746"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05c5a6ca-9d84-4b68-9533-bc7f41c65d9f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7052059f-f8c3-4fac-9e1b-943c0098c913"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42536d6b-7947-4a01-8c5c-9f92590e3830",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53fbe9d8-b4e2-4fab-bf87-9a66614e97f3"
            }
          }
        ]
      },
      {
        "id": "bc590a14-d449-4b83-ba2c-731946188293",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ff005df8-e8c5-4590-a8d2-24dae952d4c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9f6b4eb-2bae-4332-8138-c572609a01c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c92724b4-1de1-4602-8899-1dd55f4a5d55",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc1e838-1d59-4e87-80a4-782787deb373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10383bad-53b9-4046-b1bd-c0a1785d2655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6df26a5-e549-4f69-ae87-f883697cc6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d9e4811-6ccc-4b7f-8de2-2bd69c62e962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee1b547-16d0-44d2-8697-c9692616bed9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8c05d9-2659-4d65-821f-3d29c27d8ce7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e774b7e6-d2ef-496d-9a69-6332efaf3baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a189df65-c7a7-43a9-833a-3d3dee324de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c024a511-8c8b-4a8e-85cc-c121144c7e64"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d5fa886-5760-47d7-b9b1-58c0a0615043",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbd8acff-e360-4a11-8421-e2e855c1ae9b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7824db63-1e48-4671-934f-ce15ec6a31ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "030eb7d3-c613-4fff-b73a-803ec2435417"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd1b5b74-698a-4cca-b9aa-11b8ff9427f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "7f6cfcb9-2d02-4724-85ed-7eebd63335df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e55c0a12-a073-4c8a-89c5-e3ad65f9b8b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0315f8a3-ded4-4be3-8e94-f45a24a45224"
            }
          }
        ]
      },
      {
        "id": "8a5d13ed-c7b8-472e-a31b-bae240fb5492",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7aa3ad4f-4242-4d85-968b-b80e9c99178e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69d3761f-3c0c-4a69-95f8-b203d05d22ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cfe09fff-8e77-48c0-a3a6-0a75d212fd70",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221d8b6f-84e9-4edb-bf45-786caf0bad51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca07fe73-5e07-4c68-bbab-e7388dd81949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ad8f56-14cb-4dcf-9185-6705e661252e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec2d59a0-3e1c-4a67-b543-ad0b74755533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f25d56-4645-41e5-abd6-45b7fed70861",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9b2c29-6899-4243-b232-f049978e26e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "696d9367-8464-4f86-928e-7eb6aa9d0845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16970d31-eeff-415b-9427-3cda3c7074cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e838fc6b-2c49-43a6-b1df-82f386a4c2b3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a3846ba-8d24-4704-8220-8548ce3218a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "925785c2-3011-4072-a045-dedd9005df4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4cba1a8-abe0-4f96-acad-8fb3f0fd05bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "617c7ddb-393c-4016-b7f4-f62f03f0cc26"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ba32ad5-94cb-4fdb-9503-818c80aa6828",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "3693bab0-cb95-4927-bfc6-c078bf5904e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0182257-5ef3-4b63-95a5-02f703506df7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6dc0e047-4198-49de-99e0-944e98fa5134"
            }
          }
        ]
      },
      {
        "id": "6af3bc47-9b91-4ca8-b127-25e92addc438",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "681d8a59-8582-46ae-b439-2e5bf0bda840",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e8b1700-b49f-4270-b7d0-61b2b9a547b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0b9cee0-be21-4f5d-bf6d-609c171936c2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3406b48e-a7d7-4eee-9580-fca922c6f23b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07155af-3f16-4f59-8a69-f6ada6fdb36b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f9c317-22ef-49a1-8bed-3bf3667e405f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e3a224c-e011-4b56-9f27-017873c121fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e8f1c6-1d47-4986-b15b-f747e01a8ba1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8521400d-6005-46b8-940c-76229d852439",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "65d3cd7d-ddf5-4763-a6bd-658a3c754d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75ce282-d93d-42f8-9fa1-a8405549882b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19d4b791-8e30-4eab-84b5-b8ed16e070d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1163c54-67a4-4809-a821-fa99b98272b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9f1ea1f-e39e-4880-8365-854063ccae37"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4772681f-889c-4c82-abbd-6b59372c9ca6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02494e34-388b-4a44-9c4c-4440562fc138"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1697c106-03ee-4c3d-9e61-ba94a1ef8404",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "6e6aa1e8-4541-4d1c-868d-7bb01d3945e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd4b228b-e62c-42e7-89c6-c3e22d25f4f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ad22651-6faf-4142-b157-a2b487856003"
            }
          }
        ]
      },
      {
        "id": "789b12ef-ce91-4966-8516-f4be61de2e3a",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "7958617a-d5e6-43af-ba53-6ae86907751f",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 68.59813084112147,
      "responseMin": 9,
      "responseMax": 970,
      "responseSd": 141.64579093627947,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661474944397,
      "completed": 1661474954556
    },
    "executions": [
      {
        "id": "00fcfd79-ab41-4b51-902a-13b83a86363e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ed5c491c-6302-4e45-bb8f-4b54b2c6f493",
          "httpRequestId": "68a21f6c-57a9-4373-b1e8-0555edf665e4"
        },
        "item": {
          "id": "00fcfd79-ab41-4b51-902a-13b83a86363e",
          "name": "did_json"
        },
        "response": {
          "id": "48868f1c-cbe5-48f7-8080-065f63c9ec6d",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70bc935-fd68-4bb9-bd0e-2625f3bf5a43",
        "cursor": {
          "ref": "5dd76aa0-e9a0-45c3-9274-40c79982f0a0",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b6692272-ca5d-4e85-9de0-806c1290f010"
        },
        "item": {
          "id": "c70bc935-fd68-4bb9-bd0e-2625f3bf5a43",
          "name": "did:invalid"
        },
        "response": {
          "id": "47bfc828-315f-481d-892b-ba7c3058dd77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70bc935-fd68-4bb9-bd0e-2625f3bf5a43",
        "cursor": {
          "ref": "5dd76aa0-e9a0-45c3-9274-40c79982f0a0",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b6692272-ca5d-4e85-9de0-806c1290f010"
        },
        "item": {
          "id": "c70bc935-fd68-4bb9-bd0e-2625f3bf5a43",
          "name": "did:invalid"
        },
        "response": {
          "id": "47bfc828-315f-481d-892b-ba7c3058dd77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8e5f53-a12b-4302-8b5e-0bc010eff11a",
        "cursor": {
          "ref": "d19ff223-89d5-4b9c-9d3d-439b44e142d5",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "89d5a81b-53c5-4f0c-b1fd-7f8f861380d5"
        },
        "item": {
          "id": "ae8e5f53-a12b-4302-8b5e-0bc010eff11a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "795eb1d7-c880-4f3a-b90c-2f9fc0d336ca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 59,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea6348a-281d-430b-bf24-5d31c4fc394c",
        "cursor": {
          "ref": "7aca3135-8bc9-4d16-84aa-022a9ce4e688",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b35bc54c-9369-4cf6-ad8e-23fb9cec1167"
        },
        "item": {
          "id": "5ea6348a-281d-430b-bf24-5d31c4fc394c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "29c95c7c-0ac5-42f5-9c03-118dfc99e182",
          "status": "Not Found",
          "code": 404,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057e7406-fcf9-41ec-b718-25cbd396d9e5",
        "cursor": {
          "ref": "4e05d5e7-c2e3-4122-bb61-f56bce180bcf",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "50844751-2503-4f94-a3d6-d05746bb5370"
        },
        "item": {
          "id": "057e7406-fcf9-41ec-b718-25cbd396d9e5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f130dd7b-0806-40a9-9428-b2179646bdb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfd0d28-cd24-4f09-9924-8913bd9cff7d",
        "cursor": {
          "ref": "fd5e8650-9e2f-4f73-81d9-4099ad0d05b2",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f3cceddc-9da7-4965-b0f6-f57c4232c505"
        },
        "item": {
          "id": "3bfd0d28-cd24-4f09-9924-8913bd9cff7d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3e47e7b5-6353-49ee-9da4-191ab6298ded",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfd0d28-cd24-4f09-9924-8913bd9cff7d",
        "cursor": {
          "ref": "fd5e8650-9e2f-4f73-81d9-4099ad0d05b2",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f3cceddc-9da7-4965-b0f6-f57c4232c505"
        },
        "item": {
          "id": "3bfd0d28-cd24-4f09-9924-8913bd9cff7d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3e47e7b5-6353-49ee-9da4-191ab6298ded",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c42294-5da7-4e9e-b6a9-755c6cbfd09d",
        "cursor": {
          "ref": "12685ef2-f12d-495f-b1af-c4e0d91deac3",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a75cea0b-cb0f-4d84-8d7c-7b432bca083a"
        },
        "item": {
          "id": "e7c42294-5da7-4e9e-b6a9-755c6cbfd09d",
          "name": "identifiers"
        },
        "response": {
          "id": "7a943a9c-9cc0-49ab-bd11-48275c4a2870",
          "status": "OK",
          "code": 200,
          "responseTime": 405,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22087836-a083-4c53-9e2a-386cc2e11c66",
        "cursor": {
          "ref": "8f2166ab-c0e8-478c-9fc6-2a2522e91914",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b777ebf4-ccea-48e5-9002-d47f90577da2"
        },
        "item": {
          "id": "22087836-a083-4c53-9e2a-386cc2e11c66",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8df699f0-c7ba-4e60-8480-4a222e372026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22087836-a083-4c53-9e2a-386cc2e11c66",
        "cursor": {
          "ref": "8f2166ab-c0e8-478c-9fc6-2a2522e91914",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b777ebf4-ccea-48e5-9002-d47f90577da2"
        },
        "item": {
          "id": "22087836-a083-4c53-9e2a-386cc2e11c66",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8df699f0-c7ba-4e60-8480-4a222e372026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22087836-a083-4c53-9e2a-386cc2e11c66",
        "cursor": {
          "ref": "8f2166ab-c0e8-478c-9fc6-2a2522e91914",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b777ebf4-ccea-48e5-9002-d47f90577da2"
        },
        "item": {
          "id": "22087836-a083-4c53-9e2a-386cc2e11c66",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8df699f0-c7ba-4e60-8480-4a222e372026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8d1975-a971-4486-b9a0-768a235d6438",
        "cursor": {
          "ref": "bd5bc59d-c320-466e-8b2d-3fdbfe3cc1a9",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4b4748eb-58d5-41cc-8a3f-ee2b58334adc"
        },
        "item": {
          "id": "dc8d1975-a971-4486-b9a0-768a235d6438",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dcdd8bc8-9c67-473c-a25f-f2fc350484a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8d1975-a971-4486-b9a0-768a235d6438",
        "cursor": {
          "ref": "bd5bc59d-c320-466e-8b2d-3fdbfe3cc1a9",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4b4748eb-58d5-41cc-8a3f-ee2b58334adc"
        },
        "item": {
          "id": "dc8d1975-a971-4486-b9a0-768a235d6438",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dcdd8bc8-9c67-473c-a25f-f2fc350484a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ea3c9a-4a74-45e0-87cc-2407b0c920eb",
        "cursor": {
          "ref": "e318cc03-8436-438b-b95f-595fb7673834",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "29ca6a1d-9602-4326-bbf4-3131ddf6f10f"
        },
        "item": {
          "id": "39ea3c9a-4a74-45e0-87cc-2407b0c920eb",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "94d21468-2c0c-4525-93b4-bf2372ffbeb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ea3c9a-4a74-45e0-87cc-2407b0c920eb",
        "cursor": {
          "ref": "e318cc03-8436-438b-b95f-595fb7673834",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "29ca6a1d-9602-4326-bbf4-3131ddf6f10f"
        },
        "item": {
          "id": "39ea3c9a-4a74-45e0-87cc-2407b0c920eb",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "94d21468-2c0c-4525-93b4-bf2372ffbeb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99d44ec-6ef8-4f55-805e-697267c138c5",
        "cursor": {
          "ref": "1e89711e-9510-4bd4-9438-61a2f7e6ace3",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "da736b06-62a5-40bf-b534-3a8af0f7a24b"
        },
        "item": {
          "id": "c99d44ec-6ef8-4f55-805e-697267c138c5",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "4499a512-4824-48d1-981e-54657cd25757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99d44ec-6ef8-4f55-805e-697267c138c5",
        "cursor": {
          "ref": "1e89711e-9510-4bd4-9438-61a2f7e6ace3",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "da736b06-62a5-40bf-b534-3a8af0f7a24b"
        },
        "item": {
          "id": "c99d44ec-6ef8-4f55-805e-697267c138c5",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "4499a512-4824-48d1-981e-54657cd25757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ac2d9f-9c49-41d3-ba37-1e5eab09d440",
        "cursor": {
          "ref": "e49ff2fc-3e84-4d49-9a4e-f613c956d429",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8f3c6443-55a0-4f9f-8b9b-0a647a8400ae"
        },
        "item": {
          "id": "72ac2d9f-9c49-41d3-ba37-1e5eab09d440",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "68f5addf-a371-4851-8c9d-8d0c7ae115c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ac2d9f-9c49-41d3-ba37-1e5eab09d440",
        "cursor": {
          "ref": "e49ff2fc-3e84-4d49-9a4e-f613c956d429",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8f3c6443-55a0-4f9f-8b9b-0a647a8400ae"
        },
        "item": {
          "id": "72ac2d9f-9c49-41d3-ba37-1e5eab09d440",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "68f5addf-a371-4851-8c9d-8d0c7ae115c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c9bd89-5e51-4881-b0c9-05da68bdd876",
        "cursor": {
          "ref": "569c3470-3927-406a-a8ef-cac799c71890",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9189bc04-3f01-48b6-b41f-4a5cb90191c0"
        },
        "item": {
          "id": "e3c9bd89-5e51-4881-b0c9-05da68bdd876",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "48b551b7-ab20-4d2a-9da8-b29b0f4ee65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c9bd89-5e51-4881-b0c9-05da68bdd876",
        "cursor": {
          "ref": "569c3470-3927-406a-a8ef-cac799c71890",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9189bc04-3f01-48b6-b41f-4a5cb90191c0"
        },
        "item": {
          "id": "e3c9bd89-5e51-4881-b0c9-05da68bdd876",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "48b551b7-ab20-4d2a-9da8-b29b0f4ee65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039caf14-e78c-4f05-b334-6d7ec91886cb",
        "cursor": {
          "ref": "8b5abbce-fba1-4ae9-870b-313737cd453a",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0902607a-5d8f-4195-b2a9-ff08185508f3"
        },
        "item": {
          "id": "039caf14-e78c-4f05-b334-6d7ec91886cb",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "da157b47-123d-48b8-84da-bf7263e1e64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039caf14-e78c-4f05-b334-6d7ec91886cb",
        "cursor": {
          "ref": "8b5abbce-fba1-4ae9-870b-313737cd453a",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0902607a-5d8f-4195-b2a9-ff08185508f3"
        },
        "item": {
          "id": "039caf14-e78c-4f05-b334-6d7ec91886cb",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "da157b47-123d-48b8-84da-bf7263e1e64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b4c80d-3f68-4ff0-921e-073aa24ca714",
        "cursor": {
          "ref": "59096439-90ce-44ca-81c1-65562bcd28c9",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "77d90bd3-2997-4caf-97ed-e6ff03d11786"
        },
        "item": {
          "id": "99b4c80d-3f68-4ff0-921e-073aa24ca714",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "9d6e8bd6-b059-4a29-b463-18cb1e9ca426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b4c80d-3f68-4ff0-921e-073aa24ca714",
        "cursor": {
          "ref": "59096439-90ce-44ca-81c1-65562bcd28c9",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "77d90bd3-2997-4caf-97ed-e6ff03d11786"
        },
        "item": {
          "id": "99b4c80d-3f68-4ff0-921e-073aa24ca714",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "9d6e8bd6-b059-4a29-b463-18cb1e9ca426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9aa482-9d7c-467c-8b0f-78c564adcf44",
        "cursor": {
          "ref": "3f5ca06a-8440-416a-884e-7ec1b35cbb6c",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "585ebad1-e7cb-4d77-aca5-faf951075963"
        },
        "item": {
          "id": "8f9aa482-9d7c-467c-8b0f-78c564adcf44",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "79550d6b-15d9-464b-a5da-cf8c85347661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9aa482-9d7c-467c-8b0f-78c564adcf44",
        "cursor": {
          "ref": "3f5ca06a-8440-416a-884e-7ec1b35cbb6c",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "585ebad1-e7cb-4d77-aca5-faf951075963"
        },
        "item": {
          "id": "8f9aa482-9d7c-467c-8b0f-78c564adcf44",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "79550d6b-15d9-464b-a5da-cf8c85347661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbda7f49-f541-4fd3-ba67-989ff7d3b101",
        "cursor": {
          "ref": "ed0dd5da-8e1a-4b61-96c2-27af421928f5",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "30567c57-85c3-405b-b919-bb33a715d5b2"
        },
        "item": {
          "id": "bbda7f49-f541-4fd3-ba67-989ff7d3b101",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "aa8c7199-552a-4e80-b49e-94237991041d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbda7f49-f541-4fd3-ba67-989ff7d3b101",
        "cursor": {
          "ref": "ed0dd5da-8e1a-4b61-96c2-27af421928f5",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "30567c57-85c3-405b-b919-bb33a715d5b2"
        },
        "item": {
          "id": "bbda7f49-f541-4fd3-ba67-989ff7d3b101",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "aa8c7199-552a-4e80-b49e-94237991041d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edd4ac2-9254-464f-b760-0e13e3919c7b",
        "cursor": {
          "ref": "08ace8db-fd59-4409-8e68-3fa42ea54d48",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "faa4718b-2ba1-4208-8fe6-eba68231fec3"
        },
        "item": {
          "id": "5edd4ac2-9254-464f-b760-0e13e3919c7b",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "a1073444-26fa-45c6-8bbf-2564e32bfeca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edd4ac2-9254-464f-b760-0e13e3919c7b",
        "cursor": {
          "ref": "08ace8db-fd59-4409-8e68-3fa42ea54d48",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "faa4718b-2ba1-4208-8fe6-eba68231fec3"
        },
        "item": {
          "id": "5edd4ac2-9254-464f-b760-0e13e3919c7b",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "a1073444-26fa-45c6-8bbf-2564e32bfeca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cfc00f-5568-45ba-ab97-8d5668d36da9",
        "cursor": {
          "ref": "e6278697-d96b-4b83-b13f-4c6fa482a2b9",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3748cd48-ace3-4afe-b185-3c483f4272ab"
        },
        "item": {
          "id": "d1cfc00f-5568-45ba-ab97-8d5668d36da9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "22f23497-5f60-44b1-bf26-77046bf7daf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cfc00f-5568-45ba-ab97-8d5668d36da9",
        "cursor": {
          "ref": "e6278697-d96b-4b83-b13f-4c6fa482a2b9",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3748cd48-ace3-4afe-b185-3c483f4272ab"
        },
        "item": {
          "id": "d1cfc00f-5568-45ba-ab97-8d5668d36da9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "22f23497-5f60-44b1-bf26-77046bf7daf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfca9cd-ccbd-4cde-8407-2f65a18dfa17",
        "cursor": {
          "ref": "4d4a0694-e5ad-49b2-bd3e-e7a04db4b15c",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "077283c1-e318-491f-8bad-a099d65abc14"
        },
        "item": {
          "id": "ccfca9cd-ccbd-4cde-8407-2f65a18dfa17",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bcf11c3b-f6ad-48a4-a1d7-e76170d777c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfca9cd-ccbd-4cde-8407-2f65a18dfa17",
        "cursor": {
          "ref": "4d4a0694-e5ad-49b2-bd3e-e7a04db4b15c",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "077283c1-e318-491f-8bad-a099d65abc14"
        },
        "item": {
          "id": "ccfca9cd-ccbd-4cde-8407-2f65a18dfa17",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bcf11c3b-f6ad-48a4-a1d7-e76170d777c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67348d9e-abc0-40cc-9d51-3f35a74867c1",
        "cursor": {
          "ref": "b916bdb1-c0ca-4c96-bc96-42f15d123759",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f57ca75d-bb87-45e6-9c3f-c2f4165c58fd"
        },
        "item": {
          "id": "67348d9e-abc0-40cc-9d51-3f35a74867c1",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "4dfa61e5-d446-4a06-b060-6558f99195b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67348d9e-abc0-40cc-9d51-3f35a74867c1",
        "cursor": {
          "ref": "b916bdb1-c0ca-4c96-bc96-42f15d123759",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f57ca75d-bb87-45e6-9c3f-c2f4165c58fd"
        },
        "item": {
          "id": "67348d9e-abc0-40cc-9d51-3f35a74867c1",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "4dfa61e5-d446-4a06-b060-6558f99195b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0130472-2263-43ba-a46a-276a5a3e42fb",
        "cursor": {
          "ref": "e8cb1611-9e0f-44c7-881a-fb7284011778",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d9e868e8-9309-4d1e-8467-f2c7c0413ea9"
        },
        "item": {
          "id": "f0130472-2263-43ba-a46a-276a5a3e42fb",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "b7bfe659-1840-4aa4-9591-60d696db064b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0130472-2263-43ba-a46a-276a5a3e42fb",
        "cursor": {
          "ref": "e8cb1611-9e0f-44c7-881a-fb7284011778",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d9e868e8-9309-4d1e-8467-f2c7c0413ea9"
        },
        "item": {
          "id": "f0130472-2263-43ba-a46a-276a5a3e42fb",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "b7bfe659-1840-4aa4-9591-60d696db064b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e42826-68dc-4c41-8f7f-e451dbb109d2",
        "cursor": {
          "ref": "28f6b26a-b70b-4399-b442-0547e7fb36ff",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ecd4eaab-38e6-45de-a535-1c7fa37ba8b7"
        },
        "item": {
          "id": "78e42826-68dc-4c41-8f7f-e451dbb109d2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "19608660-a22d-496f-a2b6-6af16c98ba12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e42826-68dc-4c41-8f7f-e451dbb109d2",
        "cursor": {
          "ref": "28f6b26a-b70b-4399-b442-0547e7fb36ff",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ecd4eaab-38e6-45de-a535-1c7fa37ba8b7"
        },
        "item": {
          "id": "78e42826-68dc-4c41-8f7f-e451dbb109d2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "19608660-a22d-496f-a2b6-6af16c98ba12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6c943b-afbf-45d6-a141-f6065419e094",
        "cursor": {
          "ref": "3c62bf42-ee96-4b3e-9492-355890b50a05",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4d7f0d2a-52e1-4bab-9927-66b117100e5f"
        },
        "item": {
          "id": "ef6c943b-afbf-45d6-a141-f6065419e094",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e596e255-5249-4794-abab-7b6ecbf90d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6c943b-afbf-45d6-a141-f6065419e094",
        "cursor": {
          "ref": "3c62bf42-ee96-4b3e-9492-355890b50a05",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4d7f0d2a-52e1-4bab-9927-66b117100e5f"
        },
        "item": {
          "id": "ef6c943b-afbf-45d6-a141-f6065419e094",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e596e255-5249-4794-abab-7b6ecbf90d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b35575-6ac7-4d0a-ba3e-139ed6279d56",
        "cursor": {
          "ref": "57570e80-b580-431f-8997-c79c38e0bed6",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3d9547ae-70ac-4fb3-97c3-9a27b8669edf"
        },
        "item": {
          "id": "e3b35575-6ac7-4d0a-ba3e-139ed6279d56",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "fb16c005-5033-4179-a0ef-d8325b99d2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b35575-6ac7-4d0a-ba3e-139ed6279d56",
        "cursor": {
          "ref": "57570e80-b580-431f-8997-c79c38e0bed6",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3d9547ae-70ac-4fb3-97c3-9a27b8669edf"
        },
        "item": {
          "id": "e3b35575-6ac7-4d0a-ba3e-139ed6279d56",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "fb16c005-5033-4179-a0ef-d8325b99d2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a1a56f-0236-4f7b-86cf-850794dbe74e",
        "cursor": {
          "ref": "2cde0c3d-8aaa-4f72-929a-4e4fa3a9eef4",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7255c092-2f03-41a3-8fd9-658c043d1c7f"
        },
        "item": {
          "id": "91a1a56f-0236-4f7b-86cf-850794dbe74e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "83bb9f54-e482-40d8-84e5-76c3a93a635e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a1a56f-0236-4f7b-86cf-850794dbe74e",
        "cursor": {
          "ref": "2cde0c3d-8aaa-4f72-929a-4e4fa3a9eef4",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7255c092-2f03-41a3-8fd9-658c043d1c7f"
        },
        "item": {
          "id": "91a1a56f-0236-4f7b-86cf-850794dbe74e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "83bb9f54-e482-40d8-84e5-76c3a93a635e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53e92e0-2ebe-48dc-9f83-decc9a97892e",
        "cursor": {
          "ref": "154cb7a5-74b4-49b3-8365-b4c02c7107ac",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2ec993f2-e19e-424b-b54c-37aa13df2798"
        },
        "item": {
          "id": "b53e92e0-2ebe-48dc-9f83-decc9a97892e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1a2ae477-21c3-4224-9d5e-11d70aa3a560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53e92e0-2ebe-48dc-9f83-decc9a97892e",
        "cursor": {
          "ref": "154cb7a5-74b4-49b3-8365-b4c02c7107ac",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2ec993f2-e19e-424b-b54c-37aa13df2798"
        },
        "item": {
          "id": "b53e92e0-2ebe-48dc-9f83-decc9a97892e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1a2ae477-21c3-4224-9d5e-11d70aa3a560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10ac324-4345-4b3d-90dd-3c02ca14f8fd",
        "cursor": {
          "ref": "02dd6c50-5a12-41eb-ac4e-d53fd1fade35",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "897c9b19-9745-41b7-9680-31b161b77fd1"
        },
        "item": {
          "id": "e10ac324-4345-4b3d-90dd-3c02ca14f8fd",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "cc80b34a-4446-446d-8dbd-e05b45e242ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10ac324-4345-4b3d-90dd-3c02ca14f8fd",
        "cursor": {
          "ref": "02dd6c50-5a12-41eb-ac4e-d53fd1fade35",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "897c9b19-9745-41b7-9680-31b161b77fd1"
        },
        "item": {
          "id": "e10ac324-4345-4b3d-90dd-3c02ca14f8fd",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "cc80b34a-4446-446d-8dbd-e05b45e242ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc11cd6-8546-430c-854f-2cfbdf7c8c3d",
        "cursor": {
          "ref": "b8ea105c-09ee-4a0f-b382-417444d863ad",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "54ad01b1-d2d9-4181-b5e1-270894800a62"
        },
        "item": {
          "id": "6bc11cd6-8546-430c-854f-2cfbdf7c8c3d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "91c1c271-481d-41f1-8133-34979150f5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc11cd6-8546-430c-854f-2cfbdf7c8c3d",
        "cursor": {
          "ref": "b8ea105c-09ee-4a0f-b382-417444d863ad",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "54ad01b1-d2d9-4181-b5e1-270894800a62"
        },
        "item": {
          "id": "6bc11cd6-8546-430c-854f-2cfbdf7c8c3d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "91c1c271-481d-41f1-8133-34979150f5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa1df0b-1b40-474e-b273-5a6097918322",
        "cursor": {
          "ref": "3036db0f-bfbc-4917-9387-1cae01c36657",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ddba7d8b-d6e7-4b6c-9f32-660cbcf4fb1f"
        },
        "item": {
          "id": "8fa1df0b-1b40-474e-b273-5a6097918322",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5d936960-51b0-4c5d-bbae-f38e8804b6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa1df0b-1b40-474e-b273-5a6097918322",
        "cursor": {
          "ref": "3036db0f-bfbc-4917-9387-1cae01c36657",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ddba7d8b-d6e7-4b6c-9f32-660cbcf4fb1f"
        },
        "item": {
          "id": "8fa1df0b-1b40-474e-b273-5a6097918322",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5d936960-51b0-4c5d-bbae-f38e8804b6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215c1c4c-06f7-4fbc-bfbe-a2b51af5d101",
        "cursor": {
          "ref": "d3e5fca9-be1a-4439-95d7-f6f23330f804",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d4085ae1-d218-413b-ac3e-5223c9000878"
        },
        "item": {
          "id": "215c1c4c-06f7-4fbc-bfbe-a2b51af5d101",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "859398e7-7ab5-4a2f-8bc6-af99bf1e96f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215c1c4c-06f7-4fbc-bfbe-a2b51af5d101",
        "cursor": {
          "ref": "d3e5fca9-be1a-4439-95d7-f6f23330f804",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d4085ae1-d218-413b-ac3e-5223c9000878"
        },
        "item": {
          "id": "215c1c4c-06f7-4fbc-bfbe-a2b51af5d101",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "859398e7-7ab5-4a2f-8bc6-af99bf1e96f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f69036-cccd-43b4-a2fe-f012477e2bd0",
        "cursor": {
          "ref": "28e93214-7e67-436f-8a20-618573755fd7",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8aa7e111-ab89-4a0b-9c9b-4763d2a21e91"
        },
        "item": {
          "id": "80f69036-cccd-43b4-a2fe-f012477e2bd0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "75537547-af67-435c-a88a-7c256352885c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f69036-cccd-43b4-a2fe-f012477e2bd0",
        "cursor": {
          "ref": "28e93214-7e67-436f-8a20-618573755fd7",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8aa7e111-ab89-4a0b-9c9b-4763d2a21e91"
        },
        "item": {
          "id": "80f69036-cccd-43b4-a2fe-f012477e2bd0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "75537547-af67-435c-a88a-7c256352885c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c81d32-4247-4fbc-923f-12461b51f9b4",
        "cursor": {
          "ref": "20d8b5cd-244e-4d4a-aae3-7f039b896e71",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ecbd74aa-bc31-4af8-98ff-ed20685c91c8"
        },
        "item": {
          "id": "88c81d32-4247-4fbc-923f-12461b51f9b4",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "675cb71b-a3c1-4e1f-9593-53195e668479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c81d32-4247-4fbc-923f-12461b51f9b4",
        "cursor": {
          "ref": "20d8b5cd-244e-4d4a-aae3-7f039b896e71",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ecbd74aa-bc31-4af8-98ff-ed20685c91c8"
        },
        "item": {
          "id": "88c81d32-4247-4fbc-923f-12461b51f9b4",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "675cb71b-a3c1-4e1f-9593-53195e668479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586b9b64-cf20-4d8c-80c2-5305cada06da",
        "cursor": {
          "ref": "122cf974-2575-4e97-bf7b-02bc341a2e89",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bf5c6f1b-f9e2-401e-9561-6a2f609d4086"
        },
        "item": {
          "id": "586b9b64-cf20-4d8c-80c2-5305cada06da",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a179627b-63cc-493a-b30d-7e66ac2233ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 970,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586b9b64-cf20-4d8c-80c2-5305cada06da",
        "cursor": {
          "ref": "122cf974-2575-4e97-bf7b-02bc341a2e89",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bf5c6f1b-f9e2-401e-9561-6a2f609d4086"
        },
        "item": {
          "id": "586b9b64-cf20-4d8c-80c2-5305cada06da",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a179627b-63cc-493a-b30d-7e66ac2233ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 970,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13af55e-ec34-47bf-9326-bf76e156fb97",
        "cursor": {
          "ref": "608c0448-19a0-4591-baaf-85f66d96e0de",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d38b13e6-e7d6-421f-97ca-c94f68921041"
        },
        "item": {
          "id": "e13af55e-ec34-47bf-9326-bf76e156fb97",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "c0e43cd6-f677-4c94-86c3-d42500e940df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13af55e-ec34-47bf-9326-bf76e156fb97",
        "cursor": {
          "ref": "608c0448-19a0-4591-baaf-85f66d96e0de",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d38b13e6-e7d6-421f-97ca-c94f68921041"
        },
        "item": {
          "id": "e13af55e-ec34-47bf-9326-bf76e156fb97",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "c0e43cd6-f677-4c94-86c3-d42500e940df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085de0d3-e4d0-41d1-9543-10dbc0d3a03f",
        "cursor": {
          "ref": "8a6c4894-dd57-4a7f-94b6-ebba3234c6c9",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "509fec85-4010-459b-8d67-ba79efa5aec4"
        },
        "item": {
          "id": "085de0d3-e4d0-41d1-9543-10dbc0d3a03f",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "bc8045b5-11df-4533-b56b-f1da59b71515",
          "status": "Created",
          "code": 201,
          "responseTime": 613,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "085de0d3-e4d0-41d1-9543-10dbc0d3a03f",
        "cursor": {
          "ref": "8a6c4894-dd57-4a7f-94b6-ebba3234c6c9",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "509fec85-4010-459b-8d67-ba79efa5aec4"
        },
        "item": {
          "id": "085de0d3-e4d0-41d1-9543-10dbc0d3a03f",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "bc8045b5-11df-4533-b56b-f1da59b71515",
          "status": "Created",
          "code": 201,
          "responseTime": 613,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "05837838-1f0f-4e0d-9ff9-fddb06495a70",
        "cursor": {
          "ref": "71c3ffb2-52be-4f57-86af-2f667570a95f",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5af1f502-5253-40f5-a64e-b43516ca5c42"
        },
        "item": {
          "id": "05837838-1f0f-4e0d-9ff9-fddb06495a70",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "dae5cedf-dacf-4dee-811d-c8bc63e0c3cc",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "05837838-1f0f-4e0d-9ff9-fddb06495a70",
        "cursor": {
          "ref": "71c3ffb2-52be-4f57-86af-2f667570a95f",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5af1f502-5253-40f5-a64e-b43516ca5c42"
        },
        "item": {
          "id": "05837838-1f0f-4e0d-9ff9-fddb06495a70",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "dae5cedf-dacf-4dee-811d-c8bc63e0c3cc",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "dd964540-e61f-4346-b752-02ee639cacd7",
        "cursor": {
          "ref": "72f1c790-28c7-4e78-be61-4d15e61f1efa",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b4720f64-1e23-4c28-901d-72d5969f1ab4"
        },
        "item": {
          "id": "dd964540-e61f-4346-b752-02ee639cacd7",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "03aef514-31f4-435d-b9de-665a0a2279d1",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "dd964540-e61f-4346-b752-02ee639cacd7",
        "cursor": {
          "ref": "72f1c790-28c7-4e78-be61-4d15e61f1efa",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b4720f64-1e23-4c28-901d-72d5969f1ab4"
        },
        "item": {
          "id": "dd964540-e61f-4346-b752-02ee639cacd7",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "03aef514-31f4-435d-b9de-665a0a2279d1",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "9327c03d-1657-418b-8645-b374d8bed4d3",
        "cursor": {
          "ref": "3571b1f0-9e27-493d-a624-f820fa4cfc1b",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e748fe69-c85f-4916-8161-24365dbaf531"
        },
        "item": {
          "id": "9327c03d-1657-418b-8645-b374d8bed4d3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1236b1ec-ef74-41ee-9027-18d00f897e3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9327c03d-1657-418b-8645-b374d8bed4d3",
        "cursor": {
          "ref": "3571b1f0-9e27-493d-a624-f820fa4cfc1b",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e748fe69-c85f-4916-8161-24365dbaf531"
        },
        "item": {
          "id": "9327c03d-1657-418b-8645-b374d8bed4d3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1236b1ec-ef74-41ee-9027-18d00f897e3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715fa26b-e030-47ab-935f-eaca95454033",
        "cursor": {
          "ref": "cf0c96c0-718d-45ca-a0a7-5954c0a090d0",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a40501c1-0a08-4ee8-bccc-629d6ee05f0c"
        },
        "item": {
          "id": "715fa26b-e030-47ab-935f-eaca95454033",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "df61d73f-7b7a-43f7-9f06-010995eb6778",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715fa26b-e030-47ab-935f-eaca95454033",
        "cursor": {
          "ref": "cf0c96c0-718d-45ca-a0a7-5954c0a090d0",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a40501c1-0a08-4ee8-bccc-629d6ee05f0c"
        },
        "item": {
          "id": "715fa26b-e030-47ab-935f-eaca95454033",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "df61d73f-7b7a-43f7-9f06-010995eb6778",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4731d972-0482-4448-8f27-f586085e1fc0",
        "cursor": {
          "ref": "97c0022d-8011-4a88-bc83-900dbb095cb8",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "243c0681-c4d6-4edb-9ab8-4f05c6f4762d"
        },
        "item": {
          "id": "4731d972-0482-4448-8f27-f586085e1fc0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "502e08ba-9597-4698-9e28-26f79e5afcc8",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "4731d972-0482-4448-8f27-f586085e1fc0",
        "cursor": {
          "ref": "97c0022d-8011-4a88-bc83-900dbb095cb8",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "243c0681-c4d6-4edb-9ab8-4f05c6f4762d"
        },
        "item": {
          "id": "4731d972-0482-4448-8f27-f586085e1fc0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "502e08ba-9597-4698-9e28-26f79e5afcc8",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9a3dd3-88d8-4604-a7e4-8e164ea4d300",
        "cursor": {
          "ref": "c4c3be1e-4283-45af-a5a1-a67964c8aebe",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b37c2277-8571-429e-8f42-359cf8aa04ca"
        },
        "item": {
          "id": "dc9a3dd3-88d8-4604-a7e4-8e164ea4d300",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "ebff5f88-8bfa-485a-8cc7-a1f8884ebedb",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "dc9a3dd3-88d8-4604-a7e4-8e164ea4d300",
        "cursor": {
          "ref": "c4c3be1e-4283-45af-a5a1-a67964c8aebe",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b37c2277-8571-429e-8f42-359cf8aa04ca"
        },
        "item": {
          "id": "dc9a3dd3-88d8-4604-a7e4-8e164ea4d300",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "ebff5f88-8bfa-485a-8cc7-a1f8884ebedb",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "48459f15-a451-4496-980e-933ec2869704",
        "cursor": {
          "ref": "34384e92-907c-4148-b837-c988efc965f0",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ff8f969a-1769-462e-87ba-179326889f01"
        },
        "item": {
          "id": "48459f15-a451-4496-980e-933ec2869704",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0e91bd5d-b1bf-4d6b-a471-0cc06438b187",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "48459f15-a451-4496-980e-933ec2869704",
        "cursor": {
          "ref": "34384e92-907c-4148-b837-c988efc965f0",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ff8f969a-1769-462e-87ba-179326889f01"
        },
        "item": {
          "id": "48459f15-a451-4496-980e-933ec2869704",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0e91bd5d-b1bf-4d6b-a471-0cc06438b187",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6a63d8-80b1-4885-9810-624dc6f09958",
        "cursor": {
          "ref": "22535ff5-5df8-442b-be55-fd247be0a13b",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b75d4e3b-3c07-4b7f-91b6-b20d9bee1500"
        },
        "item": {
          "id": "3f6a63d8-80b1-4885-9810-624dc6f09958",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "a3d799df-dbfb-49e0-b664-cac590a3f22d",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3f6a63d8-80b1-4885-9810-624dc6f09958",
        "cursor": {
          "ref": "22535ff5-5df8-442b-be55-fd247be0a13b",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b75d4e3b-3c07-4b7f-91b6-b20d9bee1500"
        },
        "item": {
          "id": "3f6a63d8-80b1-4885-9810-624dc6f09958",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "a3d799df-dbfb-49e0-b664-cac590a3f22d",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ac45dbe1-9130-4278-82b5-7abdc8245432",
        "cursor": {
          "ref": "96713842-ed9b-465f-b8c8-e9ec097668ed",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f7f1ca64-2af5-4d35-b518-760731af7922"
        },
        "item": {
          "id": "ac45dbe1-9130-4278-82b5-7abdc8245432",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9625bd1d-76d7-4bef-a76a-12d50b59bb86",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac45dbe1-9130-4278-82b5-7abdc8245432",
        "cursor": {
          "ref": "96713842-ed9b-465f-b8c8-e9ec097668ed",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f7f1ca64-2af5-4d35-b518-760731af7922"
        },
        "item": {
          "id": "ac45dbe1-9130-4278-82b5-7abdc8245432",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9625bd1d-76d7-4bef-a76a-12d50b59bb86",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "00342560-6442-49f1-ad1f-e96ba1ee3590",
        "cursor": {
          "ref": "c68bac4f-354d-4ba8-862f-34ba4c117027",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8133cb43-88b1-4604-8267-82ffc94f08f3"
        },
        "item": {
          "id": "00342560-6442-49f1-ad1f-e96ba1ee3590",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f202ae89-a032-4661-a376-97190bc7a5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "00342560-6442-49f1-ad1f-e96ba1ee3590",
        "cursor": {
          "ref": "c68bac4f-354d-4ba8-862f-34ba4c117027",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8133cb43-88b1-4604-8267-82ffc94f08f3"
        },
        "item": {
          "id": "00342560-6442-49f1-ad1f-e96ba1ee3590",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f202ae89-a032-4661-a376-97190bc7a5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "633e785a-39c0-4274-a343-327716bee714",
        "cursor": {
          "ref": "ad34faf6-fc29-4738-b910-e365cb9baa57",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ccbdf173-cee1-495d-a2dd-43432b2b84f6"
        },
        "item": {
          "id": "633e785a-39c0-4274-a343-327716bee714",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "dc613f10-db80-43aa-8ccd-bec47b431d4e",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "633e785a-39c0-4274-a343-327716bee714",
        "cursor": {
          "ref": "ad34faf6-fc29-4738-b910-e365cb9baa57",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ccbdf173-cee1-495d-a2dd-43432b2b84f6"
        },
        "item": {
          "id": "633e785a-39c0-4274-a343-327716bee714",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "dc613f10-db80-43aa-8ccd-bec47b431d4e",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ae83e294-29b3-42f3-9ccf-524b717f92fb",
        "cursor": {
          "ref": "4fcd0374-bf7f-4009-a7a1-0f068ea4525a",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0a659ac5-36da-4288-b164-39d35b330986"
        },
        "item": {
          "id": "ae83e294-29b3-42f3-9ccf-524b717f92fb",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "345098c4-1853-4853-be78-8444d151c565",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ae83e294-29b3-42f3-9ccf-524b717f92fb",
        "cursor": {
          "ref": "4fcd0374-bf7f-4009-a7a1-0f068ea4525a",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0a659ac5-36da-4288-b164-39d35b330986"
        },
        "item": {
          "id": "ae83e294-29b3-42f3-9ccf-524b717f92fb",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "345098c4-1853-4853-be78-8444d151c565",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c550f336-a13c-40ec-bc32-d03026d35ef4",
        "cursor": {
          "ref": "390069e6-4ebb-4813-b42f-4332190d70cd",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a91fcbe2-e7ff-44a7-b5d7-51d1fff235c4"
        },
        "item": {
          "id": "c550f336-a13c-40ec-bc32-d03026d35ef4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "31d20efd-096b-440f-b7a4-797bac864094",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c550f336-a13c-40ec-bc32-d03026d35ef4",
        "cursor": {
          "ref": "390069e6-4ebb-4813-b42f-4332190d70cd",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a91fcbe2-e7ff-44a7-b5d7-51d1fff235c4"
        },
        "item": {
          "id": "c550f336-a13c-40ec-bc32-d03026d35ef4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "31d20efd-096b-440f-b7a4-797bac864094",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067ca8a9-02cc-47c8-a614-0652b2b9fe3b",
        "cursor": {
          "ref": "0ee1bbea-21df-4342-ba38-c44c6d865cc7",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "226a2775-e185-45f2-9f2f-405b48662e30"
        },
        "item": {
          "id": "067ca8a9-02cc-47c8-a614-0652b2b9fe3b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "35064a71-03d4-4f60-904f-f914ea7dd279",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d5c01d-f9d6-4db4-98d9-8b7b5bdda874",
        "cursor": {
          "ref": "28de110e-f2ab-43dd-9b47-e84f1df42af9",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "03702fe1-e3d4-4ee1-9eb2-12d1e1740228"
        },
        "item": {
          "id": "76d5c01d-f9d6-4db4-98d9-8b7b5bdda874",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "01a7c01b-f7e3-44a6-9554-22a4f4c9477e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d5c01d-f9d6-4db4-98d9-8b7b5bdda874",
        "cursor": {
          "ref": "28de110e-f2ab-43dd-9b47-e84f1df42af9",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "03702fe1-e3d4-4ee1-9eb2-12d1e1740228"
        },
        "item": {
          "id": "76d5c01d-f9d6-4db4-98d9-8b7b5bdda874",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "01a7c01b-f7e3-44a6-9554-22a4f4c9477e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08aa92fc-7695-4edb-9e5f-c0e67cad5be3",
        "cursor": {
          "ref": "67be058d-1a59-4b62-b545-50c206bd8803",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2ef5b640-99fe-456a-a6e6-0421b355d9d2"
        },
        "item": {
          "id": "08aa92fc-7695-4edb-9e5f-c0e67cad5be3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c7be5824-bfa7-4e8d-9f1b-632cd067492f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92724b4-1de1-4602-8899-1dd55f4a5d55",
        "cursor": {
          "ref": "4d4101c1-973f-480f-afae-881196eedfae",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "28ea1244-9855-4c34-a92e-5e2d2368af89"
        },
        "item": {
          "id": "c92724b4-1de1-4602-8899-1dd55f4a5d55",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6e920cbb-b1c8-401d-8fb0-7e5ea4d01c49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92724b4-1de1-4602-8899-1dd55f4a5d55",
        "cursor": {
          "ref": "4d4101c1-973f-480f-afae-881196eedfae",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "28ea1244-9855-4c34-a92e-5e2d2368af89"
        },
        "item": {
          "id": "c92724b4-1de1-4602-8899-1dd55f4a5d55",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6e920cbb-b1c8-401d-8fb0-7e5ea4d01c49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee1b547-16d0-44d2-8697-c9692616bed9",
        "cursor": {
          "ref": "2ada568a-08e0-40c8-80eb-0169b8a75b92",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "55fc7a4b-6efa-4fcc-9dcc-a8bcc0b9faa0"
        },
        "item": {
          "id": "aee1b547-16d0-44d2-8697-c9692616bed9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e662ef6d-0842-4ee0-8dbf-86a35ef2e95e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe09fff-8e77-48c0-a3a6-0a75d212fd70",
        "cursor": {
          "ref": "ab81383b-16e3-4d82-9001-07e87870861d",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "045eb6dc-8a7e-4078-a65a-ff1870cc5867"
        },
        "item": {
          "id": "cfe09fff-8e77-48c0-a3a6-0a75d212fd70",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "eb20d040-5722-4ae8-9903-399456360e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "cfe09fff-8e77-48c0-a3a6-0a75d212fd70",
        "cursor": {
          "ref": "ab81383b-16e3-4d82-9001-07e87870861d",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "045eb6dc-8a7e-4078-a65a-ff1870cc5867"
        },
        "item": {
          "id": "cfe09fff-8e77-48c0-a3a6-0a75d212fd70",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "eb20d040-5722-4ae8-9903-399456360e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "b8f25d56-4645-41e5-abd6-45b7fed70861",
        "cursor": {
          "ref": "5d6e9c39-5d37-4ffb-9414-8c194db48edd",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0cf81e8c-f38c-4bbc-b325-76594f885717"
        },
        "item": {
          "id": "b8f25d56-4645-41e5-abd6-45b7fed70861",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "03961c2b-c584-426e-8d81-07e57e4d6715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "d0b9cee0-be21-4f5d-bf6d-609c171936c2",
        "cursor": {
          "ref": "7dfba250-6eca-4eed-af05-30adcf0db0c2",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "564037a7-2a1d-479a-a94a-9ea6be4d8249"
        },
        "item": {
          "id": "d0b9cee0-be21-4f5d-bf6d-609c171936c2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c3b9f8a9-46e2-4f9a-8035-12f616deda30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b9cee0-be21-4f5d-bf6d-609c171936c2",
        "cursor": {
          "ref": "7dfba250-6eca-4eed-af05-30adcf0db0c2",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "564037a7-2a1d-479a-a94a-9ea6be4d8249"
        },
        "item": {
          "id": "d0b9cee0-be21-4f5d-bf6d-609c171936c2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c3b9f8a9-46e2-4f9a-8035-12f616deda30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e8f1c6-1d47-4986-b15b-f747e01a8ba1",
        "cursor": {
          "ref": "06b814c7-ba95-4173-a142-87799e637721",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8511272e-6d6f-4092-821b-2bb6b4acfe84"
        },
        "item": {
          "id": "c8e8f1c6-1d47-4986-b15b-f747e01a8ba1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "9f7d071b-9b6a-478b-a5b7-8ccdec678e80",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}