{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2cfc0ba2-4a25-4aa9-807c-f7f5253bbc03",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "668957ca-2f3a-4d87-bfd1-97987651a7a4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "79339950-5a40-407d-aace-358ae9387e54",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "581fc702-7dca-4c4a-b58f-569d2f9b3a6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46981d15-6221-4e12-afb8-4619ef5462ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "b5a52aba-ac62-467c-a71b-ab8f01c44cad",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c9943a95-4b28-4c7f-9539-5eac0491bcbb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a050af9f-8b27-4bee-8aaf-c82cc02579cc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5d983cab-5093-46a8-969b-9fc17af03c20",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a65e11-67a5-487f-b552-f9edb4db2ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "122a29d5-94ed-4b1a-803e-b0c79679640d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087f8533-c234-4ced-897d-2b44d28bb978",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098e294a-6e0c-4646-9727-dbb8a3665085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4c29520-360f-4817-b36e-2064df77175a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2838d2-abb2-40c6-81d1-23504a0b530c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0886b39f-53af-4da4-928f-a1538970ee5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43b1e0bc-7502-405e-b5ed-8c69df82189a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "74d66d52-7c21-470f-b245-7a5ead0ec713",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35001890-f340-4271-b677-e3e5e50be30a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b6ce9c-6305-42f8-b96c-6546bba72197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "550782f9-497f-49e2-8af8-052f02f652bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c9978f-95a8-483a-81d2-fac87ffe5982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7778ae83-122b-4b56-98d8-170da3014c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b410d6b-f8ab-45c6-b75b-ef9eba4eb026",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6f3fca-a7ab-4545-a619-331db1cd6fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "771a00dd-d45c-4a8a-b3a5-0b588192b75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e60e2d-da2a-4e96-8d4d-04a8205a6661",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a0e80cf4-1d19-4407-b758-60717d098e5a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bd30eb1b-5a8c-44fa-8452-80960f706d1d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c11066b8-82f7-4e23-80ea-463288d33b08",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b4fdcef-605a-462b-a8e1-39b5ce66a390",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "818c9f33-960b-407a-a74e-a08e9190a6eb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00a41e34-aa1f-4dea-96e8-8bb7d39ab75b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ac785460-789c-47c2-8906-7d37de60149e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "352b8bd0-dddc-4a02-ae34-fba521031eb0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1b89173-86b9-4859-a7f7-f111bb5c0a9d"
            }
          }
        ]
      },
      {
        "id": "6d864643-bfa2-4f7f-ad50-c7884edb26be",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "998c0f9a-7994-4b25-b479-0667f2027387",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf2ee7e3-b922-4eab-afeb-ef6f86f38435",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "354ea0d5-47da-49cf-a277-a3b00d1728c8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e54e95d-bbe2-45b5-a69b-1946ad8bd348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4078c6-466d-4c18-b48a-39445567b03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ab77af-9140-4ee7-8ced-490ac97d5e8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da8d9139-8e21-4f35-92b9-a8bd65d1c7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd71a23c-d3da-489c-a34c-237d78ba464f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846f35b3-4d0e-4b42-805c-6acf5b520f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda8b55c-df14-4c34-9d54-4c5d74b826da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de91121a-dd8f-47e8-8a55-f523db47ec9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9019609b-6664-41f5-a4ad-4f083247f177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f331db1b-07b6-4138-9655-8aead71e1576",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8208dd35-698e-4689-85e9-048687eba191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f3ec45-99bf-4aa4-91c9-ae94bfbee559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f583b1b-f02a-4c06-ac28-987cc493c0d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "928ae7b5-0d44-45e2-8372-33a022e7ce5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76744395-38a1-4a8f-96b4-abb4022b5e09",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac888b5a-2d94-4786-8d40-4b84ae17b2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a794c0-f5b7-4e48-88d1-682a2d071a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344df318-6c00-4ac9-8a61-404cef570fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aeb518d-2653-4346-a4b3-58ee126ca067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2677e17-370b-475b-95b1-2437565d9f6c",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a00aa74-1834-443c-9678-6be9d85a98a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2076b07-8893-469e-8c48-3bf4947165ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cedc8f60-e921-4d59-9745-363418c11315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6213072d-f8e3-4c32-bf5d-30ec3322fc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2833c7b3-48fa-4b33-8b32-c71486f386a2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65a5e65-680c-42f9-a0e7-3b1cc0ca2a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44703872-57bd-4338-868f-941b622e4ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7513e4-2f7e-4380-9811-8e78abd6a5c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bba23ae-f523-46b9-ab0f-fb7d1727f444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ac3f9c-6735-4f1b-845b-96e2b06fe76c",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d34bd4-75ca-4556-9774-2d7e8df8291a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ebe890-3e22-40a4-8d8c-fd8d2ff590ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a029bfb-d9b6-4ae5-9255-aeb2fc38bdc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18ccacb2-cbd4-4522-9da8-8f6bb7f2ae82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c751999-7df4-4979-9b82-bd67ecef3a98",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551053e6-786d-45aa-9788-dabb7553f80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466a69b6-676b-41a8-adf3-5ff09806bf6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d954efb-a0c5-4154-b405-51b415e12879",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de88a39b-32ad-4e71-8c8a-5302b4756276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eee152c-6968-4b00-be0f-3cc62cf3685c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf32867-a630-4249-b861-3b591e56c5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a91e545-3f15-458a-9247-92fd00ddbf65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb718c50-982e-44d6-92ac-d16b707040d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a00652a-0d2c-4d35-91a7-b13f5edddcc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573e4ac0-d447-46aa-b769-56e14a2c8701",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c243615e-9fa3-4899-9716-8e98f13b6c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9957c29-28e8-4351-b53b-072b569af5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93ddda3-efdf-472b-8369-c239fdb4cd15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc7e1a2b-6b9e-4b5c-8e9d-2dde2944ca74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1c1eb5-d419-463a-aa3c-f5acad111ce1",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32557226-aa38-40c8-9e26-f7ad4e56a166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800ed676-cd84-490f-84c6-8b191a94ef2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9deb19a-7e0e-4dac-8b98-0a17a99dc484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ea535cb5-c2d0-4913-9e16-1c06bbd1541a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce34278-2460-4ab3-94c6-181a6af57623",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6418071f-620a-4155-a470-d1fbf845e146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209d091e-703f-424d-bf18-ad67817fbe81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6163201a-be01-401c-8cc1-7c0c7489462f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "50148c25-7170-440c-89a4-70f632b588f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b952ee-dd71-4f7c-938c-08b0be875775",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fd0800-2d41-45d5-bbe9-822a51301379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8470919-4b28-4e8c-a6db-3fd554d967a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26476d13-839e-4636-9d33-fb6a83db01b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f48b81a-7c9b-48ab-a721-0fc0a42158a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1590f882-4fb4-4b63-ab4d-89abe84293c4",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596ce577-755d-430f-9a01-7af316cb429e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c15358c-bdc8-44db-b41a-20b870126ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59247457-0789-41ca-953a-7d77a0057b0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c76bb73-25a7-40b2-a280-810bb416c80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea5f40d-8662-4f12-aabd-f590851a1adc",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddd7953-b5e9-4f0d-a987-22f9dd21309f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bec8108-d7da-4fc4-a43c-3aa38dd15b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7b4ff7-3307-431f-ae07-5234bef80a8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "39aee273-88ac-4cdd-bf0a-617f5a4787ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bef86b2-5638-45f9-a5e4-51975eb68e82",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc66df7-de3f-40f3-99bc-4c054692b6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625fc473-08f2-4ad4-bc34-9d45314ce9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab4e542-0187-48a5-b7ba-4b7a20811138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "e15dd176-0c2b-4da4-b926-7079f54d9d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fc5cdb-05c2-440d-9462-86277cda2375",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c5c646-f3a7-4619-90ab-4b4d92d12d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4561719c-41cd-4ff3-9335-2006e0329928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f76ac77-3665-4d80-8d83-30be78f6004f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "331e2108-3ab2-433b-9708-ac62e4a93264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940aee9b-c97c-4d0f-b639-bb4ea608e2f0",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8173379d-288e-4118-b1d0-e967baea9b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f89d1aa-1cdf-4226-b89a-5a69b0bd4c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff40393c-2e9b-4fde-8816-cf665fda8429",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29c32848-568d-48ad-9e81-408c6ba2d618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89521e02-0896-4407-a553-9728184567ba",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72406b9-a307-4933-b984-ea7e0df86e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc27e9e-698c-4730-88db-edf4717bd5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38dae040-25a9-490c-ba4c-c539006b8440",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4db122bb-1cb1-453d-8821-5db8e6e3d0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f547f9-c51d-4df5-abd9-de5effdba913",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42128ae-9063-430b-b2d7-fa210e3a63cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a9356d-b667-40f5-9120-c792a61b1628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21e4a09-63db-4500-a4af-c2e315dd5d79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52448a39-59af-44b7-8a2f-45e7a2329e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e478b1-96e4-48c1-a9d5-11129ff258a9",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f03624-f456-418a-a982-df4a2a3b91b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9a4f5a-51db-4804-ab51-c63f3a16a8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da58e1ab-6882-4ac4-8a27-61bffb0e53c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b7966ac-f4c1-44db-b76d-bf15e536b533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64885110-0911-489e-951b-1c146957825e",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650ada09-a47d-4bd6-8eb8-8e79f9faccfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dadef72-bbf8-48c3-be72-3c2575827b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a3856b-870f-4af7-957d-40c4a88c8eaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ac4f31a-cfec-4bc4-852e-5a5cd0f9b41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f9bf0a-3776-4856-905e-ac5683f763ca",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a82548-ba10-4e0f-aa49-de472ae15ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483d32be-e879-48de-94c5-3dce6aff7521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b31ad2-3cbc-427e-8544-65408a341fd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f18377ec-92cd-4ed1-9362-a4b5ecbe31cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a67d855-6e4b-4962-a884-bacd03d9e815",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0eae69-40ec-41fc-99bc-9a1de2b71d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa77cb6-beee-427d-97ac-4cad7f473c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05306343-b308-4f25-b48f-1ecb8a43acc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "effabe6c-8e73-4e3e-abd5-f6360f5f97a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043734cf-b7a8-40e6-a209-c9acbd9bac87",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cac43ef-cae4-4cc5-a0d8-768a8fc336d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f4f27e-5820-448e-8c72-3f0e026d286a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8baaa116-27b2-4e27-9234-1345e9b190d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d710e43-b845-4cde-ab46-587998135fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f4599e-6917-4b85-a4b4-72f99bb6f46c",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac212c21-b767-48c1-b5d7-85a577ab43b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92777e05-5eb9-4641-b495-de202af16b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1001135d-85dd-4104-9ff8-0090a72a8cab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbc80fb8-472c-4076-a177-2df73a593964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8912e114-a665-41e5-a4d3-d58007a7ffba",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bece6a65-cfac-4f2b-8aed-68033c02d458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa24acc-9c71-4a36-9be4-bc817922152f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84635d00-5a30-4fa6-afab-1074488651f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b064de4c-eea5-4124-b47b-a6b1bd91dd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eee4ddd-6fe6-474d-8844-e630931dc212",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d974d0a-9a4c-495c-8f49-aa3ec4c53e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6919da20-af8a-45b9-81f4-e082a5e7e68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e08443-f78d-47ce-b679-e2847f8ee47f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "883f7e55-3680-4259-869f-92412bfdc1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925c2f36-0c6f-48b9-9795-9979962e06ef",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77635b91-af53-41bb-b43b-ec1570acf492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8957ddff-6281-494d-a68a-e33e97fdff18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e32b64-33d5-4a91-b89b-c3705755a875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ba330f-35f9-4142-91ef-e664e1485e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cc17c9-6ef6-48de-acbf-fc06b449f4e2",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ead140-48e3-4028-8245-5926ae4124cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b859710-2f75-4e55-9a68-602d83ca045f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f8a806-108e-4d09-8161-dca601572bb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d0f48e4-dc70-42a6-a92c-d65f423d0991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be672651-99c7-47b5-a599-ab47ddf4ece9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0107e2c3-0e0d-49b6-994c-77ed42dc660a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "de7bbdbc-abab-4a62-9f37-a1e8929c3f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43a27c9-44d2-4890-9520-358c5658993b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "723d17ad-b6e8-4af2-bffd-a023159a3e08"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9ef9fb43-8de5-4be5-88d8-fb29b0ec5ca2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d1e06c3-3016-4088-bf93-29c3bf89f154",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d951f929-3e2e-4255-8edc-37640bb16023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7aadd8c5-2c89-4846-b3fe-a69aa83d4a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948ed7e7-075c-46bb-8e96-d96ad9d16083",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4a757813-d109-44a5-828a-e585d578f854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d3bc6a-8f3b-4f07-9bcd-a62685521f70",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1542b0-a168-4641-9f87-096e1aacc6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac134a6a-0ca5-4adb-99af-2693983491a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2371b0ee-ea70-4518-8cdf-02dad48b7edc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "08546311-73a1-48f3-ac7f-ef608bd78fcc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7e14307-9b15-4d56-9333-3252ce45c8ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f41c31c7-c4c5-4efc-8cb5-d9561b893198"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7da6d105-5d26-4074-aae4-cf8b353a336d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8532a04e-823d-4867-bd57-06360a45666a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ff1a5a9-c061-45be-ab9c-1e0b693cf4eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9dd464ef-babf-46e1-ba04-cf1c263968b1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1d7c2429-729d-4ddd-b922-f9142dd69030",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e26f9097-bd48-46b0-bb9d-65bc31d0cdc1"
                }
              }
            ]
          },
          {
            "id": "6199d772-2b9c-4ec8-a43b-aed01eb6ad78",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f7bc49f-5a6b-4f4a-9e9d-938cb51b3461",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f272c27-ed8f-4894-8a68-fdf946e61a4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "99a05c51-b4ac-4764-a3b9-2a5f0799055e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f17ee12-1af6-47f6-806c-52055e988229",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "064d766d-1fe2-4e67-99a3-6437b9b4fd81"
                    }
                  }
                ]
              },
              {
                "id": "cd7bb879-a3c8-4972-9aa6-9f8b5d1d024b",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3c03569-ac24-44f8-a6b7-89c4d344f2b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43f99077-dce6-4baf-a155-4ef890b9fb30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4b4c90e-1a81-4c71-ae19-0e2dd2b48e05",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f7f1289a-7fcf-438a-9b81-83af9226f76f"
                    }
                  }
                ]
              },
              {
                "id": "36634c33-1819-4584-a6a4-3b3387c5ea48",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d94d3b7c-3531-4a34-bf5e-648ece5750a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dea2248c-9d67-49a0-b08d-e7f9c1fd675b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa209d0e-5e10-4f2f-8975-d2acd1e05d30",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "88a2ef10-ccc0-472f-b5c1-a2357f7b9d28"
                    }
                  }
                ]
              },
              {
                "id": "d8a4d175-e115-483d-a272-f2adb1b951ed",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a461c6c-f62f-4358-87f3-20df05c935b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4c7f2cd-afba-4d93-9b69-a2b28a5d0e4a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b264a713-3d48-462f-86a3-d88e88ffe8ba",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2cc81b34-8079-49c0-bb75-bd65200f6769"
                    }
                  }
                ]
              },
              {
                "id": "6bebbb03-9ecd-4854-9986-3a5723d3b214",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e1d9802-2ecf-48bf-a229-1af7eb4b7d3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "5f0803e1-7dbb-41f3-ae0e-7d31df19871d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44d43a2d-5fd6-4321-b2fe-6b636931303d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f9eb0924-bc29-4e86-9381-db66f9cde80d"
                    }
                  }
                ]
              },
              {
                "id": "416ddee5-428a-47d8-9a96-63913037fbe5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02b0f605-f73c-4a47-9e0c-b63b18b27803",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a998a331-3af3-43ba-8b3e-966b55bacbc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e2e4a36-129c-4410-a490-e25769ef79c1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "97d5e250-6ef6-443d-bc60-02cd6238b425"
                    }
                  }
                ]
              },
              {
                "id": "a574a58e-3f23-4e7b-879f-44ed083a2d65",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a45dec2-45c9-427d-81d1-fb4fadc40679",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d75a5bf-57b2-41d3-a598-7cccb5f1c4d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5aa54fb3-d3bb-4e34-94ca-efc8a008f992",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e03684b7-32eb-4b1d-8c67-e6e90e77c723"
                    }
                  }
                ]
              },
              {
                "id": "d28dc3b5-8eda-45ce-b905-d15cc17aefb3",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0be3637a-254f-4731-8eab-c0d7bdecad7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0936504-3aaa-46bd-b66e-e9b41ee450a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f0e1579-ff21-4331-8c1b-8e1fc1156b23",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d300bc7a-b478-4194-946c-c2342e1eb9c9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "efdd5294-9d38-4a1f-b295-0e2cce82645e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "936e22e8-31aa-4f7b-867a-6c0a9f69a150"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "185de2ad-e693-4c4f-9c00-8af3c878b2f2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6bd66b6e-30d7-492b-9e9c-b52d592a35eb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7127701e-7e05-4285-a87b-caad8362ea9f",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "ff354faf-f2d3-4222-9f49-bf1cd8980ea8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a06221d2-df43-48c8-bd43-bb1c456671e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "419490f9-da1f-4184-9fbd-b62be83ba9ae"
            }
          }
        ]
      },
      {
        "id": "94446714-2045-46dd-8376-1c1a9410b9ee",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b5156ac9-06a0-4b71-b139-8b3f8b1c74e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "606bd560-765b-45fe-9988-89255cc4d037",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e708e3b3-4f49-4fde-8192-5a07d947aa59",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8a96eb-f04a-4646-9ab4-5a2f27a32e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aeb075a-62e9-4b94-b98c-ae778aa79ac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af43612-ad04-4ca6-9397-9013f8b92908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a0408a1-3e8e-4ce4-96d4-cc31baf7e615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc183f39-ee1b-409d-80e7-b210daaedada",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecb6022-1249-4c29-a4ef-01426726d936",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8f64796e-5203-414a-87c4-512057771d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0c8495-5be5-472c-8b56-5097d0737cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fe8c1d8-4965-4c16-9841-2edc67c12d1f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01d7819b-949a-4fa0-a7e3-db1c72eba847",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4852c091-4d2f-4e03-89b6-fa15ee92565d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c0ed654-263e-4385-ad8b-d011ff1f38cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a51994a-ba67-41b4-a806-6d2dc8687011"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8478636d-c825-4ab9-8d1f-ff0821ce7fec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "046523fd-3d9e-4160-b650-c511d0955ed3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e07f6f3-c1c6-496b-9260-eba5ad5f6361",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48e6dddb-51aa-453f-8fbf-d3073bf2dd51"
            }
          }
        ]
      },
      {
        "id": "44dd082c-d699-42f7-986d-8fecd7ca5c6b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "823dbcfa-ec38-48a3-8966-2f5d77e93901",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ea80c69-e281-4164-8166-90429286c43c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27513399-c9cd-4259-ac33-483d1f535635",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d39a0e-d2f6-415e-baed-ba4329b7b8ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "a76ed6b1-562c-4c91-8fb1-6f6a3f309208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3e33c1-b521-4443-b87a-b34e1441e54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96e9ea1c-28de-47a8-aba9-62a3f22df43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dea4d5-f281-4752-9be6-bb33c821ead9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e788e1bb-9e30-4e88-8d7b-bd8c45d33296",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "14a52994-2a55-4e1a-93ec-eb28312f25ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb8fc09-75da-4152-9e49-329ac2fc43e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36b643c3-8d95-4a1f-8f84-144d0b78506c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "673d7eb4-37db-4d6a-9de1-08cc6868a83e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fba7f2d-f683-4b99-8611-8b36fe6c481e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2dbbe914-ad8f-4d0e-ac71-ccaf82df7514",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a35fc49-706e-4bf7-9c42-3fa98ffa3c96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c4e78b9-a2ad-45de-93b0-a46b5aec6553",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2f817d43-2ccb-4c68-98d7-46b7a8ddf39e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdee287c-7258-4127-99f4-478dc0ce26c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92d3f78d-9323-4007-ad8d-608cdc2e6b0f"
            }
          }
        ]
      },
      {
        "id": "84095900-d903-4edc-ac1c-f1745734c566",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1655a1bf-7f5d-42f1-b993-b1388ead654e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2202e0fd-e39e-4d37-9f34-f9b3e3e3a93d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3341d894-cdcf-4467-978e-5f54be2c7991",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d2a423-606f-4482-84ca-e0fcb1fbf497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d2b6fa-5725-447f-8a78-3350272bb5d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b17dcb4-f296-4956-a141-ffed2600056c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c06b010d-9f9f-4ca3-89c8-33f07ad78bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e22b8e0-4267-46ea-97c8-a65f69827e08",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f9e3ea-19dc-45b6-8de1-c5e5f7d46b90",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9c0e1b8c-ac74-42c3-b036-2792d3518af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79459ba-cac3-4a07-9320-48435b44532e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1da8fba-7e58-4b81-b9f1-03ead3d29dec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f63741d-0721-4b22-bcf5-118603bb5de2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "348cd977-9d34-40bc-8137-f4394b78429c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b2ca091-6d84-4195-82f2-fca44f7fb2e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bd55fa6-a0a3-4b44-b0c7-e57de69fb263"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "542cd996-b8b7-4ed7-908a-0437fa5f5530",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "f16eff8d-3fb9-4faa-beac-395eb0b3d79d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d1cf44b-f0ae-4d50-b7f3-d1a58fa26735",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7a7d8910-43eb-49aa-8c5d-de04a793a228"
            }
          }
        ]
      },
      {
        "id": "8844e734-300a-42e3-828f-164a7f297726",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c8b18bc8-f4ad-4463-aa2a-501a39f742ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8b30716b-057d-429a-a39c-20782b7aa523",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba2bd243-fd43-44fd-9dd3-525fc56549a6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f9c9bf-39b5-4add-9e74-f6b73c12b8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a71d92-a973-4076-b0cf-07d78c32a517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "220faceb-6e12-411b-bcfa-5c3fab4944b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea9ea226-b70c-41c9-812f-d69a19b336db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160fa918-bb64-43be-8a15-1025293a91f1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430cb716-ef31-4d96-92e7-bc181eedcd4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6d4b9c1e-10c0-4818-82ac-1dc63194cae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cf1f39-d99d-45e2-8659-6f0db22639f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abc914e6-7ec7-4818-b0b1-318b6920239e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "503862be-47b7-4d01-90d7-cf7395f1f33d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4e58232-0fc3-4e68-bdc3-bcbb6cf880d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "841fcce7-8c6c-4278-a0fe-dce0a4e49142",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5e1ce85-1233-4a2d-94fd-b0bbbcc140fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f540a1b-1064-48db-90e5-4d1a96f39efd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "1c1094af-5db2-4a67-8d9b-88c9dd990f31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "514ceebb-308c-473f-94ee-85996f88aad5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1934b15-0236-470b-a8b1-4c7354dc93a8"
            }
          }
        ]
      },
      {
        "id": "e49adf62-8a58-4ae3-9f69-09d6f28e3c2a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f100b1b1-3a10-48a3-937e-2d3eef21a31a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9013fc16-399d-4f8e-bf4a-73c7d60fb5d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f851b2a8-7f3a-416c-a5d7-fc13d75a1c66",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d74770a-1d30-41d2-a3ec-59e58f8b68f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def123ca-4d4d-4716-aa77-5d98ff93d9cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8430e616-56ac-4a6f-86e4-a847b8891aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da0dc779-8682-4a56-b052-39b750d65be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae4584f-8d1f-4cab-b2a7-cbb3f4a2e107",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896fbcb5-f4a8-4715-8d70-810d0ddb187c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9d3e03a4-c034-4b15-a654-ee4fb58e5846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99730ce8-3c9e-4ca2-9b76-8c9189a159dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c310b0c5-bd8b-46df-8dec-92e6c9c4b0b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea42e982-64bd-4534-97e4-92b588978e66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1595154-6738-4ddc-a778-9e633a800e91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05ce49d2-4846-42a7-b046-31c54b9f65d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc139f0e-1c13-4616-9bca-c7f76e864bf5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1324f061-a370-4b18-85b6-7477e1f42f9a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "4cacdf84-76c8-438a-a4b9-3b086ac2912d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3af5b0a9-b70b-460b-9b3a-f43bdcd665a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa2a781e-1f61-4c36-9e36-b85c6906bd7d"
            }
          }
        ]
      },
      {
        "id": "9adb7c9c-bbe9-464b-ae14-15e08780de23",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "2f6c13a5-0c19-45a3-9c24-df24aae42b87",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 22
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.30841121495325,
      "responseMin": 33,
      "responseMax": 883,
      "responseSd": 105.06637076486491,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662252500812,
      "completed": 1662252511574
    },
    "executions": [
      {
        "id": "79339950-5a40-407d-aace-358ae9387e54",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f1b0c27b-55ab-4b05-8560-8821fc039acb",
          "httpRequestId": "122ba8a8-841b-41be-bb2b-7cdce6c1f721"
        },
        "item": {
          "id": "79339950-5a40-407d-aace-358ae9387e54",
          "name": "did_json"
        },
        "response": {
          "id": "d9562376-34cc-4093-87d7-bdae32ccd2f6",
          "status": "OK",
          "code": 200,
          "responseTime": 242,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d983cab-5093-46a8-969b-9fc17af03c20",
        "cursor": {
          "ref": "2f5dc1c8-8bdb-4d14-861a-426c2ec24040",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5288ecb4-4e60-4748-bdf5-5b78542d054e"
        },
        "item": {
          "id": "5d983cab-5093-46a8-969b-9fc17af03c20",
          "name": "did:invalid"
        },
        "response": {
          "id": "3352cf20-a579-41de-8f97-d88a4aa97e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d983cab-5093-46a8-969b-9fc17af03c20",
        "cursor": {
          "ref": "2f5dc1c8-8bdb-4d14-861a-426c2ec24040",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5288ecb4-4e60-4748-bdf5-5b78542d054e"
        },
        "item": {
          "id": "5d983cab-5093-46a8-969b-9fc17af03c20",
          "name": "did:invalid"
        },
        "response": {
          "id": "3352cf20-a579-41de-8f97-d88a4aa97e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087f8533-c234-4ced-897d-2b44d28bb978",
        "cursor": {
          "ref": "b7d9101c-c76e-4a5c-88ee-546b412beb9f",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "57d21fb2-428b-4585-8350-b1cb73cf13b8"
        },
        "item": {
          "id": "087f8533-c234-4ced-897d-2b44d28bb978",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e7f99857-94d9-47fc-b2f0-aa22d2bc1f40",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2838d2-abb2-40c6-81d1-23504a0b530c",
        "cursor": {
          "ref": "5bb1669f-d439-4f44-8adc-439b89bb4af0",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5e7d1566-56a1-4620-b9de-c98ec3608294"
        },
        "item": {
          "id": "ce2838d2-abb2-40c6-81d1-23504a0b530c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3951d385-dd83-45de-9b2f-71f164598487",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35001890-f340-4271-b677-e3e5e50be30a",
        "cursor": {
          "ref": "12abdfb1-a1d0-4f2c-aa5b-c6b789fe350f",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "069cdc75-33c9-4f06-bd1b-8a8c2d90c8d2"
        },
        "item": {
          "id": "35001890-f340-4271-b677-e3e5e50be30a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6ec338f9-951b-4fc6-8a2f-c653c9d7cb64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b410d6b-f8ab-45c6-b75b-ef9eba4eb026",
        "cursor": {
          "ref": "8596fb74-31a8-4b09-820e-7da40b7a1d02",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "902065b7-5fcc-4b30-a632-f61286a83d49"
        },
        "item": {
          "id": "5b410d6b-f8ab-45c6-b75b-ef9eba4eb026",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cc7eb554-d198-463e-8f77-4ebcc7378b49",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b410d6b-f8ab-45c6-b75b-ef9eba4eb026",
        "cursor": {
          "ref": "8596fb74-31a8-4b09-820e-7da40b7a1d02",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "902065b7-5fcc-4b30-a632-f61286a83d49"
        },
        "item": {
          "id": "5b410d6b-f8ab-45c6-b75b-ef9eba4eb026",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cc7eb554-d198-463e-8f77-4ebcc7378b49",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11066b8-82f7-4e23-80ea-463288d33b08",
        "cursor": {
          "ref": "bd01dd3f-1c12-4570-b6f0-b56a866cb3f6",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "360c5b13-3a21-4db2-a569-5f556aa32602"
        },
        "item": {
          "id": "c11066b8-82f7-4e23-80ea-463288d33b08",
          "name": "identifiers"
        },
        "response": {
          "id": "a5af3d26-c51c-4102-b782-91599059b0ad",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354ea0d5-47da-49cf-a277-a3b00d1728c8",
        "cursor": {
          "ref": "66b07d0e-208c-413a-a10d-5b6c12cfb5ae",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a08380de-743f-4041-8761-68a1152ebb79"
        },
        "item": {
          "id": "354ea0d5-47da-49cf-a277-a3b00d1728c8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9b257e32-c155-4c29-9292-17d6638fcc06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354ea0d5-47da-49cf-a277-a3b00d1728c8",
        "cursor": {
          "ref": "66b07d0e-208c-413a-a10d-5b6c12cfb5ae",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a08380de-743f-4041-8761-68a1152ebb79"
        },
        "item": {
          "id": "354ea0d5-47da-49cf-a277-a3b00d1728c8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9b257e32-c155-4c29-9292-17d6638fcc06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354ea0d5-47da-49cf-a277-a3b00d1728c8",
        "cursor": {
          "ref": "66b07d0e-208c-413a-a10d-5b6c12cfb5ae",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a08380de-743f-4041-8761-68a1152ebb79"
        },
        "item": {
          "id": "354ea0d5-47da-49cf-a277-a3b00d1728c8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9b257e32-c155-4c29-9292-17d6638fcc06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd71a23c-d3da-489c-a34c-237d78ba464f",
        "cursor": {
          "ref": "38313799-aa27-4427-84f0-4417c5eb368a",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "97650a4e-6f99-4a3f-823f-b08fda271b00"
        },
        "item": {
          "id": "dd71a23c-d3da-489c-a34c-237d78ba464f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9efc1948-8bf6-46b2-8242-5c9e65b28486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd71a23c-d3da-489c-a34c-237d78ba464f",
        "cursor": {
          "ref": "38313799-aa27-4427-84f0-4417c5eb368a",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "97650a4e-6f99-4a3f-823f-b08fda271b00"
        },
        "item": {
          "id": "dd71a23c-d3da-489c-a34c-237d78ba464f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9efc1948-8bf6-46b2-8242-5c9e65b28486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f331db1b-07b6-4138-9655-8aead71e1576",
        "cursor": {
          "ref": "96053c95-2c2e-4b29-a75e-62eba9d23818",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "02194992-09ce-41a9-b50c-9c1bdac7cc51"
        },
        "item": {
          "id": "f331db1b-07b6-4138-9655-8aead71e1576",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2e290bd8-e5a7-428d-8323-326d9afb089f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f331db1b-07b6-4138-9655-8aead71e1576",
        "cursor": {
          "ref": "96053c95-2c2e-4b29-a75e-62eba9d23818",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "02194992-09ce-41a9-b50c-9c1bdac7cc51"
        },
        "item": {
          "id": "f331db1b-07b6-4138-9655-8aead71e1576",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2e290bd8-e5a7-428d-8323-326d9afb089f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76744395-38a1-4a8f-96b4-abb4022b5e09",
        "cursor": {
          "ref": "c8d10003-e0dd-46cd-b03b-722f9ccc86b7",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a56b238b-2e6a-40b1-8654-524d83d03a64"
        },
        "item": {
          "id": "76744395-38a1-4a8f-96b4-abb4022b5e09",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "715f7352-e790-4b40-9cc6-82ee2ee1f126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76744395-38a1-4a8f-96b4-abb4022b5e09",
        "cursor": {
          "ref": "c8d10003-e0dd-46cd-b03b-722f9ccc86b7",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a56b238b-2e6a-40b1-8654-524d83d03a64"
        },
        "item": {
          "id": "76744395-38a1-4a8f-96b4-abb4022b5e09",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "715f7352-e790-4b40-9cc6-82ee2ee1f126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2677e17-370b-475b-95b1-2437565d9f6c",
        "cursor": {
          "ref": "d811a21f-5e13-4bfb-a25b-733b02645b01",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c277241d-be76-4936-a101-f789d4f24d4c"
        },
        "item": {
          "id": "f2677e17-370b-475b-95b1-2437565d9f6c",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "e20d16c7-307d-43ab-88c3-c02955db5bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2677e17-370b-475b-95b1-2437565d9f6c",
        "cursor": {
          "ref": "d811a21f-5e13-4bfb-a25b-733b02645b01",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c277241d-be76-4936-a101-f789d4f24d4c"
        },
        "item": {
          "id": "f2677e17-370b-475b-95b1-2437565d9f6c",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "e20d16c7-307d-43ab-88c3-c02955db5bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2833c7b3-48fa-4b33-8b32-c71486f386a2",
        "cursor": {
          "ref": "0d406760-42a8-42ea-b515-d2e23950dd23",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3a4a58fd-cd5f-4410-95d3-a94dde8c6834"
        },
        "item": {
          "id": "2833c7b3-48fa-4b33-8b32-c71486f386a2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c2004fd6-0b04-42fa-92f1-6a149bf6fb07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2833c7b3-48fa-4b33-8b32-c71486f386a2",
        "cursor": {
          "ref": "0d406760-42a8-42ea-b515-d2e23950dd23",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3a4a58fd-cd5f-4410-95d3-a94dde8c6834"
        },
        "item": {
          "id": "2833c7b3-48fa-4b33-8b32-c71486f386a2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c2004fd6-0b04-42fa-92f1-6a149bf6fb07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ac3f9c-6735-4f1b-845b-96e2b06fe76c",
        "cursor": {
          "ref": "538e3566-280a-4179-834b-fe143d8e1491",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ab2e1c2f-26b2-43c8-966a-c2e6f1e15051"
        },
        "item": {
          "id": "b8ac3f9c-6735-4f1b-845b-96e2b06fe76c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "9765d32f-aede-42ea-ad82-15f0fb0538e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ac3f9c-6735-4f1b-845b-96e2b06fe76c",
        "cursor": {
          "ref": "538e3566-280a-4179-834b-fe143d8e1491",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ab2e1c2f-26b2-43c8-966a-c2e6f1e15051"
        },
        "item": {
          "id": "b8ac3f9c-6735-4f1b-845b-96e2b06fe76c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "9765d32f-aede-42ea-ad82-15f0fb0538e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c751999-7df4-4979-9b82-bd67ecef3a98",
        "cursor": {
          "ref": "725d5f3b-fba4-46de-94ba-4a4bfee016ca",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "876b9078-7278-4a85-b6ec-5c0d102147e1"
        },
        "item": {
          "id": "1c751999-7df4-4979-9b82-bd67ecef3a98",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "e2755a42-752d-449c-9195-9588de8042f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c751999-7df4-4979-9b82-bd67ecef3a98",
        "cursor": {
          "ref": "725d5f3b-fba4-46de-94ba-4a4bfee016ca",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "876b9078-7278-4a85-b6ec-5c0d102147e1"
        },
        "item": {
          "id": "1c751999-7df4-4979-9b82-bd67ecef3a98",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "e2755a42-752d-449c-9195-9588de8042f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eee152c-6968-4b00-be0f-3cc62cf3685c",
        "cursor": {
          "ref": "6f852d18-b5eb-4015-a871-71ed688743cf",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f8b62aba-6396-42a2-a61e-d02e99cff4a3"
        },
        "item": {
          "id": "9eee152c-6968-4b00-be0f-3cc62cf3685c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "eb0d4530-c2ed-40e7-8e22-c08403d804f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eee152c-6968-4b00-be0f-3cc62cf3685c",
        "cursor": {
          "ref": "6f852d18-b5eb-4015-a871-71ed688743cf",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f8b62aba-6396-42a2-a61e-d02e99cff4a3"
        },
        "item": {
          "id": "9eee152c-6968-4b00-be0f-3cc62cf3685c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "eb0d4530-c2ed-40e7-8e22-c08403d804f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573e4ac0-d447-46aa-b769-56e14a2c8701",
        "cursor": {
          "ref": "fd2706ee-395e-49da-b590-74a4cc585a4d",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "853b7359-e2f4-42df-80af-de26399ae115"
        },
        "item": {
          "id": "573e4ac0-d447-46aa-b769-56e14a2c8701",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "67e8401a-7cf5-41b2-9591-23913b5261cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573e4ac0-d447-46aa-b769-56e14a2c8701",
        "cursor": {
          "ref": "fd2706ee-395e-49da-b590-74a4cc585a4d",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "853b7359-e2f4-42df-80af-de26399ae115"
        },
        "item": {
          "id": "573e4ac0-d447-46aa-b769-56e14a2c8701",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "67e8401a-7cf5-41b2-9591-23913b5261cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1c1eb5-d419-463a-aa3c-f5acad111ce1",
        "cursor": {
          "ref": "938a0f30-e7b6-44ec-a2de-244b0290dea7",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ee20f894-d900-4f48-9cdd-ddf73106437d"
        },
        "item": {
          "id": "4c1c1eb5-d419-463a-aa3c-f5acad111ce1",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "55a1dcbd-1a36-4e46-b058-634672d615d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1c1eb5-d419-463a-aa3c-f5acad111ce1",
        "cursor": {
          "ref": "938a0f30-e7b6-44ec-a2de-244b0290dea7",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ee20f894-d900-4f48-9cdd-ddf73106437d"
        },
        "item": {
          "id": "4c1c1eb5-d419-463a-aa3c-f5acad111ce1",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "55a1dcbd-1a36-4e46-b058-634672d615d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce34278-2460-4ab3-94c6-181a6af57623",
        "cursor": {
          "ref": "ebe50c4b-9097-4bc8-854f-c2acd6ed9895",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "143000f0-f421-4ace-a59e-35c90f9e010c"
        },
        "item": {
          "id": "2ce34278-2460-4ab3-94c6-181a6af57623",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ec6a46c4-beae-47d7-bc34-a3b6f1c70fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce34278-2460-4ab3-94c6-181a6af57623",
        "cursor": {
          "ref": "ebe50c4b-9097-4bc8-854f-c2acd6ed9895",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "143000f0-f421-4ace-a59e-35c90f9e010c"
        },
        "item": {
          "id": "2ce34278-2460-4ab3-94c6-181a6af57623",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ec6a46c4-beae-47d7-bc34-a3b6f1c70fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b952ee-dd71-4f7c-938c-08b0be875775",
        "cursor": {
          "ref": "998cc882-5d03-4210-a233-dee1442e970c",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "14ed1c46-5ac0-4105-97bd-c63d5c7b2bfb"
        },
        "item": {
          "id": "f7b952ee-dd71-4f7c-938c-08b0be875775",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6a9f2cc1-0e41-4f5b-9c7a-ed6a6a9ea09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b952ee-dd71-4f7c-938c-08b0be875775",
        "cursor": {
          "ref": "998cc882-5d03-4210-a233-dee1442e970c",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "14ed1c46-5ac0-4105-97bd-c63d5c7b2bfb"
        },
        "item": {
          "id": "f7b952ee-dd71-4f7c-938c-08b0be875775",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6a9f2cc1-0e41-4f5b-9c7a-ed6a6a9ea09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1590f882-4fb4-4b63-ab4d-89abe84293c4",
        "cursor": {
          "ref": "7288c047-92ad-402e-9d9b-06aa8aad3c7e",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f947c210-daaa-446b-bf7b-7a4c64170e57"
        },
        "item": {
          "id": "1590f882-4fb4-4b63-ab4d-89abe84293c4",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "e8ee0484-b2bc-4769-9470-064d0f6b6cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1590f882-4fb4-4b63-ab4d-89abe84293c4",
        "cursor": {
          "ref": "7288c047-92ad-402e-9d9b-06aa8aad3c7e",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f947c210-daaa-446b-bf7b-7a4c64170e57"
        },
        "item": {
          "id": "1590f882-4fb4-4b63-ab4d-89abe84293c4",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "e8ee0484-b2bc-4769-9470-064d0f6b6cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea5f40d-8662-4f12-aabd-f590851a1adc",
        "cursor": {
          "ref": "af3e8f1c-ff12-4fd7-8d75-b5a4428e501f",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e1c63366-0d83-4d97-b1b0-f9877797aed9"
        },
        "item": {
          "id": "6ea5f40d-8662-4f12-aabd-f590851a1adc",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "2f606aff-05eb-486d-afde-a629c3f01732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea5f40d-8662-4f12-aabd-f590851a1adc",
        "cursor": {
          "ref": "af3e8f1c-ff12-4fd7-8d75-b5a4428e501f",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e1c63366-0d83-4d97-b1b0-f9877797aed9"
        },
        "item": {
          "id": "6ea5f40d-8662-4f12-aabd-f590851a1adc",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "2f606aff-05eb-486d-afde-a629c3f01732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bef86b2-5638-45f9-a5e4-51975eb68e82",
        "cursor": {
          "ref": "71c64ce9-5d81-4a53-940e-34c0b2a5e03d",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f37166c8-435d-47c2-aa7f-de2b6a240aa1"
        },
        "item": {
          "id": "1bef86b2-5638-45f9-a5e4-51975eb68e82",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4729a850-c821-45e2-8292-51db2b4751bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bef86b2-5638-45f9-a5e4-51975eb68e82",
        "cursor": {
          "ref": "71c64ce9-5d81-4a53-940e-34c0b2a5e03d",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f37166c8-435d-47c2-aa7f-de2b6a240aa1"
        },
        "item": {
          "id": "1bef86b2-5638-45f9-a5e4-51975eb68e82",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4729a850-c821-45e2-8292-51db2b4751bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fc5cdb-05c2-440d-9462-86277cda2375",
        "cursor": {
          "ref": "704c49d1-d43a-4cb3-9fd8-eae78a472883",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8612e132-b96f-4105-954e-3c373bdca96d"
        },
        "item": {
          "id": "64fc5cdb-05c2-440d-9462-86277cda2375",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9e0a523c-dfed-4840-b5f6-2b353a02d77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fc5cdb-05c2-440d-9462-86277cda2375",
        "cursor": {
          "ref": "704c49d1-d43a-4cb3-9fd8-eae78a472883",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8612e132-b96f-4105-954e-3c373bdca96d"
        },
        "item": {
          "id": "64fc5cdb-05c2-440d-9462-86277cda2375",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9e0a523c-dfed-4840-b5f6-2b353a02d77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940aee9b-c97c-4d0f-b639-bb4ea608e2f0",
        "cursor": {
          "ref": "e4b15d6f-6e2c-4d88-ab0e-bafcdaccdfe7",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4477094c-4494-46b4-8264-4f2290d161b7"
        },
        "item": {
          "id": "940aee9b-c97c-4d0f-b639-bb4ea608e2f0",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "fc359137-72d6-449f-86e7-282ba6e849ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940aee9b-c97c-4d0f-b639-bb4ea608e2f0",
        "cursor": {
          "ref": "e4b15d6f-6e2c-4d88-ab0e-bafcdaccdfe7",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4477094c-4494-46b4-8264-4f2290d161b7"
        },
        "item": {
          "id": "940aee9b-c97c-4d0f-b639-bb4ea608e2f0",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "fc359137-72d6-449f-86e7-282ba6e849ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89521e02-0896-4407-a553-9728184567ba",
        "cursor": {
          "ref": "97a2d02e-f834-44ff-a14c-b87164531e0a",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f86660f7-75c7-42cb-be7f-68f8f0cfe91d"
        },
        "item": {
          "id": "89521e02-0896-4407-a553-9728184567ba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8bccd433-d55f-4665-80a0-78ef55375b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89521e02-0896-4407-a553-9728184567ba",
        "cursor": {
          "ref": "97a2d02e-f834-44ff-a14c-b87164531e0a",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f86660f7-75c7-42cb-be7f-68f8f0cfe91d"
        },
        "item": {
          "id": "89521e02-0896-4407-a553-9728184567ba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8bccd433-d55f-4665-80a0-78ef55375b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f547f9-c51d-4df5-abd9-de5effdba913",
        "cursor": {
          "ref": "1e900970-f082-4b94-85fb-515fe81f525f",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "80be9a09-bded-4484-aa4b-e4c1a34b8e45"
        },
        "item": {
          "id": "f1f547f9-c51d-4df5-abd9-de5effdba913",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "baf3445d-7dc1-4381-985c-3a9e0f31ebe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f547f9-c51d-4df5-abd9-de5effdba913",
        "cursor": {
          "ref": "1e900970-f082-4b94-85fb-515fe81f525f",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "80be9a09-bded-4484-aa4b-e4c1a34b8e45"
        },
        "item": {
          "id": "f1f547f9-c51d-4df5-abd9-de5effdba913",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "baf3445d-7dc1-4381-985c-3a9e0f31ebe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e478b1-96e4-48c1-a9d5-11129ff258a9",
        "cursor": {
          "ref": "2037cbaf-3ff0-4b56-bda7-712c2cb25a43",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "edbd3ef2-c349-498d-959a-8119334573b9"
        },
        "item": {
          "id": "a2e478b1-96e4-48c1-a9d5-11129ff258a9",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "2bfa5062-1727-4f51-8a8a-b2f412593639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e478b1-96e4-48c1-a9d5-11129ff258a9",
        "cursor": {
          "ref": "2037cbaf-3ff0-4b56-bda7-712c2cb25a43",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "edbd3ef2-c349-498d-959a-8119334573b9"
        },
        "item": {
          "id": "a2e478b1-96e4-48c1-a9d5-11129ff258a9",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "2bfa5062-1727-4f51-8a8a-b2f412593639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64885110-0911-489e-951b-1c146957825e",
        "cursor": {
          "ref": "61d43267-f4a1-4f44-8390-5f5d804288e6",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "aa237ff6-1b90-4144-a7af-9cea5857fbb5"
        },
        "item": {
          "id": "64885110-0911-489e-951b-1c146957825e",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "c4d7f85b-fd43-4307-a73d-5dc1bd636b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64885110-0911-489e-951b-1c146957825e",
        "cursor": {
          "ref": "61d43267-f4a1-4f44-8390-5f5d804288e6",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "aa237ff6-1b90-4144-a7af-9cea5857fbb5"
        },
        "item": {
          "id": "64885110-0911-489e-951b-1c146957825e",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "c4d7f85b-fd43-4307-a73d-5dc1bd636b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f9bf0a-3776-4856-905e-ac5683f763ca",
        "cursor": {
          "ref": "b95e5368-00d0-497c-8f7b-f023bcacb387",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c5ffc50b-a3e6-4a8c-90bd-e6873625a973"
        },
        "item": {
          "id": "91f9bf0a-3776-4856-905e-ac5683f763ca",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2cc21d9f-b45a-4b86-9aa0-9cc290e299ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f9bf0a-3776-4856-905e-ac5683f763ca",
        "cursor": {
          "ref": "b95e5368-00d0-497c-8f7b-f023bcacb387",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c5ffc50b-a3e6-4a8c-90bd-e6873625a973"
        },
        "item": {
          "id": "91f9bf0a-3776-4856-905e-ac5683f763ca",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2cc21d9f-b45a-4b86-9aa0-9cc290e299ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a67d855-6e4b-4962-a884-bacd03d9e815",
        "cursor": {
          "ref": "bbe6b1d8-3c4a-4b82-8727-463cbb8da480",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ffbf86b5-44f8-4845-aa53-9d1e6f1b0c0c"
        },
        "item": {
          "id": "8a67d855-6e4b-4962-a884-bacd03d9e815",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "64a7ad0e-aac0-4088-a34d-22694c8a9574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a67d855-6e4b-4962-a884-bacd03d9e815",
        "cursor": {
          "ref": "bbe6b1d8-3c4a-4b82-8727-463cbb8da480",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ffbf86b5-44f8-4845-aa53-9d1e6f1b0c0c"
        },
        "item": {
          "id": "8a67d855-6e4b-4962-a884-bacd03d9e815",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "64a7ad0e-aac0-4088-a34d-22694c8a9574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043734cf-b7a8-40e6-a209-c9acbd9bac87",
        "cursor": {
          "ref": "43eddf56-7d52-47e7-838e-29b452787786",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b78036a0-19f0-4c5b-9442-46ddad0fcc2e"
        },
        "item": {
          "id": "043734cf-b7a8-40e6-a209-c9acbd9bac87",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2672f8b1-8f5f-433a-a835-abe0c56b9800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043734cf-b7a8-40e6-a209-c9acbd9bac87",
        "cursor": {
          "ref": "43eddf56-7d52-47e7-838e-29b452787786",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b78036a0-19f0-4c5b-9442-46ddad0fcc2e"
        },
        "item": {
          "id": "043734cf-b7a8-40e6-a209-c9acbd9bac87",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2672f8b1-8f5f-433a-a835-abe0c56b9800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f4599e-6917-4b85-a4b4-72f99bb6f46c",
        "cursor": {
          "ref": "261db7c3-84d4-4704-854a-78a305011dbe",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "789db46b-8245-45e9-9b92-4da9ab779077"
        },
        "item": {
          "id": "f2f4599e-6917-4b85-a4b4-72f99bb6f46c",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2f2b1e11-a075-4961-9ab6-df187a2b2835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f4599e-6917-4b85-a4b4-72f99bb6f46c",
        "cursor": {
          "ref": "261db7c3-84d4-4704-854a-78a305011dbe",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "789db46b-8245-45e9-9b92-4da9ab779077"
        },
        "item": {
          "id": "f2f4599e-6917-4b85-a4b4-72f99bb6f46c",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2f2b1e11-a075-4961-9ab6-df187a2b2835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8912e114-a665-41e5-a4d3-d58007a7ffba",
        "cursor": {
          "ref": "3469641e-72f4-4048-aeda-97d5761560cf",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "448d045c-f426-4f2f-99d7-a0f91b8e490c"
        },
        "item": {
          "id": "8912e114-a665-41e5-a4d3-d58007a7ffba",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "56506e3f-4e95-470e-b56c-b0c2092038a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8912e114-a665-41e5-a4d3-d58007a7ffba",
        "cursor": {
          "ref": "3469641e-72f4-4048-aeda-97d5761560cf",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "448d045c-f426-4f2f-99d7-a0f91b8e490c"
        },
        "item": {
          "id": "8912e114-a665-41e5-a4d3-d58007a7ffba",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "56506e3f-4e95-470e-b56c-b0c2092038a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eee4ddd-6fe6-474d-8844-e630931dc212",
        "cursor": {
          "ref": "6fe226b8-c680-4322-ac95-9b7d6ab2094a",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "79c1ac13-3824-449f-a94d-3f7e6107d256"
        },
        "item": {
          "id": "5eee4ddd-6fe6-474d-8844-e630931dc212",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "c637e147-580a-4152-9d7b-c763c408d53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eee4ddd-6fe6-474d-8844-e630931dc212",
        "cursor": {
          "ref": "6fe226b8-c680-4322-ac95-9b7d6ab2094a",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "79c1ac13-3824-449f-a94d-3f7e6107d256"
        },
        "item": {
          "id": "5eee4ddd-6fe6-474d-8844-e630931dc212",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "c637e147-580a-4152-9d7b-c763c408d53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925c2f36-0c6f-48b9-9795-9979962e06ef",
        "cursor": {
          "ref": "cda465fa-6fe9-4dce-a9e0-2a5887e85b51",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "aceea649-47cc-4102-a6dc-cbc3c2286680"
        },
        "item": {
          "id": "925c2f36-0c6f-48b9-9795-9979962e06ef",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "70aca87a-f3fe-442c-b47f-18696acb82f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925c2f36-0c6f-48b9-9795-9979962e06ef",
        "cursor": {
          "ref": "cda465fa-6fe9-4dce-a9e0-2a5887e85b51",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "aceea649-47cc-4102-a6dc-cbc3c2286680"
        },
        "item": {
          "id": "925c2f36-0c6f-48b9-9795-9979962e06ef",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "70aca87a-f3fe-442c-b47f-18696acb82f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cc17c9-6ef6-48de-acbf-fc06b449f4e2",
        "cursor": {
          "ref": "4a93d2ba-0446-4e7e-a711-1e6ca3d99129",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "66f9cf26-5cbb-4565-a1b9-c47c515d0906"
        },
        "item": {
          "id": "f3cc17c9-6ef6-48de-acbf-fc06b449f4e2",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ea6752ce-3c96-4b10-af04-0a7898d3cd12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cc17c9-6ef6-48de-acbf-fc06b449f4e2",
        "cursor": {
          "ref": "4a93d2ba-0446-4e7e-a711-1e6ca3d99129",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "66f9cf26-5cbb-4565-a1b9-c47c515d0906"
        },
        "item": {
          "id": "f3cc17c9-6ef6-48de-acbf-fc06b449f4e2",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ea6752ce-3c96-4b10-af04-0a7898d3cd12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be672651-99c7-47b5-a599-ab47ddf4ece9",
        "cursor": {
          "ref": "e03e3e06-c3b5-4a35-a64b-c8b9800817e5",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1bf4f2a3-04c4-444c-a72c-f4eb76121f53"
        },
        "item": {
          "id": "be672651-99c7-47b5-a599-ab47ddf4ece9",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "9fd55ff5-6b54-4c0b-becb-7657eb69ec71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be672651-99c7-47b5-a599-ab47ddf4ece9",
        "cursor": {
          "ref": "e03e3e06-c3b5-4a35-a64b-c8b9800817e5",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1bf4f2a3-04c4-444c-a72c-f4eb76121f53"
        },
        "item": {
          "id": "be672651-99c7-47b5-a599-ab47ddf4ece9",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "9fd55ff5-6b54-4c0b-becb-7657eb69ec71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1e06c3-3016-4088-bf93-29c3bf89f154",
        "cursor": {
          "ref": "75fce1a2-1328-4d32-9996-aa0915fa0280",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6324f5af-2be0-4c01-a382-7efc77b07bdf"
        },
        "item": {
          "id": "3d1e06c3-3016-4088-bf93-29c3bf89f154",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "32850aa6-78db-4c34-965e-6a5eb1651144",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1e06c3-3016-4088-bf93-29c3bf89f154",
        "cursor": {
          "ref": "75fce1a2-1328-4d32-9996-aa0915fa0280",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6324f5af-2be0-4c01-a382-7efc77b07bdf"
        },
        "item": {
          "id": "3d1e06c3-3016-4088-bf93-29c3bf89f154",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "32850aa6-78db-4c34-965e-6a5eb1651144",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d3bc6a-8f3b-4f07-9bcd-a62685521f70",
        "cursor": {
          "ref": "ede01662-4bff-477c-81cd-726a8f026c8a",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b5d55083-b211-4a11-a0e2-49855ec1d921"
        },
        "item": {
          "id": "32d3bc6a-8f3b-4f07-9bcd-a62685521f70",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ce7050d4-815b-48d0-8649-c84cadd8aed0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d3bc6a-8f3b-4f07-9bcd-a62685521f70",
        "cursor": {
          "ref": "ede01662-4bff-477c-81cd-726a8f026c8a",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b5d55083-b211-4a11-a0e2-49855ec1d921"
        },
        "item": {
          "id": "32d3bc6a-8f3b-4f07-9bcd-a62685521f70",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ce7050d4-815b-48d0-8649-c84cadd8aed0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7bc49f-5a6b-4f4a-9e9d-938cb51b3461",
        "cursor": {
          "ref": "a5605851-42b3-4f06-a222-839e37f822c1",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4c1f734c-a89c-491f-953c-4295d717b4ab"
        },
        "item": {
          "id": "3f7bc49f-5a6b-4f4a-9e9d-938cb51b3461",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d4f12fdd-c9fb-4bd0-ac26-5103b4ca7a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'",
              "stack": "AssertionError: expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected undefined to equal 'did:example:123'",
              "stack": "AssertionError: expected undefined to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "3f7bc49f-5a6b-4f4a-9e9d-938cb51b3461",
        "cursor": {
          "ref": "a5605851-42b3-4f06-a222-839e37f822c1",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4c1f734c-a89c-491f-953c-4295d717b4ab"
        },
        "item": {
          "id": "3f7bc49f-5a6b-4f4a-9e9d-938cb51b3461",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d4f12fdd-c9fb-4bd0-ac26-5103b4ca7a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'",
              "stack": "AssertionError: expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected undefined to equal 'did:example:123'",
              "stack": "AssertionError: expected undefined to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "cd7bb879-a3c8-4972-9aa6-9f8b5d1d024b",
        "cursor": {
          "ref": "996667d7-e63e-4714-b610-344a564667be",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "38de7021-b1bf-45dd-a6b1-86bf3352fa70"
        },
        "item": {
          "id": "cd7bb879-a3c8-4972-9aa6-9f8b5d1d024b",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2dc7fbb0-7067-4977-8185-6237a875d823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "cd7bb879-a3c8-4972-9aa6-9f8b5d1d024b",
        "cursor": {
          "ref": "996667d7-e63e-4714-b610-344a564667be",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "38de7021-b1bf-45dd-a6b1-86bf3352fa70"
        },
        "item": {
          "id": "cd7bb879-a3c8-4972-9aa6-9f8b5d1d024b",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2dc7fbb0-7067-4977-8185-6237a875d823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "36634c33-1819-4584-a6a4-3b3387c5ea48",
        "cursor": {
          "ref": "9fe855f1-cd18-4972-80ff-b8c0f87971e5",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a2fd031d-0cfd-4f2b-a079-d180dc4d00cb"
        },
        "item": {
          "id": "36634c33-1819-4584-a6a4-3b3387c5ea48",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ee52738c-512e-4c9c-bc0c-bda393f76c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "36634c33-1819-4584-a6a4-3b3387c5ea48",
        "cursor": {
          "ref": "9fe855f1-cd18-4972-80ff-b8c0f87971e5",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a2fd031d-0cfd-4f2b-a079-d180dc4d00cb"
        },
        "item": {
          "id": "36634c33-1819-4584-a6a4-3b3387c5ea48",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ee52738c-512e-4c9c-bc0c-bda393f76c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "d8a4d175-e115-483d-a272-f2adb1b951ed",
        "cursor": {
          "ref": "c227b5a9-5941-4d76-9d0d-bd81269f057a",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "472c3687-ebd2-4ae7-8f13-94ca7179c3f8"
        },
        "item": {
          "id": "d8a4d175-e115-483d-a272-f2adb1b951ed",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "05cca077-2017-4248-a055-74b8404883d6",
          "status": "Created",
          "code": 201,
          "responseTime": 883,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d8a4d175-e115-483d-a272-f2adb1b951ed",
        "cursor": {
          "ref": "c227b5a9-5941-4d76-9d0d-bd81269f057a",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "472c3687-ebd2-4ae7-8f13-94ca7179c3f8"
        },
        "item": {
          "id": "d8a4d175-e115-483d-a272-f2adb1b951ed",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "05cca077-2017-4248-a055-74b8404883d6",
          "status": "Created",
          "code": 201,
          "responseTime": 883,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6bebbb03-9ecd-4854-9986-3a5723d3b214",
        "cursor": {
          "ref": "37849439-0c8d-4086-9308-5383936e7b2c",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bb599d0c-b2c0-4e23-a517-67a186f586f3"
        },
        "item": {
          "id": "6bebbb03-9ecd-4854-9986-3a5723d3b214",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2b50ae79-a4b1-4f56-8f40-3505f8e09175",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bebbb03-9ecd-4854-9986-3a5723d3b214",
        "cursor": {
          "ref": "37849439-0c8d-4086-9308-5383936e7b2c",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bb599d0c-b2c0-4e23-a517-67a186f586f3"
        },
        "item": {
          "id": "6bebbb03-9ecd-4854-9986-3a5723d3b214",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2b50ae79-a4b1-4f56-8f40-3505f8e09175",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "416ddee5-428a-47d8-9a96-63913037fbe5",
        "cursor": {
          "ref": "7e635e28-b36c-4434-8cfa-ce67ca583451",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d0f91153-ca23-49b1-9aae-10b781774652"
        },
        "item": {
          "id": "416ddee5-428a-47d8-9a96-63913037fbe5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "46f6f8fd-bfe6-49bf-ba7d-db1acd7bbf2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "416ddee5-428a-47d8-9a96-63913037fbe5",
        "cursor": {
          "ref": "7e635e28-b36c-4434-8cfa-ce67ca583451",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d0f91153-ca23-49b1-9aae-10b781774652"
        },
        "item": {
          "id": "416ddee5-428a-47d8-9a96-63913037fbe5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "46f6f8fd-bfe6-49bf-ba7d-db1acd7bbf2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a574a58e-3f23-4e7b-879f-44ed083a2d65",
        "cursor": {
          "ref": "f8843c18-5e73-4866-a938-bb744ed1f510",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1067b487-9f25-4773-9479-ec2407942b22"
        },
        "item": {
          "id": "a574a58e-3f23-4e7b-879f-44ed083a2d65",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "db83eb80-ecb7-40db-a883-03c58523ee36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a574a58e-3f23-4e7b-879f-44ed083a2d65",
        "cursor": {
          "ref": "f8843c18-5e73-4866-a938-bb744ed1f510",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1067b487-9f25-4773-9479-ec2407942b22"
        },
        "item": {
          "id": "a574a58e-3f23-4e7b-879f-44ed083a2d65",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "db83eb80-ecb7-40db-a883-03c58523ee36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d28dc3b5-8eda-45ce-b905-d15cc17aefb3",
        "cursor": {
          "ref": "6d961657-5781-4c4f-ada4-bc7f5bb42f51",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "05943641-7afc-452c-b002-d63d94bafe32"
        },
        "item": {
          "id": "d28dc3b5-8eda-45ce-b905-d15cc17aefb3",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "a71c36c1-d1ca-4b6d-86ef-59f2a2ac3650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d28dc3b5-8eda-45ce-b905-d15cc17aefb3",
        "cursor": {
          "ref": "6d961657-5781-4c4f-ada4-bc7f5bb42f51",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "05943641-7afc-452c-b002-d63d94bafe32"
        },
        "item": {
          "id": "d28dc3b5-8eda-45ce-b905-d15cc17aefb3",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "a71c36c1-d1ca-4b6d-86ef-59f2a2ac3650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e708e3b3-4f49-4fde-8192-5a07d947aa59",
        "cursor": {
          "ref": "13ab81b9-f03b-441f-bec6-d8db82064924",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dc3009b6-5f37-4724-9332-fe4ab8be5f46"
        },
        "item": {
          "id": "e708e3b3-4f49-4fde-8192-5a07d947aa59",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "187ad395-d410-4b9f-a19b-82e61d0b7737",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e708e3b3-4f49-4fde-8192-5a07d947aa59",
        "cursor": {
          "ref": "13ab81b9-f03b-441f-bec6-d8db82064924",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dc3009b6-5f37-4724-9332-fe4ab8be5f46"
        },
        "item": {
          "id": "e708e3b3-4f49-4fde-8192-5a07d947aa59",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "187ad395-d410-4b9f-a19b-82e61d0b7737",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc183f39-ee1b-409d-80e7-b210daaedada",
        "cursor": {
          "ref": "c59d8506-26b7-4b43-a365-d1f9da0c2609",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "62d84a84-d88b-495e-b779-93c1853a1c27"
        },
        "item": {
          "id": "bc183f39-ee1b-409d-80e7-b210daaedada",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d984e34b-2582-4b5a-ad41-ffbe5dedccc8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27513399-c9cd-4259-ac33-483d1f535635",
        "cursor": {
          "ref": "85df3620-7c12-4693-a192-239ccbed4e89",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a8faa086-a66f-47f8-b5d4-d18f092140ec"
        },
        "item": {
          "id": "27513399-c9cd-4259-ac33-483d1f535635",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "423c1a8e-4755-4b6a-ab99-035304073880",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27513399-c9cd-4259-ac33-483d1f535635",
        "cursor": {
          "ref": "85df3620-7c12-4693-a192-239ccbed4e89",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a8faa086-a66f-47f8-b5d4-d18f092140ec"
        },
        "item": {
          "id": "27513399-c9cd-4259-ac33-483d1f535635",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "423c1a8e-4755-4b6a-ab99-035304073880",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5dea4d5-f281-4752-9be6-bb33c821ead9",
        "cursor": {
          "ref": "a343dd6b-2f0b-4500-a6aa-3c771e4e26dc",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "52bfefa0-edb3-4b86-b784-f1a60748a8dc"
        },
        "item": {
          "id": "b5dea4d5-f281-4752-9be6-bb33c821ead9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "72751805-63a5-4f86-aa71-92954378f4e4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3341d894-cdcf-4467-978e-5f54be2c7991",
        "cursor": {
          "ref": "6cdae1c9-4421-4a1e-97ea-2ce903214238",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3688bd02-d851-4c6c-a216-ec15bc4f3b86"
        },
        "item": {
          "id": "3341d894-cdcf-4467-978e-5f54be2c7991",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6af4c1f7-0b07-41ad-b474-b3c6059ae739",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3341d894-cdcf-4467-978e-5f54be2c7991",
        "cursor": {
          "ref": "6cdae1c9-4421-4a1e-97ea-2ce903214238",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3688bd02-d851-4c6c-a216-ec15bc4f3b86"
        },
        "item": {
          "id": "3341d894-cdcf-4467-978e-5f54be2c7991",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6af4c1f7-0b07-41ad-b474-b3c6059ae739",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e22b8e0-4267-46ea-97c8-a65f69827e08",
        "cursor": {
          "ref": "a3a1a860-c3c5-4472-a490-854aa7b6662c",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ab5bd254-1007-4282-b24f-55dfe5998c4a"
        },
        "item": {
          "id": "2e22b8e0-4267-46ea-97c8-a65f69827e08",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5a573102-44fa-4fea-bb8d-42b7454c5594",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2bd243-fd43-44fd-9dd3-525fc56549a6",
        "cursor": {
          "ref": "d5e6083b-74e3-4aba-ac9d-48f82594dec3",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "aa059590-ee64-4266-b265-80c9bcf2dc79"
        },
        "item": {
          "id": "ba2bd243-fd43-44fd-9dd3-525fc56549a6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec7a61d5-4d7b-4f9b-8ed7-42c31114a3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "ba2bd243-fd43-44fd-9dd3-525fc56549a6",
        "cursor": {
          "ref": "d5e6083b-74e3-4aba-ac9d-48f82594dec3",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "aa059590-ee64-4266-b265-80c9bcf2dc79"
        },
        "item": {
          "id": "ba2bd243-fd43-44fd-9dd3-525fc56549a6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec7a61d5-4d7b-4f9b-8ed7-42c31114a3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "160fa918-bb64-43be-8a15-1025293a91f1",
        "cursor": {
          "ref": "faf287ca-5700-4d3e-b624-c3c87573cb39",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c5e97a7f-6689-416d-970e-bee0188fced4"
        },
        "item": {
          "id": "160fa918-bb64-43be-8a15-1025293a91f1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0c573b75-7d27-4d1b-90b2-8bca8cca493e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "f851b2a8-7f3a-416c-a5d7-fc13d75a1c66",
        "cursor": {
          "ref": "ed25a057-8f57-4304-82af-b9abc1bd8bf3",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c265c397-b619-4b87-a886-d73c5d5286ed"
        },
        "item": {
          "id": "f851b2a8-7f3a-416c-a5d7-fc13d75a1c66",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "452b7cfb-90ec-46a6-af9a-aea7274b9519",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f851b2a8-7f3a-416c-a5d7-fc13d75a1c66",
        "cursor": {
          "ref": "ed25a057-8f57-4304-82af-b9abc1bd8bf3",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c265c397-b619-4b87-a886-d73c5d5286ed"
        },
        "item": {
          "id": "f851b2a8-7f3a-416c-a5d7-fc13d75a1c66",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "452b7cfb-90ec-46a6-af9a-aea7274b9519",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae4584f-8d1f-4cab-b2a7-cbb3f4a2e107",
        "cursor": {
          "ref": "a14a75ea-4ec3-4a81-afba-15bd886ddcc1",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ebac7d3a-ea4c-4f1f-a330-331638991b8f"
        },
        "item": {
          "id": "aae4584f-8d1f-4cab-b2a7-cbb3f4a2e107",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "1c279326-3ed7-40f6-a89f-7f63355704a1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}