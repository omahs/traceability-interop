{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6dd7174f-f835-49d4-b334-22a5b43e4059",
        "name": "Clear Cache",
        "item": [
          {
            "id": "58074020-ebcd-4b7e-94d0-ae47e432b334",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b4ce31e-93d9-47e9-b88d-423583c99af7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c13b6e8f-26d8-4844-bcb3-802e925d7359"
                }
              }
            ]
          },
          {
            "id": "8f73bbda-83d4-4e1b-9920-db77d6bccc97",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b24920a4-762f-4189-9e0a-adfeeadf27c6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bfffe968-0403-4623-885c-a81540e302a3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d158271b-08ed-4bcf-a879-55a3178d837b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "796dab4f-da7f-41f6-8c64-7c64a71ae398",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0344edfa-9643-4c1a-bc11-1306cc44167a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6a5219a-aa8a-472b-b113-baddb8307e4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86ded69b-1b04-43c3-a55c-a9fd11150f7e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "31884164-a9e6-4418-a0c7-70c5b62b0e20",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "82acc995-26c1-43a9-9438-df1911b03a35"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "95d8dd22-a647-49ff-8217-7a96d5f342a3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bffabde8-3b2c-4d23-bd5f-6be7540b1564"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f40e3029-6b9f-4c25-af5e-2f16e08f8e4d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0bf41eb0-59e2-4412-99ca-7c5a69f832d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3e749a1-de8f-4cc4-9643-37fcdf997af5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f110b7b9-096e-4fa9-af52-55f2ff9e7939"
            }
          }
        ]
      },
      {
        "id": "a363d139-a3de-463d-8b4c-2396ad267330",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ad23f6d5-7441-4b51-8a24-c4c932ed36bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "05ee101c-12c7-481d-9049-3b4a722f04f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57d67127-a1a1-40f9-873b-16b96e5d1602",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261efd0b-1bea-4185-82f7-103dbb1f2a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fecb15a-15f5-4a41-92c2-b55d4574512f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6764727f-5175-412c-8b5b-4f987ffa186c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ecc98e-56ae-48e7-a80e-338a6c40dbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5416698d-7959-41e8-b1b6-052f90098367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a476a11-f92c-47f0-9adf-30dbdfb71ad9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a6f0c6-8d37-473a-abd4-686741655d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b39692ca-8f6e-4972-ae4e-a4a63b8252ec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1d607a28-de10-4020-8dbb-26dd1ae4b694",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f5bc843-c8fd-446d-b25d-fb6feec03eb5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe25327-2705-49b7-83da-ce1a6f1c0b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f26ea42c-da1f-4958-991f-d266704dc73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140c1d5e-2518-4c52-878f-3b60e0796f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d90316-c8d8-48ad-b63f-51dcb4d3236c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411d5fa4-6b75-4a82-b011-b5b932fdf59b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a37703b-e8bb-43c3-801a-3356886cf2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e8325b2-f3a0-4eb4-bc92-a4da8e022b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f773a28-6d2e-4fb2-a697-3f56a1dfbab3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "53ea79d8-10b1-47e7-b9c2-580df2344c8f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5a703e0d-0719-4cf3-a69e-0b1f295975ff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d1137495-edc5-4dc3-b4ba-92add6ee2877",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f01bcff-1137-4b79-b7c1-bd8314023042",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fd707274-13a9-4f37-a71e-4da0ccf8fe8d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac654954-dd41-4796-9a1b-0689aa0c9483",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "48832126-43e8-49aa-9bfb-7eb99012ebb8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7709c2f-f764-4969-b813-9eb84193393a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0aa17334-7a30-419c-b164-17fc17986ef4"
            }
          }
        ]
      },
      {
        "id": "bb5a1071-d6d0-43b3-b6e2-220dabe0072b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2a4a09b7-7a9d-4ccf-adac-63546601667e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14e201d6-38a4-466b-b041-8242a8bfb89b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "66f63c11-9d3a-4dd5-8d64-9c792a23b5c1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73f2258-54e1-49bc-a5f1-1717cd18d97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7023fb9-456c-48a4-8393-6c373306499b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c62257-0e58-433b-bbb6-a2d99005d879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b536a6a2-c8b7-42ab-b422-e8c7133ac75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4fff23-581a-4879-8693-4b2887a3394b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f19886-8e5d-44df-8d5a-54deae00727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5071a9-bb15-492e-bbc8-09d2b355cf35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9752fb7-fc3f-403a-a4d2-7699179f2283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e918521-09b3-4041-9371-0e497ab98b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4937d68e-d1cb-4117-b797-5589bcd66ecb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4877de00-ead3-4749-998e-6223a354da65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01cc795-d080-4ae0-aa51-276c827cfcda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5203dcef-3a19-466c-85f8-fd2647bd9ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a1c2b10-d84e-462e-bc60-b6a19f7bc33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc8529c-ed28-4d9c-b0f2-d668d72c5e8b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8001da33-07f3-40bc-a5ed-05643bd75c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508ff920-78fb-4af9-ba9b-8679636e7e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f3aebd-abce-4e27-b766-4afa1e2f6fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a2b2152-147e-4ca3-808d-807fb2660773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7babf6ca-ea65-4970-bb07-99078e93c023",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92b1eb8-c38e-4133-a55c-252e0de3e027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd84bb1d-1efc-4acf-8733-bdf4ee6c03d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34acccbf-2ef4-4863-8932-a10f00b984c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f4fe80e-bfb2-43ae-bffb-0e8e6f3fe1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071c33d1-1cad-499f-a917-aa07fa6b4dc8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c72d55-6ce4-4612-a034-00123504f595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93459c89-96de-4c30-ab5a-55b0647dec4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a1df0a-28db-4660-8910-a1ee80421541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a246aad-e55f-4cb2-b0a4-bbac566b866d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f63940f-1e7c-4fda-835a-53090dc9d9a0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866ca693-e385-49ad-958f-39bec8f58efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a49f127-269e-40e8-9c51-7791ed6d17fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a477de15-8b58-4ec9-955d-5d3f4eb29a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad37e696-a585-400f-a32d-b2094f8687c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502e0295-5e3c-4931-8101-c516ca2533c6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecfd55f-5748-4e22-9b24-3578dd657a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb87a67b-76e2-41d2-b95f-b6810a038820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec94f378-eb49-4a13-9dae-e88f69f93d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e766b3b0-e12b-440c-9619-a1ed4d9497cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f674073f-f654-46a5-821c-1b2a3bfe95bd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11e2ebe-be55-48c4-b11e-81612b53792b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498c9db7-d5ec-46cd-958d-a517e50caa65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b44bdf-ee7b-4005-8c10-c44a9a983b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0ac2b72-c350-4008-815e-83964135eb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7561c73a-3a0c-4da8-915a-e5c30bdef1a2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c45525-92a7-4411-bae1-360dbff5e1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c3a0d1-11d9-48d5-93e5-edbc864535c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae51ee7-5d77-4814-bf4a-e959c6d57e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8b52645-f010-4ce5-b631-6736b2b5eb61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb00400c-47f7-4810-83ae-7e3764c20173",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822b9782-6b4d-4c11-b8cc-5f8706982e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd770c4-b186-4343-ab8a-d9e077dae110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3b28be-89fd-44d9-9ebf-7729323ce378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6b325bf-086b-4bba-af17-e35dbf4f13d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4971c11b-56bd-4e52-b3b3-ad3c7327b8c8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e987a9-04cc-486b-9ae2-3538ca8c0359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fae5623-61c8-43b4-aa2a-a852f10f87e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65980d2-5522-4b33-b4d4-ce9993ca6488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11994bf4-52b4-4f4b-ab5d-fc4823427146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968f28c9-d0da-40e0-9e22-44cbe2846f29",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d94539-c380-4eae-a90d-a2b05038819f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3985723d-3d06-437c-ad01-7349882133a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d4a001-0fe3-44ff-ab68-ebb1745d3836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5549b1e-5428-43ae-8951-6f43d5825972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c03c0d2-f2e7-4f97-a942-8bf0a8f9c600",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c645546-e2d6-4049-898d-18f4ab4a889d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f89b9f-f003-42ef-80b4-0edf197b5c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e476b0-ecc5-40e1-ba04-78fbe54ba050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a6e26a7-ae8a-41e0-86d7-99fd6cad67af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219e785e-622c-4c97-a79b-2e561f0a3f01",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4511cb8-e295-4847-96bb-2537ac211afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32dcda46-6277-4fae-8f73-2d2c9883b656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8811ec9-705d-4821-8008-a260e88bf7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c05495e7-f6d9-4792-ad4a-d47f0f7528a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda1e9d3-9c13-4365-8b4e-b9e34d30f2a9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24efca40-5922-4657-8051-aa9e9e523b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f30787-88e0-4467-9dd4-65e253f0f4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46dff9a5-bb66-4c6c-b6bb-68c3a61239a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f84afc1-7acd-4bc7-a48b-6f4964147f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2123639e-c228-4553-b17d-432b4ab1e3f3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2bc230-147a-4310-9b28-2631df39eaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90825d86-965f-4fa3-b2b7-82ff66a072f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059e462c-45e7-4e23-848d-a1a45ee2531d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd8fa218-d0e1-48dc-8e22-8c3af028324d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b9a72f-caed-497f-8501-b64294f41275",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958445c7-01de-4c13-8a0c-5e0d16e494db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9ea655-ce2b-4ff0-a6de-48c38e761539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d836cbd5-acae-4975-8123-80863af3f846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f347acc1-8faa-4b71-a42b-f41a55fd3af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a82ba3-a465-471f-9a45-94e6a254717b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cd4ec9-a5e5-48e6-9435-12ff5e9011b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138e47c6-153a-4fef-9d4f-24d9204adfe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972fd7ae-60e3-463f-90fd-e101c0f8962b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38467356-ccb9-4ad4-8c3c-4fc43513b007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ded1b28-b97c-489f-a543-038e84d7e2fe",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfcb0c0-c16f-4f63-9e1b-68bbc49e542b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef2cdfb-a748-4516-ace9-7d6f42f6ea57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b759b93-1519-4f89-90d2-c62a534af61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17a89b38-2011-4df4-9f5f-7fd449a9fad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a185238-2e2e-4370-9438-fb0ff9109076",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8e3aeb-c698-46b3-ad36-21498af5536f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91683fe-c919-4ff2-8095-5bc489651365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271c1808-4937-4b74-81cb-d898f7d9dfd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f52828eb-abf0-4953-ac76-87f5da96af24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b18ac6c-03a3-4254-ba96-28caf20aa514",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d54dbb8-d881-419e-8c8b-271a8bf1e361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4926165d-5990-42ed-9b12-dbf3585db9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4813841d-3a80-4aa9-8aa2-ce7d0504d86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00c321de-1aa9-4e26-9790-91228d78107c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52b9d4b-83de-43df-b117-a5d9d4259e88",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e5ab9f-32dc-4d15-b6dd-36c45bc65eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cecc2f33-b7f9-411f-ad4d-7c9da5afc1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9f117d-290f-43be-843e-25299920890d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2239af61-5033-427b-a153-e7e8603ee24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94aafb01-f6c3-4979-8eda-b93f664186f4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166149c8-4fd5-4596-9401-ee3b7b50fc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c607d278-1555-40a6-bdfc-a0e7d5c82450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e947df90-aef2-4590-8b53-b6e57c586feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e9ca07-4684-467d-86fd-904e227b9ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fd212d-68fc-4c0f-98f4-ef736b92e0af",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695dccd2-8b91-4e82-a7a5-9475a3f43863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9210f9ba-0bf2-448b-994e-b72759dabd32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b10667-2d82-44f3-8513-ae48cf3b3ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "81e258af-c27e-4539-ae4d-b24255b83ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215c78b8-319d-495e-822e-c02adb950c99",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76072053-ab06-4f3e-b54f-61cae97f8e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb28f26-7ab2-4fbb-ae32-d88459fbbd2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae17e37-b026-42f7-b14a-8629e8a24bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3d2bce-83fc-4299-926f-de1a0487a71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb34ff8e-6f9d-461a-b8e9-3bc8a61ded71",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cedd73-b5b8-4fd8-8d8c-3d82fa6f3918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ad4b69-513b-4008-9d7c-b4c2f2d6b2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ef023d-bc57-4559-be16-171c5512dacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1310ebac-8237-4d70-9a9f-d067a4938327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07180383-da49-4bda-a909-1dfcf7cfbc1e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc7da43-ad73-42c7-bf33-5930ee40238b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8672f767-8261-4218-9cdb-beb49f861ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9b4c45-f130-48ee-a338-7b4a8ea15a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03f11cf9-9cf8-4310-8faf-709033f81a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7e65fd-4c65-44b2-b27f-3b34da09e458",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b5e74c-8ba9-45cb-9c7b-8c81c3e277a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b88cec-4152-4112-99cb-8ae84000cb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bcc96d-1676-4b9e-a17f-5f621f266f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db6fba6-5f57-4409-a97a-46bcf4585e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21417e53-ffad-48ee-9139-1bee32a98dbd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5841bd7d-02f4-4e47-ab13-35aa4b1f31f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf295227-2816-4cff-ba4c-d6cb8d51fbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247cdc18-dcb5-430b-9f99-7dc22490cb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c72e0f6-5059-4a8c-8acd-345459869482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4348c835-7874-41c9-9e24-a15e51a0f373",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd290e5-4764-46a7-9b03-24628df55080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693c2f15-532d-487d-9dab-5ebd00af4d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90d13ef-c03a-4076-9d2a-c7dbb2626322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6e84acc-d23d-45db-8ff2-eccb73cac1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3918f7-41af-468f-9294-04ac60798d9b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f3e1e9-80d0-41d1-b07f-d29a77bb24b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86742e10-79d7-4944-aecc-208cd440de28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b42423-97f0-4b0d-8af0-237112a34157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4330ab-2b0a-4ee9-8e61-d599c8f30734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4ef374-33ae-4689-afc8-e10bd26ae4d4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332584db-e1c9-4c6b-bfee-370c622a6ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a07e1e-e038-473c-bb0d-219abeff1d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e86fdc0-ae86-4b9b-8399-bcc899565659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89370abf-9110-4553-bbf2-7c71bbb7d1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71eb8d33-626b-41ed-80a2-9fd2439bc142",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c814688-c86e-4172-a1a3-28f3cc64c0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2354c72a-7fee-48f4-9dca-d950c04e1955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83aa46fb-6e7f-4679-ba6d-6dab6cd2a2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd555c8-9354-49d1-8480-c7e7a72e6f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de0c16f-611a-4f84-9d4a-72ccdb065640",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8cfc31-82b6-4650-bba3-a55eea8611dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4699d0-5b9c-49fa-a218-155260da4858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619e24bf-3b1f-4a12-be38-a8ed1ceb36ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d74ab55d-38d1-471d-a00f-dfc47cfb369d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d7f71f-72b2-4a48-9868-5a5987cd3334",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb769aa-1134-4360-8f5d-0a8d3d94b790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec23959f-c0fe-4aec-aa02-79369770e319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca35a19e-19c1-40a8-9943-38172096ac09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "441ab49d-0872-4aa2-9fc6-0cfd63f97383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98387cd-c2d2-4271-9e12-44b8ea6a3676",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5811ac6-9131-432c-8d43-5e2dae7bd555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9293acc-450b-42b5-8b80-e9d610adac7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2eb8feb-1087-4eb6-a7c7-cbd6101eada7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4b7bac-d6b6-403a-938a-8f88b6ef1ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fc9a6b-03ea-43af-af40-61ab2ae7a129",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86c3be5-3035-4c63-ae85-115b3dd0840b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b324a8f1-2e5f-4e11-9cb8-43f2f16d7b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea398c7-abae-4ff1-96ca-d830ed0e361c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "58136afd-447c-4a56-9977-17af5bc5f2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc55c64-0230-4399-9d79-7c8f96e493a1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df260f7-db93-44b2-b149-2f01e408aa16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c97e2ac-2666-4360-8933-165c8eca92fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a791109-ec38-4d66-880b-516bad175a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bacd5e65-e2a8-49a9-bd9c-65344ad7e48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e150900d-b3ac-4f09-bc18-dd5343a0e5c6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be32276-a3a3-40de-b0c6-1080c37feeb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c899965-519f-4a3b-acfb-32a1b24cd8dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce3e198-9c64-4315-a502-d1cdfd464640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d593e0-e616-47c9-a422-9d45412c2602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c391aa-5c69-4bac-bb40-934149372c6f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0616a6-78bf-4b5b-8142-7440db7e0c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92af6cc-b142-43bc-a852-6c11e9a550cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53b3f3a-6e66-4eb0-8e7b-34fc445d66ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b7987ad-7710-4ad9-845d-ea930a8c2280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bdebef-2945-48c7-b2b8-6eef945a2493",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb39542-5116-4cfd-bc79-16169e1302df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ec0297-a897-453e-8f78-808e09d8e5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072fbdb4-a218-48b4-87cf-162003733b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "34c52b9f-dfb1-4acf-a590-048dd95fc5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3017bf0c-353f-41be-a67f-866689c3d8d8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745936dd-5856-4b73-84c3-c92ce2487a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55723087-1e62-44e5-a6bf-3447bc2736c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89866368-bcf5-4bfa-80df-e0308531d1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3448ae-d4bf-4c4c-a4bb-2c175c0bf86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd356a0-1f2f-4b4a-94ef-bb23195c05d6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abf4479-88db-401e-b131-567c20db0bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f0efd3-463d-429f-8171-d3bf5f1358ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79d53a8-2bb9-410e-a864-6ac869e230f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "02248d12-6c0d-460b-85fa-b058a80a86e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740e0141-67af-4b06-bbee-b60dfce04549",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e073599c-4641-4d3c-9cdb-16e2a733cb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41bdb8e0-700f-484c-81db-759dd5a20581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8397eb-32c7-4222-8211-6ee4781985d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "49c1ea0e-7b6d-44ad-9466-0e3c2d4de448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e26433-c2f7-4f14-a207-6262b7c54475",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72839cb4-7796-45cf-8ab6-9d27996eced9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebaa6418-89bb-4dd5-9a56-11d22e248d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c78cdff-1e80-4a20-8f89-ef6ce2a08af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "640540ce-f00c-429b-98cb-f0bff39255ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab40628-8450-4d3c-9298-03185e96a58a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90aa6856-5b4c-4e5d-a11d-3bb985b6de17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892ef765-bb26-4fd2-85e7-bdb4f4aef857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd09f48-f4db-492d-9fa5-973a2b19936f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2656564-8592-472a-88c7-1144214ba2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc274ed2-9fb7-4106-88eb-6270cee68a87",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6ee6a5-6426-41a3-9d69-513ee092f1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25102d18-ea2f-403a-bb12-a87c95eae7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7e149e-c91c-4fc5-b51d-b4a0c9469a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee66275-506c-45ba-8382-6560e7ccabda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30569ad-fd46-4522-9171-1d1c8ea5c246",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e408713e-a597-40ce-9750-fb824e161543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9251367e-a5e2-41c3-9242-f75df00ab172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19937b5a-6a0f-4341-ae12-c8053a5708f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f56c6b-973a-488a-b61c-7ac60f2209bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20db01ac-571d-4bf3-ba22-11a76aa76694",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fdc886-d5b6-4996-9231-1aef0f07505e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a006d1f0-39c5-45a6-b868-88c21f4874f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc37627-39d1-41b6-ac34-2b3b1588c773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "324be054-a4d6-46ed-b59a-67665c26ec14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2dff3c-1cdd-4958-aeed-e057d59684e4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41f8806-4e03-4381-8487-71898f974d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449a1551-30a3-4775-9767-e8b1588f6a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05da755-aad9-4bb3-b296-f99605011300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "063abdc2-00ab-4a41-b2e9-bc2d2bf5d655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f446f6-b921-400a-bea6-8817780ae284",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbfd48b-807c-4bed-8579-01de15902f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725e2437-64af-4649-a1de-2ae536409bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7aa62cb-2e9c-4062-8dbc-2c86131d5835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6baa2994-1047-44b7-809f-cd1c4f8d59cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb6db0e-efd6-4d54-bef5-a7d7a865f7c8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a34613-2409-4e25-93b4-d77df55e5205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc3ee9c-29f0-43ea-be75-487251cb2550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a826c91-cb83-4cb7-aca0-5b04f7b3f37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24bee189-b0d5-4346-ae09-6ded374cae24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6126b6b8-2b22-4bbc-ab12-701acd3f6051",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c367f08-ffa8-49b9-bb9b-b90cbdefe5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f0aa23-8266-4cc1-8385-a920e55ad05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb94fb4-8f04-4200-938c-b7f0981e332a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "052aa6a3-23dd-4cb1-b314-c2f3ea8251ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd23662f-27a7-4d3f-a590-24e743345cef",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0869e8f1-8288-45c1-888f-68db4f94c23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a533bde8-2017-4db0-a7ec-0c00208654e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac06a2b-00a8-4fda-9e79-0e4221cfe0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9715d97e-a7b7-49af-a5d1-625b7c239d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d114949-a500-4c98-8ab7-ae46be47a48e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc4beae-e82f-4287-889b-9dd725b53922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ac2672-090c-44ad-ada3-20fa31c07fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cb9087-3b1f-4ac9-8f23-8210637ac6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "184a1a96-5720-47dd-9587-baf7621979cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df128ee4-51c7-465d-bc69-dbfe0a8ae977",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587310c9-cb89-4582-87da-37d0672e406f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80113995-b05a-4051-a231-ca47cebef689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41437f23-2fd7-4e53-a19e-9119a1cea782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c653d0-b61d-4a74-b3c9-f73b26806521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d557a1-7407-48da-8763-5dfffee8d81e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fba1ac-1974-4e86-8efa-9a93022c93e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4fdabda-6bf2-4296-b2ba-5954100c36f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c33b332-c1ca-48a8-88e0-c3d894f425fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c443770f-a7e1-490e-88e6-28f96a3b8de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fbfcb2-6988-4399-937b-1540f0ddb014",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f9b63c-71e0-48db-b4ae-de7663451b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e8d059-ab2f-481d-9993-2a9f48aaaee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d1c91f-2435-4654-bfce-95d740e6e1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecdafe6b-54d8-4286-a96b-982590372767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79d614d-9c12-4761-b303-35961aeee410",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "982214fd-9e91-49bb-b603-75ec9795c635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a82349e-c672-45b6-91f5-5ff62ccb84d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea7cdc9-2311-42f2-b107-9ec114c2bd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a630c1-68bc-4f86-ab97-72e4ae10a7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f527ecfd-de2b-4c4d-a034-9d7177af3768",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bc2113-0236-4355-aafb-35fe2d734bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fcd5c00-67f4-44cb-90e2-4730ee90c77c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ecfad7-8b21-49d4-bb08-58f3873116a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "918b74f7-6ef0-420c-9626-b95cadcd1490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c35712-7b81-40b3-b988-3ae0587ca8c3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a40625-628b-4ce7-9b62-467b14448255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5cbe5fe-9f6b-4473-8f48-7d2dd3811ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e64db9-e05f-4d7b-a4ef-95d9511d0d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b924cff-e85f-432f-afab-52ab2ad6cb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461b5976-409b-48ac-a5c2-dd432409d7ca",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac143aa-5b72-4175-a843-651842c4a043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d04f880-4386-4992-b9ae-74cebf5708ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88ffbf7-d499-42ad-857f-d741500a5bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "013eb8cd-6ccb-49bb-abe4-0de67bcc55a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c71201-24a0-4612-86ae-4664e58647fc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67758388-ce5b-4531-95af-1975b229a6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca553d0b-366d-43ba-94b8-a36fc8b42b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22494a4e-fa96-4a49-a001-3dfeadaec9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf91c17c-4819-4f2e-958a-361cb6e5d43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f2adf1-44f0-46a4-9dd1-82c80d400458",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5568595a-a64a-4212-ae88-0357dcc624fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069f9e22-418f-408d-b064-7d6307dc0951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78844b9-a0eb-4694-8c4e-aa3edebf7118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee69871-bb38-4d8e-97d3-7c04b7fd1688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ce2233-35f6-4016-b8f1-9555be33f045",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b60490-926b-498b-8482-66f4eb8aa14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a0a72d-5074-4cdb-8a95-ce69161cb3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a09de4-7be7-4aad-acec-9e08a7d1b029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb638264-5072-4a3e-a77f-a933a4c040de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3710f0-09e6-4c83-b681-7b0ccad20c6c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df494853-01ec-4ab8-ba73-c89d9ae164b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e63dc4a7-37ab-4925-828d-6654c25a6774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe60baa-8b3c-4efd-b41e-5b4d241639b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a913e5db-941b-454e-b828-96fcd4a15043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e9a6cd-47bf-4e78-8b7a-99fa9d6f122e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955d7c0d-9163-4b21-8a3d-5aa9bc34df1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2f59cc-6ef0-4230-82f1-9e18ff970c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece7cff9-de32-4512-91cc-063bf68587ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "13dac759-2118-4b7e-b9bb-831bfe275031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90be3cdd-de98-437f-8e0c-2d5ecd6794d7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1615cba2-7f2c-4f63-9160-9df2b7d67cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a94f8df-5187-48b4-a7ae-66c64dd1518b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e7b0e4-699d-421c-a162-47730bf2c97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "549cb4a0-4423-4f4d-a799-36cd6efac94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a55fad8-bfaf-48eb-91b0-7be7e096c11a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d19c70-9ac2-4475-93f1-295c607e5d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f482ef-6376-463a-afd7-2b2276e10390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b891b1d4-c008-4519-87c4-fc0139989d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec951fd1-2412-412e-8c4e-250be17f0207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f919cb5-0d00-45b7-bff2-8512cd3a1570",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7414ae34-19f0-42df-ae15-6852fb3a9957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c622641c-e907-4c27-a8e6-e4e2d06ccc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac6ff53-7ee6-485d-966c-fb2c88ba3d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3abb0ff-084f-4285-ac4c-c931d5619c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec53e0e-786a-488f-907a-4d3aa6816b3b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6436ee4e-5711-4151-a10e-77b29e054cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4de9376-863b-4967-becd-5071e91ed106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c345d217-631c-46e1-8e5d-a5a129160255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b92896a5-0eab-469c-972b-548e2cf8da83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517b81a0-8f69-4171-ae01-a7c5fed91b4b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7907cc9d-3494-4f02-a5ee-b15ef9afc8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0f0004-8183-487f-aa70-04a89498cb24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87eaae6e-821b-4877-bc0b-d4d481e5de5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38a2127f-8ac9-4dc9-bc1d-c52be6778454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0464c0fa-80d1-4564-a358-f4e14d92b765",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9929774-e96a-4d2a-bcac-f80869de4893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b765b31-2b8f-4634-86db-71784faadd26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0dff45-f1bd-4b1d-9f87-50487f908f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34df7715-033c-4ee1-ada7-dd4d21bb4929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b220af6b-fc53-4b51-bac0-a8f34e6e6748",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c5ff2d-8328-4ae5-8cb8-ec090cf9f33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d98cffc-bd39-4b23-bf1b-4b60b0d02037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cec5d3f-f7f4-41b3-8c9a-c65d205761d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "561bea94-607b-4f3a-836f-9864794cc8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b5b5b0-32a3-485f-8392-7dc6f4e07e31",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3997f73f-83bd-48a6-8883-5328e47eb1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ab1f9b-14fa-4104-8028-a06e51bb2c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c010605-fc94-41cf-8611-822a904052e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "569009dc-e3ca-49df-aaf0-e5a5a5fdeef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d5eae3-12eb-4733-8f8f-27648914c423",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91639fb8-a702-417c-9cf1-2c73a28ccd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2a743c-0e5c-4819-a4ba-12d9b54b4c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3894ca-d0d9-4a43-b6aa-faf68be9ee36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c294fb17-171e-4fc1-8529-730f2cab6842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6de1d2a-3d91-419a-b10e-1a924b2edef7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b67a10d-aaea-422e-ba98-0ba1513d02d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70174aa0-c72c-4fc4-8030-0156a3d8be06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0b9a6d-6d5a-4b84-aa9d-5191a1d4e9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "adcf3cfc-5b0e-4ad2-95df-57e7b572f46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa1fa0d-a417-4663-8a71-0d4d2a77581b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b1aa65-4a44-400f-acb2-4a6d54fdf945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9400f340-c9bb-44bb-bc64-25dbb118dc38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c1de71-9be0-4efa-80d1-36af23fc88ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6935615-98b1-48b6-b559-c35afa74b027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3457903a-70c7-4be6-929b-22390d350a9d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c36985e-fdd0-4e11-bc6b-076ee0570d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc22c844-4c67-43d6-ae89-ee94eb38c828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddac599-c68a-44e4-91a9-e6a54aa61e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "edc922a3-0b2d-492b-8a52-f9e4c9c68b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee785151-c489-4363-85d8-2e6e6c9fca14",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec6c7c9-dd40-4eae-81a1-baf5797699de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df37bd5f-21c2-429f-b7e8-f932ce20f6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3ad46f-a9c5-4208-ae21-ea63abb3c12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c1cb55-bf2d-46b3-8e43-9b2358520f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eef88f8-97c1-4bc2-adc1-ddb1ab35f695",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c054c11-1f85-4deb-938b-3c771ac9822d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30a914e-cc8d-42c6-a209-23f833482215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d490e4a3-5f88-4425-a525-727532689aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b34eb72-52fa-4d8e-b439-96f7fdd5a1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ee2508-2cee-470e-ba29-e7ab92569f46",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc4990d-962a-4c59-a958-b23bd1d29128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c3d29b-f3b2-4760-94fd-3ad8319c9884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d89030-1071-4eeb-b6be-3c838e10b69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec8632d-0c36-435b-9890-27cf453cd734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8997a6-8f05-4731-ac8f-44570e12a06e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99de045-19bc-44a7-b607-ad8da0d8e416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6da2303-5bde-4853-ae06-f0cbbd500d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13e57de-e282-4742-bcda-20203f689843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffbd4e0f-633e-4611-aab0-13ba4253015d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ab3f65-c3dd-4167-86c3-55a5ded940c1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006afb6d-a8ef-4365-9800-b5b450f0e3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340b69ce-8791-42f9-992e-43309dc72267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e8e2a3-96d7-4b3c-8134-ed69a16f95b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f66aa3c-5dcd-45ee-9c38-2fb36584dd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceeb5e13-b069-4abc-b04a-2fe158e0f90d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cede6287-79b4-4ea4-8104-f23b6dca771f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc2e1fcb-96d5-4d8b-839f-33c46fa190fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf9a94b-5076-4a54-ba68-6e9aa75116e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aaba9443-a7da-460f-8c2e-7a880d9f2d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1c4aff-1955-4eab-be6a-1d7801119e19",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba11e7e4-c89c-41ce-a43e-266805020fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7c762d-b108-4fbc-be6d-7d49fb9d3e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d754c798-6ee4-4579-b035-dd90897a78b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8de4092-684b-4087-9809-8f89faa8bdd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1f0e8d-1310-4583-bab5-d3c3998dfac4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3ff4d1-81a1-4fbf-b270-7a248bef6ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e3bca1-4235-4cb3-a000-7fd3a932e03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8c231e-b02a-4a55-aa87-3517d0af3a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "28da3fe1-f13a-45f3-b83c-6a91fee17350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9507365c-1214-44c2-971a-e34f36cf7592",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667ba257-a7e9-47f6-ad5a-c5bdb4adf659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd9f3fa7-3ea1-45ac-b371-a195fd9ecc41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429833ac-eb82-4a9b-957c-beede3ff0afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1390c654-1034-4dc7-a061-2aa64c55a6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333bf67d-d4ef-4dd3-a14f-f6a3a89861e0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b995ea-d16f-42b8-a2f4-c2e0c25a5287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787f76e6-7829-4f1e-a407-2bff1881362e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449332dc-5d66-4160-a78c-3c3061eb00c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff91df2-5011-43f6-a2b6-e7bfe841fcaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2690b592-bec8-454b-9a33-a939520de1d3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c14b491-a182-42c9-ac0b-3f3756ae157c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d27e50-cf9e-4311-a0d6-23c82389f16c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f415ff6-bff2-42fb-bed6-e881be4448ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5fb226a-902a-40da-bd16-654cccb8cdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4fb4f4-bc38-4717-80eb-be6a4d68653d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2844b50f-a25c-46d3-9fea-64022c9d8787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5df94fc2-36ef-4d2c-8364-b0b322598336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1341297-fdd6-4c9e-96b5-c067096597b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a40751-5faf-4231-89d7-830940cf1c1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9982ebfd-8094-4f95-954f-4e4793cb2248",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d58a93c-4ad1-42d9-a8ae-bfafcb87deb0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b0bb82-27b6-400e-90e6-e9789bed3449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86b7a12f-f3e9-4360-a1a9-0574e1ed9f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174d7e9b-9e30-42c4-aafc-9bc42cefee04",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8e424b23-7476-48f4-aef6-5fc5ecb46179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3ec1fd-94cb-4c0c-b958-3b08e3924ec5",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bb7011-7fcb-41ab-a076-12f1b22040a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b33ebd0c-4add-47ca-a254-eef139409e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b115f5-e7f0-46de-8c7c-50698095e43e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "59f275a3-dfc6-4a00-a23b-1ee4af995d08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d77a2cdd-b3ab-41c1-8cc1-6ea6579ded0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c7e8ac8-691a-402a-bfa5-2fad4fd155ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee9cba2c-b663-42a5-a309-5cdf8a51dda2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "501ada66-d943-41a8-bc30-06b1304ad52f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b3981381-fb54-4795-9323-dc7184cdc0f0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53a7401d-c305-4cee-9d95-fa7e7cb52bc5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "198ffd75-9303-4471-af98-3327888d296f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a3eb199-4b90-461a-b751-7428d8ac38a1"
                }
              }
            ]
          },
          {
            "id": "2e4369aa-ed32-4160-8a10-b3fc9494e2e9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "935d3b2d-be7e-4e58-8895-d3d9983b7c45",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "418f611d-9fb4-4541-a1ef-6f23d3305669",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be0bb890-a1ea-4a29-9a6b-dca5399619ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2561228a-d6b0-4c43-b974-2dc82efb927b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "34334804-cf3f-4cd9-9c78-26dab02de40c"
                    }
                  }
                ]
              },
              {
                "id": "f39dbf18-48b5-4cbe-9599-a5f28ead7340",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc04af37-9bf4-45e9-ad82-14acfacbae39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1cca51b1-effd-4f56-978e-4d2473b46ebd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ef20348-cda3-4bae-ba3c-c1106ac70a38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e91953b-3e37-4971-b833-4ef72f14bbe1"
                    }
                  }
                ]
              },
              {
                "id": "ba2bb93f-23f9-4f03-a5e7-97bb33dd3d69",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b0f0bed-9771-4f14-8ced-ce3183e16589",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98b08188-73e5-4c1b-b46f-331d1dad3ecb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2a8446e-6051-47e8-b77b-3865947b665d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a7c12fb3-8802-4519-a28e-5b0715d79618"
                    }
                  }
                ]
              },
              {
                "id": "173a9550-64a0-484b-aff5-31b9aae7f0a0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d46875e-0cf4-4015-bdcb-c5215ea5ed4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c568310-0b80-4423-9763-4cdd6b646809"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3851e710-3650-4eea-8aba-c7c0b6ec161d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6868b3c5-1ea7-4eed-b5f5-0e859f05a13b"
                    }
                  }
                ]
              },
              {
                "id": "104451de-fc34-4351-beb3-5257a3e0c2d6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e365367f-a591-404a-b16d-16ea25c3542c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3afddb6d-d7c4-493a-bcaf-fba46eb125bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6f350bf-381b-41ef-8689-c6b0d9a3ffe0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "71a68a01-3ca7-46dd-8a6a-5d35f2364332"
                    }
                  }
                ]
              },
              {
                "id": "744867ad-e766-4ea7-80da-70194f674c3c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cbd7ea2-042c-47ca-91b8-25229a102dba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8732cce-6da1-46ab-9d8f-95aacb863c64"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2078a659-34cf-4ec3-bd75-61bf561dba6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c31a43e0-c751-4006-b960-a8b5b2fa4cfc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd2e1588-e206-47b0-8285-c909bf2b0389",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9746c0c-21bd-4abc-8f69-feb0cac484be"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cec10538-b843-4942-a8fd-c445d450e5cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6cff480b-db4f-4c74-a7a3-65c33f10f9cb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1d640d1-f325-471d-b2b8-0967d5616ceb",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b6f2b502-c419-4e88-acee-aa572da4e098"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0008d1f-ed88-4ece-8490-fbff144883a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96f05908-5fb8-4af9-9a0f-cc1f57b20462"
            }
          }
        ]
      },
      {
        "id": "45b5c1e2-898f-47ac-9658-87e2dcd01d37",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ea0622ce-1b27-4e40-92ba-6c3fb61db5d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5784ab6f-b7ed-4de0-83c3-63b246465a0e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3cdfe9de-8590-4b58-b207-bd5fd6eb6283",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063eb486-b3b1-41d4-b722-cb9b2b6a0953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b9c873-f432-4483-8040-55b683fb954e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf08a60-4e78-489d-b533-48b6254955a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a46280b-63c3-4cc0-8462-2a4f9dea469e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e3f52d-b90c-4b5a-8178-c0457518ad6f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2aea92-3734-434a-9a90-b908d311544e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b41fdc-3a5e-48c0-85d3-b0ac5f0f2fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9348f7cb-6829-47b6-94dc-73cc6b363935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa5b89c-8a22-4c91-ba63-fddb73156f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42669dc0-ca58-4916-bc92-a005d8f1144b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99bc089-fab9-405f-86be-736996c0405e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c4c17e0-7eec-43b3-94a8-497d653e6b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ef9dff-535a-4d0d-a1ef-fb4a77dab7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f60f1895-907c-4e0c-8ede-3cca0e1709eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ce1119-bdcf-4fbd-a1b9-1edd7f013d4a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04a139c-052b-42d8-a24f-f45f434d27f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352abfb9-ddf6-49ca-953c-2fb7a5af9338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd11f084-5722-4ffd-86d5-4ff7a2c5dc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0829459b-9751-441b-be07-83ec612e3894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f38a7c-8ef7-4fed-a798-9718836f0ec3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec75a9c-c2dc-4647-92be-f97b8fadfd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e49a4f-44a8-4b7a-92a7-f8a33ed25ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab10f03a-b171-4816-a5c9-b1f47f60eba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc2b184-0eb4-4ae2-9aaa-bead703a4e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e567f16-b16f-49b0-b579-c064b74eacc5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9aca26-b86d-4693-933c-1afd6ac43e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "111628b3-4200-479a-847a-b2def7b1af4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838067db-87d7-4907-abbd-aa3dc8d24249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d76354a8-de2a-453a-bae3-565851a5dcaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56751f6e-b806-45ce-9eee-0aead5104f58",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfaa3df1-0375-49f6-bc36-61ccbc52ac30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a71bd2-6053-44fb-bbcc-9e857b159ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a0c2ac-780a-4428-9d9e-4b4796631b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "03888f0b-6aa9-4949-8fbe-1053c0a00b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef14563d-db4d-4ddb-b241-4e1afdb4bdef",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7502f86-183e-4ba6-b98e-006a181683ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad658f0-67bf-42b9-b654-7c8258eb0048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f659d2f-6a8e-477a-962e-fe34e0e1fe74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "298e00ad-9f84-4156-90e8-be027861bec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c58e5a5-a918-4d47-81a8-1217970ba726",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4daee1-6a8e-43fb-8970-1ed2d7b625c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8654eb8e-a98d-41ea-8e22-88dc5ddc246e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54016bae-3a3d-4957-b280-0a29d0ed1dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "defbdf1f-6663-4c6d-b11a-96f708817dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ccd1af-b84a-4d7b-809d-dfae7343537c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb41b41d-5af8-4c68-8ff4-15fcba508a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2af84eb-1689-4dbb-b130-1928cd150835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a42b41-d459-4980-b9c0-d01829f4bb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0faf10b1-38f6-4009-813f-8b8529117a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da20808e-5106-4e25-a984-555def8c0e2a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1373d1d9-1025-4e82-8b5f-189b8ca8ab12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819a7b35-56bd-4d77-ad6a-88167523ddc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b062b5-5ad8-4664-b45c-d29fa8ca9797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4568fcb4-1bff-45ea-85d7-c875474cf8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc56d67-90d9-43be-9208-18b43c9becdd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e09b20d-ee48-4ab1-9d87-748ecb979427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bd7a1a-da0b-461b-bdad-4ab295e2efeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4bb90f-f932-4310-8ca0-2191ecc54aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dee3505b-e5cf-4218-8f8e-b2a3188074e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c5c758-3c12-4f41-9591-9fd76b559895",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af31557d-36fe-4f62-9cbf-7c8dd4015b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bb2ad9-77d3-411d-b4ea-31dcb8bd7508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516de6b5-89e1-4d1b-97e5-c16124e420d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea18779e-f85a-4d97-b6db-8d420e2533a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60291be-9486-4991-be42-ffac4f0daaa3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92735680-157d-469d-ad5f-b89cd488fa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5e80d4-4a5c-4f74-b7b8-ccd1f9a1e1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155ab310-ce7f-4365-bc59-69bdc228f12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ac6dee-46f3-4404-b773-9a99c7b5cbab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a854167-cdb1-4ef3-8653-90a3e2da1744",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7758ab9-ddbc-45b6-9d79-26c156fd8ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4397eae7-abb7-4b14-920c-2cfe334d2338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c423f0f-fd1e-4a64-b1ec-b3e4ec94ad57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "de941094-5189-43e2-b3ff-6b2b743a44d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8186f29c-f84a-45e5-b54b-9b5187e308a3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19083aeb-24fd-4f77-bf20-dd619dfbd173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf8990c-3ffa-49a3-b5cc-5e6410517568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d89e3d-1de4-4a9d-9419-e6f9233f40d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "331766a6-cb65-4e52-9b88-3cc9df256fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935bba15-90cd-464f-8162-cec486989526",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5babbb8-fa24-4201-a147-b745208f879a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e6235e-88e4-4ddc-ab5a-d1618e5a300b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cd3a80-8348-4224-ac15-c501656e69d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f150199-493b-49ff-ac47-f872079bda37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46cda5de-33fa-408d-8e13-8d373b4da7dc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eaa4bd7-028d-4b5f-8312-ecef2f442321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aefbde62-7836-4fb2-9b64-2b8907160102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c07fde8-6110-4ad3-8d9d-7d06733427b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4af9fafd-5774-4fa2-9143-eecd84474ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8380324-d7ff-4ae8-9350-bec05f698c45",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fdca11-3afb-420e-adcc-47b73d63dd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a92d61f-5efb-45f8-a0c3-0ea31900fbcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0ed498-ffc8-49e0-8277-02799869e606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36945475-c57b-4755-8d6c-74ec0f61d5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f152d5f-f7c3-4dba-9e40-6034fbf6f82e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3351b274-0d6b-4d9b-b206-8dcd172bbbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948fda33-ca32-46df-92b3-4e1c5c03eb95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88b063b-0885-4e7f-9772-a1bc00e8702c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea7d314a-b313-4eb4-944f-5f229dda45bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3472c15c-de7c-4bda-981d-4546477d227f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bef7f7c-d898-49fc-98f5-7fb99cf27410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e4aba3-b241-465b-b03a-756fbb272dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11eb3fb-bf99-4531-8171-f184c7a094a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "009d5c75-cd53-45bd-be3c-a5dbfc3250d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320aa048-48c6-427e-a476-5f44d3442b7e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdcef6e-59fe-4365-9891-22254a853aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ecd33f0-1648-4134-8349-b4ec7259e373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896b7797-31cf-41a4-b0e3-7adc98ebc8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4adad005-e6a5-46ff-920c-dc0aac155bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466d6557-b5f7-4b6c-93de-fbfb7b5cae76",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c419eb54-a737-44cd-b7df-e426be8900dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f9eab9-ec3a-44e3-a7c7-a331783599b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351f6c7f-3d24-40d9-be93-af0553037592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "664f48eb-d088-4d2b-98c1-c8852e5b4688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1bb2066-6640-4e15-88bd-8b4ca33f99a7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6179da18-db8d-4e48-82c9-285ce224c8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82f85c4-21fc-4b12-a714-6c68da379441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94f115e-1f22-40c2-9a37-ce988bc67316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc57678e-8a92-47e3-9585-953c1e03f46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e907a56d-209c-4a15-8c55-e04280eb59ca",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0310285a-2de7-433a-9590-c61e43920e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c98583-4bfb-40dc-b4bb-cbfafc5296b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a623e556-451d-4523-b383-553e9700b35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "818505c6-bda0-4a7d-ae2b-c83611a75d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8948dd-edf3-4ed6-8b3c-88c13001ce7e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fdd4f6-d591-47ca-b05e-b08d19b3cc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66eda5f9-432b-4418-a3f8-e88a6f223b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ae9528-b1b7-4501-8dc1-45754b79762d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59ff8813-4f3a-4e80-998d-549ac6bb1b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460b4fdb-93b2-4c39-b30a-64198c9be7d9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d456f4-5598-4639-a1bc-28fdba690b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45259ac7-c752-4f5c-9338-22a53b3981d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bc29ee-3d21-4d4d-a437-1d70244c49c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "220af600-15ad-4378-936f-25f7795d07d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40652ddf-94d8-428e-87f8-c2f18d00f16d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005c753f-669c-40c9-a7f5-8dc11610bf96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8cd8b7-ddc2-4429-8375-91ce31427831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f46289-cb70-4507-93ff-07e84d68ae78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "858cd5c6-10f9-4ced-8c71-684f558b24ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91d034e-f401-455a-a6cd-57852656f521",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536d94e1-859f-4a03-bb57-c471a505697a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7607e416-f64b-4680-b3bd-02a47f90c195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4376bdf4-752f-4da0-8af1-5da4e8a48037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f6905b6-3a33-4421-8beb-8d3a102a750f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a2297e-25f4-4c4c-9eed-fdee07ae0f75",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a173e7e0-497b-4139-a576-a859d6cfc4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9067070-067b-4cc8-9066-89968c0ebb47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384bc361-8b53-4011-89af-cd663816036f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "407ea811-324a-4172-bd33-6f8ed1d2356b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b96df5-e3e1-41cf-82aa-47e739950fb4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9709b0fc-bc45-446f-a983-4169d01f13ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93064007-8774-4421-bd48-4e060350b953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc21247-34f1-4aab-8667-4c7d28c488c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d359f78a-079e-47cb-8209-fb9d51e28233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a067c9f-7fa8-4e8d-85c7-8a22fff5e2ad",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55df3069-073b-440b-b80f-56a4c84eed6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f27c813-ad45-4475-8fda-252ba02cf9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfe96b4-9012-426b-9346-4d16b1514e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "083c1d8f-7176-4538-8242-2686dea7cfba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9299ed59-be98-43fc-a431-847d811bf748",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "48857bad-2fda-45f1-8056-00935216c400",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882b6f2c-21e2-4308-882c-2a2547008f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6e4614-2525-40d3-9bac-c563b9212bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be22b6a9-d72e-4f88-a093-f7b33113f52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9bcb5111-7327-4f8a-b838-3688bddf9deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fc0f8b-1409-4440-8e13-ed1f463a9218",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162d0e29-70ec-4d8f-9b1f-ef923ae22b86",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "818c249e-4290-4532-b5b3-90866f4b0c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f8339f-cab1-4731-8247-3a11f8587a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66e95c92-260a-4fb6-84f3-cb07da02656c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe6c86ee-9340-406d-8c27-d4c92424bb69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06a493a8-6dff-453c-bb23-17e8a898e35a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a29649fc-85a2-4043-9b1a-066ed0a96ac1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71f13da7-ac1b-46e2-a721-8880303b594a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fcc5764d-36e4-4e06-8be1-14b58d45c5d0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cb90c1ce-bec5-46b2-8206-c3b6dda709fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bbcb7ba7-adb3-462b-95de-f07a19ef879c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d25d578-6b61-4c78-b9af-bf9de6641547"
            }
          }
        ]
      },
      {
        "id": "db7461fb-03a6-40db-9b92-dda018a21064",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "313e3bb9-132a-45da-9215-725439858714",
            "name": "Negative Testing",
            "item": [
              {
                "id": "666226be-c1a5-4281-ba95-1e899d8ee796",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e437c41e-4eda-4afd-afc1-b1410984d7e4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0fa4af-b94b-4330-8517-fa2ea28a38b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34027a10-9e23-4e06-8e36-ff7de37e7c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf8698b-ed10-4441-84c2-0c100e33c8b8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5481300-b55c-47e3-acf0-33c55598483c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b943d7e3-92c1-443f-b90e-5cf6cf0c6083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f175d729-f7ff-46e9-940f-10909d411edc",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "460d020a-bd99-45c2-a2a6-f02ea2acfa61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf922b1c-ded6-4c28-940f-4b7dc5f2c481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0652cb3-0f7a-4ee3-98e8-446b7c0a2e44",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46da4885-c38b-4300-bdbc-ae2ddcc0ec9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ea71a8-ec4f-45af-a3f6-bcaf972ddfd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621b7226-95ef-4b8e-8920-557b1b4cc892",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4382391e-d58a-4b75-b4ef-836cd0ee6b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c257a91-783d-4086-a108-83d65d08d9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972a7778-4a8c-4906-a9ec-b08075858834",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2e6e07-83f2-4a1f-b9d3-ebce745f8347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878ef7d1-b4aa-48f7-a96c-8ec7c00c748f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ab3cb6-8862-45d5-aec6-46a598796b5b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de23feb3-159f-4f49-954f-819286990db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72cbcc2e-0411-4bf0-adc0-1dafb2f51eeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba292420-d5ae-43fb-b556-a5b10219f7da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80af627d-4a98-4adb-b863-379598434a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10ef0e3-efcf-4230-8371-92d3eeb01bf7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3929acfd-e5f7-4ed8-8ecc-b0e38773048c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dfd8b19-5296-4305-a94e-1b2dbf58f5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4e6129-0739-40dd-b528-f245e293ab90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b1e4dd-fa69-48e9-83ac-5b034e05dfcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59970a7d-85b9-40a4-872f-7ad47808dbe0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5367210-ea09-4731-a2d2-289ad420b1a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48195972-6aa9-4da1-9b41-f0bd56b98892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf3dbd7-4034-4086-97cb-19d2df463cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541caed8-3e2c-46d1-a9dc-3c3df9687501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59270b0a-2123-484d-979e-0a548618ff1d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8927fe79-7045-42cc-8904-4351b8fffa04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17c54a4f-9336-43a2-8e22-a1be3f195d29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5320516f-d8ab-4d7a-84a9-76006e99b08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d024090-74b9-4ef8-b3d7-fe8761402e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce33622-6954-4cf6-95b6-b68e78168f03",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cde6914-1760-4bf1-b798-10a060f3d4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fa0a6a-e3f5-43b4-b9d0-f5410f73eb71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "480eb7d9-81a7-4d3d-a862-4de35314b077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ccb8db-f094-4c5e-ab2d-92a673447025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42877a0f-20a8-4b32-b7a1-9e4548133e83",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db89056-5fc6-4da1-84f1-0a2ae498fdff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a26864-75b7-483d-959a-2c1086f7099f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9498c3b8-49a4-4448-8119-15a8e1e0a264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41a0631-6fd7-424a-8f50-29400ea34671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71682d5d-b6ee-4ac6-92c5-f53d5dc2366b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1899db0-0672-424e-bf66-e217a8974d38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c42a6b3-5f0c-426f-b932-14daf8d361a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ac2b14-fa4f-4b63-8b5b-bc1c8ddb7d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13a749c-28bd-4833-ad69-0f3f89b225eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b8cfd3-fb7b-4da5-af24-cf9b09afa3e8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7e6d3c-a61e-4aef-9f23-bbe084d47d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "716ede9f-e798-4055-8b45-a63f9a297b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda9432d-9e40-468c-8047-67708ec0c115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd07e511-7de9-4263-9570-09523dcacfb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826bbe95-861a-44fd-b4b3-fe7b9c2bc621",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ae77f3-4509-418d-929b-c75c92fdf125",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca159979-89d2-460d-9a01-5c0f74164072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b00fd7d-3afc-40ff-b58d-4b657a142acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90579e4c-9649-4871-bed8-ed046f87cb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965be85f-7a1a-45e5-b950-96fe66f17f8d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9b3c19-cb99-4c32-b678-258ccb0e62be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a7eb73f-506e-4ae3-bc56-f10ea8d1e5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2940e8f3-993f-4fb1-9136-184b6161bc31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836e8e1a-e0ec-49c6-9faa-a11a4bb20ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0b6385-62f3-4a07-b6e1-f712dfd41a9a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7f42fa-54fe-4936-abbb-3d584279eb54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec64567-1812-44eb-ba8f-91e6e3615f79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5163c9-98a0-4e87-9539-fc26469b16d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85535b94-a345-4531-8e2d-1b04141bbea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff3b3d2-756b-46bc-9212-90e7c0f1e4cc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0553ae01-7fc2-45c3-ab48-17a7c2a5d3a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00449116-5800-4fa1-a6a8-a7ad596f90d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b23df11-75de-476d-8d10-6ecd3caef04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea83d3e-840a-47bb-8fcc-61eea56a3e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08d24cd-3918-4b67-9f91-8e85ad977101",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588094e0-0972-4e0c-9868-8af3a7954ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902b6560-13bb-4aa5-ba4f-eb94cc658b14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a3e8c9-0c4f-4d18-b562-c63b6c99d9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be60d55a-d53f-4c0d-a1f9-3f1a468df8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a19856-722d-4b5e-b45d-bb9548c6b171",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ae81e8-aaa3-44b5-809f-a72328a75707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd0ae8f-715b-4d49-887f-3494cf8780c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5de233d-824b-401c-ace4-fc1567725295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f359d3f0-4c0a-477e-825f-fa547a5d33de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e81ad2-e82e-4398-bd6f-94896a9f2376",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44b1e91-71d7-4c0d-b579-febc8eff48da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385dff57-0004-47d7-b431-2fec0898b974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0ac671-7da5-4885-a9b3-65ea43b4b566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01e8ace-f6c0-4916-834e-0d77e8000ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0489ef1-25b5-4240-93d8-8d5266f65966",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427727eb-7357-4d43-9be0-036cb8045dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a44ba07-0abe-42c4-8fb3-5011ff613b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "892771b0-c59f-4222-8562-98f41edf3428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c37c039-753c-476e-be50-dfddc1de9b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3600d2d0-861d-4582-8de7-97426aaf7baf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a44ed8-fac2-4cce-8240-46627254bf37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea678ab7-c1a5-4722-ab54-1d3b629f556c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee86f9d-4b2b-4505-8e94-eb8b7ab87a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0b6ab7-442d-48e6-94a3-f5e1d2bce098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1e866f-4351-4a5c-a4ad-12f54339dcb9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26b6d51-09ee-4bcd-9714-82d55009027a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52dd9a65-e271-448c-903f-cb5edf195bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0872f9d7-01cb-4c60-a5b0-8a0d9be594f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e1de98-3d60-4473-80cd-23729fa35373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389ad3eb-e039-438a-9acf-72c6a0d9a2d8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0a7032-239c-413d-abcf-4cb6a05f3ecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67759ae2-7edb-439a-bc77-a3c8c620874a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863d3887-0ffa-447a-b421-9c27aa2ed240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98317d9-0c24-476c-9d1c-042013e61c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fc89a6-2b5c-4c7f-9566-37dddd85f082",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a7ddb1-0498-4323-845a-46fde0de73d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "745c9c7a-c4b9-4945-b992-312009a53500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6046a8a5-87cf-4e52-91ae-76f460c3f33c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ffb4626-d326-48ee-b579-58a68735c017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc2ebb0-3021-4091-b650-53e8a632639e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef747ba7-a32c-412b-a6ec-e1b59a463ed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4c30adb-99b7-4aa5-87e1-d5853f59ac04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "511713e1-b10a-4faa-8092-6cb572c26b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9143adcd-ee42-4b8e-861d-6530d06d7f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6190bfc0-7f4c-4da8-b811-3e3936150571",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e4b220-3fe5-41d3-be0d-8e3539562a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e78f2e-789d-4825-b172-1da42239da9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7440fb3d-0b7d-4eae-be8f-8cbf91ad4cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187bb56d-a05b-495e-994c-c24c7f52f474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b10edfd-84c8-4a22-8478-456507059c0e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99966c1b-c1c0-4992-aeb7-8084b2f6c29c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e710ebe5-549b-4d82-8eb9-fe922b1e54b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d507857b-1498-4d24-8f46-2638be62b72a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8782e1bf-a250-44ad-a059-7d217b1f2c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e26a61-2970-4a6c-97d3-7a3700b82864",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396aadfb-7f2f-4206-988c-f5978f22383a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9373e08-b3f0-4a71-b753-a6015a6a4e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f70f35-5219-4f07-89f4-c9a09d5f1b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf8f696b-f2b3-4439-9f09-de8be015f1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fa725a-38b5-4388-ac3d-9229b3a5e0df",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da9bd1f-f340-40eb-adb4-4a49418c80ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "764efa13-9876-4675-821a-189da910ab57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41177fb-1932-4b70-aa32-6401f783e4ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f61029f-7cef-4d71-8915-b4b1f987e953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c101d9f-fca8-4f14-9a39-4dcc3b521964",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a71662-cad5-4575-a958-c9ce8fd494c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f0bc635-0d6f-4cbd-a48f-a982f9f48c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e97511-71ca-49cd-851d-bb3a3ea46ba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f96869-f332-46d6-b879-7210aeaaebc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e22b88d-8750-4681-b606-df0e6c1119cd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e656bfe0-845c-4071-9f6d-54ff870ebe53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "036f435b-d333-4089-aa5a-fc07fa6bf561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fd07fb-017c-41c5-91cb-be4d8087a53c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb6ebb1-eeb0-4d84-ac8c-c2b6a90402f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4670d30-3df7-41a3-87e2-42a65d7e80f8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26db76c1-3718-4e84-a435-4b84af911900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05fc1a11-4636-49a5-a042-0e71a16b8e02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854a7305-c997-4a00-abd9-a01d4df1c3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96cc13d-d297-451f-b76a-fbb81e7c91fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf99c7df-87c9-4fc5-aa42-79c40277243f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d37bb03-eab3-4d40-8655-6bfdadc476d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7f9b3c-6bbf-44ff-baf6-ff3c892926f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8394e7-ce90-4079-8b54-5a2527b465f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c55b4f0-3a3a-4f93-9134-7d6abc25d3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5dd640-9220-4f88-a37a-5afa7782da64",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e78384-73b5-42e1-916a-4fed9132cde9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1adc154c-30b6-4cea-a0e6-8cdea1523096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67857d0-ae44-48b3-a424-0069c90e7927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2dcc60-b023-4e4c-8700-91e1cedf9a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5ea9f5-4a40-4cff-9ce1-b4a442a581e2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088d80eb-440c-4cdd-b2bd-4a6217e7d02a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e22fa56-9396-4dc6-8ce5-1d087d60e983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb29ee4-bc0e-4467-8f6f-f920e41933f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6c4e3e-907e-41c8-928b-08c6adc3f3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1cc266-2e24-4237-9775-8ef258c1e4e7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6cbbe6-52c9-45e0-92e9-807d2c1fb6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c512b01b-bfef-4ca6-af25-10251a41cd55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9be290-e6cf-44a9-91a9-9b9c55343d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14bdd9af-0c79-437c-8985-e5971ba7308e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd4bf3a-6a4b-4dbf-b42b-0941bb3181a9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12aba1c5-43fa-4f2c-8654-4eb62608c652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037531b6-8768-44f2-a7ac-5285c250a29f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f47b71-cec3-49c3-8522-8d9bd07bf2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b65876-38c0-4af0-9ecd-f8f40572c2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e694c682-8214-43ae-be62-41a19c34f911",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd04d39c-8dab-458a-baec-1861c97c4602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3870156a-0ae8-45f1-adfb-26da55369b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8dd23a-acdd-457a-8649-6e16491d18e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71948b06-2e81-40c2-a707-5f9d6dbcbd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e351f715-3210-40d3-9d2b-f3ef34843e8f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac28e9ba-d208-4be2-9c3b-208dc359360d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b846f1c-01e5-493e-a82b-431c4c70ef4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac09b95-95ba-4c34-ae65-a35a04817b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a78a6948-43ad-433c-97cd-586190e43012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f720050e-3715-4efa-b6cc-70823e62c0fc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d343b857-dba1-49da-97be-a480c73007a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44199cd4-0d90-469e-92b9-ba3e555f92d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42cbdd7-05b9-4cd9-b4c5-be843088a080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36791b16-7616-4b59-992e-14ac237e1204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe60949-9953-4783-a11d-d41b0a772524",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9b584a-e9fa-445b-b346-a3c86bcac616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a082ac-f52a-442f-bcfc-3b11eeb1b9b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34511e2e-8503-4d4f-b6eb-ed3518f03a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53701ef5-8380-4297-a343-cdf1386823c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a34692-3d95-4f1e-8615-50af8200ae76",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b733b00-cf6d-436b-90b6-bc65a54f3360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9a3340-4b4d-457f-9775-f8c1e2c91f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14a1782-17e4-49ba-8072-86e0bf73df0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7e3758-be90-44b9-9d40-93cc5a000fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fc582d-48d4-467f-9207-3e57f1313068",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214d5281-8a42-4999-b934-dfa22b565067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878af063-d6cc-43f8-9261-b6ceedf58f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9737698-c72f-4522-9e02-36baab7fc6ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22fb21a6-5616-45dc-9555-8b8b4426900b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5f5428-50f6-4007-8349-420e7d276643",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cd6a63-7c17-48ca-bb80-5be5b29299a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a991e08c-c860-4939-8aa2-4a02231f9fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e36c08-80a9-4e92-980b-824609887028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e936457-e985-4a8b-93ef-9de363862f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04b8986-3091-458a-bc29-e1d80b368785",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f72a051-05eb-4117-8917-6a844938c37c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c671739-2ae7-416a-95d3-3bdaf4172e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae721ed4-830d-4a16-bbf9-0c0f4a772ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618a5c22-2a57-400d-a011-336cdd826685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5fbfd8-2272-4723-88c7-ac1d0b0b729e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb067004-e816-42ba-a317-d86329f0a72a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c41612-6fb1-4fd8-a707-a54e208c2f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c0f9e5-f17c-4e9d-a431-577a4fb472d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859c87a0-650e-4b80-900f-08d36a496601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733b23cd-97ea-4a21-8027-0e549ac0ca88",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bab5c1-7b2f-40a6-907b-0a86ccb141b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d638d3-9590-409e-870d-ff24f53d0fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bb9ce6-0ad3-48f2-8ce7-4fd1020fab29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e23460-671c-4acf-b45a-88286d23a305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00fc815-2223-4378-9f4d-3a67180b012a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2016cb4-840f-4391-932a-f0244be51b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be720aa4-2660-4a2f-a4c2-2e0dd5e071d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "736bed95-aa81-402a-ad89-cfd6a7538c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aaa4095-ee7b-4934-8490-501c372a2320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6203fe-e9ec-4a12-b04b-0f6ee95e95d6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd5355d-17c7-438b-bab7-ff203d8ed6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7860a5e-0ed9-4391-8ef4-c2cfbfa80db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9c9c60-5cf8-47eb-8665-98c98363465c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a7b10b8-2db2-40ff-a7e4-0b40fc08bf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f865f1b-dc4d-4ad1-84cb-cbf2f0debcae",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37359d22-5ce3-46d7-99fb-586261a31180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddf7a2e-efd9-45eb-86fc-b1cc35775b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0b5bcd-012e-437c-adeb-126e02387b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae2693e-085c-4822-ba67-b70dd4dea100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a741033a-6718-4c7a-98bf-33a59f956b84",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccb38be-9c8b-48c4-8d1d-099d58fcb6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6243db09-4e29-471a-a3e8-8339bd5d3ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413be16e-fcbe-4add-9731-efc9c0ca1e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b9b873-8930-4e0e-b4f0-bb83a8052c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c67254-9fc0-43b4-9646-9e5624aa4068",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938d1d4e-bdf5-4d0f-a1f2-6405b04627cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34c3c2e-b7e9-40e8-8647-19e856bac135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebf9a18-0a39-4482-8df4-c66fa9c69379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f94774d-3efa-4f8e-93fb-15394109d97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6587be93-6159-440b-aac7-ad0b0030cc5d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8df8c8-b5dc-4a82-a4c5-b9978fb11bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd9bb78-1d0e-4b9d-bfb3-6c8b242df138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913fd83f-f8ae-45d7-9002-f74e9563f535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ce458e-9fb2-4ac8-af7b-d40a4b804732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ad1b74-2dd3-4f7c-8db3-67ae53adce4a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1861dfe7-f523-44a3-bfb4-ffaf5ace7935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279270a0-8160-40b4-8fb1-2fa2af376d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc32475-80f7-40d2-af4a-f1775de80211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1be359-68ca-4f70-9112-0e1eeebdf8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e315a5a8-bb40-4488-bb9b-f5abef41540b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a06380-4454-463d-8632-84e3f47fa705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a811c7-0e53-4f00-8df9-27b965748941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0700ebdf-85ca-4302-8ca5-8a5fdaae6a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c9c82a-d0ae-444a-9706-b4ee806e9e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef933e9a-5790-453e-959a-62f3c7b9d730",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ebdf4e-1f63-4b27-9b2c-2ca6bceef43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b9c68a-f105-494d-98e0-c1493bf3c42d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242b759a-2ea7-405c-aa1f-1d9c5e78a729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd48c6b-8cc1-4885-8211-727d506e6747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957db31c-3630-445f-89eb-71955a8dfa90",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ac94ca-3256-453a-ae63-261cbaa0db4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1279f37c-162f-4f2e-96f6-f4045e945701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49b2233-5455-44f8-a353-b333ffb8de39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e2b2a6-605a-40f1-8ae0-61ffecd3191f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f04fec3-a38d-4d24-9a82-2867cf642976",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e7ae17-60d0-42ea-aa4c-c822bedfb966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5755f846-084e-454a-8faa-bdec910e347a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee61e93d-720d-4539-a91f-91b02b8f0a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09bff65-abad-45ec-8ecd-ce0b72c00c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28001005-693e-4b7e-a1ee-9f9f9f661b2f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336a0190-f12c-4727-afb4-4ea32438fd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88eb9633-dc6a-4739-b81e-3dcc1e5e8025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "133c49cc-d3cb-4ff2-8880-0274bfaf23b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34bccdf-b9b8-4827-976b-acea151c8112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7696aef3-8425-4c15-9445-4cb6fdb1f570",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d49dd2-ee28-4224-b388-2ce889374590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ebf027b-c1cd-4088-be50-8cae9f4b29a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30faa6b4-dd7d-45f2-93f0-54b6d58a6722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c67e7a7-9ee2-4ca4-9d8a-e9787453aa56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1831e5a-47dc-4550-b2dc-a8296801fd1e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3632b1-7f8f-4c29-8530-1c89e4abb495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b7b501-215c-4f0a-bd14-35aa76dbc2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1caf0f8a-4710-4b2a-a52b-f6992d757e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19cc72af-753c-46a6-bd77-f7ec9bf5eb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5095af-b831-4288-9b7f-0b221b47acc7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6814e8d4-409b-4401-abcf-fdfa41d2ddbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6a90e25-98b6-4f5e-b248-b43b6ca969ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de639ea6-9986-4424-8492-6e648713b8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb21e84-38c0-4fea-b843-506e4fe750aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43aed96-a6aa-4ba1-b005-532c8035d629",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9074c6ca-807b-4444-b032-937a54d58851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d32b1d87-6352-4c5f-9fbb-45ef6cd3bcf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49737cc-dc2d-47f1-96a8-fbbadca2dd9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ced7a6-8494-4677-82d2-de5e6bd72079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906d115f-05fb-4ca9-ab35-dd11eefababa",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e296ce6-53ba-44c5-9047-da05c0532ee7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37a7a390-59f7-4374-afb9-a6c034226373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6a7334-f5b9-4fd8-a1a5-906d1b6a4889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92751612-487a-4356-9f03-4c2e6076f3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f270c196-cad4-421f-b392-64f059e35658",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9124fde-b916-4c7c-aca1-20fc349ad405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "101c3faf-029e-4577-a36f-8a27cb771690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c157e20-1e4d-4466-a70a-0763e4309843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fec24cd-9bdc-493d-b75a-d664cc47d013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72386b9e-822d-4f38-8a90-4eb1ecf46fe2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6d8c73-6c62-4eb8-aba5-94b2cec88c6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ceb7863-0867-477e-b9ff-52b31b18395d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ff18c9-239d-4613-9254-41d40a505a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7876d8d2-3dd4-448b-abf4-745d3683b491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64aecc12-7466-41a4-84bc-ded6a89ab87a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21381cf-bb90-4883-9794-65b421f7ba51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "820a9358-4e26-4722-97fe-6fa858a52775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0833b1aa-4cd2-485d-bebb-32c775b01550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b919da4-6da3-4204-b684-144a0cca1178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc141dde-6fe0-4a5d-bc27-db531f8e06e8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fee9106-9e45-4e76-af0c-3ca8268d915f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e93a554-481e-42ab-ab80-0b2bed4df849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a355b424-1e86-474d-bfad-b3b267c27f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0aa41a-3b04-4f4c-ba79-78ab9aafa729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4ab151-1189-49d3-820f-c9815d2b15cf",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c0ca26-a0e8-474d-86c7-013533642884",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ca03d0c-b144-4d91-a529-0e8feee8fef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9e3490-0d50-4897-b4ce-e40dc519c684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53980964-ed28-4ca9-a150-cb285e565f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e99519a-8710-4c78-abad-5624c58d41ce",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d00f76-c309-4ca2-89d8-e7b29b2d432b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ae12b0f-8e78-43ea-9ee1-1d0ac811b204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f49493-5173-4eb4-93dc-6aec56bceec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ae5ed7-3b4a-41d8-bbb0-74fd6a1b2096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ae5631-9b31-4de2-aec9-f957939a1a0e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54059fa9-84cf-4be2-9f5f-2695ce8ebf21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47227b0a-ac8a-41d7-81fa-ba0d55c55de7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c7f9dc-9aaf-406d-afce-457cbf141f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277f0f1e-48df-4538-8a70-430826906df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea55cf1-9cba-419b-bebf-208fd2666194",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c613980-3aeb-4fda-b151-6119927fdb57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e07f2e9-c103-4e14-bdfe-b288e3ba78ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db45ae03-7b59-4ab4-be67-8495b7139f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55608fc-ac6f-4791-804f-56dec1c993fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbbd712-28a1-413c-929f-fdcf81d75dc7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275a24a4-dce1-40c7-9260-e3d6aa39b304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1262beff-1a7f-4cbd-936f-b849252b7a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d5cb9e-0596-4643-bb23-703b5f371acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e810c6bf-764d-4575-87ab-f455d407d538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe40fb17-78fa-4ed8-9b45-ca0480df5f38",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc1fb3b-df02-4760-9d63-440e908823ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c095ae2-8120-4cb9-a362-9e759d571ca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa6f151-9263-4faa-8b89-930e212382d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd888b9-678a-424d-becd-0a46754b2de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21717963-fd0a-4556-a984-186fc2cd4165",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fba4f71-c48a-4025-9492-060fee44a30f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5b28a14-afd3-4dde-b0cb-cffc147e8c35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b41572-685c-4c7d-bc99-e972727fd0d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8874c2f6-a8dd-42d5-99d0-235b776d8b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b4d86d-e9ad-43b2-8e6b-45a4dbd955f6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6649691-4186-4bf6-beae-c70230939198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae53c4eb-0ab4-4ed6-8e78-53663c8485a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0af72d8-9653-43d6-a62a-bd567cd6f8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e903165c-e0f7-4592-bb4b-c9f8a49b9425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f22fe0c-3799-4e97-b35f-ea6293af0b58",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef94d6d-f0a2-4583-a4a7-20523390f813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33e7f70d-ec1c-4923-9ec1-277c1736f811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cbfd67-a09e-4904-b092-c582ac8be13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "153c0100-b281-4bc0-a998-73053d6715bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52616f59-926a-4a42-bbef-6d3ff1b0a503",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe24c02-3e54-4bb2-8a19-8c2575aa1845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5825cbd8-30f2-4f9a-8cd1-9cd42eadea49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69e3c9b-a851-4643-ba70-02767614d075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774609ca-1a12-4103-8d80-756cc1133bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbcd470-e085-4d0c-969c-312e2dda613f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47a00cd-2610-41a0-bb9b-8700f15d0a4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "163c801c-cfb6-4a23-b23c-fa78935682ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee75866a-f23e-4855-baab-b2a4b751c37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "280e6036-ec3f-4200-985c-1ed474b1a32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11148f0f-5a23-4c62-8ced-3c2417cd4efa",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c717ca4-d223-4398-ac3a-020a3bc79827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00c8d847-ea1d-4cf4-899d-20b30a9bade1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8f2977-67c3-454b-b2a1-0c1f35f432e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06ec331-47ad-494e-957a-9280bbf461a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bccd52-0abf-4c2d-b250-021198711006",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee5462e-6fc5-463c-bd83-e51a108445f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caf57a79-d35f-4c62-bdd8-d0fcd79a35f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6b4cd6-09e3-4f37-af51-c49c5fd80c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28312f93-aba6-46ef-b7a4-877f985cda59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2265af-042f-425f-8de6-ab0b9064f888",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e93345d-7cfb-4fcb-bf91-e59f5ed3a578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19b14f49-ed82-4447-9c48-bc0143106160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66484e11-ee37-471a-b30c-b4a34af2acdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886e95ef-46e1-435a-8486-a2207aea2178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb10e710-4210-4f31-b7f1-03373d55d349",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dd23fe-22e7-483a-a99b-369c11fbbd58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f2260ed-84f7-4e15-a43c-ce2824e8d132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1a73c3-5dc4-49f0-b90d-fdc29374b275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347fb588-1113-4790-ad12-434f01a76ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78bcec9-cffb-4126-adf6-50a54c961633",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f7a168-0a57-46d3-8e58-e4948793cb7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63f2339c-c78b-4b67-95dc-dbfb2290a209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8539f0d1-adfd-4e29-9abb-8fea52df7366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d63a52e-ccd5-4c9d-b302-ffd2c0354144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac11b01c-0de3-41a9-83ef-39492b8cc0a7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879b82ac-a329-4f9f-97ba-64a1e924e888",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b8f8eb4-a64b-4377-80ed-f6d230958ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f08d7b-fd46-4de2-9fc1-b838491885e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff49063-f27e-4824-9c20-ba66fce348ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b316f8a-3be0-4c0a-9e42-da6e3ff38a1a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd770b6e-38c6-45d2-94c4-c35cc7868d07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cac13a58-419b-4259-be4c-e9b7b6995718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7910818a-4b85-4dc9-99f9-dfd93446956c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a10566-7180-4311-92ee-8f0c3abe0a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3717fa60-f2b2-4856-9321-9f43f26ad60b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816a0881-0d37-4d10-bf6f-ad2594054a84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c1b8783-80ed-4cd5-bc5f-965249f5f722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddaf7f68-6707-4295-a2da-8e929055b5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2584594d-ecd6-4b34-aef8-4639c0583be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6465275-df72-4bcd-a4bf-e5bf858393f0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8dfc2c-4d7a-4884-bb61-f6afe25cd3be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db5d563e-f1ce-4572-8815-36d4d56f6962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2473716c-f10c-4659-9c37-a728d63a4862",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19fcf3da-4230-4ac0-aab5-d6c5a0918746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699e6476-e720-422b-86ce-afa25c0758e5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28d8a9e-577d-48a6-ad3e-219c76b7f7fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9a49fbb-c419-4edf-b7ea-7870d00609f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6079bd45-001c-49db-9541-a870766ba9ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61787c43-f579-470c-8af4-76ead20dcd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa526b90-5c0b-4b87-817d-aecfaf654faa",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1086423c-695e-4754-ae7a-085a73b8e5c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22e3f35f-bd35-4fef-96bf-d488be9ce3ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37821c6-7b22-4c35-ae3d-554513e11cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4e445b-8d1e-4e4b-a5b9-840dd0000393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a856de-b0b7-44cb-8016-a57ec190f875",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4097881-9204-485f-9f7b-d063e14efbc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb74315a-1bf5-44a0-b26e-1151075c11db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6918593-b919-4355-b16e-0833a583281d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012c3bec-bd44-41e5-8a66-fce3ba25a422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d2a9f1-943f-4c6f-ae68-b4471326e5fd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1c702e-41f6-4e04-90c3-81c4381f5217",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e9958d9-fe4d-4d79-8209-2a10b4a092df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cc99be-b43a-4018-a542-298bb1e618eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99dbfa2a-7f31-4c34-9029-5072a29cc395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f250d9c8-3608-4325-96f3-36451e26a1a0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c5b491-0ed9-49e3-b655-d7028dc66088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "077d9b53-7bf0-4f1b-84e1-277db8a098e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6859f4e7-973d-42ae-b292-279d391f002c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aff4de0-d07b-475f-8f80-65fab631ac87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86df127-1fae-4da8-b645-3e475df98ec8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a70f69-aaa2-4fe3-a8ec-9751dbecbfe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2189bd8e-b2c7-4b98-95cf-e111a86d7888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90459147-7b33-4fba-9c63-1054c7af59a6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b3bca2-0e44-4f7c-966a-455616a88e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b445c3-4a8e-4652-a22f-949a0afbf169",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab5645f-e9f4-4862-8e15-c2b65741b3ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43f1b8f3-2bf7-45fe-a917-ee9d6ef1f60c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50229b51-9fe4-43fd-8694-9d314977f684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9bd29c-eee4-4e06-941c-a3a484f6ba88"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "567b0c46-68ba-4dad-9e4f-d3cb9cb56332",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "720bf37f-30fa-46d5-a577-92945663b067"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c40aacf1-4693-4573-b09d-47e290f88465",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0853e29-2183-49d1-9f8a-901c6046cc21"
                    }
                  }
                ]
              },
              {
                "id": "dc0930ef-6a49-4e29-b3ca-0d4a9c24363e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a9a1a263-e75c-4237-a572-201048349830",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f48c40d-ec6c-4239-a73b-4bdd1a7ddb2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d1023ea8-263b-4878-ad85-1cf0311822cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98afa0cd-775e-4149-80a0-0135a1ba3809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c51268b1-4c44-4ca9-b3d8-57db907d6781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65eef4de-fb3d-4980-948d-c8bc8dd5e97c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0e0743-eafa-4cfa-a736-2321c1118e49",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "244e6b7e-64fa-43c9-9c00-4168189c3517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5928fb9-4a68-40cb-8ae6-7f90e21afb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02e8cc62-a226-4878-a239-0f22494f84dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6efbf5e5-fedb-4738-aead-d01b5c0dcd73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddca825e-0aff-434f-a970-f0cc76e472bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2955d75-9fac-41bf-b92c-d16cf4c1de1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8042cd4-596d-4759-902d-e56f8fb059f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "c2d5032f-bd17-46bb-b8c1-feb789b7764f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5080dc2c-db8e-40c7-a181-f3b4bedced4f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16a1bcff-d060-4a2e-89f6-b61ebb2f7953",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5cc76d65-3512-4f15-a143-c9d1968e68ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fcedaff-30c0-413a-afb3-7d45894ef52c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6e808ea-671c-4126-95ab-8060d322716c"
                    }
                  }
                ]
              },
              {
                "id": "749617e5-87aa-4579-a4dc-9442ffa6a389",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "897c7425-759c-48ef-b092-f09dd9d2208b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2b5c1e8-2b92-4600-b324-3e290da15254"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d8c1ce5-d4d0-479f-92c7-96a1a7c06589",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59647ab2-5e4d-4f39-87aa-62a579c51b01"
                    }
                  }
                ]
              },
              {
                "id": "0e080f11-f310-47fe-89bc-978178062e9a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5016c8a-4322-4ebf-a9b6-accd442af860",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0af986c-c66c-441e-92fb-09e2b6ef4938"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d5d1143-767c-4210-8a0a-ad4b567c7a4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab3b5858-c760-4387-9998-531d54516253"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "961c4184-f6b7-452f-9a2d-b3e3d1c00e96",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9a92e282-430a-4910-85e0-f2d95cd4b6ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f72c25e-2c15-470b-ace0-0ad52685f99b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f54c60a-52e0-461c-ac93-6b729d203738"
            }
          }
        ]
      },
      {
        "id": "77e94d9c-f886-418e-a1e4-b5e3f2a29471",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f34914b1-cb4c-4dd5-90f6-44b7629accaf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03ab7139-f1ad-4d7f-bdaa-0e6ea25f488b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ed4da79-4a94-45b4-88e1-e55d78a55827",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73f5910-b39c-46bf-9ec5-f8891b5dd17e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8efb8492-d6e0-4c81-8328-8ddf50175c4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07e2f62-9603-4924-8871-66a2f17e4bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a808a50e-ad88-498c-9ddf-8b636ccd4e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14851f6-6706-46f0-a50a-deaf46d3a4cf",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4d6d31-8c8f-4c49-9fc7-01da3541574c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3c3c4277-138f-4b1c-a54a-e2a71f8ad57b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18258da7-2e57-4746-9d07-bbcea12ffe0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ff46996-226b-4aed-b0f4-cff9fb032b31"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53495399-ac5d-4ede-bc07-8d54eef082dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab3dfa00-1689-46d0-8296-6bf33534449b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "728b94d8-d7c9-4198-aeb4-504525a45a15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd4dcf9c-a2eb-470e-9038-cf9d0cca8982"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c07bad9b-6713-4334-93cb-41efa4b231ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5a57d283-aa93-4aa2-9a7b-a7fc1b4dadb5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3417af84-37b8-4b2e-95ab-d91e882cbbc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2ae4722-2368-41fd-9856-116e35f45801"
            }
          }
        ]
      },
      {
        "id": "d2e2c5c3-9bf2-4def-819c-ea98c290d477",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "db9c7c15-3733-4f71-af3b-25e7177f264d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8125126d-ac26-4417-8664-9af7a87c473b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c28ad26-6962-4718-89f8-a19a6ab48e0a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2eba227-8b1d-4841-838e-981b1e69b905",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cadfa265-5b8e-4d4d-abe7-9a736e5458c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "899df5d3-5501-4958-b339-879473a488c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "339b4c5a-a3fd-45d2-bbd0-f30554ce7952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71b45d0-b1d2-4c60-b35f-f7c45d9500e6",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7ec85a-df59-4daa-b97c-12cd3bfee3b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2998b865-82b0-452f-be09-4ad988316740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57e7c2f-fc2f-459a-92a5-571d18ced5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ea20809-799a-47b1-aa30-215a9a6b713f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6f5869b-c55c-4b8a-9709-6df97a7dbced",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18efa369-536d-42fc-be7d-836e0f3755ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a29c9ba5-7243-4cc9-8fe3-1eecf4662d17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2da0be4d-8bdc-497d-a60b-3afe46d1ad91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48bcbc78-2d32-45fc-a253-f91f1bd6005e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2d495eed-d9e8-4d0d-b31a-a306ff081202"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7bde316d-7e78-4146-938c-a7dd41f05b73",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b00ce0aa-10cb-40b9-96f7-ddd388fa6c0b"
            }
          }
        ]
      },
      {
        "id": "84d81766-3a56-4944-9e33-67b3fe2fab44",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b7651271-86b2-4511-933c-f3fe49f92590",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23730484-d6bd-4a32-89e3-a083b1a53886",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0eb728fd-7f07-43de-b902-b014ab78d175",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febe3d87-e841-4925-af9c-f9e5c048c878",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "09423ead-5293-40e2-a320-fb877ea552e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bcb8dc-56b8-4e79-bade-0df9f48317a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a49446be-43ea-4a19-847e-649792618d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24087462-6489-4d8d-aa27-6a7375853ddc",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23adfcee-390a-405c-a0d4-c1f7974a63d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6dbb10b8-9a94-4dc6-92bb-faeb0f80bd58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e5fc47-9fd3-4678-a02a-8e257594aba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e91b8c4-4960-4b08-bd05-5bf3873064f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "543ea442-0732-419d-a789-7b3d750c3693",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d40ca15f-ba27-47fe-b86b-c5072e096706"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ae5ae69-9410-4e6c-8784-fe1e3ec8ac2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8885c565-eb6a-415c-a214-116cc90d6334"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29a3d03f-164e-41f6-ac7f-ea08912e6b32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c27431b6-e1a8-466e-8489-d317d8057127"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6bd3fc51-fdf4-4a6c-a49c-833e92a267dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f493371-febc-49da-a803-d6c80dd6376b"
            }
          }
        ]
      },
      {
        "id": "3ca027e6-8033-4a04-90f9-5b0b92c15996",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1095ffc4-4fef-40c6-ab29-d481fb11bc27",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "380b05ea-95c1-4793-ad22-cf1d4eb8f73d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "18d9acdc-f561-459a-89c3-87e8216543ea",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "938a0b4c-c3e6-4212-ac51-747ec2fef372",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2b92768-84dc-4dcf-a87a-991e88f954f3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 90
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.23461538461541,
      "responseMin": 6,
      "responseMax": 797,
      "responseSd": 115.82451395341309,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667868388990,
      "completed": 1667868417689
    },
    "executions": [
      {
        "id": "58074020-ebcd-4b7e-94d0-ae47e432b334",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9b391f3b-36d0-43e1-85d7-2c1e57e933fc",
          "httpRequestId": "8336e967-354f-48ef-b85b-c60bac1172fe"
        },
        "item": {
          "id": "58074020-ebcd-4b7e-94d0-ae47e432b334",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8bafadd7-aebd-4499-9cfa-a659492797e9",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "8f73bbda-83d4-4e1b-9920-db77d6bccc97",
        "cursor": {
          "ref": "7eafd3f3-bafa-4472-9ca1-72343ade42bf",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7fc972fc-902c-401d-9f8f-fd03480f70cf"
        },
        "item": {
          "id": "8f73bbda-83d4-4e1b-9920-db77d6bccc97",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "52329b16-35d7-4e99-b2a2-789f3ef2fe75",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "0344edfa-9643-4c1a-bc11-1306cc44167a",
        "cursor": {
          "ref": "a304d525-d732-44fe-afdd-72397fe0ee24",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a690e296-158d-4b00-92a7-eb8271888fa9"
        },
        "item": {
          "id": "0344edfa-9643-4c1a-bc11-1306cc44167a",
          "name": "did_json"
        },
        "response": {
          "id": "bfa8dbd2-7195-49d9-9bc0-9ca264d06f29",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d67127-a1a1-40f9-873b-16b96e5d1602",
        "cursor": {
          "ref": "7c2e70f5-ebc1-4106-ba57-8cae19c0eec7",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aca09c80-87d2-49f5-b5eb-87b00b3902f6"
        },
        "item": {
          "id": "57d67127-a1a1-40f9-873b-16b96e5d1602",
          "name": "did:invalid"
        },
        "response": {
          "id": "a22f20fd-b8ff-483c-afd7-08ca38566407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d67127-a1a1-40f9-873b-16b96e5d1602",
        "cursor": {
          "ref": "7c2e70f5-ebc1-4106-ba57-8cae19c0eec7",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aca09c80-87d2-49f5-b5eb-87b00b3902f6"
        },
        "item": {
          "id": "57d67127-a1a1-40f9-873b-16b96e5d1602",
          "name": "did:invalid"
        },
        "response": {
          "id": "a22f20fd-b8ff-483c-afd7-08ca38566407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6764727f-5175-412c-8b5b-4f987ffa186c",
        "cursor": {
          "ref": "65383988-7764-4eca-a293-d38a6cd043ed",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "852baa1b-ac91-4ea3-9842-94c9f0a9381b"
        },
        "item": {
          "id": "6764727f-5175-412c-8b5b-4f987ffa186c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0c6257ee-92f5-4c4d-bfae-e71924555798",
          "status": "Not Found",
          "code": 404,
          "responseTime": 210,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a476a11-f92c-47f0-9adf-30dbdfb71ad9",
        "cursor": {
          "ref": "9883f966-c2b8-447a-b169-9b88d2514945",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "245ac504-304a-44d9-bd4f-4b8d3a8e2538"
        },
        "item": {
          "id": "3a476a11-f92c-47f0-9adf-30dbdfb71ad9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "65197e85-0992-48f6-bc1d-176a93e0ae14",
          "status": "Not Found",
          "code": 404,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5bc843-c8fd-446d-b25d-fb6feec03eb5",
        "cursor": {
          "ref": "aa893665-da33-4748-816c-f285d808fc5d",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c89149e8-f8b6-4f02-b9ad-f1a73c70813f"
        },
        "item": {
          "id": "2f5bc843-c8fd-446d-b25d-fb6feec03eb5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0951d99b-998d-4855-8744-bcdb821fa9a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411d5fa4-6b75-4a82-b011-b5b932fdf59b",
        "cursor": {
          "ref": "960bf32a-40f3-4165-870e-d363f7def28d",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a86c249f-efa5-4af0-9879-ad48358536fe"
        },
        "item": {
          "id": "411d5fa4-6b75-4a82-b011-b5b932fdf59b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3f15c97c-2c3e-4bcf-9a07-758dfe5919c6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411d5fa4-6b75-4a82-b011-b5b932fdf59b",
        "cursor": {
          "ref": "960bf32a-40f3-4165-870e-d363f7def28d",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a86c249f-efa5-4af0-9879-ad48358536fe"
        },
        "item": {
          "id": "411d5fa4-6b75-4a82-b011-b5b932fdf59b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3f15c97c-2c3e-4bcf-9a07-758dfe5919c6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1137495-edc5-4dc3-b4ba-92add6ee2877",
        "cursor": {
          "ref": "c9a59e7d-bfec-4858-bd4c-cf6a590ed172",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "eec67b85-e782-4fca-9d53-dfd8e8cb8bc1"
        },
        "item": {
          "id": "d1137495-edc5-4dc3-b4ba-92add6ee2877",
          "name": "identifiers"
        },
        "response": {
          "id": "a1dc65b2-91b5-43a7-8d6d-b4be801c8c04",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f63c11-9d3a-4dd5-8d64-9c792a23b5c1",
        "cursor": {
          "ref": "77230cac-ae64-4b6e-8386-b931a0775a38",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "05d9f125-20cd-4601-84db-cbc0bb90cc30"
        },
        "item": {
          "id": "66f63c11-9d3a-4dd5-8d64-9c792a23b5c1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f5c3e307-c8ac-4f22-b3d2-7d8511d73305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f63c11-9d3a-4dd5-8d64-9c792a23b5c1",
        "cursor": {
          "ref": "77230cac-ae64-4b6e-8386-b931a0775a38",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "05d9f125-20cd-4601-84db-cbc0bb90cc30"
        },
        "item": {
          "id": "66f63c11-9d3a-4dd5-8d64-9c792a23b5c1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f5c3e307-c8ac-4f22-b3d2-7d8511d73305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4fff23-581a-4879-8693-4b2887a3394b",
        "cursor": {
          "ref": "084a2594-5159-4867-87d1-464d893f307a",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "57b10eec-96eb-489c-847a-11602c9565ee"
        },
        "item": {
          "id": "2e4fff23-581a-4879-8693-4b2887a3394b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c17ec09b-ed79-4742-a2bf-546d2c7ce172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4937d68e-d1cb-4117-b797-5589bcd66ecb",
        "cursor": {
          "ref": "7ebb486c-557f-4524-b933-72abf44d127b",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2fb87c1b-4f34-4a4a-98e0-320e9204a9f4"
        },
        "item": {
          "id": "4937d68e-d1cb-4117-b797-5589bcd66ecb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6f25351d-cf2d-4d24-835d-8cba7141b5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc8529c-ed28-4d9c-b0f2-d668d72c5e8b",
        "cursor": {
          "ref": "53d2b218-f6d3-4a45-a1bf-0134493b9162",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d545a757-be6b-4c74-8c08-c189a78318b2"
        },
        "item": {
          "id": "6dc8529c-ed28-4d9c-b0f2-d668d72c5e8b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6457ef23-0ec5-4464-bbb2-33a09fbb2914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7babf6ca-ea65-4970-bb07-99078e93c023",
        "cursor": {
          "ref": "fb9542e4-8863-4ec0-a999-8766d0df6700",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5cdbb8bc-ceab-4613-babb-559f33be690b"
        },
        "item": {
          "id": "7babf6ca-ea65-4970-bb07-99078e93c023",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f518704f-22f0-4dc9-96b9-cfe157ced2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071c33d1-1cad-499f-a917-aa07fa6b4dc8",
        "cursor": {
          "ref": "c12101ab-7423-4e6b-be4d-294ea4e69458",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "78dfdda6-a3df-478e-aef3-ff62f7fd17fd"
        },
        "item": {
          "id": "071c33d1-1cad-499f-a917-aa07fa6b4dc8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2fc2c260-d9ce-451a-9e2f-23a440a6d6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f63940f-1e7c-4fda-835a-53090dc9d9a0",
        "cursor": {
          "ref": "017f85c8-d850-450e-af6a-445689fc1232",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "232e9b86-9f66-451b-a89b-928518ffe98e"
        },
        "item": {
          "id": "1f63940f-1e7c-4fda-835a-53090dc9d9a0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5b52aa0b-5db6-4f86-8762-dfd01f3f4d62",
          "status": "Created",
          "code": 201,
          "responseTime": 497,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "502e0295-5e3c-4931-8101-c516ca2533c6",
        "cursor": {
          "ref": "9cade5fd-2397-4a5a-9dae-575612907d1e",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4431af73-c177-468c-93a7-f2ab428a0a14"
        },
        "item": {
          "id": "502e0295-5e3c-4931-8101-c516ca2533c6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e577611a-643d-4bde-98dc-11e5df424773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f674073f-f654-46a5-821c-1b2a3bfe95bd",
        "cursor": {
          "ref": "5a792288-c211-4445-8b66-31672b740f0a",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "38be480b-c984-464d-89b0-80a93294a6b6"
        },
        "item": {
          "id": "f674073f-f654-46a5-821c-1b2a3bfe95bd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "639ffafb-3411-486e-93f1-25937b18d033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7561c73a-3a0c-4da8-915a-e5c30bdef1a2",
        "cursor": {
          "ref": "af3a56c7-2155-44f9-ad3d-9f038e0426b4",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0da82906-e6b8-46ec-a349-33c29c036891"
        },
        "item": {
          "id": "7561c73a-3a0c-4da8-915a-e5c30bdef1a2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "09261c5c-7b97-4be5-a201-dfc494e4e663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb00400c-47f7-4810-83ae-7e3764c20173",
        "cursor": {
          "ref": "f39dfb6d-1b24-472d-a0a0-6c1514e734cb",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ec5965e0-4ade-48f5-a828-aca569ab6e7a"
        },
        "item": {
          "id": "eb00400c-47f7-4810-83ae-7e3764c20173",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5a836b08-dff6-44f8-9a3c-fc2c4c34ea8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4971c11b-56bd-4e52-b3b3-ad3c7327b8c8",
        "cursor": {
          "ref": "6937d68d-fa10-444e-9f2b-4cd42a344391",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7a3144de-9438-481f-931e-2c6e005c2c60"
        },
        "item": {
          "id": "4971c11b-56bd-4e52-b3b3-ad3c7327b8c8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "438c3854-688c-4115-ac03-602e128cfb93",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "968f28c9-d0da-40e0-9e22-44cbe2846f29",
        "cursor": {
          "ref": "ad023f2e-f534-4cb5-852b-2b81c4f6f864",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a124e755-cb42-4f83-b797-907595ae2e37"
        },
        "item": {
          "id": "968f28c9-d0da-40e0-9e22-44cbe2846f29",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "dd6fdd1b-992d-46a2-aa36-55ddd9b29597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c03c0d2-f2e7-4f97-a942-8bf0a8f9c600",
        "cursor": {
          "ref": "f5b8a732-d99b-41ce-b4c2-1e6c2503491c",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a8bbe876-b509-4718-8f71-dbd1085d098f"
        },
        "item": {
          "id": "7c03c0d2-f2e7-4f97-a942-8bf0a8f9c600",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "011ac931-c0a9-4ec0-bc46-5d45333dc369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219e785e-622c-4c97-a79b-2e561f0a3f01",
        "cursor": {
          "ref": "b3eba3bc-7abc-4dc8-b7aa-06da70a5c6e6",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4a3b779d-0d85-4526-8693-550a2585812a"
        },
        "item": {
          "id": "219e785e-622c-4c97-a79b-2e561f0a3f01",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4cf29d14-5348-4ef7-8b4c-c4b2efa50845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda1e9d3-9c13-4365-8b4e-b9e34d30f2a9",
        "cursor": {
          "ref": "756d98fb-5248-4d1e-8342-0ef8bcc23b4f",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "292b673b-e939-476d-8cc2-f2cd78363747"
        },
        "item": {
          "id": "bda1e9d3-9c13-4365-8b4e-b9e34d30f2a9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9b1c181d-8d69-4a0d-9c42-db613b8a083e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2123639e-c228-4553-b17d-432b4ab1e3f3",
        "cursor": {
          "ref": "fbce143b-f6e7-46a3-999c-97a285393e69",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f287c127-7a8c-466b-9ff0-dd328f7cd3d3"
        },
        "item": {
          "id": "2123639e-c228-4553-b17d-432b4ab1e3f3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cd9eb31d-a834-4c8d-abfe-636cb1d276a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b9a72f-caed-497f-8501-b64294f41275",
        "cursor": {
          "ref": "f2dd07d9-48bd-44f2-80a2-0174842ef91d",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "011167c9-9771-4ee2-a135-264bb615cfdd"
        },
        "item": {
          "id": "d0b9a72f-caed-497f-8501-b64294f41275",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4133b757-c53f-4a0b-a747-6b5cb2e6b59d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a82ba3-a465-471f-9a45-94e6a254717b",
        "cursor": {
          "ref": "155e8c28-5b3b-4486-9870-b07ac61ceb8c",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "97b73419-dc22-46e7-a552-89fbe86589f8"
        },
        "item": {
          "id": "40a82ba3-a465-471f-9a45-94e6a254717b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "33277f7d-c160-4881-b10a-4e3330a96e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ded1b28-b97c-489f-a543-038e84d7e2fe",
        "cursor": {
          "ref": "4c632f24-c19f-4503-a50e-521aa6828cf1",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "81566b9e-734b-47e1-ae81-1b4770a48d06"
        },
        "item": {
          "id": "4ded1b28-b97c-489f-a543-038e84d7e2fe",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ecfd4438-4d41-4479-9d3e-e40656c891a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a185238-2e2e-4370-9438-fb0ff9109076",
        "cursor": {
          "ref": "98bf92b3-74a9-4130-bc8d-935392fb59e5",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d66a29a7-bb70-4d2d-894b-91ccb1178347"
        },
        "item": {
          "id": "0a185238-2e2e-4370-9438-fb0ff9109076",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ce614252-d28c-430e-b9ca-ab06c78baa4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b18ac6c-03a3-4254-ba96-28caf20aa514",
        "cursor": {
          "ref": "50c9477b-1c0c-4f87-b8b0-32b2d8fdea06",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "540b097b-5e1e-4ef9-93ab-2d0eaa05d1ec"
        },
        "item": {
          "id": "4b18ac6c-03a3-4254-ba96-28caf20aa514",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2ef14834-09b3-4eed-ab91-560efb436b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52b9d4b-83de-43df-b117-a5d9d4259e88",
        "cursor": {
          "ref": "0f00b39e-6de3-416e-9a81-c4b5ed1d948b",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "eb581193-3e82-4fdb-a87d-d95d921a1092"
        },
        "item": {
          "id": "e52b9d4b-83de-43df-b117-a5d9d4259e88",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6a0eccd0-b457-4bee-9f5b-4e21d3a3babd",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "94aafb01-f6c3-4979-8eda-b93f664186f4",
        "cursor": {
          "ref": "fc4373b0-00f1-492a-8be0-4fa86e833ea5",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "03ffa891-57ad-4c04-b0a7-d6ff44b7eacd"
        },
        "item": {
          "id": "94aafb01-f6c3-4979-8eda-b93f664186f4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5e299f55-53ff-4f9d-aaec-816d3daec2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fd212d-68fc-4c0f-98f4-ef736b92e0af",
        "cursor": {
          "ref": "7750c2c4-2ab0-4f47-b41e-0b3af8f0b3ed",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d048280d-7bd4-4670-b8d4-fb0efb2668e9"
        },
        "item": {
          "id": "68fd212d-68fc-4c0f-98f4-ef736b92e0af",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1ad0f8c8-3ccb-4c68-9bf3-437d85cb2152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215c78b8-319d-495e-822e-c02adb950c99",
        "cursor": {
          "ref": "665a9269-21c5-4cf0-b66e-74d4e6a42ed2",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "53f00d03-c329-4f7e-a40c-40f3461b192c"
        },
        "item": {
          "id": "215c78b8-319d-495e-822e-c02adb950c99",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1e8d972b-c290-4bd6-9821-3962f22623c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb34ff8e-6f9d-461a-b8e9-3bc8a61ded71",
        "cursor": {
          "ref": "f7cc1965-bed3-4acd-8911-5a5d4fa14bd3",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a0be2586-c4bd-4d57-a5d3-6681b7319aba"
        },
        "item": {
          "id": "eb34ff8e-6f9d-461a-b8e9-3bc8a61ded71",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bc7f1977-77e2-4c1a-bf55-f6a681cc33f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07180383-da49-4bda-a909-1dfcf7cfbc1e",
        "cursor": {
          "ref": "53c411f6-a1c2-4106-acc7-91ac12e7b7da",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "472642b2-b380-4981-a25a-aaddad7b470a"
        },
        "item": {
          "id": "07180383-da49-4bda-a909-1dfcf7cfbc1e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "78b64edf-0067-4d63-9a58-d307d48d1415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7e65fd-4c65-44b2-b27f-3b34da09e458",
        "cursor": {
          "ref": "6b1757d0-07f4-4732-9c65-12f6373c2f29",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1093c7c2-827d-423d-9b8a-7a2fa673fd09"
        },
        "item": {
          "id": "8f7e65fd-4c65-44b2-b27f-3b34da09e458",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b9cab3a7-763f-43fe-8e96-c16aa02e46a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21417e53-ffad-48ee-9139-1bee32a98dbd",
        "cursor": {
          "ref": "dbeebf65-1b10-4e41-88ab-7fceca88f761",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "aa3f0312-8301-4fb4-9d45-5942292bfc41"
        },
        "item": {
          "id": "21417e53-ffad-48ee-9139-1bee32a98dbd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "08174399-638c-4c16-ae80-e65e1dcfb8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4348c835-7874-41c9-9e24-a15e51a0f373",
        "cursor": {
          "ref": "e43ec904-b023-46d7-a8b6-60af6b53e5fc",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "58c2b04e-c13d-4665-a905-dbe5eb5c977b"
        },
        "item": {
          "id": "4348c835-7874-41c9-9e24-a15e51a0f373",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "918eb08c-9864-411d-8efc-0e9dea766a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3918f7-41af-468f-9294-04ac60798d9b",
        "cursor": {
          "ref": "1b4a2071-2c08-44b4-8239-db9b20230a99",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "accae42a-2cd7-484d-be0b-0e1e6c5c95bc"
        },
        "item": {
          "id": "7f3918f7-41af-468f-9294-04ac60798d9b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1efc02ca-fda6-4de1-bba6-3e23f91b122c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4ef374-33ae-4689-afc8-e10bd26ae4d4",
        "cursor": {
          "ref": "c1296b0c-866a-42a6-b25d-503402742766",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f6979a90-370e-4f83-a707-01109bb5256c"
        },
        "item": {
          "id": "6b4ef374-33ae-4689-afc8-e10bd26ae4d4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9dfedafb-4ba2-4b94-9e99-53004646aab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71eb8d33-626b-41ed-80a2-9fd2439bc142",
        "cursor": {
          "ref": "a024c47f-562e-4634-868a-7c45facf4180",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "609fa399-100d-4235-aad2-1cdf8a8a7ecc"
        },
        "item": {
          "id": "71eb8d33-626b-41ed-80a2-9fd2439bc142",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7fef4e54-cd1d-4507-adae-d40632f7c1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de0c16f-611a-4f84-9d4a-72ccdb065640",
        "cursor": {
          "ref": "d0b39cb9-1df8-42f2-8a96-acb2411bbc7a",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7a46282f-6beb-44f1-948c-76bc56771356"
        },
        "item": {
          "id": "3de0c16f-611a-4f84-9d4a-72ccdb065640",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ac470dd9-8edd-46d2-b50e-538038522616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d7f71f-72b2-4a48-9868-5a5987cd3334",
        "cursor": {
          "ref": "cb55381d-85c9-4c52-9a94-3f71836a2303",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "81553851-5faa-444f-85ac-30b281f99032"
        },
        "item": {
          "id": "65d7f71f-72b2-4a48-9868-5a5987cd3334",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "df131af2-eae3-4c49-936c-2430c0ebe2d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c98387cd-c2d2-4271-9e12-44b8ea6a3676",
        "cursor": {
          "ref": "924059fa-eade-471e-8ecd-f0b2137ceb80",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "992b9816-722d-4a1f-92d6-93ddd126ae16"
        },
        "item": {
          "id": "c98387cd-c2d2-4271-9e12-44b8ea6a3676",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cf95ff0a-c6c7-44f6-a0b5-bac8ca9da510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fc9a6b-03ea-43af-af40-61ab2ae7a129",
        "cursor": {
          "ref": "265ef9c8-6302-4f51-a6a6-de4cb9d37979",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "20d2258c-b8e6-4f9c-99fc-4146924204bd"
        },
        "item": {
          "id": "a2fc9a6b-03ea-43af-af40-61ab2ae7a129",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3b575769-b536-4387-8157-4ce1cafc6e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc55c64-0230-4399-9d79-7c8f96e493a1",
        "cursor": {
          "ref": "b5358585-372e-42e7-9e5a-ef511df3936f",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "04a02933-bcf1-467d-bb0d-a89efefd0803"
        },
        "item": {
          "id": "acc55c64-0230-4399-9d79-7c8f96e493a1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "cf4f4d6f-5be8-46eb-ba75-dc009e735491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e150900d-b3ac-4f09-bc18-dd5343a0e5c6",
        "cursor": {
          "ref": "c33f329f-d027-4dcd-869a-056018495d8f",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c02f6625-f868-443b-bcb6-c077d541bbf9"
        },
        "item": {
          "id": "e150900d-b3ac-4f09-bc18-dd5343a0e5c6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8d8df8a0-0d02-49be-aee2-00415c74e2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c391aa-5c69-4bac-bb40-934149372c6f",
        "cursor": {
          "ref": "b75d3c38-6201-4370-8db8-c294aadafe8d",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8e9a4a95-8ab6-4616-974c-f70e8f2265be"
        },
        "item": {
          "id": "53c391aa-5c69-4bac-bb40-934149372c6f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "767137a6-d419-4159-9143-076f7920397b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bdebef-2945-48c7-b2b8-6eef945a2493",
        "cursor": {
          "ref": "cb5f26c4-aa30-4957-a67f-83730c885e2d",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6cfb3f15-a514-4a54-93df-333593d53f82"
        },
        "item": {
          "id": "80bdebef-2945-48c7-b2b8-6eef945a2493",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "26993d20-2d1a-4cfc-b3fd-b32a68e3d1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3017bf0c-353f-41be-a67f-866689c3d8d8",
        "cursor": {
          "ref": "bb4523ea-a8b0-461a-97df-4e45cab30d70",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "eef1b145-c4c9-4ede-9306-a4e37d408b77"
        },
        "item": {
          "id": "3017bf0c-353f-41be-a67f-866689c3d8d8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4e0be5b4-b047-409d-b420-936f98d792ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1bd356a0-1f2f-4b4a-94ef-bb23195c05d6",
        "cursor": {
          "ref": "520ca2a4-a858-464e-90cf-62771cfbeadc",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "90a2bcdb-6f5e-4b08-bb1d-4c261dd3e060"
        },
        "item": {
          "id": "1bd356a0-1f2f-4b4a-94ef-bb23195c05d6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d501f04d-6113-4ec4-a999-31c0975ef746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740e0141-67af-4b06-bbee-b60dfce04549",
        "cursor": {
          "ref": "534d71e2-f1cf-41d0-bf0e-1467ea266338",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b61a9c14-d63a-4320-991f-5db19fead092"
        },
        "item": {
          "id": "740e0141-67af-4b06-bbee-b60dfce04549",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3d6d4143-21f8-45f1-99c1-fbc6e1248bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e26433-c2f7-4f14-a207-6262b7c54475",
        "cursor": {
          "ref": "98a9d753-d1c8-4873-8aee-76683451603b",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7ef5c81b-b4dc-4004-8fb7-d1a3fb015eac"
        },
        "item": {
          "id": "a2e26433-c2f7-4f14-a207-6262b7c54475",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "56f55123-5a03-447f-bc5a-581e862af8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab40628-8450-4d3c-9298-03185e96a58a",
        "cursor": {
          "ref": "bf115ffa-85bb-4973-9929-c025b1c9328b",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bbbbe00a-6105-46cc-8fe2-92170e5d5868"
        },
        "item": {
          "id": "eab40628-8450-4d3c-9298-03185e96a58a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ff89a6de-111a-4989-b57e-ec6e4c974bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc274ed2-9fb7-4106-88eb-6270cee68a87",
        "cursor": {
          "ref": "cf7acefe-824d-4144-b581-8e063501111b",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f5c9c5b6-570c-4dcf-a17a-26aea21fcf28"
        },
        "item": {
          "id": "cc274ed2-9fb7-4106-88eb-6270cee68a87",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cfcaa506-ec66-43a3-8ec1-c4b08239082c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30569ad-fd46-4522-9171-1d1c8ea5c246",
        "cursor": {
          "ref": "1ad7714c-3460-485d-a324-a43d393e1068",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "030ddb02-ed19-4b27-9cdb-a371b89d0491"
        },
        "item": {
          "id": "b30569ad-fd46-4522-9171-1d1c8ea5c246",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "354834fe-2779-4456-a49e-67492f2e0bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20db01ac-571d-4bf3-ba22-11a76aa76694",
        "cursor": {
          "ref": "dff0806b-a75f-4b1e-baf1-8284c32b1b15",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "69e0d7a4-f545-4f97-9856-c3e38b98627a"
        },
        "item": {
          "id": "20db01ac-571d-4bf3-ba22-11a76aa76694",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7849fb56-8154-4bf9-a1e7-da87bd3f9df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2dff3c-1cdd-4958-aeed-e057d59684e4",
        "cursor": {
          "ref": "37a6cf1e-8f9c-43c4-9375-d2ace919518b",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5893b653-b14e-4e75-9f6a-d53d7fb91de4"
        },
        "item": {
          "id": "1b2dff3c-1cdd-4958-aeed-e057d59684e4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "49217359-e840-455b-a3c9-923c782da902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f446f6-b921-400a-bea6-8817780ae284",
        "cursor": {
          "ref": "02e1a889-b795-42aa-95aa-99fc4a0ad0ba",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4746edd3-c7fb-4543-be5d-9a23de67c69b"
        },
        "item": {
          "id": "88f446f6-b921-400a-bea6-8817780ae284",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f99ff52c-7989-40bb-b4e6-1354adb4ce94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb6db0e-efd6-4d54-bef5-a7d7a865f7c8",
        "cursor": {
          "ref": "70b30eed-90d4-4e60-ae29-31db07fce413",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5c4097d4-a02f-481b-9c96-cd52fd7e634f"
        },
        "item": {
          "id": "beb6db0e-efd6-4d54-bef5-a7d7a865f7c8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4f50694c-eb91-40d8-9daa-d5a8dde9e60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6126b6b8-2b22-4bbc-ab12-701acd3f6051",
        "cursor": {
          "ref": "81d389ab-e02f-4d9c-afeb-8f0043573f66",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "08fe844f-076f-422d-9dc3-f1c6f6f2e738"
        },
        "item": {
          "id": "6126b6b8-2b22-4bbc-ab12-701acd3f6051",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6eaf599a-90cc-417f-8ef6-4f4d6a5c3d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd23662f-27a7-4d3f-a590-24e743345cef",
        "cursor": {
          "ref": "40afdf31-ecec-467d-843e-3b7da709154b",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9255f6de-c706-4edc-b96c-26b363d05578"
        },
        "item": {
          "id": "dd23662f-27a7-4d3f-a590-24e743345cef",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9837649e-aef1-4aab-896d-f88d4962430e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d114949-a500-4c98-8ab7-ae46be47a48e",
        "cursor": {
          "ref": "d31f2ce4-0886-4fb5-a70d-14385c9dcc81",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "55e8cb30-6035-4ad4-9601-1deeaf5cbefc"
        },
        "item": {
          "id": "0d114949-a500-4c98-8ab7-ae46be47a48e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7a43ea6a-edfd-4de8-8689-e35ff6b0f4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df128ee4-51c7-465d-bc69-dbfe0a8ae977",
        "cursor": {
          "ref": "1a29e854-c12c-4f08-a359-20356bc047bb",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6e29b1e1-87ca-423e-a6e1-5644f161e6c2"
        },
        "item": {
          "id": "df128ee4-51c7-465d-bc69-dbfe0a8ae977",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "973db370-f84f-4840-9b07-e2b34a9dcd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d557a1-7407-48da-8763-5dfffee8d81e",
        "cursor": {
          "ref": "ac842292-7b91-4fdc-a8c2-b48923a18341",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8fb5b233-fc33-4a23-83fb-4ab04d12db33"
        },
        "item": {
          "id": "d6d557a1-7407-48da-8763-5dfffee8d81e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "de76e5a8-6bb6-44c9-bbe2-c95dbafac688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fbfcb2-6988-4399-937b-1540f0ddb014",
        "cursor": {
          "ref": "967fe463-9646-45be-b29b-c0f5fb33abe7",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "67a086e9-ae0c-42eb-9896-147ac221e4b4"
        },
        "item": {
          "id": "13fbfcb2-6988-4399-937b-1540f0ddb014",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d50c0bfe-3837-4390-ad2e-22ad45cdf82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79d614d-9c12-4761-b303-35961aeee410",
        "cursor": {
          "ref": "dcaa5e94-e0ec-44d7-873e-ddad2c31bb66",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "712d4869-02d6-4c47-b599-e4b173109481"
        },
        "item": {
          "id": "f79d614d-9c12-4761-b303-35961aeee410",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "eb35db78-6605-4ca3-95f1-e5f71a958320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 414,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f527ecfd-de2b-4c4d-a034-9d7177af3768",
        "cursor": {
          "ref": "785f00d5-b5f7-433e-a479-cfe994c0c1a7",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "dc4b9092-3d7f-42f3-9949-cb34feea9c26"
        },
        "item": {
          "id": "f527ecfd-de2b-4c4d-a034-9d7177af3768",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b972bcb6-ae32-4b46-b2a4-6f6e83f04e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c35712-7b81-40b3-b988-3ae0587ca8c3",
        "cursor": {
          "ref": "bed6ef2e-1637-459b-99a9-ee28e8055c79",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f5c3d45b-3bba-45e6-a3e8-373d65ff0f60"
        },
        "item": {
          "id": "61c35712-7b81-40b3-b988-3ae0587ca8c3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "020764a3-51cf-45bf-be88-7caa2470a7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461b5976-409b-48ac-a5c2-dd432409d7ca",
        "cursor": {
          "ref": "25390896-62a1-4fa8-96ac-ec398bf89e94",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1317cf35-fe4a-457b-8d77-19fe842cdd56"
        },
        "item": {
          "id": "461b5976-409b-48ac-a5c2-dd432409d7ca",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3fa6ab19-1657-406b-8a80-eebd43fcaca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c71201-24a0-4612-86ae-4664e58647fc",
        "cursor": {
          "ref": "643f7755-0146-41d0-bfa0-eeb46f72fcd4",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "80a7fc79-f3f7-40d3-aabb-378fb40880ec"
        },
        "item": {
          "id": "04c71201-24a0-4612-86ae-4664e58647fc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e8824a26-5ee2-4754-98a9-ff4296bf8e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f2adf1-44f0-46a4-9dd1-82c80d400458",
        "cursor": {
          "ref": "4a0be5ee-b2c4-49ab-879a-09a70069eee0",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f3adbd87-be89-472a-bed4-1861d80af3f5"
        },
        "item": {
          "id": "01f2adf1-44f0-46a4-9dd1-82c80d400458",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c7261ea1-e98b-4bdc-a9da-f5557cc4e36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ce2233-35f6-4016-b8f1-9555be33f045",
        "cursor": {
          "ref": "598061a4-b058-4dd0-b58f-b7b16a2edba1",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f584b6c3-47bb-4593-a525-f9c3fe05c3de"
        },
        "item": {
          "id": "30ce2233-35f6-4016-b8f1-9555be33f045",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1db4cfb0-bb20-42b5-a884-f8aa3dd10dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3710f0-09e6-4c83-b681-7b0ccad20c6c",
        "cursor": {
          "ref": "1bb5abc5-203d-4bab-9ca1-1d3b75a66d48",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3be75a32-2eae-4acd-bad7-1f84820de4ea"
        },
        "item": {
          "id": "ff3710f0-09e6-4c83-b681-7b0ccad20c6c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bf653f6f-2e25-46ff-bc41-567d95e842cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e9a6cd-47bf-4e78-8b7a-99fa9d6f122e",
        "cursor": {
          "ref": "6281000b-94d0-402e-92d4-798c8cb6f624",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bb84903d-b500-4f53-8e05-122d95200050"
        },
        "item": {
          "id": "a4e9a6cd-47bf-4e78-8b7a-99fa9d6f122e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a3d3b8fa-607c-4bbe-88d6-4b7193622d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90be3cdd-de98-437f-8e0c-2d5ecd6794d7",
        "cursor": {
          "ref": "001ac60a-d85e-4979-8538-da399ff11a79",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "11a1e33b-3acf-47b8-9d5c-65026939c591"
        },
        "item": {
          "id": "90be3cdd-de98-437f-8e0c-2d5ecd6794d7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d4449911-f948-4215-a9b2-d7005b94b613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a55fad8-bfaf-48eb-91b0-7be7e096c11a",
        "cursor": {
          "ref": "59f2720f-32da-4323-a50a-2cfd4ca6b288",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fc382fa7-9c73-4e9b-9551-64a580126b2b"
        },
        "item": {
          "id": "6a55fad8-bfaf-48eb-91b0-7be7e096c11a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b20a7cbd-e5a6-4f6c-9778-7c790be7b89e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f919cb5-0d00-45b7-bff2-8512cd3a1570",
        "cursor": {
          "ref": "c5f98ce2-3c02-4f85-90dc-cf39c8707e1d",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "67954410-5a80-4c5e-8ce1-3ce4770e0d32"
        },
        "item": {
          "id": "3f919cb5-0d00-45b7-bff2-8512cd3a1570",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a0d9f198-443f-45d8-9038-99d23864f959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec53e0e-786a-488f-907a-4d3aa6816b3b",
        "cursor": {
          "ref": "68101068-bdba-4272-a382-50e649057e72",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "823dabb4-18f6-4cc4-aa12-4160564f6c8d"
        },
        "item": {
          "id": "8ec53e0e-786a-488f-907a-4d3aa6816b3b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f9a3a5ce-18f9-4d19-901c-d4f9665df139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517b81a0-8f69-4171-ae01-a7c5fed91b4b",
        "cursor": {
          "ref": "711f1dad-804b-43c8-84a5-f8c0aec96321",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9c5fd1d2-5d3d-4824-9db0-fd8d025c9e52"
        },
        "item": {
          "id": "517b81a0-8f69-4171-ae01-a7c5fed91b4b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "918bb9d1-2fc0-42fe-96db-dd8f6894faeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0464c0fa-80d1-4564-a358-f4e14d92b765",
        "cursor": {
          "ref": "a3040200-488b-4a28-a3b2-180e3f17f023",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7887d32b-e2d4-4312-9336-fb98809fad28"
        },
        "item": {
          "id": "0464c0fa-80d1-4564-a358-f4e14d92b765",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2ebc7735-cecd-40f4-bae2-76ece6d9be4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b220af6b-fc53-4b51-bac0-a8f34e6e6748",
        "cursor": {
          "ref": "11b600f1-8ae9-408d-ba6f-497d5d4173db",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5f4993dc-8122-49cf-8286-855dd97f5104"
        },
        "item": {
          "id": "b220af6b-fc53-4b51-bac0-a8f34e6e6748",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "02120630-94a9-4fcd-9068-a564be1b8b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b5b5b0-32a3-485f-8392-7dc6f4e07e31",
        "cursor": {
          "ref": "b64f5941-2107-493d-b2cb-f5090fbc36bc",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "783206e7-ff96-4b8b-852b-bf3cc9019357"
        },
        "item": {
          "id": "21b5b5b0-32a3-485f-8392-7dc6f4e07e31",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dac8756d-7207-45ed-9adc-64760a3dd68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d5eae3-12eb-4733-8f8f-27648914c423",
        "cursor": {
          "ref": "30e6e792-a3d1-4744-8263-3348a6e44623",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "450c3e84-3016-4efe-b979-cfac55d033a0"
        },
        "item": {
          "id": "62d5eae3-12eb-4733-8f8f-27648914c423",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ea317c5a-f1a0-41d5-ba04-f85873a2fe99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6de1d2a-3d91-419a-b10e-1a924b2edef7",
        "cursor": {
          "ref": "bea4877f-656f-455b-bbfa-205bf442a26f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "42a3b242-8bcc-42c3-bfc8-62eaacc3351f"
        },
        "item": {
          "id": "f6de1d2a-3d91-419a-b10e-1a924b2edef7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "10597c5e-e2c6-4607-b327-6e682978bfd6",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "bfa1fa0d-a417-4663-8a71-0d4d2a77581b",
        "cursor": {
          "ref": "e235e52c-9cb5-4760-a2a7-d4b6569eecbd",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ad158644-f099-416d-ad87-a57e25968d25"
        },
        "item": {
          "id": "bfa1fa0d-a417-4663-8a71-0d4d2a77581b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3331eeb7-6938-49b4-a225-a517cda14417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3457903a-70c7-4be6-929b-22390d350a9d",
        "cursor": {
          "ref": "5d948c2a-202a-45f3-afee-ad171b5dffea",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "96ec4028-19db-454d-9eef-099f16f474b2"
        },
        "item": {
          "id": "3457903a-70c7-4be6-929b-22390d350a9d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "90e7edcf-8725-44f1-939e-abc5297d3d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee785151-c489-4363-85d8-2e6e6c9fca14",
        "cursor": {
          "ref": "434aa686-2774-4812-b797-55ce49e91f10",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8f3988d0-66d6-4b28-8005-199a4d9fd11b"
        },
        "item": {
          "id": "ee785151-c489-4363-85d8-2e6e6c9fca14",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b87a8c7a-68a7-4a6d-b929-401f308c300b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eef88f8-97c1-4bc2-adc1-ddb1ab35f695",
        "cursor": {
          "ref": "3f9ff2a2-4d6d-42ba-8182-299adbe1ebef",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7de80eca-3a82-4aae-adcb-99b22af96e02"
        },
        "item": {
          "id": "4eef88f8-97c1-4bc2-adc1-ddb1ab35f695",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "118cfa8a-659b-4aed-bbf9-28f471524720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ee2508-2cee-470e-ba29-e7ab92569f46",
        "cursor": {
          "ref": "5c0113a5-64e1-47f7-a253-3a103dffaf89",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c28b0f4f-6c0a-41ff-b8d1-41ad5cce2cce"
        },
        "item": {
          "id": "62ee2508-2cee-470e-ba29-e7ab92569f46",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a9a79a31-f893-47a4-8e07-f13a0f4a8517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8997a6-8f05-4731-ac8f-44570e12a06e",
        "cursor": {
          "ref": "7cf1bc3e-8af7-4b9c-9cab-de36d2784fd9",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e43154f0-0980-4310-b64a-9a5cd04aea79"
        },
        "item": {
          "id": "3a8997a6-8f05-4731-ac8f-44570e12a06e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b0c549bd-b88a-4e08-adeb-f7e91fe6eba3",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "28ab3f65-c3dd-4167-86c3-55a5ded940c1",
        "cursor": {
          "ref": "9689c69e-8d45-45b2-90a6-7c09ec464aaf",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5824cd64-038c-4917-9246-f65ab6ccfd2b"
        },
        "item": {
          "id": "28ab3f65-c3dd-4167-86c3-55a5ded940c1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c2e9da57-17b2-4a05-92c3-9bf9c80868d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceeb5e13-b069-4abc-b04a-2fe158e0f90d",
        "cursor": {
          "ref": "a58e7304-d742-496d-8eae-dfd95f855696",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "abda492c-39eb-48c5-b93b-88ca43142294"
        },
        "item": {
          "id": "ceeb5e13-b069-4abc-b04a-2fe158e0f90d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4bd55b1a-16a7-4a35-aa4c-97b941f166ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1c4aff-1955-4eab-be6a-1d7801119e19",
        "cursor": {
          "ref": "e1e90130-e75d-404a-a9f3-7f9c62edb59c",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dec1009a-64e3-4c3c-86c2-ee125b7d62ee"
        },
        "item": {
          "id": "2f1c4aff-1955-4eab-be6a-1d7801119e19",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "94c2081b-458b-4aca-af90-fa55089583bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1f0e8d-1310-4583-bab5-d3c3998dfac4",
        "cursor": {
          "ref": "056a49fc-b256-4871-989d-7be310ca1688",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0a22318d-ae5c-4d10-9743-0285a82b5ee4"
        },
        "item": {
          "id": "bc1f0e8d-1310-4583-bab5-d3c3998dfac4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "16c75ec4-fd50-4319-8f1f-7b83025e4902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9507365c-1214-44c2-971a-e34f36cf7592",
        "cursor": {
          "ref": "ac0f9595-d769-4784-a0eb-75df52050f3b",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1fba66f1-6371-4bd6-930b-320f0fa2701f"
        },
        "item": {
          "id": "9507365c-1214-44c2-971a-e34f36cf7592",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "13294251-de27-4bb4-8e1a-f5d1f30152a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333bf67d-d4ef-4dd3-a14f-f6a3a89861e0",
        "cursor": {
          "ref": "510c0072-2e8f-481a-a5c7-b92ba25b31a2",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "30903a97-5bd3-4e85-a88d-8f6aed6a3234"
        },
        "item": {
          "id": "333bf67d-d4ef-4dd3-a14f-f6a3a89861e0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4709338d-3ec9-4215-b830-01ea55645c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2690b592-bec8-454b-9a33-a939520de1d3",
        "cursor": {
          "ref": "d5d861ae-81be-4883-a545-a7c3312585b1",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b6abc2fc-a8d7-4fb0-b9f6-15bd6580304f"
        },
        "item": {
          "id": "2690b592-bec8-454b-9a33-a939520de1d3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "293b9ced-5701-4590-8e6b-8eb948dd78fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4fb4f4-bc38-4717-80eb-be6a4d68653d",
        "cursor": {
          "ref": "dc4ba736-e37c-4eaf-aac0-fae9308d5fa5",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "157b7cfc-b45c-41dc-940b-e8b094bc314f"
        },
        "item": {
          "id": "bc4fb4f4-bc38-4717-80eb-be6a4d68653d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2a8b0749-d304-4a52-9422-b2f28d42035e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d58a93c-4ad1-42d9-a8ae-bfafcb87deb0",
        "cursor": {
          "ref": "3f935945-c86e-4dce-a27e-ddb83986dfa7",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ef641b6d-403a-4f79-875c-f01965c92bcf"
        },
        "item": {
          "id": "2d58a93c-4ad1-42d9-a8ae-bfafcb87deb0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "edca4c9b-3c9c-4060-991f-d0ca9688f456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "0d3ec1fd-94cb-4c0c-b958-3b08e3924ec5",
        "cursor": {
          "ref": "bdb49a0f-8af1-4e12-9ec0-66ec06e767e0",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3acec1a5-be44-4314-b254-196eb68e8f7f"
        },
        "item": {
          "id": "0d3ec1fd-94cb-4c0c-b958-3b08e3924ec5",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e8445d31-c6c9-4932-af27-9cddaae7de82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "935d3b2d-be7e-4e58-8895-d3d9983b7c45",
        "cursor": {
          "ref": "de1709bd-96b9-468d-8c1f-bdc823737cdb",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1338f0fe-8ff3-4cb7-a542-fd4d7b58ab03"
        },
        "item": {
          "id": "935d3b2d-be7e-4e58-8895-d3d9983b7c45",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b4ccdf07-b97f-48c0-bb69-00757d7caee3",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39dbf18-48b5-4cbe-9599-a5f28ead7340",
        "cursor": {
          "ref": "24a83656-fb4a-4da6-abb8-2e4fd7c9874e",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1b09caec-068b-47fe-8cfa-29a50c1aaf5a"
        },
        "item": {
          "id": "f39dbf18-48b5-4cbe-9599-a5f28ead7340",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "cfcacbe4-4d33-4ef2-8a09-ae0c802ef972",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2bb93f-23f9-4f03-a5e7-97bb33dd3d69",
        "cursor": {
          "ref": "8e287210-ee65-42de-b982-515b596a2281",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6474c2e0-2ffd-4e3a-bdd6-b55c035b0024"
        },
        "item": {
          "id": "ba2bb93f-23f9-4f03-a5e7-97bb33dd3d69",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "48e67b4e-eee9-42f9-88c8-b44c22493db3",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "173a9550-64a0-484b-aff5-31b9aae7f0a0",
        "cursor": {
          "ref": "9f9a5417-d0e6-440e-9404-74422f5da9e0",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "de7f8892-85bf-4408-9a40-4a7105b88ac1"
        },
        "item": {
          "id": "173a9550-64a0-484b-aff5-31b9aae7f0a0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fcc05f7d-f0d7-466a-be6c-450c3f7375db",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "104451de-fc34-4351-beb3-5257a3e0c2d6",
        "cursor": {
          "ref": "45281316-2e61-4079-aff6-066089afff51",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4acd9c2b-bfbe-40b4-93a4-b03a4f7fa5e5"
        },
        "item": {
          "id": "104451de-fc34-4351-beb3-5257a3e0c2d6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "978462f1-63c5-4767-b4f2-d2986d98e4f5",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "744867ad-e766-4ea7-80da-70194f674c3c",
        "cursor": {
          "ref": "c24e9dc0-c617-451b-bfd8-19c7f6109a52",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "887fd7c2-b530-4283-973c-204e9ae2e551"
        },
        "item": {
          "id": "744867ad-e766-4ea7-80da-70194f674c3c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f9cb3f0b-03b7-4f05-898b-0cf7875f7b62",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdfe9de-8590-4b58-b207-bd5fd6eb6283",
        "cursor": {
          "ref": "3597df8b-3b03-41a3-bcae-757977845284",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ea79fce1-d0d3-4d1f-8138-04b21bafa376"
        },
        "item": {
          "id": "3cdfe9de-8590-4b58-b207-bd5fd6eb6283",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5e8e151b-c073-462d-9af5-f9490ef93201",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "3cdfe9de-8590-4b58-b207-bd5fd6eb6283",
        "cursor": {
          "ref": "3597df8b-3b03-41a3-bcae-757977845284",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ea79fce1-d0d3-4d1f-8138-04b21bafa376"
        },
        "item": {
          "id": "3cdfe9de-8590-4b58-b207-bd5fd6eb6283",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5e8e151b-c073-462d-9af5-f9490ef93201",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "37e3f52d-b90c-4b5a-8178-c0457518ad6f",
        "cursor": {
          "ref": "ab06f7af-f23b-4a82-834c-d1d35ca9e9c6",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c90e5e83-e3ea-42bb-9f0c-28cbe2f4f6d2"
        },
        "item": {
          "id": "37e3f52d-b90c-4b5a-8178-c0457518ad6f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3c51d478-dd23-482e-ab07-a8af9ec87957",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "42669dc0-ca58-4916-bc92-a005d8f1144b",
        "cursor": {
          "ref": "1e81f22c-7800-4510-a07b-84af60bea7db",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "afdc2d30-8ed4-4a8b-a015-0d79cab53f26"
        },
        "item": {
          "id": "42669dc0-ca58-4916-bc92-a005d8f1144b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "79120aad-c6bd-4fcb-8328-dfda96aaf39c",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "63ce1119-bdcf-4fbd-a1b9-1edd7f013d4a",
        "cursor": {
          "ref": "cfc2fb0e-6622-422a-a74c-fcf4d8526090",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "50477310-1883-4971-b96e-3a61196cf9f4"
        },
        "item": {
          "id": "63ce1119-bdcf-4fbd-a1b9-1edd7f013d4a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4e2de60f-403c-4a21-90e0-5794e8d439b7",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "d5f38a7c-8ef7-4fed-a798-9718836f0ec3",
        "cursor": {
          "ref": "2008d269-650a-41bc-9600-88cc583a667b",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4c55dbfa-c00e-4538-9d43-da94825ed8f9"
        },
        "item": {
          "id": "d5f38a7c-8ef7-4fed-a798-9718836f0ec3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "122de41e-b9c6-4223-8d5e-887e4fdb8242",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6e567f16-b16f-49b0-b579-c064b74eacc5",
        "cursor": {
          "ref": "26f78a00-f7dc-41ef-8225-03fdb0416c0b",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5bcc3ca5-f8dc-49fa-a53c-965cb0a3662a"
        },
        "item": {
          "id": "6e567f16-b16f-49b0-b579-c064b74eacc5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c3fdf9bf-3c60-4dbd-aa1c-a9541acfe2d8",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "56751f6e-b806-45ce-9eee-0aead5104f58",
        "cursor": {
          "ref": "c1e725ad-d559-4909-bb04-fb91d0814e57",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "338d0483-7bb3-4ed4-83ce-9123b6f6a639"
        },
        "item": {
          "id": "56751f6e-b806-45ce-9eee-0aead5104f58",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e49cf1da-de48-4db6-b73c-b7e8c2a5a19c",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "ef14563d-db4d-4ddb-b241-4e1afdb4bdef",
        "cursor": {
          "ref": "cc5917ec-6526-433b-81a3-03b38125a576",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b843b957-2d6f-4521-954d-b63373400371"
        },
        "item": {
          "id": "ef14563d-db4d-4ddb-b241-4e1afdb4bdef",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bf28ad01-a6af-4799-b23a-420c02600427",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1c58e5a5-a918-4d47-81a8-1217970ba726",
        "cursor": {
          "ref": "e508e7b7-e532-4753-9c82-3c93e4705d56",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0a2f8f0b-e0df-4ac9-89cc-4049580abed3"
        },
        "item": {
          "id": "1c58e5a5-a918-4d47-81a8-1217970ba726",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "98549204-fda8-4799-940d-fff2da37c3b0",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "05ccd1af-b84a-4d7b-809d-dfae7343537c",
        "cursor": {
          "ref": "242b0a9b-0791-4cfd-9379-f87f431a345b",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "47201bfb-85fc-443d-b6f8-3291b8a26ecb"
        },
        "item": {
          "id": "05ccd1af-b84a-4d7b-809d-dfae7343537c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ac922289-f491-4f9a-a55b-4eca6de464d0",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "da20808e-5106-4e25-a984-555def8c0e2a",
        "cursor": {
          "ref": "8adc61e0-aae1-4d32-a875-abd9b6850697",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "082b38c0-c73e-4d0f-93c8-b1fc126b2652"
        },
        "item": {
          "id": "da20808e-5106-4e25-a984-555def8c0e2a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d4b449c3-7485-484d-92ea-e5a73f376fdb",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "bbc56d67-90d9-43be-9208-18b43c9becdd",
        "cursor": {
          "ref": "aa381ee6-6297-4171-a98a-f2f67d403d85",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e9dba858-ecfd-4218-bbbf-2979ddf11c41"
        },
        "item": {
          "id": "bbc56d67-90d9-43be-9208-18b43c9becdd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "83e7e8bb-241b-42c7-80c7-c4e2932de703",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c9c5c758-3c12-4f41-9591-9fd76b559895",
        "cursor": {
          "ref": "65826fb4-c2ae-466e-b77f-a3c3d2166eb7",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c8495add-929b-46f6-bf7f-940b45e09a18"
        },
        "item": {
          "id": "c9c5c758-3c12-4f41-9591-9fd76b559895",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c39cd7e2-7598-4dc9-a15f-c5084ffb2c73",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f60291be-9486-4991-be42-ffac4f0daaa3",
        "cursor": {
          "ref": "9f2143a8-6d2b-4510-bfb9-3005e562c198",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7a5e1976-3910-4210-b40d-fc54439036ad"
        },
        "item": {
          "id": "f60291be-9486-4991-be42-ffac4f0daaa3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "04a722db-c294-4fa3-9160-77c3b64a443d",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "3a854167-cdb1-4ef3-8653-90a3e2da1744",
        "cursor": {
          "ref": "f243238c-7cb2-4606-ab32-3cc10c64d6e1",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b54bacf9-7d3b-4dc9-ba26-fc8a8406fc3a"
        },
        "item": {
          "id": "3a854167-cdb1-4ef3-8653-90a3e2da1744",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5a15c9d8-f002-4436-917d-a695020c372b",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "8186f29c-f84a-45e5-b54b-9b5187e308a3",
        "cursor": {
          "ref": "73c42918-cb3a-426a-9c0e-ae5f02fae3f4",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4c6113a6-60d5-4a58-ac08-aaabcdd0ee29"
        },
        "item": {
          "id": "8186f29c-f84a-45e5-b54b-9b5187e308a3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "70906226-5333-4491-ba88-e2304cd671e2",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "935bba15-90cd-464f-8162-cec486989526",
        "cursor": {
          "ref": "dceb17ca-4691-4937-be0a-d344f0f93dd8",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b100c56d-2180-487e-8e7f-949f12799068"
        },
        "item": {
          "id": "935bba15-90cd-464f-8162-cec486989526",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ebfb239b-be23-4981-8c61-ee92b3e56509",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "46cda5de-33fa-408d-8e13-8d373b4da7dc",
        "cursor": {
          "ref": "b1f1627a-1487-404d-9eaf-115c30a25256",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "58bc8f01-699b-435b-b45c-4e5295f03c79"
        },
        "item": {
          "id": "46cda5de-33fa-408d-8e13-8d373b4da7dc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e91b8e96-9ad6-455b-a8fc-4443a501962f",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "e8380324-d7ff-4ae8-9350-bec05f698c45",
        "cursor": {
          "ref": "003ea942-e5c3-4982-9e98-cf1cb482f63c",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "84f05dde-91b5-42ae-9f7e-d82331e69b71"
        },
        "item": {
          "id": "e8380324-d7ff-4ae8-9350-bec05f698c45",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "51fc23cd-8d1f-4ef6-8c6c-7bf5056d7bec",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "6f152d5f-f7c3-4dba-9e40-6034fbf6f82e",
        "cursor": {
          "ref": "7f9ed595-fba0-4a3e-8032-e17a19b65d6b",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ad36c957-cbd3-4269-abe5-0b894dad77ed"
        },
        "item": {
          "id": "6f152d5f-f7c3-4dba-9e40-6034fbf6f82e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2b85ad34-72c9-45b4-a01c-e252a2c44329",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "3472c15c-de7c-4bda-981d-4546477d227f",
        "cursor": {
          "ref": "ef871bec-955c-45a1-a2e2-25859225a9bc",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "67125b8d-c681-4386-a2d7-f58ff4149b3d"
        },
        "item": {
          "id": "3472c15c-de7c-4bda-981d-4546477d227f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "59468d8c-3f75-4b4a-bf0f-9d02055a2e8d",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "320aa048-48c6-427e-a476-5f44d3442b7e",
        "cursor": {
          "ref": "1c27ea7c-b664-409e-8149-5247b0c8ea61",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8a51e4fa-f111-46ea-a9f3-ca6742d7fad5"
        },
        "item": {
          "id": "320aa048-48c6-427e-a476-5f44d3442b7e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5536c2e3-02af-4281-88a5-7a2a8635473a",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "466d6557-b5f7-4b6c-93de-fbfb7b5cae76",
        "cursor": {
          "ref": "d78f6a7c-1936-4f64-8406-4b016ca0aa0d",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d34bfa40-6c41-4f3e-9d0e-4a8f5752a705"
        },
        "item": {
          "id": "466d6557-b5f7-4b6c-93de-fbfb7b5cae76",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9cf6eb54-b6e0-4e07-b2d9-2cfb185f30cb",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c1bb2066-6640-4e15-88bd-8b4ca33f99a7",
        "cursor": {
          "ref": "75989b2e-d897-4c22-a1f4-74a6c70992b3",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "aa282726-1a33-4890-bbc8-5249307ec4f6"
        },
        "item": {
          "id": "c1bb2066-6640-4e15-88bd-8b4ca33f99a7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "74aceeff-27c9-4f10-ac33-c0a53a15aee5",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "e907a56d-209c-4a15-8c55-e04280eb59ca",
        "cursor": {
          "ref": "d559ba1c-3b08-4de1-a133-849591106062",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3c33d790-9dcc-4a44-9d16-c8a28151784e"
        },
        "item": {
          "id": "e907a56d-209c-4a15-8c55-e04280eb59ca",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6fdac162-fa04-4779-920b-6d5c1c9f5eb2",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "ee8948dd-edf3-4ed6-8b3c-88c13001ce7e",
        "cursor": {
          "ref": "04ed06ed-2265-40a6-811b-bab513aa3fc5",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1887846d-6aa7-4b09-a0c2-fb5a4c72b9c8"
        },
        "item": {
          "id": "ee8948dd-edf3-4ed6-8b3c-88c13001ce7e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a9ac21a0-7fb3-46a4-ada8-bf7e51ef8ddb",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "460b4fdb-93b2-4c39-b30a-64198c9be7d9",
        "cursor": {
          "ref": "99298b53-5b44-4b3b-a1d5-1bd958fb2a04",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6dbdb312-85e0-440e-a192-c0852958d9b9"
        },
        "item": {
          "id": "460b4fdb-93b2-4c39-b30a-64198c9be7d9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2bdd944f-ca81-437d-a7a8-7455feae0f49",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "40652ddf-94d8-428e-87f8-c2f18d00f16d",
        "cursor": {
          "ref": "c0ef8bc1-9472-4b79-8fac-cd7d70b361ff",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6a777993-748e-4d8e-88f7-c95b5a27a340"
        },
        "item": {
          "id": "40652ddf-94d8-428e-87f8-c2f18d00f16d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7da2c1db-3542-4fd6-9ac4-9ddf82d61ad3",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d91d034e-f401-455a-a6cd-57852656f521",
        "cursor": {
          "ref": "d6b400d2-4ae9-4547-b52a-b76b3beeadc8",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b268af45-3c48-42d3-b786-db562015d401"
        },
        "item": {
          "id": "d91d034e-f401-455a-a6cd-57852656f521",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "21fc9c30-a231-4b65-8e84-6fc1d214bd6e",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "81a2297e-25f4-4c4c-9eed-fdee07ae0f75",
        "cursor": {
          "ref": "d647f340-56c6-4bce-a00a-6a6f48861b07",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "12f2f8cd-419d-4f57-a678-98c58aa1ca8b"
        },
        "item": {
          "id": "81a2297e-25f4-4c4c-9eed-fdee07ae0f75",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9855290b-f039-4a45-bcea-8e2084875bb4",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "00b96df5-e3e1-41cf-82aa-47e739950fb4",
        "cursor": {
          "ref": "cc148500-6b8e-438c-9814-8bedf52d176e",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1807e781-93e0-4867-aa85-0e2dc8b14d17"
        },
        "item": {
          "id": "00b96df5-e3e1-41cf-82aa-47e739950fb4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6fc9b575-55df-42b6-be57-e0c6e7bbbccf",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8a067c9f-7fa8-4e8d-85c7-8a22fff5e2ad",
        "cursor": {
          "ref": "27942442-76c4-4ca5-bb1c-bd3c6e8a4b29",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a87c457f-a42e-417a-befa-1e96fee0b37d"
        },
        "item": {
          "id": "8a067c9f-7fa8-4e8d-85c7-8a22fff5e2ad",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "63f69faa-44d4-4133-aa72-e5bfe39635a2",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "48857bad-2fda-45f1-8056-00935216c400",
        "cursor": {
          "ref": "1c44e0e8-cc0d-4b80-8a03-f96305cfd273",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6ed7b06a-0704-462e-aec8-3e2e1dd8d2cf"
        },
        "item": {
          "id": "48857bad-2fda-45f1-8056-00935216c400",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bd0d5fcf-8b99-4229-9f95-e133b482e31d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fc0f8b-1409-4440-8e13-ed1f463a9218",
        "cursor": {
          "ref": "f7fe4874-f5cd-41d9-847f-0dcd31447110",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1276a4f3-d5c4-455e-b650-77eded05e223"
        },
        "item": {
          "id": "87fc0f8b-1409-4440-8e13-ed1f463a9218",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2005e8cf-3f03-42a9-beb4-4640b3d1e2a1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 24,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e437c41e-4eda-4afd-afc1-b1410984d7e4",
        "cursor": {
          "ref": "a3b99518-19e4-4fb0-8a8d-d70880eda468",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "916d703a-2786-48f1-912c-8cc00d9a2c12"
        },
        "item": {
          "id": "e437c41e-4eda-4afd-afc1-b1410984d7e4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b5e083a6-b3a6-4215-a96a-19aadeece1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e437c41e-4eda-4afd-afc1-b1410984d7e4",
        "cursor": {
          "ref": "a3b99518-19e4-4fb0-8a8d-d70880eda468",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "916d703a-2786-48f1-912c-8cc00d9a2c12"
        },
        "item": {
          "id": "e437c41e-4eda-4afd-afc1-b1410984d7e4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b5e083a6-b3a6-4215-a96a-19aadeece1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf8698b-ed10-4441-84c2-0c100e33c8b8",
        "cursor": {
          "ref": "981138b5-446e-49e8-bde2-6939add628d9",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d2cbc183-6747-469e-881d-158f766d5998"
        },
        "item": {
          "id": "5bf8698b-ed10-4441-84c2-0c100e33c8b8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f67662e1-e8ee-4434-82b2-16cd48cb32d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f175d729-f7ff-46e9-940f-10909d411edc",
        "cursor": {
          "ref": "e958606a-9476-413f-9d5c-8e57d3b9fbfc",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "58578194-31ad-4a8f-85db-b064bac33923"
        },
        "item": {
          "id": "f175d729-f7ff-46e9-940f-10909d411edc",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8726d98f-380b-47d0-8011-1889cdb6f194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0652cb3-0f7a-4ee3-98e8-446b7c0a2e44",
        "cursor": {
          "ref": "b89b5cc7-a78c-4aef-bdd2-60fd6953c760",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c61bc830-496a-4d50-a0c0-a0f9ffb4880d"
        },
        "item": {
          "id": "a0652cb3-0f7a-4ee3-98e8-446b7c0a2e44",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "47f589ac-9679-47b2-9555-cc795c0ad516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621b7226-95ef-4b8e-8920-557b1b4cc892",
        "cursor": {
          "ref": "895343a3-2bbe-4928-8335-3d20ea59c4ae",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "95137040-d94d-4dc2-9d15-188f19a0deec"
        },
        "item": {
          "id": "621b7226-95ef-4b8e-8920-557b1b4cc892",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "64eb6616-51d5-42ac-8238-cf2ea0c1c4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972a7778-4a8c-4906-a9ec-b08075858834",
        "cursor": {
          "ref": "a374745f-67da-4c5f-8e0b-d439c28164b8",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e0c8fbc3-26bc-421b-83ed-3a77584ab7a9"
        },
        "item": {
          "id": "972a7778-4a8c-4906-a9ec-b08075858834",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c4718fa3-e83b-45a6-b0bf-ddce4995e058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ab3cb6-8862-45d5-aec6-46a598796b5b",
        "cursor": {
          "ref": "2f8e7f61-aa60-4e61-9004-0489f2638e48",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2c318511-4381-4b36-a528-c4faa241b423"
        },
        "item": {
          "id": "47ab3cb6-8862-45d5-aec6-46a598796b5b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "99658524-6d56-47d1-abbe-c78798c0f966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 548,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10ef0e3-efcf-4230-8371-92d3eeb01bf7",
        "cursor": {
          "ref": "2d05a6bb-0952-4ca9-93f1-2c5b92d3dae0",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7c64b71c-4b26-4c37-a20c-578557b94184"
        },
        "item": {
          "id": "f10ef0e3-efcf-4230-8371-92d3eeb01bf7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5651cb9e-2d0d-47a0-addd-c6d15a2c10ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59970a7d-85b9-40a4-872f-7ad47808dbe0",
        "cursor": {
          "ref": "845ae997-7d37-4311-be8b-3dc7069433a6",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c2ca7fc2-1e14-4045-b69a-b5102d26622c"
        },
        "item": {
          "id": "59970a7d-85b9-40a4-872f-7ad47808dbe0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "71f2a47d-11d9-4f21-aa00-5b7d532c7661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59270b0a-2123-484d-979e-0a548618ff1d",
        "cursor": {
          "ref": "3cf4c259-5b40-499d-ba91-e9a9a4fd1040",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ab08f026-6417-4334-bfa0-449e9e86f924"
        },
        "item": {
          "id": "59270b0a-2123-484d-979e-0a548618ff1d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7170f4ca-d119-4e16-9c87-44d56ebef06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce33622-6954-4cf6-95b6-b68e78168f03",
        "cursor": {
          "ref": "6e01ce38-5133-4016-a9e8-fbff7e2babbd",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2aae36b7-4863-46ad-973b-949fdb54c03d"
        },
        "item": {
          "id": "7ce33622-6954-4cf6-95b6-b68e78168f03",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4e0379b9-3d38-44cd-b487-16ff39a70eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42877a0f-20a8-4b32-b7a1-9e4548133e83",
        "cursor": {
          "ref": "bf55bd27-2df8-4f18-ac0c-bf519280edc5",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "62dc46be-8c35-4376-82b3-a2443decfefa"
        },
        "item": {
          "id": "42877a0f-20a8-4b32-b7a1-9e4548133e83",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f0da0803-b0b1-4789-b78d-ecf234ecf08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71682d5d-b6ee-4ac6-92c5-f53d5dc2366b",
        "cursor": {
          "ref": "6b2eaaaf-70af-4172-a15c-7c7aede21cc2",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a805591c-ae52-4cb4-94fe-01af1c4e6e37"
        },
        "item": {
          "id": "71682d5d-b6ee-4ac6-92c5-f53d5dc2366b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "880e848e-bf4c-458c-b8e4-072b6c7aac3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b8cfd3-fb7b-4da5-af24-cf9b09afa3e8",
        "cursor": {
          "ref": "42fe838d-d844-4d6a-b975-710b5f0ae532",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "865f93d7-4a7e-46be-abb9-ef89a3e6ba19"
        },
        "item": {
          "id": "58b8cfd3-fb7b-4da5-af24-cf9b09afa3e8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fee3ed0e-b672-4370-a982-9a26b70ccc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826bbe95-861a-44fd-b4b3-fe7b9c2bc621",
        "cursor": {
          "ref": "7089c345-9ea6-4b21-89f0-08b4b2540892",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "07669254-ace6-40be-968b-32e9ae9b3700"
        },
        "item": {
          "id": "826bbe95-861a-44fd-b4b3-fe7b9c2bc621",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5f2d9bc9-a8a8-4e01-9b83-48539a83b64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965be85f-7a1a-45e5-b950-96fe66f17f8d",
        "cursor": {
          "ref": "5f922ed0-0821-4f07-8424-58dbf46280ae",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "72b4df71-3b4e-4847-86e0-9899a8c872dd"
        },
        "item": {
          "id": "965be85f-7a1a-45e5-b950-96fe66f17f8d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fd781f69-cef3-4a00-89eb-6cc4a6e44736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0b6385-62f3-4a07-b6e1-f712dfd41a9a",
        "cursor": {
          "ref": "1cbb2e8c-7660-4168-8568-b067d8955c71",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4e8ef494-f3e7-4699-aa06-a84da86f65fd"
        },
        "item": {
          "id": "1e0b6385-62f3-4a07-b6e1-f712dfd41a9a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "82d421d0-8827-4aa4-86e4-00e365c75ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff3b3d2-756b-46bc-9212-90e7c0f1e4cc",
        "cursor": {
          "ref": "c2012ebb-fb1c-43af-8aca-5b66a4679fa9",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "22f61c68-357d-4fa3-b0af-2fcdebbe54a1"
        },
        "item": {
          "id": "7ff3b3d2-756b-46bc-9212-90e7c0f1e4cc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d3cfa504-5c89-4ca7-a410-1a1f06361c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08d24cd-3918-4b67-9f91-8e85ad977101",
        "cursor": {
          "ref": "a0d57ff3-0bf0-478d-92db-2d55e19eac38",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "acc882a7-37cf-4e55-8356-23bc2d838bd1"
        },
        "item": {
          "id": "f08d24cd-3918-4b67-9f91-8e85ad977101",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "408c1761-1671-4744-9a77-4e7b9d56432c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a19856-722d-4b5e-b45d-bb9548c6b171",
        "cursor": {
          "ref": "6a0a1d68-f31f-4714-812b-2d77cfbad3b5",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0854f522-7a1c-4abf-a744-ecc2f2c08947"
        },
        "item": {
          "id": "e1a19856-722d-4b5e-b45d-bb9548c6b171",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0c89fb52-9b56-4619-9754-37a05104847d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e81ad2-e82e-4398-bd6f-94896a9f2376",
        "cursor": {
          "ref": "6bfda375-c44f-4d0d-ba0f-6fdbda14e49e",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e01f716f-0d65-4835-99ad-c63733ba542d"
        },
        "item": {
          "id": "95e81ad2-e82e-4398-bd6f-94896a9f2376",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4f8be93c-50c7-4fb2-9157-59c5ef1a0532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0489ef1-25b5-4240-93d8-8d5266f65966",
        "cursor": {
          "ref": "7180c0da-924f-48a8-8d7a-65cd5cf46185",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "69505623-ff70-441c-9b2b-879862727625"
        },
        "item": {
          "id": "d0489ef1-25b5-4240-93d8-8d5266f65966",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2232f683-846a-40c6-9cf3-c40af58ac224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3600d2d0-861d-4582-8de7-97426aaf7baf",
        "cursor": {
          "ref": "30967647-218d-4d42-b3ab-b526f125b730",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cba11b7b-e2c8-4fc8-9853-806b40668f87"
        },
        "item": {
          "id": "3600d2d0-861d-4582-8de7-97426aaf7baf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f579f11d-ccee-4578-86e9-f068a8d8961e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1e866f-4351-4a5c-a4ad-12f54339dcb9",
        "cursor": {
          "ref": "1f80041b-4714-4769-8737-0e030014cc9f",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a1effaa0-aabd-4609-b576-63da7893487c"
        },
        "item": {
          "id": "3e1e866f-4351-4a5c-a4ad-12f54339dcb9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cf3dc4db-6e8f-4b22-bb03-95cd001d5acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389ad3eb-e039-438a-9acf-72c6a0d9a2d8",
        "cursor": {
          "ref": "f072e6df-3728-48f4-88db-a6ec3e5e7a67",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0f46f244-d73c-4bc1-ac99-8bb3819c4f5a"
        },
        "item": {
          "id": "389ad3eb-e039-438a-9acf-72c6a0d9a2d8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "06552304-dc90-49c4-a545-9e4287b356ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fc89a6-2b5c-4c7f-9566-37dddd85f082",
        "cursor": {
          "ref": "758ba4d3-d2ca-48e6-8902-8bb998bcf683",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "645481f8-930b-4d57-ac9d-22ac9a45d8f6"
        },
        "item": {
          "id": "14fc89a6-2b5c-4c7f-9566-37dddd85f082",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7fbc036e-916c-443c-a6a8-670a85640a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc2ebb0-3021-4091-b650-53e8a632639e",
        "cursor": {
          "ref": "fccdc99e-2166-4c35-9c6f-70362b348745",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a75c8b6a-1fc1-450c-9d5f-2a278339e59c"
        },
        "item": {
          "id": "6fc2ebb0-3021-4091-b650-53e8a632639e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "25312e84-1c3c-4841-9ad5-75753db67c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6190bfc0-7f4c-4da8-b811-3e3936150571",
        "cursor": {
          "ref": "6d3dc0aa-d383-4df8-9525-1940b70a71c4",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a94792b3-8733-4eec-bb02-00829cbffbf7"
        },
        "item": {
          "id": "6190bfc0-7f4c-4da8-b811-3e3936150571",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8070369f-cd67-4f65-aaa5-b4cf9b7080d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b10edfd-84c8-4a22-8478-456507059c0e",
        "cursor": {
          "ref": "72273f48-6950-4f10-aa1c-83e6bae2957f",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f9ae7cbf-8317-4913-9ebe-215afd765a72"
        },
        "item": {
          "id": "7b10edfd-84c8-4a22-8478-456507059c0e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c2dbe77d-29c9-4af1-b246-ac4a3ba3257d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e26a61-2970-4a6c-97d3-7a3700b82864",
        "cursor": {
          "ref": "deda30a6-7025-41ad-a911-30b71482403d",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "592b1374-3133-4822-bcfc-5e2e95b66f1e"
        },
        "item": {
          "id": "e7e26a61-2970-4a6c-97d3-7a3700b82864",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "03923423-344d-4f59-87da-d13d5a524755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fa725a-38b5-4388-ac3d-9229b3a5e0df",
        "cursor": {
          "ref": "bd597412-b41a-46cf-8ee9-2e1ed6e474ed",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "971d5be0-d081-42ca-985c-3f596546af96"
        },
        "item": {
          "id": "21fa725a-38b5-4388-ac3d-9229b3a5e0df",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f508a538-e0cc-45ec-829e-0ae75ea67e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c101d9f-fca8-4f14-9a39-4dcc3b521964",
        "cursor": {
          "ref": "ba018749-767a-4f67-bf1f-37197c06eb0f",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "28ae7840-9ac7-4a8d-9910-ce87258d4dd8"
        },
        "item": {
          "id": "2c101d9f-fca8-4f14-9a39-4dcc3b521964",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "16851222-36b7-4882-b8b9-acbf9c3e908a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e22b88d-8750-4681-b606-df0e6c1119cd",
        "cursor": {
          "ref": "013c4922-4936-4fce-add2-7fee088c86d2",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a273502f-3a66-44ce-8757-66efff938466"
        },
        "item": {
          "id": "5e22b88d-8750-4681-b606-df0e6c1119cd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ee427e16-df86-490e-89e6-353c689a61a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4670d30-3df7-41a3-87e2-42a65d7e80f8",
        "cursor": {
          "ref": "2c003663-618b-431b-941e-600f8240dbfe",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "66e41c81-cfb7-49fa-b54b-f71046541352"
        },
        "item": {
          "id": "e4670d30-3df7-41a3-87e2-42a65d7e80f8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b3504578-8c35-480f-86b7-72b4daa81699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf99c7df-87c9-4fc5-aa42-79c40277243f",
        "cursor": {
          "ref": "d46be40e-92f1-41ac-9c26-ef5bd09c314f",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d14a9183-fd67-4dac-af45-24e49aceb958"
        },
        "item": {
          "id": "cf99c7df-87c9-4fc5-aa42-79c40277243f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d81b5e20-4d97-4554-8fec-38620266ced9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5dd640-9220-4f88-a37a-5afa7782da64",
        "cursor": {
          "ref": "51797473-085a-4672-9189-468bfab2f3bf",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "082e7941-eb91-4f75-8a9c-e87440ad55ca"
        },
        "item": {
          "id": "1a5dd640-9220-4f88-a37a-5afa7782da64",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9a97b1d2-1bce-418f-bfbf-43dea19744aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5ea9f5-4a40-4cff-9ce1-b4a442a581e2",
        "cursor": {
          "ref": "9dcdf0d7-6b62-4984-bdde-a78d7b5bb179",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f84126e1-9bab-476f-8a56-fd23a350a09e"
        },
        "item": {
          "id": "3d5ea9f5-4a40-4cff-9ce1-b4a442a581e2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "da4b0167-5556-46eb-bbea-8e7c76e9b78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1cc266-2e24-4237-9775-8ef258c1e4e7",
        "cursor": {
          "ref": "87c53ccd-f22a-4973-ab53-b75e24ae1b8a",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "af67259b-5bc4-42aa-9a95-2a75b5237284"
        },
        "item": {
          "id": "3a1cc266-2e24-4237-9775-8ef258c1e4e7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "79058a2f-00bc-4f6f-b2e7-49f120b0d50a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd4bf3a-6a4b-4dbf-b42b-0941bb3181a9",
        "cursor": {
          "ref": "0f6cce90-2259-418f-8967-985cce7d80f4",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5bc601df-9cea-4852-b5bc-4c221d4b5961"
        },
        "item": {
          "id": "9dd4bf3a-6a4b-4dbf-b42b-0941bb3181a9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a3e17343-a879-46ae-8065-34d8c7a0bdfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e694c682-8214-43ae-be62-41a19c34f911",
        "cursor": {
          "ref": "3fdbc5c5-2b44-43a4-8146-45b439cc6ad7",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5e6a13d9-486c-47f8-90bc-d0a0e97da58f"
        },
        "item": {
          "id": "e694c682-8214-43ae-be62-41a19c34f911",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b39a3e5f-2d74-47d4-96d9-1773ec308781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e351f715-3210-40d3-9d2b-f3ef34843e8f",
        "cursor": {
          "ref": "8b126454-55dd-4ca7-bc94-629fd46757aa",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f8f5007f-4379-4976-ade4-8754a19c32ba"
        },
        "item": {
          "id": "e351f715-3210-40d3-9d2b-f3ef34843e8f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5b9cccec-8925-43bd-b774-5a5d10c1659b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f720050e-3715-4efa-b6cc-70823e62c0fc",
        "cursor": {
          "ref": "6ee41b1b-6147-433a-903e-1cb289fafd48",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4b6bc96a-8a4d-4c6d-a69e-942837e11e32"
        },
        "item": {
          "id": "f720050e-3715-4efa-b6cc-70823e62c0fc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9fd142c4-3bc8-4f62-84ea-63aac0824761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe60949-9953-4783-a11d-d41b0a772524",
        "cursor": {
          "ref": "5e6a0d23-a119-487f-af10-d2a158dd557f",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e72f8eb3-87a7-4d03-914b-52dfccf5fb79"
        },
        "item": {
          "id": "2fe60949-9953-4783-a11d-d41b0a772524",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "40e3ad32-c859-4f40-b656-86ef39d28ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a34692-3d95-4f1e-8615-50af8200ae76",
        "cursor": {
          "ref": "f8f647ea-d28c-4406-9b83-155e1405599d",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8491708c-9796-4e0d-912d-21efccff3807"
        },
        "item": {
          "id": "47a34692-3d95-4f1e-8615-50af8200ae76",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "63f66605-22e8-47c4-832d-f1b8f3dcb57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fc582d-48d4-467f-9207-3e57f1313068",
        "cursor": {
          "ref": "d1b1a0ed-30fb-48f4-986b-694dfdf947c9",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3869e1b2-5f02-417f-a70a-6fabd046128e"
        },
        "item": {
          "id": "d0fc582d-48d4-467f-9207-3e57f1313068",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4067578b-0876-4b8f-86d8-dd5afd5a2f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5f5428-50f6-4007-8349-420e7d276643",
        "cursor": {
          "ref": "d7049639-345e-4b45-8d93-6643ab1322c1",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d1603be9-d8d3-4dd1-bea2-98d296230ed6"
        },
        "item": {
          "id": "5f5f5428-50f6-4007-8349-420e7d276643",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "58396023-052c-40f9-acf0-5408c7778ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04b8986-3091-458a-bc29-e1d80b368785",
        "cursor": {
          "ref": "55d5d8ca-060c-48b6-8590-9c01d16686d6",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7b511f3f-3a89-4f5b-a86c-23b6b552f990"
        },
        "item": {
          "id": "c04b8986-3091-458a-bc29-e1d80b368785",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "93d80dff-8ad0-4be1-94ff-e8a99c9054b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5fbfd8-2272-4723-88c7-ac1d0b0b729e",
        "cursor": {
          "ref": "4da4a090-e830-475e-9b1a-4361462aa390",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "efd7a9de-dd5a-48b8-a16d-ccceda49611b"
        },
        "item": {
          "id": "da5fbfd8-2272-4723-88c7-ac1d0b0b729e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "af008a9e-e19e-4ba5-9066-2404389914e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733b23cd-97ea-4a21-8027-0e549ac0ca88",
        "cursor": {
          "ref": "9ec210f9-1253-4472-a270-df2e5726ad08",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e400a078-7a68-4a60-a8fc-d9aa7b968b1b"
        },
        "item": {
          "id": "733b23cd-97ea-4a21-8027-0e549ac0ca88",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "38aa14cc-c6c0-4808-aec4-fdfc3520041b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00fc815-2223-4378-9f4d-3a67180b012a",
        "cursor": {
          "ref": "6fe921d7-fccc-48f6-a37a-0a36bcaa60a1",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "355d7dc0-e396-4971-b55b-e79906d50394"
        },
        "item": {
          "id": "f00fc815-2223-4378-9f4d-3a67180b012a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "584adb20-eb41-4967-8c59-a6bede069897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6203fe-e9ec-4a12-b04b-0f6ee95e95d6",
        "cursor": {
          "ref": "ecb07ad0-e747-4698-936b-50df33fa70f3",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "03d7a68c-472a-4463-be45-b2cbe6a7fb8d"
        },
        "item": {
          "id": "7c6203fe-e9ec-4a12-b04b-0f6ee95e95d6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e1e9f987-7f03-4834-a320-2046f6d49b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f865f1b-dc4d-4ad1-84cb-cbf2f0debcae",
        "cursor": {
          "ref": "65be16e8-b737-4917-b71f-4d322433d55c",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "23d9c6f6-2987-4693-a98b-9104ed61d1c4"
        },
        "item": {
          "id": "2f865f1b-dc4d-4ad1-84cb-cbf2f0debcae",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "493683c7-966b-404c-94f7-0f7db7b8eb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a741033a-6718-4c7a-98bf-33a59f956b84",
        "cursor": {
          "ref": "2a19e4f4-8b4b-498a-ab18-8725736a3ef2",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e5e02704-64cc-4799-a56d-7e859f90aa5f"
        },
        "item": {
          "id": "a741033a-6718-4c7a-98bf-33a59f956b84",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6238393a-c711-4fe9-9dd9-425c36ab461f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c67254-9fc0-43b4-9646-9e5624aa4068",
        "cursor": {
          "ref": "85417d1c-4423-429e-b1ee-c6601e34f2f1",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "08243349-e59d-4716-baf4-57a2ace543c1"
        },
        "item": {
          "id": "f8c67254-9fc0-43b4-9646-9e5624aa4068",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4cab13b4-4cd1-4f7d-b4b5-8cc40b03167d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6587be93-6159-440b-aac7-ad0b0030cc5d",
        "cursor": {
          "ref": "f7972cef-197b-4986-80bc-b107ac8507f8",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1eb34e48-1755-4ae2-9338-c21091c8b8a4"
        },
        "item": {
          "id": "6587be93-6159-440b-aac7-ad0b0030cc5d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "64d4442f-15d7-4a7f-b502-c03936b8d7d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ad1b74-2dd3-4f7c-8db3-67ae53adce4a",
        "cursor": {
          "ref": "153757bf-c983-46f1-ae9f-5b4c7f68cc19",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ff388187-64b5-4084-8946-20e8eb1d5409"
        },
        "item": {
          "id": "33ad1b74-2dd3-4f7c-8db3-67ae53adce4a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d79342f3-3d78-49f7-976b-32dc11c0a966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e315a5a8-bb40-4488-bb9b-f5abef41540b",
        "cursor": {
          "ref": "fae05f29-efa0-4186-9c07-113dc930db1d",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b6ee6566-27c6-40a7-aa21-cffedfab5071"
        },
        "item": {
          "id": "e315a5a8-bb40-4488-bb9b-f5abef41540b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b61000d9-7765-4620-915a-67f71ddb536f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 354,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef933e9a-5790-453e-959a-62f3c7b9d730",
        "cursor": {
          "ref": "694f849e-0f6a-4b99-8000-52b3eb2d5666",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1f3d8c66-2974-4269-b59c-d95f328917da"
        },
        "item": {
          "id": "ef933e9a-5790-453e-959a-62f3c7b9d730",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4da684ff-4aca-43ec-b860-7f5b3b64d450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957db31c-3630-445f-89eb-71955a8dfa90",
        "cursor": {
          "ref": "b5977e20-9234-4a34-9218-5195cc0d6bdc",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2e59f1ca-9d09-4dab-afae-e6a52a3b142e"
        },
        "item": {
          "id": "957db31c-3630-445f-89eb-71955a8dfa90",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9dba2bd5-6aa4-4592-a939-3376b574b99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f04fec3-a38d-4d24-9a82-2867cf642976",
        "cursor": {
          "ref": "0a92bbe2-dd38-4328-b86b-02ad36a15a90",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8a3a5ae9-0636-41b7-960d-cce1d2250087"
        },
        "item": {
          "id": "4f04fec3-a38d-4d24-9a82-2867cf642976",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "19d2dc46-642b-4dc0-8332-4ad932870e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28001005-693e-4b7e-a1ee-9f9f9f661b2f",
        "cursor": {
          "ref": "0bb4be25-b58b-49ba-880d-3248285128b2",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1daec484-a0f3-4acb-9feb-bdc9187615ea"
        },
        "item": {
          "id": "28001005-693e-4b7e-a1ee-9f9f9f661b2f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "958efda7-e832-4d3e-ab0b-ecd4f906d0f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7696aef3-8425-4c15-9445-4cb6fdb1f570",
        "cursor": {
          "ref": "69e37132-be9c-4312-9f01-2eff76de402b",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d3d73f56-f468-4a5f-8248-2a560042c82d"
        },
        "item": {
          "id": "7696aef3-8425-4c15-9445-4cb6fdb1f570",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "777643a2-337e-4ae8-af68-6be97b82ab1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1831e5a-47dc-4550-b2dc-a8296801fd1e",
        "cursor": {
          "ref": "7ea774a9-fe7a-4965-9231-3d9dae765e86",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "21caf872-8d1b-4f6b-af36-fc5671c113e1"
        },
        "item": {
          "id": "e1831e5a-47dc-4550-b2dc-a8296801fd1e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "61f563b1-7de6-466d-bb33-5f76639e0c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5095af-b831-4288-9b7f-0b221b47acc7",
        "cursor": {
          "ref": "b2fc7868-6ec3-4172-b1e6-b2e411d3654a",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c1d59406-001f-43d0-920e-db6df1a51c4a"
        },
        "item": {
          "id": "6f5095af-b831-4288-9b7f-0b221b47acc7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e3c86842-182f-4f1f-83bf-dabc4781d46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43aed96-a6aa-4ba1-b005-532c8035d629",
        "cursor": {
          "ref": "d1b3ef95-aeb8-40d1-8108-a307e0813d3f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2e5c8899-b300-484c-8972-6e0031c1268a"
        },
        "item": {
          "id": "e43aed96-a6aa-4ba1-b005-532c8035d629",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2afc2362-467e-43b2-b3a9-c3d171d83a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906d115f-05fb-4ca9-ab35-dd11eefababa",
        "cursor": {
          "ref": "8305e508-6cbe-45c5-b72c-db758dd67153",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3cb680f7-b42a-4354-bc26-087a57dccedd"
        },
        "item": {
          "id": "906d115f-05fb-4ca9-ab35-dd11eefababa",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e8d3da8f-c9d6-4a12-bc2d-396f4a8f14ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f270c196-cad4-421f-b392-64f059e35658",
        "cursor": {
          "ref": "9f42db47-c7f5-47e9-9ac4-2194cc055461",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fe6b1269-e3cc-4ccc-8555-b2989f9db155"
        },
        "item": {
          "id": "f270c196-cad4-421f-b392-64f059e35658",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "159c99c8-d26f-4173-8d9f-930f67e8279c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72386b9e-822d-4f38-8a90-4eb1ecf46fe2",
        "cursor": {
          "ref": "97d28850-c63e-4cee-a049-edb536ecd2f4",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "af77e068-0b66-4357-b9ae-abb2a5e9c815"
        },
        "item": {
          "id": "72386b9e-822d-4f38-8a90-4eb1ecf46fe2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "823b4a34-0398-477b-ab15-628cfa31c9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64aecc12-7466-41a4-84bc-ded6a89ab87a",
        "cursor": {
          "ref": "b65f93ed-e5d0-433f-b61d-412f477bf31b",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9777ed3c-fbda-4cf4-8bcc-5b162a2b4498"
        },
        "item": {
          "id": "64aecc12-7466-41a4-84bc-ded6a89ab87a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "81d4d8d5-b043-43f0-981a-017f1cf3fddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc141dde-6fe0-4a5d-bc27-db531f8e06e8",
        "cursor": {
          "ref": "7fe94e8d-88db-4aa4-bdd7-cde408a59fd5",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "28554243-528f-45db-bd1b-5626bb7773cb"
        },
        "item": {
          "id": "bc141dde-6fe0-4a5d-bc27-db531f8e06e8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "64b79369-3b65-4cb9-a4bb-3df0baee8e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4ab151-1189-49d3-820f-c9815d2b15cf",
        "cursor": {
          "ref": "1cf592f1-5b94-4799-91ec-603f5c83e840",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3afd2ef3-bd9b-45ed-848f-5b2bbc87fd65"
        },
        "item": {
          "id": "af4ab151-1189-49d3-820f-c9815d2b15cf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5e53f927-e862-4248-9405-bba24b729c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e99519a-8710-4c78-abad-5624c58d41ce",
        "cursor": {
          "ref": "da9e708c-d1bc-4104-ab11-e0779dc40b10",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "cff104bd-506e-4202-be3d-e47294224c89"
        },
        "item": {
          "id": "0e99519a-8710-4c78-abad-5624c58d41ce",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d1c62fb3-52ec-453a-a966-690cac865b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ae5631-9b31-4de2-aec9-f957939a1a0e",
        "cursor": {
          "ref": "aab88cae-ab28-4377-a5dc-5584885ea73f",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "11d834be-30cb-4626-818a-540b8f5d707a"
        },
        "item": {
          "id": "79ae5631-9b31-4de2-aec9-f957939a1a0e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b1750494-1cb9-4278-bf15-59b5cd110f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea55cf1-9cba-419b-bebf-208fd2666194",
        "cursor": {
          "ref": "15f6ed2c-4dca-49e9-ae2c-2ae2d40903cc",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d3eb13f1-43cd-40a0-883f-8d3206791b6e"
        },
        "item": {
          "id": "1ea55cf1-9cba-419b-bebf-208fd2666194",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b8665824-9a05-4eaf-a9c0-832ac7deabbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbbd712-28a1-413c-929f-fdcf81d75dc7",
        "cursor": {
          "ref": "865dceb8-c13a-4af1-b6f2-8cdfa7aee9da",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "558dea97-20b4-451d-9c31-d97e52653e5f"
        },
        "item": {
          "id": "6fbbd712-28a1-413c-929f-fdcf81d75dc7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9b336a59-9c99-42bd-a935-940c809fdd45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe40fb17-78fa-4ed8-9b45-ca0480df5f38",
        "cursor": {
          "ref": "ab5ec76c-ea59-490f-bcaf-dafc8847df87",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "58c0dbd5-9de6-42ee-99b2-8e34723beb17"
        },
        "item": {
          "id": "fe40fb17-78fa-4ed8-9b45-ca0480df5f38",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "86790979-45e9-43f3-8b84-cb78c05cd812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21717963-fd0a-4556-a984-186fc2cd4165",
        "cursor": {
          "ref": "18341b4f-60ff-4ffb-a13a-e51b77725468",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7b12a766-6168-475c-b2bd-8d9d30bc5c5d"
        },
        "item": {
          "id": "21717963-fd0a-4556-a984-186fc2cd4165",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "50f81c49-2525-49dd-a847-1817af182d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b4d86d-e9ad-43b2-8e6b-45a4dbd955f6",
        "cursor": {
          "ref": "62d9265d-79c8-40dd-ae5e-70b3c1d7ea29",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "73f6888b-9ab7-425c-9b9f-20899dd65b6c"
        },
        "item": {
          "id": "b4b4d86d-e9ad-43b2-8e6b-45a4dbd955f6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f5da82dc-1694-420f-bd3e-61d6bccc0767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f22fe0c-3799-4e97-b35f-ea6293af0b58",
        "cursor": {
          "ref": "808404e1-87ca-43f9-812d-a6bcfebb9405",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "048d2a6e-318e-4752-a109-cbb438d777a6"
        },
        "item": {
          "id": "3f22fe0c-3799-4e97-b35f-ea6293af0b58",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "47142117-3b94-48ea-88ca-7f2e51c26b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52616f59-926a-4a42-bbef-6d3ff1b0a503",
        "cursor": {
          "ref": "c37eb0f3-019f-4ec9-9321-dd8f5a7cb240",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0c57c571-e704-490b-aa82-ac6ac46e7776"
        },
        "item": {
          "id": "52616f59-926a-4a42-bbef-6d3ff1b0a503",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "50b0d487-bf1e-490b-b656-92992c6e70b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbcd470-e085-4d0c-969c-312e2dda613f",
        "cursor": {
          "ref": "6376fa94-3e36-4383-a2d5-529e45d6f662",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6e9f1d25-be64-4e0b-bd67-9231cf1efb49"
        },
        "item": {
          "id": "9bbcd470-e085-4d0c-969c-312e2dda613f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0aa42f72-f995-47af-9f5a-697c24bb07b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11148f0f-5a23-4c62-8ced-3c2417cd4efa",
        "cursor": {
          "ref": "682c9ee5-4bab-43cd-8476-e41fdfecf5b9",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9a7597ba-c8f3-4b4f-9149-b82a43556e1c"
        },
        "item": {
          "id": "11148f0f-5a23-4c62-8ced-3c2417cd4efa",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "232cd5eb-ce59-4d3a-8f94-da0d5e2dfae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bccd52-0abf-4c2d-b250-021198711006",
        "cursor": {
          "ref": "9689fdd3-4205-4248-b0bd-813bc92863a8",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9be44680-3912-400e-80ed-0f820ed5c261"
        },
        "item": {
          "id": "09bccd52-0abf-4c2d-b250-021198711006",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "df225f78-38d1-4e6d-8b11-f192c7fbde73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2265af-042f-425f-8de6-ab0b9064f888",
        "cursor": {
          "ref": "569fb8aa-db71-4eac-b9b5-51ce19194191",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "21fac319-db1c-4551-96c2-3aee7e2a0c3d"
        },
        "item": {
          "id": "6f2265af-042f-425f-8de6-ab0b9064f888",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e94c3173-63bd-41db-b6e9-440191fd1c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb10e710-4210-4f31-b7f1-03373d55d349",
        "cursor": {
          "ref": "da6b41da-a074-4d34-a2a3-2bc2709ac6e5",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a25fd4f6-4891-420a-a866-aee9e3002eb9"
        },
        "item": {
          "id": "cb10e710-4210-4f31-b7f1-03373d55d349",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8df0da28-10db-4111-bdcf-58e264f23c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78bcec9-cffb-4126-adf6-50a54c961633",
        "cursor": {
          "ref": "480ec73f-c1cf-436a-8a4a-39ffcde71f4c",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d9b9d0d0-5f60-42ae-96d2-8d6445f8e1bd"
        },
        "item": {
          "id": "c78bcec9-cffb-4126-adf6-50a54c961633",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5fbafac1-720e-4435-a6ed-4f90587af678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac11b01c-0de3-41a9-83ef-39492b8cc0a7",
        "cursor": {
          "ref": "a54bfabd-80cf-4cfe-a159-08880ce4cb52",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3e7a17ba-75de-43bb-93bf-233f97c2e726"
        },
        "item": {
          "id": "ac11b01c-0de3-41a9-83ef-39492b8cc0a7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7b332363-cebf-4568-839e-ac1d3d497aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b316f8a-3be0-4c0a-9e42-da6e3ff38a1a",
        "cursor": {
          "ref": "a376d427-76a8-478c-a485-3e8740469d14",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "98177a49-406f-40d1-8494-3521fc0fed81"
        },
        "item": {
          "id": "8b316f8a-3be0-4c0a-9e42-da6e3ff38a1a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a28ea3d9-f1ec-4977-9fb1-1dd75cbd67aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3717fa60-f2b2-4856-9321-9f43f26ad60b",
        "cursor": {
          "ref": "01a225a9-72d7-4ffd-b360-147c099f50a1",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e1e5b54d-01d3-4ba8-b6c0-9bf04ec4d8d0"
        },
        "item": {
          "id": "3717fa60-f2b2-4856-9321-9f43f26ad60b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "abbaef70-04e0-4044-9d67-8bc8120f4b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6465275-df72-4bcd-a4bf-e5bf858393f0",
        "cursor": {
          "ref": "16ff81ed-b9e0-4df9-9497-ab6dcf940f93",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0a8399d7-93f0-48ab-b3e8-e3174fd537ae"
        },
        "item": {
          "id": "e6465275-df72-4bcd-a4bf-e5bf858393f0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f24a991f-59b7-4a68-8407-ed78618e67de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699e6476-e720-422b-86ce-afa25c0758e5",
        "cursor": {
          "ref": "1183b85f-53a4-4e4c-a99b-7b0ac8e831a4",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0d838491-1685-425f-800d-5923089390ff"
        },
        "item": {
          "id": "699e6476-e720-422b-86ce-afa25c0758e5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bcf5cff2-6637-4cd5-a2ee-bbd562b004c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa526b90-5c0b-4b87-817d-aecfaf654faa",
        "cursor": {
          "ref": "b1b6a24c-2e57-4c19-81ee-e7c11e1f0750",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f6d4ddea-ef88-4956-afa0-4a7e51db48f2"
        },
        "item": {
          "id": "aa526b90-5c0b-4b87-817d-aecfaf654faa",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cd0f934d-1491-487e-aead-af78c715197f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a856de-b0b7-44cb-8016-a57ec190f875",
        "cursor": {
          "ref": "16ef1544-32a5-4046-9180-d0e54c5d2b81",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "95b8351a-ac57-4142-ab4c-5db3fe6987e9"
        },
        "item": {
          "id": "20a856de-b0b7-44cb-8016-a57ec190f875",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "16383199-9a15-4eaf-a606-e77c254901d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d2a9f1-943f-4c6f-ae68-b4471326e5fd",
        "cursor": {
          "ref": "72ecc6d3-a0ed-4dc3-9acd-f17a822c33d4",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "acd64b6b-16f8-480f-bc14-8cfd649fc50c"
        },
        "item": {
          "id": "07d2a9f1-943f-4c6f-ae68-b4471326e5fd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3e54bec2-cf40-4699-bcdc-a35469d94e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f250d9c8-3608-4325-96f3-36451e26a1a0",
        "cursor": {
          "ref": "e296addd-034f-49e2-8619-abb5d1c7de99",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "8c7cef70-7259-4c7b-b558-38fb4b691ac7"
        },
        "item": {
          "id": "f250d9c8-3608-4325-96f3-36451e26a1a0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3e4af7d4-6aae-4abf-953e-b6ad8285ebb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86df127-1fae-4da8-b645-3e475df98ec8",
        "cursor": {
          "ref": "c8f383e4-7a72-4d44-a892-c4a3867ba122",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ba314cbc-9ab7-4b45-b148-95068bb4a23e"
        },
        "item": {
          "id": "a86df127-1fae-4da8-b645-3e475df98ec8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ed5fa038-2799-45b8-9eb0-08326e21c973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b445c3-4a8e-4652-a22f-949a0afbf169",
        "cursor": {
          "ref": "c9a844ad-afa5-4ba3-9979-59689e8864ee",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "071012ad-1836-48b5-b0ec-002da83d33d3"
        },
        "item": {
          "id": "a6b445c3-4a8e-4652-a22f-949a0afbf169",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e95a9139-8580-4afe-b7cd-71fadb8f035c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a1a263-e75c-4237-a572-201048349830",
        "cursor": {
          "ref": "9fae9270-1265-4dc3-beb4-5e3d5217eac6",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6b79b5c1-c68e-49f7-8d1e-a96e5f3d17de"
        },
        "item": {
          "id": "a9a1a263-e75c-4237-a572-201048349830",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ba504280-70b7-4dd3-bbd2-b0a4ed145c71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65eef4de-fb3d-4980-948d-c8bc8dd5e97c",
        "cursor": {
          "ref": "b19b5c83-4434-43b4-9690-f526e19d2606",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2ad05ff4-cdaa-4031-95b2-7b3917341723"
        },
        "item": {
          "id": "65eef4de-fb3d-4980-948d-c8bc8dd5e97c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "103b427a-d216-49f3-b2a8-a94bb064e9a0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5080dc2c-db8e-40c7-a181-f3b4bedced4f",
        "cursor": {
          "ref": "116c5ba4-372f-4e62-80da-c959e3d281a2",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a8c47591-db6a-4c42-bf33-9f3ce932505f"
        },
        "item": {
          "id": "5080dc2c-db8e-40c7-a181-f3b4bedced4f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "aa0c4b2c-b9ce-443e-a381-91e2c2ab04ef",
          "status": "OK",
          "code": 200,
          "responseTime": 536,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749617e5-87aa-4579-a4dc-9442ffa6a389",
        "cursor": {
          "ref": "c7a1faae-488a-42f0-a094-eb85d7935aa5",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "23132dbd-5284-44e2-8f82-1a4d22537e31"
        },
        "item": {
          "id": "749617e5-87aa-4579-a4dc-9442ffa6a389",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "137df95b-b103-4a57-8884-353945384e7b",
          "status": "OK",
          "code": 200,
          "responseTime": 352,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e080f11-f310-47fe-89bc-978178062e9a",
        "cursor": {
          "ref": "fde11bb6-b315-4997-a504-4e3cb41652c2",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "df32eba4-4427-4114-bc80-53305c92cd11"
        },
        "item": {
          "id": "0e080f11-f310-47fe-89bc-978178062e9a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0575358d-4006-43f8-b901-28f0cfa27160",
          "status": "OK",
          "code": 200,
          "responseTime": 797,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed4da79-4a94-45b4-88e1-e55d78a55827",
        "cursor": {
          "ref": "d4a363d8-7fb2-4476-8b1f-3f98e19b20e6",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c4828fe0-f289-4202-ab03-eeed8c1d2214"
        },
        "item": {
          "id": "0ed4da79-4a94-45b4-88e1-e55d78a55827",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5c478c36-308f-43f9-802c-a60c15ee5c58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed4da79-4a94-45b4-88e1-e55d78a55827",
        "cursor": {
          "ref": "d4a363d8-7fb2-4476-8b1f-3f98e19b20e6",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c4828fe0-f289-4202-ab03-eeed8c1d2214"
        },
        "item": {
          "id": "0ed4da79-4a94-45b4-88e1-e55d78a55827",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5c478c36-308f-43f9-802c-a60c15ee5c58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed4da79-4a94-45b4-88e1-e55d78a55827",
        "cursor": {
          "ref": "d4a363d8-7fb2-4476-8b1f-3f98e19b20e6",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c4828fe0-f289-4202-ab03-eeed8c1d2214"
        },
        "item": {
          "id": "0ed4da79-4a94-45b4-88e1-e55d78a55827",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5c478c36-308f-43f9-802c-a60c15ee5c58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14851f6-6706-46f0-a50a-deaf46d3a4cf",
        "cursor": {
          "ref": "bc874030-2ca1-4dd8-a195-b38bf12f886a",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "60beeb21-3960-4985-8974-d15b683af062"
        },
        "item": {
          "id": "e14851f6-6706-46f0-a50a-deaf46d3a4cf",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "788b49d1-69cf-4687-a7e0-73497b3a4239",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c28ad26-6962-4718-89f8-a19a6ab48e0a",
        "cursor": {
          "ref": "9316a49c-6c72-4a82-93b8-3054602659bd",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e151e792-9a42-49a6-aa47-4fc29b2cdc9e"
        },
        "item": {
          "id": "4c28ad26-6962-4718-89f8-a19a6ab48e0a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fd0c3cb2-4448-43bf-b3e6-d01cf2e7e05f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4c28ad26-6962-4718-89f8-a19a6ab48e0a",
        "cursor": {
          "ref": "9316a49c-6c72-4a82-93b8-3054602659bd",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e151e792-9a42-49a6-aa47-4fc29b2cdc9e"
        },
        "item": {
          "id": "4c28ad26-6962-4718-89f8-a19a6ab48e0a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fd0c3cb2-4448-43bf-b3e6-d01cf2e7e05f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b71b45d0-b1d2-4c60-b35f-f7c45d9500e6",
        "cursor": {
          "ref": "db9d116d-883b-4bbc-b8d3-736c65c59c8f",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "98e767f7-d50a-46b9-9236-72cc5997a4af"
        },
        "item": {
          "id": "b71b45d0-b1d2-4c60-b35f-f7c45d9500e6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "95be9476-1783-4d7f-a9c4-8eef54fd9cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "0eb728fd-7f07-43de-b902-b014ab78d175",
        "cursor": {
          "ref": "c899ba9f-7a9a-4f3b-901a-4239fed54c2c",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ad5d3049-7a7b-4889-bdac-8d16b85a91fa"
        },
        "item": {
          "id": "0eb728fd-7f07-43de-b902-b014ab78d175",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f6f55dfa-911a-4cc7-a032-042f25cc9bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "0eb728fd-7f07-43de-b902-b014ab78d175",
        "cursor": {
          "ref": "c899ba9f-7a9a-4f3b-901a-4239fed54c2c",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ad5d3049-7a7b-4889-bdac-8d16b85a91fa"
        },
        "item": {
          "id": "0eb728fd-7f07-43de-b902-b014ab78d175",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f6f55dfa-911a-4cc7-a032-042f25cc9bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "24087462-6489-4d8d-aa27-6a7375853ddc",
        "cursor": {
          "ref": "5511073f-fb30-40c7-b2d3-0513e197204f",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "df214291-8aba-428f-8235-68c718448d11"
        },
        "item": {
          "id": "24087462-6489-4d8d-aa27-6a7375853ddc",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "df38aaea-9651-42de-a17a-669fdea0a40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}