{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "84c2ad1e-94ff-4e7e-8734-2d7f683e8c06",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "08fd149e-0b6e-4fbf-ac37-601506fc69fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bbf4a8bc-a546-4da0-874a-2acc3c509a4c",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdf6d0e1-abc7-4ed1-aecb-40c6dcd23dff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e248020-e4fb-441b-9072-f652aea699f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "7135ca95-49bf-4747-8d3e-fa3e7b54ab49",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e12eb425-f605-4aae-b924-5eec5cb98054",
            "name": "Negative Testing",
            "item": [
              {
                "id": "877bb8ed-c0d2-4628-b9e5-f1a5a6dc9b9b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f0383997-84c6-4983-b6c2-7cb35326dc2b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cfd45b-e4a9-4922-891d-c8c7cfc9140b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fbb479af-d3e5-43af-aacc-d5e26ff6db4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e245cf07-af31-4258-b08e-2eaa01b7bae3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef2f446-8325-4d99-87f7-11885c00fdaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0ce32e0-6f27-43c5-9374-9d4a181ac808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01bd6b3-bad7-4861-ae0d-97a120f02d4f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7326ba4-8e73-4add-be15-119ec21f81c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9de2f285-abd6-400b-8745-f36199b022f4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fa070a28-bbae-4741-95f2-2800e8656aa8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b0ca3b7-d645-4e29-80c7-d7cd611c17d5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4ed9e0-d388-4a09-b5cf-5588a3a991e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e87dff36-71cc-4c7e-ae32-e02cff6cfdd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf36b905-e903-4c83-98db-eb4778425384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067a7c3f-e29e-4c39-9204-2f7ec1985ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cdc652-cf16-4151-bd88-b05cc90c3119",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d029eca6-8244-4ebd-b54d-80209b552681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3414cd3b-1fd7-4cc7-b85a-48052af9b792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110a5d2a-d03c-4857-a56c-aec95c6102f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b8022881-2be8-438c-9a6f-01be4d4ee5b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a2572516-aa25-4d27-bb69-2fae927b554e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b935f02a-e05e-4c84-9e40-2df7aa0df337",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d72a0ff2-e9a5-4631-a333-1ffad7fffe29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b5cf50ea-f72c-4d9a-9423-f26f5aa2d8dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67d0e248-2d04-4088-b2e6-254a8670c420",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "12086c67-d069-4b4c-ba7c-c094c29e8de1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88f399ff-1606-4bb4-9869-8b5dc74e1a22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03e2521d-3a00-4240-82b1-2f0c5a40aac7"
            }
          }
        ]
      },
      {
        "id": "d6e318c1-4df3-4b42-b9a0-fec2ccfba851",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "beae53d2-752e-452e-9e7a-0450ff94e549",
            "name": "Negative Testing",
            "item": [
              {
                "id": "912f1acd-260a-46bd-8dc0-2396ffcbe22a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f265c927-e26d-45e7-bbbd-8646dcf42eb2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f3e602-a34c-416b-918a-20701cb7da10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7e9853-2526-4ad1-a7f4-9072e7e2bbe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc61ae4-6738-49ea-982f-bf826b141052",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfbd29c6-8105-4326-9093-985e48754516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3cba2c-cc68-4b32-b136-04f55be975a2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc6da11-8f81-4789-be9d-4527a9e1980b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a2a11ec-9fbc-4439-99bc-8b03ea8753ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefd3577-f8d5-4e29-bc83-d1858da08136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e86aa102-d685-4c66-a34f-f7faf69807c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cd8874-0e8a-4568-926b-5704d9bb08d8",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b584c0-e707-4df3-af8c-0dc6bd7d963a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "828af53c-0423-4450-85a8-8a1faad9f444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a784c5-e4b4-4f50-a07a-3f8835de5c86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13daa491-f29b-4a7f-9c39-689158e5d394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658f8d62-e000-4912-883a-88933e228c6d",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cde6130-58ce-4e7f-b422-18633d13ea7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d033f5a5-da4b-494e-a6d9-739ada561472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87b69b2-07f7-451f-9816-47071024ba65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "607957e2-da9d-4021-8361-70f1f04ee964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7714207-81be-408b-a128-2a918b215033",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a17b43a-e8d5-4ffe-bbeb-1677f63a7745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2acb0892-9196-4ed4-9518-baa46a2ab1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a26b8e8-4fff-4f69-adc7-f772caf304e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35c77860-a74c-4246-839b-b6bfe4bf531e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d5d0a6-55a3-493f-b92c-1f94e7a6968a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c312a6a-d6c7-4b2d-9dce-6484329f1fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9978acd-bbbe-44e6-8dc7-534a219c0f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28520fe4-d1f5-4e34-8d20-119650b667e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74a56121-9c9c-484f-90b2-9d182374dd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11013fe-380f-4739-b63e-7669566b0339",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4a08b7-ba65-4c40-bb0a-204ba0026fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c827c7f-a021-45b6-a154-3ca220a83df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a44d50-f1c9-40f3-856e-2655a6ffa11f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00924694-1eb9-478b-8c59-63b1acca9c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936f855d-f8f1-4186-ac75-1de8b381363f",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011bb51a-1eea-42bd-9b2f-1c0c7de5813f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd666a5d-ee30-488b-9a4c-a1e47f0139c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776f2e26-f971-4892-aacc-308cb13ea251",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b443a998-4119-4693-a1ad-f4f8fc98e914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c585a4-bb9c-49a4-9a35-46771f61ec07",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6085c1-7fcf-409b-a2c4-e1f0d63a2dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2509b17c-6fa5-48c0-8db1-15dbadadd94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7707329e-221c-43e4-b893-ec9437a60a6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab208242-218d-436f-9f89-d70553a39dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e77780-fdd2-42cd-8dd3-3c833a4c6b7e",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afec6457-70a4-4506-b502-8feb6ce3a919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc51c62b-6adb-451a-8e15-b70adcfc4f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359c6b0f-0585-4a48-acd5-d8085c1c4cfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3f58079-2614-4dc9-a013-c301c0638ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd79d9a9-c4a0-43a8-93e2-230e9dd352f5",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76144cf-ab9e-4895-82b0-5be73f73a39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec71d220-2019-4185-8f15-b532689481c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d008a0d-3c93-4559-a8f4-7a4523809ad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "7f28cc49-cb32-44fd-a04d-c38f1fbaa17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa299e7f-835f-419f-a2b4-1c6f57546d55",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ccbf8e-1558-4baf-acd1-7b0a5d27a441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbf6f81-7056-43ac-8783-d0004400f295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93b72da-3086-46d5-931b-623840f78d90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "50ff0afb-9027-4c3e-afb5-58061e9287a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551080cd-5de1-4e84-b4be-b41e18ca7a6a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b88b474-92fc-4ca3-9e3f-56e3f1defda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40a6cb1-20ea-4422-b477-e37cc6a33e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d757199-f64a-42cf-bafb-75eb0aac1676",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e79d579-f473-46ca-a0cf-c30bef56e6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e55e38-6e8d-4bb2-a2c3-bae30dba0c20",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1701837b-5d48-40e2-b369-eab39a24b1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d97560c-b024-4265-b4d7-d77f9898d43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f535bf4d-ef30-410d-931a-27a5fa0753ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd0b2725-bf4a-4720-bbce-fe8cf10b7999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195502c4-f493-4c56-8a8a-87b6c94de389",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91adca15-9473-4bbc-bd2f-59e691929127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a43ed3-d2f3-463c-be11-7461210f8e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71016a4-6add-4ef9-9546-903ea61fcf1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "71b58691-937e-458f-98a2-0be6b33e31f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2518f9-422d-4ce9-8b00-2c1975236529",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2832fa46-0ad5-4110-a5a0-fd674d3038a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643de2b4-6987-4b24-94d5-e0d205a258a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdb58ad-a987-415c-af25-6292554a2eb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "49636418-a5e8-4473-81f5-802544e48692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd80bda6-197a-45b8-b4da-bfde32dcf170",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7ac204-a56e-47ad-8807-739e5026f556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c2c624-70f2-4831-b0dd-70d368adfba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d8b93b-0124-4dd9-887f-c3050ff02b3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "084aa75e-fa95-43ec-a3f8-92d0d816dece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4d1634-9684-4d6c-b75a-fd64890a54a6",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74783b29-692e-41e5-adb4-e264874e165d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f39527-d73d-47de-b843-7d27e7ed0a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3fce60-9a26-4f8b-87fe-c7f7a30c389c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a67ab42-5c78-49d3-9715-3f82b17f6f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3008e7d-8e6a-4353-9e5a-b8e0fe7341fd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeeed570-19ee-4bb4-ae71-f200b8581bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2ed9d2-a467-412c-bb92-01d233a208eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960dcf6d-5f67-4f75-88a6-c69849054f0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef7dfcea-17b5-4c35-a2eb-12fb3d924937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffd4477-021d-4edb-a251-24fcbbb6cceb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ffa4eb-3339-47fe-b850-126c09243d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d844a244-950a-4dfe-ac94-99632a2906ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32bc1ad-6cc5-46ba-bb52-ff315ffb9761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b01c5682-26f8-404e-8471-d1f5764a293a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f929e87-e9bc-4160-a9c3-667687133d42",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a704d91-74b4-4dbb-b3c0-b5d73ca55dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da0db26-d1ed-447a-989e-d9a36d874f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51753789-7329-4500-a4c1-5f41d1d0089f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d129d747-2ac1-410e-90ca-76e9c0947213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962f91df-5ae2-405c-abc2-035c82be088f",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d331258a-462f-400f-8ea5-b77ef5eaa291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c5ed3b-06bf-40a8-9dce-ce9f13593418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75587e3-2ae3-48a2-bf6d-a8843fa83b84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43f162d0-04b6-4bed-b6a7-21d2e3502e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f566765b-f641-4bca-87b0-ac3ac53d0cce",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b10ad5a-58fc-4066-8b64-fe5386f823b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6423a0e3-dc4a-45a9-b99c-5ccf40fa6135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b297ad-4a17-4bba-a184-18438939156c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "955e1c8b-b4c7-431b-999a-9a186fade796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1b0d21-c78a-4c37-a8fb-63edf268022e",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06de80b9-4434-4ae5-af3d-60fa2cce7f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b36c9a96-8035-4e4b-acaf-1c66707fc804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5bfaee-d3db-4cd9-b1ac-df84be012761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59a5b6db-cd3b-4c73-99c0-10a24967b66a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a073e24-a347-4a6b-a0ec-d9ee621fbbcb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63597db-2ad6-4b0f-8f69-028bbdb355cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e435a3f7-f795-4a80-be7f-7045724421f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd5a675-9a08-4cf0-a91a-23fc3cd0c2fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a0fd330-c505-4cf1-8748-059fd6780516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56200a55-dc9c-4223-931b-c59baeb2d2ef",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35697f75-c604-449e-a15f-710e40d5770b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850d5517-305d-4964-af25-575a87d35714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8114cf-6efa-485e-be20-6ccaefcab4a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea765bc3-bfd0-43ac-8e3d-4c2ebb0e276e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6e9db2-31bd-4e18-86d3-98be96af2e0a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736b2be8-9bae-49b2-8d9e-fe8dabd0e019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e7736d-90dd-49d8-993a-80517609aea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4468352-29dd-4a93-a7bc-3cfa4ae75998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34173ac-f08a-40d7-94cf-745b6dbafcae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d63d8ca-b2c0-46ce-88f5-a249ed7e2824",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3bd7d21-23b0-4749-a588-668748156bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0cec364-3c54-43fe-9e9a-5e929334047f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e45f31-b72c-442e-9ec7-b2ed41913e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53f80e71-d1f6-4b20-83ff-0ebb49c4909b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19612d7e-a331-4916-8e70-4ac1b39cd8a1",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9af130-7f62-4507-86dd-2c3f2f9b0594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e301bd77-99b7-4a89-93bd-0ffa4e8aa4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d6fc30-6e3a-4ed1-b4a9-5a2276645732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8759d6d4-dd49-4d15-80ee-d9ee6dc706da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f35b65c-886a-4e4c-9efa-7cbc33a61432",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718ab8e9-e6e2-4304-ae55-da2edd22c427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e9168f-95aa-4583-b511-d890f31c384f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c18c600-654a-4cc5-931c-0d678ed655db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9608093-f720-4c5a-b182-2338e5f1d5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5e5ab6-ccc9-4fc5-aade-d1134737fa2b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a54fcca-cc32-43d1-8e83-7dc09bd2392a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "15a16f8e-8fb9-448a-84ff-1a589a9ae30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1310521-ea5c-493c-969c-43ee0c68d3eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56f02af3-d041-4be4-b8af-100e35b9502e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d1ebdcb7-94cf-4327-8165-1cebac1911a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "09d5035e-9729-4d58-afb6-9e449814ca58",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67f4964-822a-4096-9894-f1f904baa2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa554939-d9cf-446f-9d88-e6c147c96e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee91a56-0b3a-4b25-b28d-a839c3396d4b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d7fa8ad4-d414-4625-9311-1d976efbe677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36477b2d-6d8d-4959-86bc-c125eb7f28fc",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc05d5c-bb3f-424c-a65b-9bfb0ccd1889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad3565e2-359f-4191-909e-44066e8f2bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7825341f-02a3-4512-b878-184f80383c7e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8990f72f-9fab-49ed-ab7a-cd58cf5fceaf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de2db14e-0a3c-4109-9236-ccabe83fce26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bec33541-d29b-4bf1-b9b4-a7742c54af08"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb3dd775-ee49-4bf0-8879-dc7a90704365",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fbe416e-eef7-4d9b-a857-25f9449aa251"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eeb16f55-b388-432c-b4e3-01616e7376f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e6271d5-cf6c-4e04-bfd1-59820f13bd43"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "395e7233-33c8-47d0-ab38-f998e272581d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b4c5f99-9625-45b4-8825-aff4e37ef679"
                }
              }
            ]
          },
          {
            "id": "441b3bb4-a675-46b0-8077-ff16fe242c55",
            "name": "Positive Testing",
            "item": [
              {
                "id": "921e54ef-d019-4ef0-987f-762bdce86ba4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d8bbd3a-50a3-4329-ac8a-d4662d2eb564",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1feefab7-e8d0-41c3-b721-f6b716ebc09d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44626c4e-7660-438b-ba71-06995ca14acd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "28f58afe-aed1-46a9-90c7-1ca32c3fdfd4"
                    }
                  }
                ]
              },
              {
                "id": "80aa458f-d6c1-48ef-8974-3341669652a5",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8e72bde-d3a9-404b-bc99-7e327c18a35f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93ba76a2-bc20-4b48-81d2-9cf43dbc2287"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df5b93a5-5ae4-4232-befe-24c1a94e30cc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "213e0d89-b8b8-4b3c-b725-320e7d49712b"
                    }
                  }
                ]
              },
              {
                "id": "ba2baabd-3b31-488a-8ee9-74817e05d510",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d06ac3b-e1cd-47b2-9cb5-a1392dcbb03e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a675f9d-25e8-4d96-ace8-9c455ec2dab0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12322735-671e-4c83-b0c9-cc78a0464971",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "15bc2e72-120a-44ae-b31e-5680fd68a5fb"
                    }
                  }
                ]
              },
              {
                "id": "3049cf6d-6727-4b2e-bd2d-c0ba9cafbb24",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1717d0f7-ec7b-4729-a9e5-b85c172df0eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3333c48d-8ed8-4492-b3d0-41154aa193a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af89b906-b188-458e-a676-6460d2c54629",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "61c15806-24f3-4c98-add4-a05bdab75a6a"
                    }
                  }
                ]
              },
              {
                "id": "8c0bd65b-3253-47e2-8217-680a3d47e8d6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88b5f52c-0087-4f72-9122-21bf1621de42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc8abb93-ca2c-45f8-9168-59f04c2bef6f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "749d37c3-14ce-43eb-9d0f-781811d98904",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ca60f0ba-6f50-49aa-baf7-c2c9fa7d2d36"
                    }
                  }
                ]
              },
              {
                "id": "96a9120d-e9f5-4ec5-8ce9-51daa785d433",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3db23e7-a929-4a3a-8a79-4158c62e51fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0918bf0-9d6c-41ef-88ab-f526643a068a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2549400-872e-4f53-a8bc-6bedd24369ee",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2a22bde2-df33-4c74-834c-627766e85dc7"
                    }
                  }
                ]
              },
              {
                "id": "fa9ebea3-34ca-4fa9-8968-81a447e0da76",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba754e24-948f-4e91-aa93-c717e383a736",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c601805e-cd62-43d1-9b25-61ff8686ca34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82dce230-b7b0-40e6-8e1a-abc3c69ce246",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0ccc29f0-e47a-448b-8d96-286cbe6f0802"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e3b843ec-c482-4c46-823a-031f40a50b62",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe620da2-7e39-481f-b5b7-94203be97221"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dcb3078c-9de0-492c-92d6-c9c7c05193bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9676e73-3782-4df4-8237-0ba48b392139"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "064b591a-059d-45fe-af28-8b361cf72aa0",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "033d34af-d0d0-4039-9987-b643b2c3c70a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a664c576-11ea-45e4-8c98-204ce9555c43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "594fb626-b5f2-4c15-a405-5164c266fc7e"
            }
          }
        ]
      },
      {
        "id": "c0a1aeef-e227-4544-a21c-b8da2a929839",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0aeb37d2-c54b-460c-a932-31b2b5b84d3f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d4491d6-a04a-4450-8203-743787fe3586",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88f98ffd-14b5-43fb-b76a-661e302a58a1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0d164d-56b8-4646-924a-6c617cc46580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c9a227f-ef58-447f-b206-9bc51fda490c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecca1d2-eca0-4bf4-8194-dda7f5b29335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22ce4b08-54d6-4cf4-b7de-82909ff43f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6834fffc-4e7e-4d75-936c-2af8b7089cf9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c7855d-8ccd-4c2d-92f3-d2e2697684e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "48a071ed-c2af-46dc-9b32-575f730d4255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "607444b9-a6c6-43c8-ae1c-7258a97cdf8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc5f1eee-5419-45bb-bb6e-47e67d501f52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc85bf3d-533b-472e-b84e-563fd17d37b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfc996b3-5c6e-4bc6-bfc1-1de3f8d08a23"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf9e5dc0-8e1a-4fb8-93c0-088862ba84f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd7e2542-9780-4b6d-9b06-105496ac5bea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e8ca625-69f5-48f8-993e-23f8e9089fc0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "e3777926-1739-48b0-8bc2-2bbaa2ea7187"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5400be1c-f4cf-438a-a914-fbbe4e38fe68",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5099cd96-497c-43f3-9bb8-66137cb8ccd6"
            }
          }
        ]
      },
      {
        "id": "89a34273-7ac7-43cb-8ff3-309830b801d0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "85e6409c-6d17-43c1-9f63-08aba490b8a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6fe7484-5c5f-4de0-b3c4-545c6bc25b11",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ac6e96e8-b2ca-434b-a7f4-9f8ef416c294",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b9cd98-ef8a-4b49-944a-524e02285f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc13023-af45-489e-852b-21e32275ddbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670f9def-3a28-4087-bf88-73fa18ef88b4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc4b8d1-6b8a-4cbc-8ccb-ca14ce6c004a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1897f237-e4c4-4491-9e0f-41112925abf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9e9c07-5e72-41b5-a8d0-40cf445934ab",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71504b47-dabc-4d88-bd1e-ea2b0bf02d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acdddf7d-7e9b-4a93-ba09-546f8276a0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50ba356-2ae1-4bd9-ad69-66ab81dea995",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0905fc36-f8b8-46c8-a55c-a9f599e68426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d0b418-102a-4660-876f-e1d089ebc8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7fdb12-8d58-4bbc-a431-644afdbaaec4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891e9701-3bff-4eb9-a759-738b60e3eea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6fa3b7c-7bde-4e40-80ee-9c214257bc0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87316266-9670-4187-9520-d38d990cb8d7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1779c44d-bb6f-462e-8787-1bb7fc3558b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603de8db-bf5d-4182-84f7-42c4e25b59c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54be8eae-a7f5-49f8-b6ba-6a4edd6a6413",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a667b4f-ff83-4ac6-8085-48ba59571b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b106cb-122b-405f-95f3-3a45768a738a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51b3f05-b61c-4c54-9b09-0bf6ec7b6a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1c8112-3790-48f9-a55f-01f73053264d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff83ee3-579d-4f47-b259-0c4877a9bded",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd56b8ce-8b64-428c-b732-196089675764",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8562eb1c-d083-4b6e-b4c9-f6157344d3d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69656bd9-9574-40dc-8b62-3547977aa1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c611a3-59e6-4928-8a7f-57fed2b3dd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf963b4-1183-4ea3-9e81-1bca3c224a2a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5146d24e-a7c8-4a5f-a6e4-b1c63f165ff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75991da7-d021-4dff-9496-85834b234ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068c00a5-62e8-4e1b-b9d0-5c4b7e138088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a08aa16-8615-48e4-a826-d5ca6ca0a3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967fea43-4112-4e16-aef1-0ff8e8841197",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5144af80-c749-4bc2-820d-3334180977ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ca50b5f-e9f3-4fe5-a988-60aaed3a70da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e66d1d-8ff6-417d-8f94-40d3131da279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3346571e-74c0-47bc-bfa3-d7cbf8d8dfe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec05cda-813b-46ff-a769-600c8cb4ed97",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..RJunbl8K6pk5JyKv0VkmdJT4I8sfatEPdbup0RAYKU6F1fDvEZ8j0xFlr1ocpNQGIi4H5cufTCRE3Fi45ZQ-CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af89f7da-0dc0-4bb9-a213-84a66de66eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3fd55fd-18a0-42c6-976a-485b95cef6f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44af096c-1c97-4f06-b740-ea46d6ba14a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977909c3-d563-4705-9497-7e55c5c0943f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a29872c-412a-4c03-8d3e-862c442725dd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c22013-baae-4dd8-b324-e780d253bfab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f478cc-c887-42c1-a43d-d3977eb5c48c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53ed5f6-0263-433b-ae8e-6aef73d91adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee614b3-e4ad-4971-8057-20a8e110c0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2bd611-e8c6-468e-9433-9e919760f675",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afbb1ae-e591-4074-b33f-1c20800d3d8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eccccf3-f5dd-41bf-b449-06c77c461686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3c86e0-a895-4c84-bc51-a3eb0ce55033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df58fb62-f7ca-40b1-9213-ca779d97e907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca4694e-30b7-40d1-9207-a083dbe3ca38",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958c245a-5a41-4fea-83b4-6ea3136f00b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcd73ad8-52c0-4070-9442-6b32d93063e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f0791c-fa41-4894-9750-9dc125d8ceff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5958fbc-0b62-4211-ab6b-4cbf4ec14e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04fc82c-fde2-4243-8b6f-905bc419ec67",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58dc5fe3-2ae9-4eb3-9a45-86e4c005ac8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8ba5062-f348-46b9-88c0-935638e66d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c142abb-a096-4243-8634-cac1d98f677d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9bada06-06c3-496f-919d-e06bb55eaf90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a11f711-cdf1-4df9-89f5-d87bbc8e7de6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5edf48-24d3-4c20-bcdb-9ab34745f8bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e53ffa4b-c396-4f73-a18b-684352c85e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c10aa3a-6ea8-4c07-a908-27713792f54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd6576d-503e-4eb8-9433-b19d0aea59bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7aaa10-4019-4727-a428-694614d61576",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9f4cf7-51e9-4484-861e-f5d82db75f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39cc53b7-d556-49a2-8634-c87af082c2eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0ff0f6-1955-42f2-934c-2b48a3ca075b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5625a92-fbd4-4109-b830-26e728ebab9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c130751d-2e71-471b-85fe-6311f07d10c7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..CaZ2UcTNDOTCXaDXAclLPy7_3rpuf2sbL5xwaMnN2abolieE_C7fB7RsmZ7i5_6CoKRhGnrM3_YkAms8IlObCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1e55f0-20b9-4bb6-b152-3751799e130c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7278242e-3eb5-4d74-a43b-bd33f2e1c39f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0feb2529-180b-4f17-98ac-c82a82a5c7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd33dba-030a-46b1-a38c-75328edc4677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da01f975-12b9-415d-8bfc-8255cab6b93d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..yonwdW7r7YFAAjZZxjVrYPkLVrbLR5TMZ3bkWN1uo2UbUi5tgtlikoyyHlj8QD0MPA7xd4Jv-1PlryIVOqtUCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db361cb3-2f84-40d0-927e-6910b9bc4942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13b2ef8-a842-4dfe-8632-53b51d6effc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336ee7b6-8acb-416a-96ee-9cd1df7fe695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f272ad40-8712-4c90-bc0c-b41c4283790c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e37a96-0e9d-498c-ae6d-2ec6c05f2a30",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TRCl90uRMmkycDvfeHw1S7yxyAVl1-Vc2SfwwDzXkn1SqfCJxptwVsgJWwr3gQRAqveZR0xrxQczy4tWHq2FDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae731022-7f43-4534-9649-b05c50703b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f431de-fc5b-48df-875a-d0f68db5612e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d1b838-c566-4ed3-9e45-1ed3744701f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b63850-e99a-46a7-b032-b0caedb04ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6a48d8-be6c-46a3-8a24-03875272c71e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d083233-5698-4e90-acfc-117787b07dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1911467f-1e69-456d-9444-eeb873bf9640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bded523-d744-447a-95ef-8b44391bd37d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355466ea-0bae-41e3-a7c4-695702015004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cf2b79-6dc8-4dac-9e09-6856db0d5fbe",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ymo0kNnQ9mVHr1RKpfCuR_ekUAXzNEM7stSEtbbFv4ZPZb6NK7kUBkckgwrZyBp8re9RQEedJ9yiyfzTL41dCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75658861-af3f-4403-8b8c-c8b74dbb44b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444a0f1b-30d2-4dda-bd6f-f451588910c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c21e34f-9921-442f-89f9-0df9f81d4227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b78ce3-ec9f-47de-86a5-d739d2c4927d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86a2e2c-f344-4c3f-b036-ac87a5c1439e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5daec3b-b9ac-4307-93ee-e5aa3641e862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8ee70e-825f-4c37-a084-6722033dce41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55425b25-45a8-404c-93e4-1c8ce5c08ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecbe9cc6-fce6-429a-bf8f-5b1027d25aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c436a305-d280-4bce-8803-65c470a159e0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ddaee1-83b0-4a47-b2fd-021d2443954a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e500a90e-4db2-4aa9-82d1-cbb82cd9e97d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2044bba1-8965-48bc-8112-1f6a21afa7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7038c27-c0eb-45eb-98b0-a2cc1fe7269f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35dea8f9-172c-4753-858c-cd8ac532f446",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e3d369-bfb3-417b-a1ca-eb5bdd0870f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ced8b4a6-e6af-4021-b210-f4956a1fe6a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfca0e02-04c4-485a-9019-3ed69275704a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70aac90-876a-4dcb-93bb-d2f86955cd18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3f96c7-e62e-4de7-bd37-95bfb5b48a59",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a8cd90-a1f1-4e23-a8b9-743c671b9d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f809324c-75b0-4611-880f-4ad0a1d68694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e156e175-cc04-4e8b-8d16-e9bf3ef01565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58120449-f73e-44c0-97de-0e9769bc7ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcf02c4-597c-45c3-80fe-f646c6bda267",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd007d1-e9a6-4f1a-aab8-ae0581edec6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7b9f88-3ee5-4318-9311-e45f729687c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a389408e-fd4e-4d4a-b526-9a24a8b463bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3fde8fb-4650-4cb7-8690-0a04e7da2516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7972216-ba31-4828-85cb-9b84729422e8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f55714-d732-41f6-81d5-ee1baca44667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c8b01a-f350-4121-99b9-9d55f5f1dd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95237a2-523a-4e23-9c88-8f84fdf0aebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7875e70-8877-4223-830d-f9af0b187070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a31fe21-c4b8-4117-90e6-156b39f4e75b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b37d57-bfa9-421c-8f0d-97f2d87fceaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a454886a-2fb4-43a4-a850-1d75009f3b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be72efbc-f1fa-4922-8a84-797556d9c36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ce6452-8152-482b-98d8-aaa93e44af8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fea89e-4f6a-44e8-bd0e-04496345ae9a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9834d29a-eb47-4629-b894-cc486bd42d5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bd905bb-9204-4846-8e16-caaf6700dfab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "230276f9-aaa3-4e75-84cd-b6ac98b6c4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96ade52-b02c-493a-8dd0-10a0bbb87a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269bc00c-1d58-48c9-983f-aa4e37aaca98",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8faa8a5-4243-46c7-b544-2a3c74f1fc28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3766a841-dc29-49f0-b735-c109d8c28bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfb5270-4615-47ff-8473-d94c9b39cc1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9288df65-32e3-4c7a-9107-e227c2783e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6e75f9-c8fb-4094-93bb-549e596ec7e0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ee619c-2816-4119-ac9e-22518b23efae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e989514-9a03-48bd-ab8c-592fd2288889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f040d7e1-5802-42d2-85e2-83eeec1994fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d68f993-c08b-47d4-9108-8a78e6e2125a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34d15c9-cb19-4c9a-9b6a-96922902f369",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a185d5b-2cea-44d1-900c-828f33ec2f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d830fd0a-16b9-4439-9f51-80132ac533c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d384e23d-7e22-4eba-bacc-ea652d09bbd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd017108-f112-4957-851c-2f211ec3f7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda669a1-bea4-4fa5-80f6-14d0b6d14390",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe01ad4-b50a-4593-b90e-059481531dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3407629-57b2-44d4-906b-38e828e0bf53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d127c217-2520-4c47-bf11-883b5d6ec1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3688f61-c312-4e80-a971-96a009ee7933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308f94af-33be-4eaf-a8fe-027d934d146d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bgY03ZzK02APUHCDiqUVMYbbvu4mSPNC1sGY3lTC8ko7j5oZDB4rB8FRzsXCc9L0O4nHx4UNJURCsRZUErbRCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8370a7-73c9-4604-ba54-0899b4df7dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9db96a-2d82-4b5b-9c1e-607064a628fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace0e399-eead-4dee-b05c-77bf0f18fbfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7da97ff-0c66-48d2-9d32-15f42fe9a244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837264eb-2bae-4d6c-9118-d519fdcb7fe5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..2Mu6q2PaIBjmfXHqLuT7XIFthDHboV4bdlIdLFY9KxapUXic6uhoefYFrarss-AN_5dUHdjWnHEMCoWYjW4MAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d56fc09-b9ca-4896-b280-c4055c6e1b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a18066e-9f82-4669-9c1d-501ce086adfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "834cab5e-c9d6-4fa2-ac93-b48a6014c15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26aa6496-de0c-4554-8965-d1f300e7c8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e298a51-68e1-4d8c-a713-e7252229fd26",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..L3RWLJfQzaffmRy3vXZF_7gfdlR-iQbA_8TjGFaBCmaOqm8R7Qi0B6JivEqshh8MZWufDitgO-r6ASk2iaGVDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44bf7cb1-fc4c-45d0-bd16-e2009017854b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d28421af-bb7e-46fd-9216-420de98c1202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f311e9c-bf07-4b0c-b941-ec38e92c4d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102826a4-4b63-44ef-a0b6-6f61e1ba9a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d94a6f-4f50-458f-aada-3067784ddc9b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6579656-bc9c-4030-920c-07c1e5248fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3aef766-f6b9-4f81-b06a-1b1c3e5bf380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44581b92-08ab-4267-83ef-2e78db482ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be926108-7c0b-44bc-87de-07cec2322345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ee5105-29fa-4b48-b47d-075f4e66c415",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65ceb0c-f5f6-4c9f-88f3-124105e58b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71382b40-a304-4c08-b54f-28b0164c5e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1738704d-3691-4b03-aa54-31fecf3d5c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9d1cfb-fa68-469c-b59a-a23ff5d93b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89c2ee2-40d2-4a6d-baa6-0ccf69e9718c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..E4WypAOLo4KNTnvHucei_9yLEMdlq_UwhS7mexlp5i3hF8SfBAlLv2scHANd3Ikhtqr9JIyaXuDnIN2LsaVFCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295b815b-01b5-4839-8b20-23747683b1e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e63e65-dd01-4983-afaf-3c25e05f9079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef46f0d-41c5-4795-92a2-f66fac7bc8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23c6301-a010-4ea3-9726-e3ee10b0075b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1329ac-8924-4a96-9eb7-39bfa3369070",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rnEgkKo3EQPiGixl67oPIFuZ7H9zueq0ELswP2p_FdahgJooIojScCnp-AcxeC_G6YDtLUbsNlVy0SkDvTnwBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e1d224-92b5-44af-b44a-5459b95ee01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2850f04-efd5-45ea-ad99-10a1fcfaf6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22269af2-0b11-4c9e-ad03-b7f54b5b28f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178ecc4e-b798-45fa-8575-b32f6f248967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1053175d-9770-4c40-8b44-a57aa1de268e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..nK8J_eHLw18__7Byp9ohgpDCHY1-Wfpw8vk-8k-nw4ezzjlwYoYjbo9x_xx3ES0WY0aCN2Xr9SbRoZHr78P0CQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7b0664-3f78-4503-8c6a-fc9b596efb15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ce3b88-18e5-4451-86ce-724050646f1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0ab148-e146-4cda-b5e5-f21ea050c076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985b5032-c60b-4478-a378-f6822695199a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe16fe22-5f82-4be9-b4ac-195d0ac28039",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96082986-f442-4a2a-8f4e-6671f932b525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91654878-1035-4fa8-beca-96dc0df1bcf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a188cc4-c537-463c-af16-b8b15f7d3737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ab09d4-2977-4b03-86e1-8c83eb78c27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9b5632-3f35-4f90-8926-fd592c6b0e7d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GEyy2tqmKf8AzHhXY06veUbSRVk9uoQIu21GZlYtcdMGh-VrTjvfVg2R8DAFtCBe6tEUL4dnsM87mT-20nG5Dg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7dfd0e-b736-45e2-8511-e462303503f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6400bbde-7a11-464d-b1da-9e821e05cff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcce6a3-6968-4252-b4a1-500a399375b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7afb59be-ef15-4223-ba0b-84c821469f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b506c9-529a-467a-86c1-42d67230c7cd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ee2e3a-0e61-43d5-853d-3f46c51259f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2575dc7f-1249-4f1f-9784-a5af8bc9faeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1fc3b2-902a-4652-ab87-3543cce866d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a17db7-37d8-4a04-b5f2-9b7db7c8b0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02740632-0536-426d-a4b7-38e03e6211bc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vuVI_mdt7bpVwmKIsmIusWlCbj-wk33p6_FC2COcGBKzh9m5jxydHlDRIM6YoJQJWpS8_EavVFKwQvPuLuwNDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83826453-46d8-4135-a455-853df724c3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b2d9fa6-114c-4ed3-ab1b-f13006b84bae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68bc31a-9fad-42bd-bc36-2efba7134bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95650e36-6e20-4074-a03a-ced7a91366e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be3bc45-cbf5-42d7-9b4e-0bb62ca480d0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jurLQ2KXgTdIxIAB1dwcysrBFVMT95g3Mn2SuyxAubRWS8Rbe-dFsoVG24kxo5wE6EZVYEuES8uHwNX_SSrvBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf5f5e7-3a8a-4498-8915-2d48786551dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e28a48fe-830b-4973-ba90-56b458a08c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6d4b7a-9cdd-431f-932a-465b24a36f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23f9a15-4fd8-435a-be26-4f17e750931e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b296c55b-6401-496d-b763-3bea972ee786",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..HyTRfrVnRzNCXO3qmmbQnmtXYV_bAdmZg-27bnuBGqQScL87kkmPfY3CpSTLN_8aV72mVBkvy1-uvYhkQotmDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0918751f-37cd-452e-a454-fb600b4131b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4ed203-3aec-49cd-addd-ff7c0cf46f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ce7669-5738-432c-8416-37886eb483bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72382868-5c99-4ee8-b034-6c5d8acd6987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872e9b34-e67f-4f9f-9e53-c779dca7822f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35535a9-a7cf-4d8b-b77e-8810b4a585c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda00735-7112-4b84-8f65-9d409c3d68f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb635fd4-107c-46b4-bf60-4c177109f071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3360af1b-2f82-4952-ab17-82764c0d272d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a5a3d4-3b5a-44bf-beff-8b93b2f25e12",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5NhiK8XqFDY7TB3l0Mli_VAhnflErggK8zlj71jNg6F5WD4eNAVufeVLhK8HtvGaC-7R7nQzQfzkCH9692DUAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1ea099-4056-4b22-8550-266425ef9691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72a6ee0-2fb6-49ce-9f4e-1ef69381626f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f3639c-db26-4ff9-936e-9adaa4081a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708c8329-85b8-460e-b18c-5f10b2eb29c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7fbc577-9ca7-4f8e-b23f-57538a3d7cf3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1phNak29yV9Dt7ljiilV_cD1b78U9dV8Zhwjgrocc4Nahxchof8QHmEAFjfupRQZ71WIBpW-VGUtW-OwUu6eDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9eaae0b-5eae-4bff-9f2d-72932d11309b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2c7e61-6ef5-4e1a-9445-dba3e4f0bde9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3066345e-1e14-4540-b2de-37393f77278b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43d8d2a-76ca-47ea-b580-f24606483fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9a4936-f96f-4872-b7c7-bb10aad76fb9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f58126-4eec-49ac-8db0-88a72546fca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634fabcd-8335-422c-ba4b-4b879bcaf354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e41ce02-a9e3-4479-9213-813567b0e7c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d982d2-46f8-48e0-9f09-a1e3308520bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d1042c-8f20-46b9-b084-1fe9fd0438ea",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9604e9-1345-47c3-958f-841ed8947462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4de919-1079-4a25-8ad8-350ec9b328c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01f72fd-baf4-48ab-8eca-20833341c674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b0bf91-7cc9-41d7-8865-ef439e937648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051a0021-a503-4c48-879c-e62aea95bae9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..j1W65DhMkwul7bodXfKrVNsT_27QIFO7rI-8TDk0-ef-wu4PU7OuA8MFAOXfx-HdVf5KdqVu0BB1ITE6WjIXCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f96b82-eede-46c6-a892-4cbe5b52ffc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea45f5a-2e30-4f1a-ad30-1a0d5a586283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ef01b3-a29e-4966-92f2-aca2bbd6b2c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5bb4f7-829d-4fb2-a80f-656c60de6fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60be06d9-bc36-4a67-a8bb-3bc129256b18",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Wm4yBzXF87zLmyA0LMEwHSWs-2EfPpdN2yJstmvPJkPVLFdXKUdjh7lZuHNVtTkAMGNT8Wi_RZ5Q1BWAY054Cw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4dc8438-0c6b-41ef-ba7f-6360e2213890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbaae1b-ed25-4284-ad29-52507bf46e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fda1cdd-532d-4f59-a682-d1c08273a881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9292597e-d4a8-4705-9ccd-59db5bac44af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d112d3-bf46-4543-b757-d061f211f056",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8425ad70-1012-472c-9f75-e175c93be938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807bc1a5-f62a-4bb9-9ef6-e923c1a1264b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abbee43-92f6-4da6-af55-3fb259f10bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3d85f3-68d6-436b-a2da-3501c5525153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7edad4-90e2-45f7-842d-d0c89d429083",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bc1376-2912-413e-9fe5-5ffe3e568e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c1204e-2d1e-421d-81be-22fcd868aaa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0feb1c5-b876-4db5-8263-f98f4df1156b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26264ea6-01cd-45d5-8e0f-7cc6f7f163fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0855a61a-ea26-41c4-adf1-ba008952de88",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VDVadt3rnBQ7P8dSYyZU5RHdfxVBWz3liR1wKbXbfBuaNT-rJYOoUCLQj-7IQ2elQaB4Fhp2nsgul9ZQmZc1CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3cb686-7702-402d-b768-3b66c504b3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b119c331-4497-4c91-87ba-c6223f1d450a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d583e04b-06bc-4c84-8869-1d48b4756144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c87f1b-45a5-4ddd-ae6e-29ec43170085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019e3c2c-fd0d-4a55-974d-dadd601dfed6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Kz272GRCnCfgHy4D8txIaM1bY5O5vW8iFfQrL2B8a7OnaVTcq6nF-dhqnoMLHPEbrUNzHK7spVAZG05Njl6CDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118065b7-9426-483e-8b15-19c0050224c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18a2226-f18c-4bca-a000-bb4085046699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc0a13a-a402-49ad-a052-5bbd6b3f9d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1441191a-6bb5-4c14-916e-02347248ddd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d1db95-8adb-4779-b215-2a3b97de226b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..P9pVMuK8IN7B38_-uHlTyqAeQFcasIOW06wJWEZDZLPpaeLA4L-S6ee-tZsbGmM0QoSr8WTkbqkhiXpEhuIbAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ef0b7d-06a5-43b6-8215-390924f3ce41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df623bc6-f1a9-45f1-8f11-604f8975210d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e5d4f0-7078-4f9b-a325-652a5cff00c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712aeca8-e22b-4af8-a5b3-f37a770e462d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2b75d9-8ed3-4f21-aeae-5d57c2a63bf6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rdlyOsz8ZwKwD5_CacS7c9iPQnRUIywCc_sHdyJlADD9Cq4cRwRw0wwJ7OZtLDylbm512V0s3Cn69i1qMWc8Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f66e99d-63e7-4c6e-8fed-9afee795e93e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1419a7a3-b58a-4b4c-81e2-3b62a6c419d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db39af0-5894-4859-9215-5f6ef4c58675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fad29d2-e1a4-4e5d-88dd-1d29c9063d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a0d597-f7d4-40c6-ac94-f398adbebef3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YXI2e8nVY98qybXn64g4bOG063TH6yjKFmSF9gRq0MtX3q3cex1t5ayc38JjZSBEgoJTKQzUTbL71FOukoNrAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23757b6-9c17-4f61-a0ee-24810ed20e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451b962a-1e18-4e9c-a842-37ead375ce98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d12c737-91e4-4dbe-a593-fa05afc3f463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb2c931-f28e-44d6-a4bf-569b32f52686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc672d38-eb5e-49c7-b885-0b9af82ceaab",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7fc2d4-63be-49a0-8d5b-41af26203b6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56ca52f4-b9c3-4f30-a63f-7ad2f658c99d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0259ef02-d9b1-4766-b094-81de45392a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917e4bfe-f096-46d3-abd7-1541207d71a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f180b0-0d9f-4abc-98cc-6fda49588534",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea344f5a-1e49-466f-9c78-f63d93d2777a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cc90789-05e9-4017-bb0b-18416850c421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8726676f-90fc-49f3-999f-3ea38fd264bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857fa24a-90fd-4a42-9eee-41a91380f6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ab411e-3892-4926-a8c3-a62408a698b5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d171fe8c-d43b-4466-8a20-621677f9efbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "655647b2-fda7-4a62-82bd-afbfcd17e65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c619334-c707-403e-a927-9cc820588fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d579459-d558-4cbd-a452-ec337ff0c235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ffba832-0b0e-4959-a09b-b287fdf5b005",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc701ae0-020d-42b9-b474-d41c154f20af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b7972c0-ee9d-4fa7-913c-2a82f6bdbbbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0d85e0-2f4b-4061-a07b-fbde9ef1689a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da2d841-5a81-40fd-84ce-88d314c17364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb42f0d-69fd-4feb-bf17-840c0e3ed673",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5793770c-926e-473c-b28e-a1555e27b3b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caf8f690-dc34-4111-a4ec-f0a01cd649a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe62f27-04c8-4ed1-b702-648bbc5bf8f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9d80a22-c33d-4da6-8974-445c9e0595a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbc14a6-7cc8-479f-b4c9-81acba8d4b82",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67ad7ee-e851-4550-af5d-c24875916f57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e23ee66b-4278-479d-80f6-f9675bf91908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54b20b2-ca7f-4b24-af63-175bb8548cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9624558-ed55-4565-86d6-8887bcd784ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d1d13c-57ae-405d-96cf-18defffe5352",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc961247-4339-47bf-8189-9d3e8697d9fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d91dd7e4-0f95-4ec6-beda-64ee3bfffc24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9955010a-2f31-439c-8f0e-6c0ef9d6e70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7f60ed-795d-409b-bfd6-98261e25954e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e3a515-8024-42fa-85ef-c6a2d57fad70",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f68925f-20a8-4daa-ba6b-c4312cccf79b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cced8315-4ba8-421a-b6b0-102dc5f767cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285a7dfe-81f1-4ddf-84a0-55bd4e053917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d9dc92-37c2-45df-918c-b1e33d47e483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87108229-33db-4678-aa97-b050a218887a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ff1031-cc1b-47e3-ab4a-7794539353c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1706d9e9-b912-4a16-93b1-13e709979f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45575372-ddf7-4bb2-b1e0-dd7008c5ea22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6994330a-324b-4e4e-ae81-3aa0ecedec00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658f87a2-574a-4f25-85cf-587a18749a15",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5825ce3e-2c9b-46ed-9bb2-a238cdd659f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8acc2597-d5ec-4672-82ea-459b8dd48723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da76f4b-578a-44f4-9d8b-a441a733ba96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c8b907-942e-4f3f-932e-64eabfcf9758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6374f684-f7f1-442f-9068-82e725c19763",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6232c96e-2898-40f5-ae32-0ae07d1bbfb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edb6c134-e681-4266-bf6d-3ee924b0c023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e729b2fa-fffd-40a4-8afb-e5763e2ea18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f381435-5460-4474-ad99-b3ecce3ed31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b005f772-ece0-49d8-a531-1aa37741c7dc",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946bc530-a201-440a-8791-4d9037c5ab40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33ea9b83-e6e0-4b13-a8a8-8bdd17719c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "024b183d-8f03-42dc-bb5c-0246bc5c4e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16a8054-9b52-4f1f-add1-f0f68a5b410d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe103bb-d4dc-4eed-8d83-e4d0fe521a3d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d626a50-0807-48c5-8390-0e195442b3da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67618238-373f-4bd3-b3ef-3b8ee07fcd90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a857bcb6-7e12-4820-b2b7-42deb32aaf48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855a8ea9-0463-49b9-9a6c-b9b48f234dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237adb43-6863-4645-8e51-38c93568c29e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca379339-9133-43ee-a5c8-580343b06545",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab6275e1-3552-460e-9236-39f408376541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91335dd3-ad2e-4a2d-a5d9-c5d6c78a4124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1798f937-2c92-4c6a-9f31-20949b29db46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489f9c76-9bd9-417d-bfb1-c1f75c0c8d70",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332b0585-7d6b-46ac-b291-4db8dd0c330c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3450262d-a583-471c-8782-bd316996635f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293a5b99-9971-4875-b757-223c65126760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a53e883-eac5-4151-9ec4-6288fd4f7507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06807e79-8e46-45ef-a5a0-4320069b7c21",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3695e1e-d842-483a-abe3-85243aeda893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "282b3377-3e87-4f23-a1d7-5dc6af5b36cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22abdd16-1f17-4a51-a201-dc5b58562fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0f5f2e-b140-4a3c-b603-ae1658ed4d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0208ab9-7f18-48c9-b8df-759c6bab1407",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f57f952-6879-4e2e-b7f4-82a0eb1083cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae98c171-27cd-46ca-ac41-ef2f18c4b525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9826dcdb-b465-47c6-9047-abc95d634e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef4e022-5d25-4db8-b877-46e956450405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eecf8c1-7e3b-41a3-8b6d-d069dc846eba",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4094b76b-c813-4637-b109-74eced09b758",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9837edc8-01ed-485a-95c2-543c9528015c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ae3cbc-d7a9-43e8-bd3f-6854d8948147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30663395-6b6b-427f-8a9b-a6d3f5cf67f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b888d6-5daf-48ad-8457-2665a73cea98",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b154ddfb-be2d-42ee-a887-41b62d058a17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af435b7-ca54-4fff-bc22-3efd140fbfa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb48984-2463-4780-b770-017330b2af2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000a31e7-7824-418c-8780-c65cd8e14cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7648a5d6-15eb-4673-8ab5-718ff4e180ca",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27487084-6edd-4e75-9191-73a931d06bbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a58dc752-14ae-4c37-9d47-2f5e6ca8d08f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f16ff67-7920-4c6a-94ea-026926c74705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd663cd5-96e4-4465-9aa8-015e94178af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed9f496-004c-4851-8b60-5340eb5011dd",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b73277-1a66-4432-8d6f-bfcdf9512859",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30614891-1967-4f05-88a4-b22d86b9f69e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52183885-83e7-4b0d-b06b-ba2c6f242e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e91b35-35c9-4dfc-a9f8-6cb518fb27a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8deb6000-3f11-4928-895a-761a7c9de4cc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50ba90e-2512-43ff-9515-3cbe60a40096",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad08fc05-4de5-4a3e-9af3-3f356f97e506"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054eef08-757b-4140-a620-3367ecbd9098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "263b3fb9-c6a2-4042-9961-6e06a28af70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50766e4-e4fd-4b43-a582-e183f17a9d93",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b5ec6a-d5ec-441c-a447-dfe5e66b4571",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa2b5311-4433-472a-880a-7e69d54f13d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9331f09c-93cd-42d8-90ca-9b1f51f2a766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6000c4ac-e5f4-4d5c-aa94-2efff64de439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91147b75-451a-4088-aa43-cd2cc6c5330d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb67af99-9c8a-4af8-aade-f7ff66357851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "711049b5-2b5e-4b62-9b4d-4fd6b375d514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d1c9d0-348b-4e4a-9cbf-9325c6bc50e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9b361c-c3a9-48c6-b8b6-301902f4b91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cb7893-e6e8-43f3-8c67-dcbb8dba0935",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7da044-dc53-444a-9cee-da25ec4cebbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c27f266-9738-4499-a877-98712b08bda9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5182b9-180d-43e9-90fa-a818d487c844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6187b4cb-1c66-4721-a160-0e43bbfd9835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa357eca-5b13-4e2a-bb28-56745794fc8a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5af0fa-9f57-4710-897e-49ed2d35ff99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca892e62-eed6-4425-9e58-492175f458ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fdb7fe-ffbd-40b1-8f1e-af5dc6598c07",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72e9463-16f5-48c0-9ba4-bd4ec6e7b4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7379ad3a-3f7f-4fb7-bfbe-28987d677953",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719cfe71-7005-48bb-ae95-f37f0a497af3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a543d4e-43a8-4193-b20f-9fcd1849b5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "095e9526-c8c2-495d-9039-d0edd7513dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae57c24a-62b8-4c3f-9970-a4310db4f598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6e4b44-e413-4195-b3c6-0373c129c94d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e34594-1397-4d86-8c9f-e7c2b786b8e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0298c49-fc7e-470c-8c9a-65653a086bba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab577c26-90d5-45be-a865-9231419091b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512b2827-c843-44b5-a1a4-2eb87b422c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3649b8e-5cdb-4b18-b133-275b7134a9ed",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d3f523-1ec6-4acd-9746-aaa884f88f2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62c5c51c-89ed-4e71-a894-193709f931eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b01590-de0f-4de9-9103-62469e56dc10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7c4ce9-01bc-4b1e-b6d8-1874d91f1871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103b25cb-a269-4ebe-b38e-860a897eb60f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bda94c-015c-47a0-9ed7-d47f1ca65f07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c08e3f-7722-4454-8abe-069b8a3817f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30312fc7-5f01-4e62-8e35-e7e0ddc1e2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef5758c-714b-45ab-b46a-10574f25b4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d385e68-5b3e-438c-bc7d-161525fca116",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d52d79-fbef-4911-bab2-c1715ab009df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89a17f80-4d91-4878-a02e-0d124e93c6dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff39fde-fe2f-45ff-bca7-75d9eba6534e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53534244-29ea-4e78-9a7b-dce4665da6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b820a53-08f9-435a-8cc3-2c74fe4e82e9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db74f411-e73c-4436-8df7-60b288074789",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5744d54a-7408-45d0-9fd6-6af5b4a5eaac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0baa3a75-ff09-48fe-b5f3-d48721c019ec",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b31a158-ad50-4678-8a5e-1fb43cd59079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee270c1-9f60-4f8f-be22-9d709c05e759",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f209e5e1-2abe-44ea-a65d-a76a2d734eaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f6a2fd7-307c-4049-8e6e-74ccaed76466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62e6515-4142-4e54-bf63-e1973ed60737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "090a10e6-0fbf-42e1-8b5c-9954740219cf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d770150-c9ec-45ff-9ce8-157b8881f4c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9dbd414-2f9f-445e-819e-f3087017e1dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1518b491-ce15-450b-84c2-925dc3b36dd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53008260-4748-4145-85f6-0eff3b18fde5"
                    }
                  }
                ]
              },
              {
                "id": "6b918e68-7800-4e5e-b258-3ccfc88914b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "360aca01-94c1-4cd7-8101-f7e53f6b7ad7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3366e1-1050-4800-97b5-3fee9aa120ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7e459936-cd56-40d0-b7b6-6be7caf49602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a265fd-bc5e-4880-b7e8-9c5d9caaaab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "295ce014-3d15-4def-b146-95ba065629b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e0abb1-1854-4ba1-9c98-fb6d47dc6563",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf90e1d-a8b4-4b8e-aee1-24d5bb76ba48",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a5d22741-39f9-4f7e-b0d2-0c53f2a79af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "262a995c-d641-432f-9e7e-acfa9577a678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92e2303c-b1ce-44de-87f1-51a345c008d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad663e6a-0010-4ba7-b834-7aad8cea4e6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63dcf964-249c-4f08-b3ef-46348f86c849"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ceda02a5-ef0b-4794-8473-7a96e43bb88b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11e16a73-4aac-45bd-aafa-36e4a9aa421a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4ca4254-8d4d-4a9e-88fa-fed0506001fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0f0203eb-8477-4f9c-aec6-04f7eba4e0ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44184615-b46c-4ccb-a2df-ccdfca5a4524",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a443277-d31d-4c12-ac11-eb7e60cddb8c"
            }
          }
        ]
      },
      {
        "id": "74681f28-c569-4d50-9ebc-ca079729af4b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1e2e286b-573c-437e-8310-c2029662bea2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f676fcb1-09be-4648-a2cf-c1bed8046c31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f6e5aca-4506-46f3-a5a7-2a9c61d19988",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340e54c3-911f-4839-8eb4-d59e93eaccd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae2d181-196e-4f86-ba1c-cae625163515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b23964-8b37-401e-919b-81b311e6b0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ad02bd3-14ac-443a-8936-9dd3557aa38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911904d3-c513-425b-a9b1-029f95133426",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3e24a3-fedb-402a-9302-4ef1662b1434",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9701c54c-701d-441b-ace2-6908ef3d5eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06420fda-7902-4fe6-85b7-ddb368d3ab8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b559f40-e755-4308-9b07-347c5ec44f1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b3a4cfb-8958-48cd-a19d-21d9436c5077",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b42aa32-b56e-4b76-9f03-bad20199a37d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "50cb2b95-3949-46f4-8780-a6a70a0d159f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0c723a2-1601-4b20-98a5-070b047e675d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b80a29c-08ba-4aa3-8521-821599371899",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "8514196d-d198-46d4-ba95-242fdda17580"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "396fbb88-d226-4df6-87af-d4a03cbb7c31",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb2f98c3-1cf7-43ce-902b-8556038bf0a2"
            }
          }
        ]
      },
      {
        "id": "16912242-9209-4fd5-95a9-d5a442cb3e16",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5762cb69-1f13-45fb-bd1e-e78ddbf92e12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7252357e-26d2-4085-bc23-70722b1017c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44ef175a-479a-4acf-b4fc-6ea0b0fc0c51",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b485ab-16c1-47cc-8830-2c13772cd44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac075d9-5296-47d2-a99e-2246d360cd71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4dc9c1-9488-4620-aa1b-cd271b78c771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f33c208-96cf-4bdb-a593-e32b3e9cd1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8771e33d-e6ba-452a-88a6-92ad581ffbe8",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342c701e-702d-4d19-9bfe-49c8901e098c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b4dbc784-3877-4ea5-aa73-26da297744f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9fdde4-9d8d-4295-8153-c4acd407386a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6382406a-a7c1-4a4c-b9f6-795e954bbd3a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40a2b4d2-7c2e-4fcd-8caf-0aa5fbccc9a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c8586a2-ef39-42a7-97ed-c5b0d779c5d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98ac8d66-af44-4403-b676-b5e738443db7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e454cd07-2bf1-4815-9d44-cf4bdd560ca1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4058082-5ba3-493f-9747-9a2411723435",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "7d512855-8cdd-45be-8fba-0721600fcca2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e498bfe4-74fc-4ead-abf3-66eeacedd7b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "052679e4-b34f-4585-ae10-d0d95cac56f2"
            }
          }
        ]
      },
      {
        "id": "5970e642-6d5f-4733-a80d-7e3f3fd2c9db",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "07f5da62-54a3-479e-af74-c66dde1e2b11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30759f3a-1434-44b5-bcdb-76ca405294b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "825e0b1d-e2fa-4d26-93fa-c53af6b30b5f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6df9db-b912-47ed-963e-b1b0b2bba2c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ba720c-f145-4e82-b62b-75684a22270b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f0a9ca-0724-4308-b4e0-255326df9e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c8e8f92-f490-4892-9331-a5e3d05f96d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c71209-0d8a-4710-be04-0703cff99cd7",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b35953f-3ec8-4cba-9fe1-be2f57e0b9f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "135e92f5-76d2-48e9-8620-5511b8d05a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add24d4e-a800-4609-8f96-309c6361efbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d14fcc02-353d-4b73-ba27-01dc929c1432"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34d2db98-8394-4702-829f-9f18dc6eee2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cfc6901-1932-4f36-9a1e-da83aa76bbc4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcfdaeb5-f600-4b96-88e3-06b507678039",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d07965e-accf-49ba-8496-f51313ed0b05"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53c02885-ecb7-4ea1-bf85-7dd342f96312",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "3b39e3d7-9dbe-49c1-94f3-8f95231aa240"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "865f41fd-95d4-4f96-9c56-c6636e3ba6d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb9de312-e7e0-4b2c-a602-a7bada52dec7"
            }
          }
        ]
      },
      {
        "id": "a85a6043-0567-46b0-8073-1bf48290848d",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "6cfc475b-2ffa-48d6-9614-4117b78aff7a",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1193,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 200,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 309,
        "pending": 0,
        "failed": 284
      },
      "testScripts": {
        "total": 602,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 591,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.39500000000001,
      "responseMin": 31,
      "responseMax": 395,
      "responseSd": 49.767448950091925,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663862019482,
      "completed": 1663862038754
    },
    "executions": [
      {
        "id": "bbf4a8bc-a546-4da0-874a-2acc3c509a4c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 152,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "11465b19-407d-41d9-be17-e48db56ec808",
          "httpRequestId": "ea2e16cb-c29f-44c6-b40d-96235b844a15"
        },
        "item": {
          "id": "bbf4a8bc-a546-4da0-874a-2acc3c509a4c",
          "name": "did_json"
        },
        "response": {
          "id": "92aa7970-4281-446e-8b60-2f72224556d1",
          "status": "OK",
          "code": 200,
          "responseTime": 219,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "f0383997-84c6-4983-b6c2-7cb35326dc2b",
        "cursor": {
          "ref": "ad0f15d9-d31d-4dc3-8731-11a7ba25712b",
          "length": 152,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e0e043d4-f42b-490f-a596-c0220491f15d"
        },
        "item": {
          "id": "f0383997-84c6-4983-b6c2-7cb35326dc2b",
          "name": "did:invalid"
        },
        "response": {
          "id": "e1ded8e9-c4cd-4fe5-bf37-7695a1b41d3a",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0383997-84c6-4983-b6c2-7cb35326dc2b",
        "cursor": {
          "ref": "ad0f15d9-d31d-4dc3-8731-11a7ba25712b",
          "length": 152,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e0e043d4-f42b-490f-a596-c0220491f15d"
        },
        "item": {
          "id": "f0383997-84c6-4983-b6c2-7cb35326dc2b",
          "name": "did:invalid"
        },
        "response": {
          "id": "e1ded8e9-c4cd-4fe5-bf37-7695a1b41d3a",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e245cf07-af31-4258-b08e-2eaa01b7bae3",
        "cursor": {
          "ref": "e4d45235-6563-4f48-926f-467527fd1a5a",
          "length": 152,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d93cf9b3-27e1-486c-ae5c-f12c9abdcb18"
        },
        "item": {
          "id": "e245cf07-af31-4258-b08e-2eaa01b7bae3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "07883cc8-a65f-423b-9b1d-796b127ad449",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 138,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "f01bd6b3-bad7-4861-ae0d-97a120f02d4f",
        "cursor": {
          "ref": "f6abadfa-dbd1-4292-8991-0cfaa488034a",
          "length": 152,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "64e7c0f5-3a0e-4ab9-81b0-b358e685a390"
        },
        "item": {
          "id": "f01bd6b3-bad7-4861-ae0d-97a120f02d4f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4b46ea26-bbce-4145-bca1-b135206a7b49",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9b0ca3b7-d645-4e29-80c7-d7cd611c17d5",
        "cursor": {
          "ref": "57a5c127-8a5a-4d4f-8072-66c810dec510",
          "length": 152,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "02ca4f59-b44a-4335-9b3e-7f27f3792d10"
        },
        "item": {
          "id": "9b0ca3b7-d645-4e29-80c7-d7cd611c17d5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f09a36fe-a962-481c-a431-97aa0ab4d4b3",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "b2cdc652-cf16-4151-bd88-b05cc90c3119",
        "cursor": {
          "ref": "e5b5f503-5787-41ba-a577-107a07e0a363",
          "length": 152,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2ebe88f8-ec4c-4b72-a92c-fc1a6b029155"
        },
        "item": {
          "id": "b2cdc652-cf16-4151-bd88-b05cc90c3119",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2134cb95-828b-4568-b04b-758641cf76f3",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "b2cdc652-cf16-4151-bd88-b05cc90c3119",
        "cursor": {
          "ref": "e5b5f503-5787-41ba-a577-107a07e0a363",
          "length": 152,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2ebe88f8-ec4c-4b72-a92c-fc1a6b029155"
        },
        "item": {
          "id": "b2cdc652-cf16-4151-bd88-b05cc90c3119",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2134cb95-828b-4568-b04b-758641cf76f3",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "b935f02a-e05e-4c84-9e40-2df7aa0df337",
        "cursor": {
          "ref": "7f36935c-e52f-47c2-9a81-d8c293ade1db",
          "length": 152,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "65ac7902-8805-4d32-af16-89e29ee4670f"
        },
        "item": {
          "id": "b935f02a-e05e-4c84-9e40-2df7aa0df337",
          "name": "identifiers"
        },
        "response": {
          "id": "96f15eb0-3bda-4355-8754-22ad15d3195f",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "Error",
              "index": 1,
              "test": "response validates against schema",
              "message": "schema is invalid: data.properties['didDocument'].properties['service'].items.properties['oneOf'] should be object,boolean, data.properties['didDocument'].properties['service'].items should be array, data.properties['didDocument'].properties['service'].items should match some schema in anyOf",
              "stack": "Error: schema is invalid: data.properties['didDocument'].properties['service'].items.properties['oneOf'] should be object,boolean, data.properties['didDocument'].properties['service'].items should be array, data.properties['didDocument'].properties['service'].items should match some schema in anyOf\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "f265c927-e26d-45e7-bbbd-8646dcf42eb2",
        "cursor": {
          "ref": "4f2fb909-c169-4b9f-8d7a-4e514e304d38",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "836d2272-ec3f-4588-9588-eb4f9601c453"
        },
        "item": {
          "id": "f265c927-e26d-45e7-bbbd-8646dcf42eb2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a455fdf0-474f-4a2c-aa81-8c023043e87a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 297,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f265c927-e26d-45e7-bbbd-8646dcf42eb2",
        "cursor": {
          "ref": "4f2fb909-c169-4b9f-8d7a-4e514e304d38",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "836d2272-ec3f-4588-9588-eb4f9601c453"
        },
        "item": {
          "id": "f265c927-e26d-45e7-bbbd-8646dcf42eb2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a455fdf0-474f-4a2c-aa81-8c023043e87a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 297,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f265c927-e26d-45e7-bbbd-8646dcf42eb2",
        "cursor": {
          "ref": "4f2fb909-c169-4b9f-8d7a-4e514e304d38",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "836d2272-ec3f-4588-9588-eb4f9601c453"
        },
        "item": {
          "id": "f265c927-e26d-45e7-bbbd-8646dcf42eb2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a455fdf0-474f-4a2c-aa81-8c023043e87a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 297,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5e3cba2c-cc68-4b32-b136-04f55be975a2",
        "cursor": {
          "ref": "fa581e22-61ca-4b87-8780-556f3cf6a5bb",
          "length": 152,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c5aab89d-3b41-4044-912e-ef36ccf954bf"
        },
        "item": {
          "id": "5e3cba2c-cc68-4b32-b136-04f55be975a2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b0bbb599-6132-43c8-9f23-6adce7840e6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "5e3cba2c-cc68-4b32-b136-04f55be975a2",
        "cursor": {
          "ref": "fa581e22-61ca-4b87-8780-556f3cf6a5bb",
          "length": 152,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c5aab89d-3b41-4044-912e-ef36ccf954bf"
        },
        "item": {
          "id": "5e3cba2c-cc68-4b32-b136-04f55be975a2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b0bbb599-6132-43c8-9f23-6adce7840e6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "d3cd8874-0e8a-4568-926b-5704d9bb08d8",
        "cursor": {
          "ref": "ddc97638-07f8-4d54-af7f-1c4153ade225",
          "length": 152,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "09909a94-3d5e-4833-aade-74a828f4a1f1"
        },
        "item": {
          "id": "d3cd8874-0e8a-4568-926b-5704d9bb08d8",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "c7f08836-6ce2-4b61-8eee-c7bab34faffc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "d3cd8874-0e8a-4568-926b-5704d9bb08d8",
        "cursor": {
          "ref": "ddc97638-07f8-4d54-af7f-1c4153ade225",
          "length": 152,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "09909a94-3d5e-4833-aade-74a828f4a1f1"
        },
        "item": {
          "id": "d3cd8874-0e8a-4568-926b-5704d9bb08d8",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "c7f08836-6ce2-4b61-8eee-c7bab34faffc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "658f8d62-e000-4912-883a-88933e228c6d",
        "cursor": {
          "ref": "4c615108-3c38-4477-8e00-ad2a3e4f6323",
          "length": 152,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4e584f4e-db9a-4f15-b0b5-e2854791fb2c"
        },
        "item": {
          "id": "658f8d62-e000-4912-883a-88933e228c6d",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "8107d768-737f-4a85-93c9-599733d653ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "658f8d62-e000-4912-883a-88933e228c6d",
        "cursor": {
          "ref": "4c615108-3c38-4477-8e00-ad2a3e4f6323",
          "length": 152,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4e584f4e-db9a-4f15-b0b5-e2854791fb2c"
        },
        "item": {
          "id": "658f8d62-e000-4912-883a-88933e228c6d",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "8107d768-737f-4a85-93c9-599733d653ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "d7714207-81be-408b-a128-2a918b215033",
        "cursor": {
          "ref": "23d63adf-1cde-412e-a825-ad3166f44726",
          "length": 152,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4b0b2e59-9015-422b-a7d1-cc7faf964163"
        },
        "item": {
          "id": "d7714207-81be-408b-a128-2a918b215033",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "66ebb340-f298-40f7-af3b-a384d615e457",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "d7714207-81be-408b-a128-2a918b215033",
        "cursor": {
          "ref": "23d63adf-1cde-412e-a825-ad3166f44726",
          "length": 152,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4b0b2e59-9015-422b-a7d1-cc7faf964163"
        },
        "item": {
          "id": "d7714207-81be-408b-a128-2a918b215033",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "66ebb340-f298-40f7-af3b-a384d615e457",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "57d5d0a6-55a3-493f-b92c-1f94e7a6968a",
        "cursor": {
          "ref": "61480196-78c3-41d6-9ca1-5a590db90179",
          "length": 152,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3189b098-ddaf-4586-9c1b-09d68402a3f7"
        },
        "item": {
          "id": "57d5d0a6-55a3-493f-b92c-1f94e7a6968a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "332f2733-9ff7-4f18-88ba-d2d8da59d8ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "57d5d0a6-55a3-493f-b92c-1f94e7a6968a",
        "cursor": {
          "ref": "61480196-78c3-41d6-9ca1-5a590db90179",
          "length": 152,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3189b098-ddaf-4586-9c1b-09d68402a3f7"
        },
        "item": {
          "id": "57d5d0a6-55a3-493f-b92c-1f94e7a6968a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "332f2733-9ff7-4f18-88ba-d2d8da59d8ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "f11013fe-380f-4739-b63e-7669566b0339",
        "cursor": {
          "ref": "d994ec51-b188-4027-afb8-e18f0cf27e2f",
          "length": 152,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6c9d2cbd-7ad0-4b83-8fd8-6b08e4b0d9ac"
        },
        "item": {
          "id": "f11013fe-380f-4739-b63e-7669566b0339",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "288ca00e-0b9f-4d48-a177-182296a929b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "f11013fe-380f-4739-b63e-7669566b0339",
        "cursor": {
          "ref": "d994ec51-b188-4027-afb8-e18f0cf27e2f",
          "length": 152,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6c9d2cbd-7ad0-4b83-8fd8-6b08e4b0d9ac"
        },
        "item": {
          "id": "f11013fe-380f-4739-b63e-7669566b0339",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "288ca00e-0b9f-4d48-a177-182296a929b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "936f855d-f8f1-4186-ac75-1de8b381363f",
        "cursor": {
          "ref": "c263a60a-3f0a-46d8-8ba5-dc79c5abca41",
          "length": 152,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c60cdc66-dbe8-4cbd-a31f-ab5d961e4351"
        },
        "item": {
          "id": "936f855d-f8f1-4186-ac75-1de8b381363f",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "44540bc0-2b77-41f8-9e8e-2f36fb80a597",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "936f855d-f8f1-4186-ac75-1de8b381363f",
        "cursor": {
          "ref": "c263a60a-3f0a-46d8-8ba5-dc79c5abca41",
          "length": 152,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c60cdc66-dbe8-4cbd-a31f-ab5d961e4351"
        },
        "item": {
          "id": "936f855d-f8f1-4186-ac75-1de8b381363f",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "44540bc0-2b77-41f8-9e8e-2f36fb80a597",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "d5c585a4-bb9c-49a4-9a35-46771f61ec07",
        "cursor": {
          "ref": "23751602-d8da-4d80-a25a-892a1430fcae",
          "length": 152,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9177a508-b9d2-4104-8a3c-008dd0e5dfcf"
        },
        "item": {
          "id": "d5c585a4-bb9c-49a4-9a35-46771f61ec07",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d0abb6a6-5abb-4162-9729-1c63c8249936",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "d5c585a4-bb9c-49a4-9a35-46771f61ec07",
        "cursor": {
          "ref": "23751602-d8da-4d80-a25a-892a1430fcae",
          "length": 152,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9177a508-b9d2-4104-8a3c-008dd0e5dfcf"
        },
        "item": {
          "id": "d5c585a4-bb9c-49a4-9a35-46771f61ec07",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d0abb6a6-5abb-4162-9729-1c63c8249936",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "55e77780-fdd2-42cd-8dd3-3c833a4c6b7e",
        "cursor": {
          "ref": "2a7678e7-5a75-4da1-84e5-bb64651291df",
          "length": 152,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "97463321-d7f8-48dc-aded-b87bd0869f1a"
        },
        "item": {
          "id": "55e77780-fdd2-42cd-8dd3-3c833a4c6b7e",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "42d2c4f7-e75a-4e84-9048-9e48c7890d22",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "55e77780-fdd2-42cd-8dd3-3c833a4c6b7e",
        "cursor": {
          "ref": "2a7678e7-5a75-4da1-84e5-bb64651291df",
          "length": 152,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "97463321-d7f8-48dc-aded-b87bd0869f1a"
        },
        "item": {
          "id": "55e77780-fdd2-42cd-8dd3-3c833a4c6b7e",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "42d2c4f7-e75a-4e84-9048-9e48c7890d22",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "bd79d9a9-c4a0-43a8-93e2-230e9dd352f5",
        "cursor": {
          "ref": "543efff4-4f7f-45e6-b776-512005d1d4cd",
          "length": 152,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f00ace34-6239-41d9-8246-1d17e611262f"
        },
        "item": {
          "id": "bd79d9a9-c4a0-43a8-93e2-230e9dd352f5",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "ebf1c500-72fe-449c-94dd-2e3c3d04d0b9",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "bd79d9a9-c4a0-43a8-93e2-230e9dd352f5",
        "cursor": {
          "ref": "543efff4-4f7f-45e6-b776-512005d1d4cd",
          "length": 152,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f00ace34-6239-41d9-8246-1d17e611262f"
        },
        "item": {
          "id": "bd79d9a9-c4a0-43a8-93e2-230e9dd352f5",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "ebf1c500-72fe-449c-94dd-2e3c3d04d0b9",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "fa299e7f-835f-419f-a2b4-1c6f57546d55",
        "cursor": {
          "ref": "97070a54-c86b-452d-b766-642fa7beee84",
          "length": 152,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d1e13743-ed90-48d5-b64f-1ebb3b1827f5"
        },
        "item": {
          "id": "fa299e7f-835f-419f-a2b4-1c6f57546d55",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b7131c30-fdd6-44da-9c25-7b3b092a927d",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "fa299e7f-835f-419f-a2b4-1c6f57546d55",
        "cursor": {
          "ref": "97070a54-c86b-452d-b766-642fa7beee84",
          "length": 152,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d1e13743-ed90-48d5-b64f-1ebb3b1827f5"
        },
        "item": {
          "id": "fa299e7f-835f-419f-a2b4-1c6f57546d55",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b7131c30-fdd6-44da-9c25-7b3b092a927d",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "551080cd-5de1-4e84-b4be-b41e18ca7a6a",
        "cursor": {
          "ref": "420fd3f7-fd62-4bd8-9196-ffcfe6291ddb",
          "length": 152,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "52447e23-8161-4702-b28b-5c9bfc8f42d9"
        },
        "item": {
          "id": "551080cd-5de1-4e84-b4be-b41e18ca7a6a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fa2f5f93-6d64-45da-afc7-35fbe0124a71",
          "status": "Created",
          "code": 201,
          "responseTime": 77,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "551080cd-5de1-4e84-b4be-b41e18ca7a6a",
        "cursor": {
          "ref": "420fd3f7-fd62-4bd8-9196-ffcfe6291ddb",
          "length": 152,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "52447e23-8161-4702-b28b-5c9bfc8f42d9"
        },
        "item": {
          "id": "551080cd-5de1-4e84-b4be-b41e18ca7a6a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fa2f5f93-6d64-45da-afc7-35fbe0124a71",
          "status": "Created",
          "code": 201,
          "responseTime": 77,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "a9e55e38-6e8d-4bb2-a2c3-bae30dba0c20",
        "cursor": {
          "ref": "e437bfbb-0b9f-4ac3-a481-d0c13688646e",
          "length": 152,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ce071902-3074-4f72-9195-a5b1863a226b"
        },
        "item": {
          "id": "a9e55e38-6e8d-4bb2-a2c3-bae30dba0c20",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "517a400f-7ddd-4dd4-b9cd-a3b1e427306d",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "a9e55e38-6e8d-4bb2-a2c3-bae30dba0c20",
        "cursor": {
          "ref": "e437bfbb-0b9f-4ac3-a481-d0c13688646e",
          "length": 152,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ce071902-3074-4f72-9195-a5b1863a226b"
        },
        "item": {
          "id": "a9e55e38-6e8d-4bb2-a2c3-bae30dba0c20",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "517a400f-7ddd-4dd4-b9cd-a3b1e427306d",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "195502c4-f493-4c56-8a8a-87b6c94de389",
        "cursor": {
          "ref": "1f663d75-3d94-4673-8ead-05175016371f",
          "length": 152,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d5b2420c-d01e-4bae-beb3-d2f0a9c9e2e6"
        },
        "item": {
          "id": "195502c4-f493-4c56-8a8a-87b6c94de389",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "8666c6f1-78be-4b4e-9599-a1529317bb3a",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "195502c4-f493-4c56-8a8a-87b6c94de389",
        "cursor": {
          "ref": "1f663d75-3d94-4673-8ead-05175016371f",
          "length": 152,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d5b2420c-d01e-4bae-beb3-d2f0a9c9e2e6"
        },
        "item": {
          "id": "195502c4-f493-4c56-8a8a-87b6c94de389",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "8666c6f1-78be-4b4e-9599-a1529317bb3a",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "af2518f9-422d-4ce9-8b00-2c1975236529",
        "cursor": {
          "ref": "b0c3a6cc-255c-483f-84ac-a755e92ad3db",
          "length": 152,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2c7bae41-7025-4d1c-ac05-19949d2f8728"
        },
        "item": {
          "id": "af2518f9-422d-4ce9-8b00-2c1975236529",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5bc04810-451c-4966-80ab-dd7d55208586",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "af2518f9-422d-4ce9-8b00-2c1975236529",
        "cursor": {
          "ref": "b0c3a6cc-255c-483f-84ac-a755e92ad3db",
          "length": 152,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2c7bae41-7025-4d1c-ac05-19949d2f8728"
        },
        "item": {
          "id": "af2518f9-422d-4ce9-8b00-2c1975236529",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5bc04810-451c-4966-80ab-dd7d55208586",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "fd80bda6-197a-45b8-b4da-bfde32dcf170",
        "cursor": {
          "ref": "430b6073-5fc2-467a-a231-57c76a2541ec",
          "length": 152,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e4f4c4c9-3230-4fc4-abff-8b219bca32a1"
        },
        "item": {
          "id": "fd80bda6-197a-45b8-b4da-bfde32dcf170",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "30844d20-c5c3-44f7-9525-9f619e7e2529",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "fd80bda6-197a-45b8-b4da-bfde32dcf170",
        "cursor": {
          "ref": "430b6073-5fc2-467a-a231-57c76a2541ec",
          "length": 152,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e4f4c4c9-3230-4fc4-abff-8b219bca32a1"
        },
        "item": {
          "id": "fd80bda6-197a-45b8-b4da-bfde32dcf170",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "30844d20-c5c3-44f7-9525-9f619e7e2529",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "fa4d1634-9684-4d6c-b75a-fd64890a54a6",
        "cursor": {
          "ref": "0e440c3a-67a9-4aee-ae92-991f5dee5de5",
          "length": 152,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f4d06a77-9e79-414f-a595-dc69162bf8de"
        },
        "item": {
          "id": "fa4d1634-9684-4d6c-b75a-fd64890a54a6",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "072aebe6-830e-4f3e-9319-c59e84c72598",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "fa4d1634-9684-4d6c-b75a-fd64890a54a6",
        "cursor": {
          "ref": "0e440c3a-67a9-4aee-ae92-991f5dee5de5",
          "length": 152,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f4d06a77-9e79-414f-a595-dc69162bf8de"
        },
        "item": {
          "id": "fa4d1634-9684-4d6c-b75a-fd64890a54a6",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "072aebe6-830e-4f3e-9319-c59e84c72598",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f3008e7d-8e6a-4353-9e5a-b8e0fe7341fd",
        "cursor": {
          "ref": "e016ee20-3e39-4604-aa0f-544c5f170526",
          "length": 152,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "667347e4-3919-4b03-b26e-46a058a65972"
        },
        "item": {
          "id": "f3008e7d-8e6a-4353-9e5a-b8e0fe7341fd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ed0c452b-fc22-433d-81e7-3036eea09115",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f3008e7d-8e6a-4353-9e5a-b8e0fe7341fd",
        "cursor": {
          "ref": "e016ee20-3e39-4604-aa0f-544c5f170526",
          "length": 152,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "667347e4-3919-4b03-b26e-46a058a65972"
        },
        "item": {
          "id": "f3008e7d-8e6a-4353-9e5a-b8e0fe7341fd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ed0c452b-fc22-433d-81e7-3036eea09115",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "2ffd4477-021d-4edb-a251-24fcbbb6cceb",
        "cursor": {
          "ref": "b7573f91-5962-4bb8-9121-783588c8a6bb",
          "length": 152,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5999e94e-1685-41bf-95e7-be7ead8675fc"
        },
        "item": {
          "id": "2ffd4477-021d-4edb-a251-24fcbbb6cceb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "96761ec1-8a6f-45e2-a9b3-3f799e6a412d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "2ffd4477-021d-4edb-a251-24fcbbb6cceb",
        "cursor": {
          "ref": "b7573f91-5962-4bb8-9121-783588c8a6bb",
          "length": 152,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5999e94e-1685-41bf-95e7-be7ead8675fc"
        },
        "item": {
          "id": "2ffd4477-021d-4edb-a251-24fcbbb6cceb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "96761ec1-8a6f-45e2-a9b3-3f799e6a412d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "1f929e87-e9bc-4160-a9c3-667687133d42",
        "cursor": {
          "ref": "ed666790-8d79-463c-9801-cd0c1ea23fc3",
          "length": 152,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f7a5c095-f91f-455e-a484-5bf137340ad5"
        },
        "item": {
          "id": "1f929e87-e9bc-4160-a9c3-667687133d42",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "4f8b65ed-84f4-4a60-bce5-94e8079f99b4",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "1f929e87-e9bc-4160-a9c3-667687133d42",
        "cursor": {
          "ref": "ed666790-8d79-463c-9801-cd0c1ea23fc3",
          "length": 152,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f7a5c095-f91f-455e-a484-5bf137340ad5"
        },
        "item": {
          "id": "1f929e87-e9bc-4160-a9c3-667687133d42",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "4f8b65ed-84f4-4a60-bce5-94e8079f99b4",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "962f91df-5ae2-405c-abc2-035c82be088f",
        "cursor": {
          "ref": "3e534d96-dcaf-4953-ab96-08ceeb33142f",
          "length": 152,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "87e1ab68-0b84-4960-9561-c6db3226f91d"
        },
        "item": {
          "id": "962f91df-5ae2-405c-abc2-035c82be088f",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "18d67c48-e3e0-4e08-8628-ae585e717bc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "962f91df-5ae2-405c-abc2-035c82be088f",
        "cursor": {
          "ref": "3e534d96-dcaf-4953-ab96-08ceeb33142f",
          "length": 152,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "87e1ab68-0b84-4960-9561-c6db3226f91d"
        },
        "item": {
          "id": "962f91df-5ae2-405c-abc2-035c82be088f",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "18d67c48-e3e0-4e08-8628-ae585e717bc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "f566765b-f641-4bca-87b0-ac3ac53d0cce",
        "cursor": {
          "ref": "8c952ca5-7f9b-423a-a21b-c2ae64dc5240",
          "length": 152,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "71b82124-cb3b-4c43-bf99-3cd17a4bf08c"
        },
        "item": {
          "id": "f566765b-f641-4bca-87b0-ac3ac53d0cce",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bb0ebe87-1aba-4bcd-b9ca-6bd1737761f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "f566765b-f641-4bca-87b0-ac3ac53d0cce",
        "cursor": {
          "ref": "8c952ca5-7f9b-423a-a21b-c2ae64dc5240",
          "length": 152,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "71b82124-cb3b-4c43-bf99-3cd17a4bf08c"
        },
        "item": {
          "id": "f566765b-f641-4bca-87b0-ac3ac53d0cce",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bb0ebe87-1aba-4bcd-b9ca-6bd1737761f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "5b1b0d21-c78a-4c37-a8fb-63edf268022e",
        "cursor": {
          "ref": "70bffda6-8ac1-4f3f-8a55-67bfe470e569",
          "length": 152,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "68d7f913-5714-4603-9162-9cc61b499e6e"
        },
        "item": {
          "id": "5b1b0d21-c78a-4c37-a8fb-63edf268022e",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "aefcf055-419c-47b5-a164-3fc73ac34805",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "5b1b0d21-c78a-4c37-a8fb-63edf268022e",
        "cursor": {
          "ref": "70bffda6-8ac1-4f3f-8a55-67bfe470e569",
          "length": 152,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "68d7f913-5714-4603-9162-9cc61b499e6e"
        },
        "item": {
          "id": "5b1b0d21-c78a-4c37-a8fb-63edf268022e",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "aefcf055-419c-47b5-a164-3fc73ac34805",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "1a073e24-a347-4a6b-a0ec-d9ee621fbbcb",
        "cursor": {
          "ref": "59f99397-7915-430d-b837-fb3aaf869bfe",
          "length": 152,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "018d9296-c61a-4f51-9b3f-49e265918d33"
        },
        "item": {
          "id": "1a073e24-a347-4a6b-a0ec-d9ee621fbbcb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d93687e1-e913-475f-912f-21f6429a9938",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1a073e24-a347-4a6b-a0ec-d9ee621fbbcb",
        "cursor": {
          "ref": "59f99397-7915-430d-b837-fb3aaf869bfe",
          "length": 152,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "018d9296-c61a-4f51-9b3f-49e265918d33"
        },
        "item": {
          "id": "1a073e24-a347-4a6b-a0ec-d9ee621fbbcb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d93687e1-e913-475f-912f-21f6429a9938",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "56200a55-dc9c-4223-931b-c59baeb2d2ef",
        "cursor": {
          "ref": "f5920ced-ae90-4a5d-b737-f2fb057f6f47",
          "length": 152,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6b955bde-f0b0-4e90-8ce6-c5942da29cf2"
        },
        "item": {
          "id": "56200a55-dc9c-4223-931b-c59baeb2d2ef",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "09d8fe09-f120-4f2f-93b6-7b061f9a7024",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "56200a55-dc9c-4223-931b-c59baeb2d2ef",
        "cursor": {
          "ref": "f5920ced-ae90-4a5d-b737-f2fb057f6f47",
          "length": 152,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6b955bde-f0b0-4e90-8ce6-c5942da29cf2"
        },
        "item": {
          "id": "56200a55-dc9c-4223-931b-c59baeb2d2ef",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "09d8fe09-f120-4f2f-93b6-7b061f9a7024",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "fc6e9db2-31bd-4e18-86d3-98be96af2e0a",
        "cursor": {
          "ref": "42a15e4d-de21-46c0-ae3e-c9a2c88563fd",
          "length": 152,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "89098106-08b7-4263-b903-e51d888c4cea"
        },
        "item": {
          "id": "fc6e9db2-31bd-4e18-86d3-98be96af2e0a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8bd793aa-157c-4405-8060-29de12677336",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "fc6e9db2-31bd-4e18-86d3-98be96af2e0a",
        "cursor": {
          "ref": "42a15e4d-de21-46c0-ae3e-c9a2c88563fd",
          "length": 152,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "89098106-08b7-4263-b903-e51d888c4cea"
        },
        "item": {
          "id": "fc6e9db2-31bd-4e18-86d3-98be96af2e0a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8bd793aa-157c-4405-8060-29de12677336",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "4d63d8ca-b2c0-46ce-88f5-a249ed7e2824",
        "cursor": {
          "ref": "80788adb-764f-4c05-b854-19fa11e8a1b8",
          "length": 152,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4bf1d987-06ec-4e65-805c-8443cb6e0c50"
        },
        "item": {
          "id": "4d63d8ca-b2c0-46ce-88f5-a249ed7e2824",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "660ed611-8fc2-4e9d-9fde-6bbbe957974e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "4d63d8ca-b2c0-46ce-88f5-a249ed7e2824",
        "cursor": {
          "ref": "80788adb-764f-4c05-b854-19fa11e8a1b8",
          "length": 152,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4bf1d987-06ec-4e65-805c-8443cb6e0c50"
        },
        "item": {
          "id": "4d63d8ca-b2c0-46ce-88f5-a249ed7e2824",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "660ed611-8fc2-4e9d-9fde-6bbbe957974e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "19612d7e-a331-4916-8e70-4ac1b39cd8a1",
        "cursor": {
          "ref": "b2b890a6-d804-4b2c-b061-98a50a314a32",
          "length": 152,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d1db730b-099b-4cb6-8cbc-d8114172ea64"
        },
        "item": {
          "id": "19612d7e-a331-4916-8e70-4ac1b39cd8a1",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "4fb55f27-b59e-4454-abea-00d69dba0f0e",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "19612d7e-a331-4916-8e70-4ac1b39cd8a1",
        "cursor": {
          "ref": "b2b890a6-d804-4b2c-b061-98a50a314a32",
          "length": 152,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d1db730b-099b-4cb6-8cbc-d8114172ea64"
        },
        "item": {
          "id": "19612d7e-a331-4916-8e70-4ac1b39cd8a1",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "4fb55f27-b59e-4454-abea-00d69dba0f0e",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "7f35b65c-886a-4e4c-9efa-7cbc33a61432",
        "cursor": {
          "ref": "ad65afe6-c49c-45df-876e-e7e56df80990",
          "length": 152,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6dd2ea3b-542e-43f4-830f-03dda7548d6d"
        },
        "item": {
          "id": "7f35b65c-886a-4e4c-9efa-7cbc33a61432",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "dac970ff-78d7-4e18-afd9-dc4f653a9bae",
          "status": "Created",
          "code": 201,
          "responseTime": 136,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "7f35b65c-886a-4e4c-9efa-7cbc33a61432",
        "cursor": {
          "ref": "ad65afe6-c49c-45df-876e-e7e56df80990",
          "length": 152,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6dd2ea3b-542e-43f4-830f-03dda7548d6d"
        },
        "item": {
          "id": "7f35b65c-886a-4e4c-9efa-7cbc33a61432",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "dac970ff-78d7-4e18-afd9-dc4f653a9bae",
          "status": "Created",
          "code": 201,
          "responseTime": 136,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "cf5e5ab6-ccc9-4fc5-aade-d1134737fa2b",
        "cursor": {
          "ref": "f0491b08-c0aa-4692-9bac-3dda09428189",
          "length": 152,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9622d1de-a84a-4410-b442-984d26352ac3"
        },
        "item": {
          "id": "cf5e5ab6-ccc9-4fc5-aade-d1134737fa2b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "6f25a58b-bc71-4b2c-a217-bb4ee37bd593",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "cf5e5ab6-ccc9-4fc5-aade-d1134737fa2b",
        "cursor": {
          "ref": "f0491b08-c0aa-4692-9bac-3dda09428189",
          "length": 152,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9622d1de-a84a-4410-b442-984d26352ac3"
        },
        "item": {
          "id": "cf5e5ab6-ccc9-4fc5-aade-d1134737fa2b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "6f25a58b-bc71-4b2c-a217-bb4ee37bd593",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "09d5035e-9729-4d58-afb6-9e449814ca58",
        "cursor": {
          "ref": "d46a70a6-f0d9-43b0-b96f-5ccb67462451",
          "length": 152,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3f547e3f-be48-4526-8ebe-1ac8348fe946"
        },
        "item": {
          "id": "09d5035e-9729-4d58-afb6-9e449814ca58",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9b3e1bbe-a461-43a3-9dae-6cc3ea3b1f65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "09d5035e-9729-4d58-afb6-9e449814ca58",
        "cursor": {
          "ref": "d46a70a6-f0d9-43b0-b96f-5ccb67462451",
          "length": 152,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3f547e3f-be48-4526-8ebe-1ac8348fe946"
        },
        "item": {
          "id": "09d5035e-9729-4d58-afb6-9e449814ca58",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9b3e1bbe-a461-43a3-9dae-6cc3ea3b1f65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "36477b2d-6d8d-4959-86bc-c125eb7f28fc",
        "cursor": {
          "ref": "388f1566-cc61-4e1c-b8dc-1b7580b0a2e8",
          "length": 152,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3be4c865-5979-4086-846f-88f81f639b95"
        },
        "item": {
          "id": "36477b2d-6d8d-4959-86bc-c125eb7f28fc",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1c3d629d-f3dc-469b-a732-29800b06e224",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "36477b2d-6d8d-4959-86bc-c125eb7f28fc",
        "cursor": {
          "ref": "388f1566-cc61-4e1c-b8dc-1b7580b0a2e8",
          "length": 152,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3be4c865-5979-4086-846f-88f81f639b95"
        },
        "item": {
          "id": "36477b2d-6d8d-4959-86bc-c125eb7f28fc",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1c3d629d-f3dc-469b-a732-29800b06e224",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "921e54ef-d019-4ef0-987f-762bdce86ba4",
        "cursor": {
          "ref": "78319320-7e19-4bb5-8173-2f38439df421",
          "length": 152,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b0bee5a1-03ba-4ff4-ba3e-325194d0f360"
        },
        "item": {
          "id": "921e54ef-d019-4ef0-987f-762bdce86ba4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a740587d-a3e3-42ef-aeb5-fc17905ad4c2",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "921e54ef-d019-4ef0-987f-762bdce86ba4",
        "cursor": {
          "ref": "78319320-7e19-4bb5-8173-2f38439df421",
          "length": 152,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b0bee5a1-03ba-4ff4-ba3e-325194d0f360"
        },
        "item": {
          "id": "921e54ef-d019-4ef0-987f-762bdce86ba4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a740587d-a3e3-42ef-aeb5-fc17905ad4c2",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "80aa458f-d6c1-48ef-8974-3341669652a5",
        "cursor": {
          "ref": "3c11f86f-0eda-4a96-ba82-3f6e5f66ec19",
          "length": 152,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d635e72f-a92a-4214-90a5-ae9d3a502fca"
        },
        "item": {
          "id": "80aa458f-d6c1-48ef-8974-3341669652a5",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c6019e71-b132-4109-a0fc-1927ed112dcc",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80aa458f-d6c1-48ef-8974-3341669652a5",
        "cursor": {
          "ref": "3c11f86f-0eda-4a96-ba82-3f6e5f66ec19",
          "length": 152,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d635e72f-a92a-4214-90a5-ae9d3a502fca"
        },
        "item": {
          "id": "80aa458f-d6c1-48ef-8974-3341669652a5",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c6019e71-b132-4109-a0fc-1927ed112dcc",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2baabd-3b31-488a-8ee9-74817e05d510",
        "cursor": {
          "ref": "96bd44a0-6b34-4c2c-90c0-91c62d62954b",
          "length": 152,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e82d4ad2-476e-4bb9-b6fc-1367f07bcc91"
        },
        "item": {
          "id": "ba2baabd-3b31-488a-8ee9-74817e05d510",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b75b5a5f-6ed3-4b53-8259-0b13e8ec8977",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "ba2baabd-3b31-488a-8ee9-74817e05d510",
        "cursor": {
          "ref": "96bd44a0-6b34-4c2c-90c0-91c62d62954b",
          "length": 152,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e82d4ad2-476e-4bb9-b6fc-1367f07bcc91"
        },
        "item": {
          "id": "ba2baabd-3b31-488a-8ee9-74817e05d510",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b75b5a5f-6ed3-4b53-8259-0b13e8ec8977",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "3049cf6d-6727-4b2e-bd2d-c0ba9cafbb24",
        "cursor": {
          "ref": "bcddf428-af42-46f2-9434-e43f8798703e",
          "length": 152,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7b023fff-0cbf-44e8-ae41-d253a0e6cbac"
        },
        "item": {
          "id": "3049cf6d-6727-4b2e-bd2d-c0ba9cafbb24",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9950b749-daf7-4789-a382-dbe551e2d1dd",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3049cf6d-6727-4b2e-bd2d-c0ba9cafbb24",
        "cursor": {
          "ref": "bcddf428-af42-46f2-9434-e43f8798703e",
          "length": 152,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7b023fff-0cbf-44e8-ae41-d253a0e6cbac"
        },
        "item": {
          "id": "3049cf6d-6727-4b2e-bd2d-c0ba9cafbb24",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9950b749-daf7-4789-a382-dbe551e2d1dd",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0bd65b-3253-47e2-8217-680a3d47e8d6",
        "cursor": {
          "ref": "3651ba60-27da-4544-ad4f-f95bd117f6b7",
          "length": 152,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "017687ba-b8a9-40d7-a711-15bd56611c86"
        },
        "item": {
          "id": "8c0bd65b-3253-47e2-8217-680a3d47e8d6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0ebf9dd0-1f7e-4623-84c3-64054a521843",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0bd65b-3253-47e2-8217-680a3d47e8d6",
        "cursor": {
          "ref": "3651ba60-27da-4544-ad4f-f95bd117f6b7",
          "length": 152,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "017687ba-b8a9-40d7-a711-15bd56611c86"
        },
        "item": {
          "id": "8c0bd65b-3253-47e2-8217-680a3d47e8d6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0ebf9dd0-1f7e-4623-84c3-64054a521843",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a9120d-e9f5-4ec5-8ce9-51daa785d433",
        "cursor": {
          "ref": "d661ae7d-718d-4327-ae1e-d4c8f0f1a6dd",
          "length": 152,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "822874e5-bf96-4430-9164-8b573975a4c6"
        },
        "item": {
          "id": "96a9120d-e9f5-4ec5-8ce9-51daa785d433",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2085687f-2917-4964-8893-6f71437a69b1",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a9120d-e9f5-4ec5-8ce9-51daa785d433",
        "cursor": {
          "ref": "d661ae7d-718d-4327-ae1e-d4c8f0f1a6dd",
          "length": 152,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "822874e5-bf96-4430-9164-8b573975a4c6"
        },
        "item": {
          "id": "96a9120d-e9f5-4ec5-8ce9-51daa785d433",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2085687f-2917-4964-8893-6f71437a69b1",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9ebea3-34ca-4fa9-8968-81a447e0da76",
        "cursor": {
          "ref": "4103a6e9-23c1-41bf-b4db-b60ad36c363f",
          "length": 152,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "27b518d8-8a7a-4d87-9949-cd3ff668ab1a"
        },
        "item": {
          "id": "fa9ebea3-34ca-4fa9-8968-81a447e0da76",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "b6dfe313-565d-4557-b4e3-607f6f50d135",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9ebea3-34ca-4fa9-8968-81a447e0da76",
        "cursor": {
          "ref": "4103a6e9-23c1-41bf-b4db-b60ad36c363f",
          "length": 152,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "27b518d8-8a7a-4d87-9949-cd3ff668ab1a"
        },
        "item": {
          "id": "fa9ebea3-34ca-4fa9-8968-81a447e0da76",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "b6dfe313-565d-4557-b4e3-607f6f50d135",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f98ffd-14b5-43fb-b76a-661e302a58a1",
        "cursor": {
          "ref": "b99ee89c-a5fb-432d-bb06-d273f9374da8",
          "length": 152,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "66beac01-b511-4287-9b53-8cf07c8521c1"
        },
        "item": {
          "id": "88f98ffd-14b5-43fb-b76a-661e302a58a1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "732964c4-b128-41bf-aa7e-82469fba9f81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "88f98ffd-14b5-43fb-b76a-661e302a58a1",
        "cursor": {
          "ref": "b99ee89c-a5fb-432d-bb06-d273f9374da8",
          "length": 152,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "66beac01-b511-4287-9b53-8cf07c8521c1"
        },
        "item": {
          "id": "88f98ffd-14b5-43fb-b76a-661e302a58a1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "732964c4-b128-41bf-aa7e-82469fba9f81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6834fffc-4e7e-4d75-936c-2af8b7089cf9",
        "cursor": {
          "ref": "3df20806-950f-48ac-aba0-32159684ffdf",
          "length": 152,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6fc7f50e-2a6c-4ff5-80de-eb9d638282b2"
        },
        "item": {
          "id": "6834fffc-4e7e-4d75-936c-2af8b7089cf9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "54304913-a532-4561-871f-ef855603d798",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 45,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ac6e96e8-b2ca-434b-a7f4-9f8ef416c294",
        "cursor": {
          "ref": "1e28dbd6-8fd3-4193-909e-98d9d23adaf5",
          "length": 152,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "506a5c92-8b4d-466d-839d-25c7be6106c9"
        },
        "item": {
          "id": "ac6e96e8-b2ca-434b-a7f4-9f8ef416c294",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d0e95322-2f94-4afd-ba70-c7fd00dd79f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ac6e96e8-b2ca-434b-a7f4-9f8ef416c294",
        "cursor": {
          "ref": "1e28dbd6-8fd3-4193-909e-98d9d23adaf5",
          "length": 152,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "506a5c92-8b4d-466d-839d-25c7be6106c9"
        },
        "item": {
          "id": "ac6e96e8-b2ca-434b-a7f4-9f8ef416c294",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d0e95322-2f94-4afd-ba70-c7fd00dd79f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "670f9def-3a28-4087-bf88-73fa18ef88b4",
        "cursor": {
          "ref": "926d9a8a-785f-4d7e-80ec-db73e5111c30",
          "length": 152,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "aced773a-00cc-431d-9e2c-e046b853d905"
        },
        "item": {
          "id": "670f9def-3a28-4087-bf88-73fa18ef88b4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ce5ceac2-b2f2-4126-8e03-e6915b96cf23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0c9e9c07-5e72-41b5-a8d0-40cf445934ab",
        "cursor": {
          "ref": "bd6dd854-3abe-4b77-aa42-db565fc16036",
          "length": 152,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5da452e9-3804-4c05-95a8-b7188fe7585d"
        },
        "item": {
          "id": "0c9e9c07-5e72-41b5-a8d0-40cf445934ab",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e94a3a7e-d034-46cd-8f94-aadcba07dfb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c50ba356-2ae1-4bd9-ad69-66ab81dea995",
        "cursor": {
          "ref": "f2048694-5e5c-4810-9528-72323e095428",
          "length": 152,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "944f4873-09d1-46c4-af83-c5e2e20e685b"
        },
        "item": {
          "id": "c50ba356-2ae1-4bd9-ad69-66ab81dea995",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ec63a496-915f-47c3-8f75-e0dd76965e1c",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "6f7fdb12-8d58-4bbc-a431-644afdbaaec4",
        "cursor": {
          "ref": "ff8a4b7a-774a-4be9-91d4-f00889473eeb",
          "length": 152,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d110547b-cfab-4c4d-9e52-c9b2b851a43b"
        },
        "item": {
          "id": "6f7fdb12-8d58-4bbc-a431-644afdbaaec4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7867e725-3e30-4767-95a8-a3c7cd54493e",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "87316266-9670-4187-9520-d38d990cb8d7",
        "cursor": {
          "ref": "4b53f73f-5a2f-4c09-850d-2b73bc09c41b",
          "length": 152,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6df695d5-68e8-4ff0-86fd-4c2ed3addf99"
        },
        "item": {
          "id": "87316266-9670-4187-9520-d38d990cb8d7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "adfc0dae-8c3b-48f8-88b9-b3e4ac1d7c28",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "54be8eae-a7f5-49f8-b6ba-6a4edd6a6413",
        "cursor": {
          "ref": "ce130fc5-10be-486f-b514-3aa082b1f331",
          "length": 152,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3c725c72-1559-46ee-8dee-7ff282b51e9b"
        },
        "item": {
          "id": "54be8eae-a7f5-49f8-b6ba-6a4edd6a6413",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "89202b07-2555-4453-b2b6-214b1d45e0d6",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "aff83ee3-579d-4f47-b259-0c4877a9bded",
        "cursor": {
          "ref": "646321c0-aeb0-4c78-ae20-8d9cd0092d7e",
          "length": 152,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fcfff152-bde8-44a0-bc58-cef201f638d3"
        },
        "item": {
          "id": "aff83ee3-579d-4f47-b259-0c4877a9bded",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "129374de-56ba-49e5-a7e4-8109ee77fe23",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "6cf963b4-1183-4ea3-9e81-1bca3c224a2a",
        "cursor": {
          "ref": "f2de745c-6b07-481e-81e8-b14a7c774f41",
          "length": 152,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "53054ab8-ad4a-4c30-8014-8df450d0e53a"
        },
        "item": {
          "id": "6cf963b4-1183-4ea3-9e81-1bca3c224a2a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "56861c85-3db0-4bf5-bf78-e695b59eb8ec",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "967fea43-4112-4e16-aef1-0ff8e8841197",
        "cursor": {
          "ref": "1cdb7040-9f0b-41e5-8b12-b585a30b5dce",
          "length": 152,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "aeac0a8e-953c-4fcf-b4f9-4f36c863c83f"
        },
        "item": {
          "id": "967fea43-4112-4e16-aef1-0ff8e8841197",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "76a71503-a272-41f2-ba50-20991d51f78c",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "7ec05cda-813b-46ff-a769-600c8cb4ed97",
        "cursor": {
          "ref": "2930508e-8296-42c8-97a4-a04c794fa66f",
          "length": 152,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d2771c94-9637-4c32-af98-5d5f33e3458c"
        },
        "item": {
          "id": "7ec05cda-813b-46ff-a769-600c8cb4ed97",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "910fb0f3-ad54-4879-99b1-a136623ff62d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "8a29872c-412a-4c03-8d3e-862c442725dd",
        "cursor": {
          "ref": "b2191f16-08b8-4cd0-aec2-c48ce9871596",
          "length": 152,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "082f0e09-5385-47b8-a4a2-01bec92949b4"
        },
        "item": {
          "id": "8a29872c-412a-4c03-8d3e-862c442725dd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "afe45f4b-b4f8-4389-ab7a-339fd36779f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 165,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "3c2bd611-e8c6-468e-9433-9e919760f675",
        "cursor": {
          "ref": "d448edc9-166d-45a5-8169-746edb77dfb0",
          "length": 152,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "aa394418-093a-495c-883f-7f9bcf9f71e3"
        },
        "item": {
          "id": "3c2bd611-e8c6-468e-9433-9e919760f675",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8d402a59-a1a6-4d09-a6a4-40fbf19c251f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "7ca4694e-30b7-40d1-9207-a083dbe3ca38",
        "cursor": {
          "ref": "1f08c175-ec09-42e0-99a8-fa75d8c75639",
          "length": 152,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c013c9df-9008-4c38-8178-9a0b4a456998"
        },
        "item": {
          "id": "7ca4694e-30b7-40d1-9207-a083dbe3ca38",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "55bafa38-c13a-41de-803d-e36bb509cce6",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "b04fc82c-fde2-4243-8b6f-905bc419ec67",
        "cursor": {
          "ref": "782c5d29-cb6b-44a4-9856-abf7ee761b6e",
          "length": 152,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1a971015-7229-4193-b0ed-22819c7d3030"
        },
        "item": {
          "id": "b04fc82c-fde2-4243-8b6f-905bc419ec67",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e43d15f2-2b89-4b0b-b210-211970a5e7b0",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "4a11f711-cdf1-4df9-89f5-d87bbc8e7de6",
        "cursor": {
          "ref": "8c795720-2791-4d04-9af4-9d5d9ea5bb40",
          "length": 152,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "32008b4f-0166-4cc4-9d6f-6a4be025596f"
        },
        "item": {
          "id": "4a11f711-cdf1-4df9-89f5-d87bbc8e7de6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b4454d7a-51db-4283-a53f-da90c136cdff",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7b7aaa10-4019-4727-a428-694614d61576",
        "cursor": {
          "ref": "5f18dec8-ec95-47d7-bc5a-d7d77a9faad7",
          "length": 152,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "da35dfe9-820f-4675-b1d7-e1ebbd5caedc"
        },
        "item": {
          "id": "7b7aaa10-4019-4727-a428-694614d61576",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "061e0d47-1901-40b5-a531-b42b482e0434",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c130751d-2e71-471b-85fe-6311f07d10c7",
        "cursor": {
          "ref": "f92d01c0-dab7-4689-80c9-4748c8376b20",
          "length": 152,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5da29c62-0403-49c5-9dff-197586266b44"
        },
        "item": {
          "id": "c130751d-2e71-471b-85fe-6311f07d10c7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "603974d3-71ad-4056-ba28-c8225401a13a",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "da01f975-12b9-415d-8bfc-8255cab6b93d",
        "cursor": {
          "ref": "50301089-2995-4925-936f-c0ae6e5193b0",
          "length": 152,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f97fc417-47f8-4ec1-8491-3761e14669a9"
        },
        "item": {
          "id": "da01f975-12b9-415d-8bfc-8255cab6b93d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c66aec38-1eb0-4c91-b529-7737ad57ff12",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "03e37a96-0e9d-498c-ae6d-2ec6c05f2a30",
        "cursor": {
          "ref": "db41f587-524b-4a7f-8941-8078cc36f4cc",
          "length": 152,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "90de3a6a-421f-48eb-90cf-4a4286b8cb5d"
        },
        "item": {
          "id": "03e37a96-0e9d-498c-ae6d-2ec6c05f2a30",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a47b0459-681f-42aa-ad68-db6b914b3b36",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7a6a48d8-be6c-46a3-8a24-03875272c71e",
        "cursor": {
          "ref": "d7fb7aee-6341-4d6a-a62c-ebc24ebb3fab",
          "length": 152,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "25e1c517-82ec-4f41-aa3c-e80e12b356f4"
        },
        "item": {
          "id": "7a6a48d8-be6c-46a3-8a24-03875272c71e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "491058eb-5ef1-414c-b542-24d2270493e6",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "33cf2b79-6dc8-4dac-9e09-6856db0d5fbe",
        "cursor": {
          "ref": "e630056f-5765-4d52-bc5b-5764e9ba8345",
          "length": 152,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5bbb0e73-b44c-4cc1-99ec-9760861f0664"
        },
        "item": {
          "id": "33cf2b79-6dc8-4dac-9e09-6856db0d5fbe",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "92afdd7f-c448-4b5f-b8d6-1a5a2c9a84bc",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "d86a2e2c-f344-4c3f-b036-ac87a5c1439e",
        "cursor": {
          "ref": "55da64c8-5035-457d-b1c9-d1781253e555",
          "length": 152,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3adbcf50-d516-44e0-80a4-60270fdd25e1"
        },
        "item": {
          "id": "d86a2e2c-f344-4c3f-b036-ac87a5c1439e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "74163b23-33e4-40c7-980c-1bcd3d5da326",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "c436a305-d280-4bce-8803-65c470a159e0",
        "cursor": {
          "ref": "752110f2-b0de-4585-8f69-f2e07ade10e4",
          "length": 152,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e36160eb-cb07-41c0-a91d-34c794574ce2"
        },
        "item": {
          "id": "c436a305-d280-4bce-8803-65c470a159e0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ea31f9cd-69f2-4bbe-8463-78ca0f851c26",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "35dea8f9-172c-4753-858c-cd8ac532f446",
        "cursor": {
          "ref": "bf2eb24a-c136-4a87-836e-22cf906ec2d5",
          "length": 152,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3ec66217-82d0-467e-ba52-efc871d38d87"
        },
        "item": {
          "id": "35dea8f9-172c-4753-858c-cd8ac532f446",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bfbfd6aa-98dc-42d7-a393-5dcdb187b823",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "2d3f96c7-e62e-4de7-bd37-95bfb5b48a59",
        "cursor": {
          "ref": "da36b8e4-d691-44ba-a36a-3a863ab46c60",
          "length": 152,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6a889c52-ab1c-412e-8fdd-38fa97198c0e"
        },
        "item": {
          "id": "2d3f96c7-e62e-4de7-bd37-95bfb5b48a59",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7ec597a2-08bd-4490-9ab2-623f9eadf704",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "7fcf02c4-597c-45c3-80fe-f646c6bda267",
        "cursor": {
          "ref": "7d8062a0-4db1-486c-9a01-48b90f20b6d3",
          "length": 152,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1d2afb00-f765-4a1b-87f4-b43d24af0991"
        },
        "item": {
          "id": "7fcf02c4-597c-45c3-80fe-f646c6bda267",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0bd02786-8514-4c83-9e19-f7178ed50b99",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "a7972216-ba31-4828-85cb-9b84729422e8",
        "cursor": {
          "ref": "c4b6fc1a-648c-43a9-a67e-186a54f65b6c",
          "length": 152,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "165981e1-00c5-43c0-b55c-f24fa18d3011"
        },
        "item": {
          "id": "a7972216-ba31-4828-85cb-9b84729422e8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3f38cae8-0ff8-4f3e-bd1e-ae433f881a06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "8a31fe21-c4b8-4117-90e6-156b39f4e75b",
        "cursor": {
          "ref": "1e8c3a5e-afb9-4460-95a9-626f1e6a5068",
          "length": 152,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f53c34fb-dfe1-4482-bf0d-a42b98616817"
        },
        "item": {
          "id": "8a31fe21-c4b8-4117-90e6-156b39f4e75b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "82de22f1-4a6d-439c-acfc-b8211d8ea5c7",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "11fea89e-4f6a-44e8-bd0e-04496345ae9a",
        "cursor": {
          "ref": "4928cae6-f44c-4424-a927-f8391fd26603",
          "length": 152,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "444b136f-f58e-413f-80a1-b27587b0b3ec"
        },
        "item": {
          "id": "11fea89e-4f6a-44e8-bd0e-04496345ae9a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "82123c29-ff14-47d2-bfea-8c169d47e260",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "269bc00c-1d58-48c9-983f-aa4e37aaca98",
        "cursor": {
          "ref": "0ea0e716-3331-4268-bc46-a7b3e762573c",
          "length": 152,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "63e562dc-9cd5-4b0c-8d93-dc2c0ec696a3"
        },
        "item": {
          "id": "269bc00c-1d58-48c9-983f-aa4e37aaca98",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "39e7744f-5b4b-49e1-b450-670dd50a8467",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "9e6e75f9-c8fb-4094-93bb-549e596ec7e0",
        "cursor": {
          "ref": "196b1402-5412-4bb8-86c4-42bc91add1f2",
          "length": 152,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "840987b6-194a-4860-ab58-e2d7fa4198e9"
        },
        "item": {
          "id": "9e6e75f9-c8fb-4094-93bb-549e596ec7e0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d1819e4b-6b42-41a3-bc75-50cdc2be88f4",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "d34d15c9-cb19-4c9a-9b6a-96922902f369",
        "cursor": {
          "ref": "a2796e3a-5b9e-4b20-b3fe-53401a823d5c",
          "length": 152,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8c38c01f-1c6d-44c8-8117-e6b54b6fe35a"
        },
        "item": {
          "id": "d34d15c9-cb19-4c9a-9b6a-96922902f369",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "358fcf2e-141d-481a-982b-37ad98baa831",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "bda669a1-bea4-4fa5-80f6-14d0b6d14390",
        "cursor": {
          "ref": "431fc02b-85dd-4609-b494-1af5019f638e",
          "length": 152,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "653ed89e-f80d-4fc1-8a66-88265193096c"
        },
        "item": {
          "id": "bda669a1-bea4-4fa5-80f6-14d0b6d14390",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4153c549-884b-43d5-9d03-628b50e76fed",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "308f94af-33be-4eaf-a8fe-027d934d146d",
        "cursor": {
          "ref": "33256d8d-52e9-4619-9c3f-988092281bd0",
          "length": 152,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a16b284b-0ac6-4a30-a689-a50bbe6ca772"
        },
        "item": {
          "id": "308f94af-33be-4eaf-a8fe-027d934d146d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "755b32af-8e23-4888-a6e1-2b2649a96d08",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "837264eb-2bae-4d6c-9118-d519fdcb7fe5",
        "cursor": {
          "ref": "2d522150-6d15-4ae2-959b-725ed16bbe52",
          "length": 152,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c8938626-77a5-4ed9-855d-37f3b889355c"
        },
        "item": {
          "id": "837264eb-2bae-4d6c-9118-d519fdcb7fe5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0da23917-f006-44ef-8c19-f2e71625ccff",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "6e298a51-68e1-4d8c-a713-e7252229fd26",
        "cursor": {
          "ref": "8e0d397a-daa5-43ee-9be7-5074091fdbe5",
          "length": 152,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "da70dc55-0ba0-4ccc-b345-108d23e1f31f"
        },
        "item": {
          "id": "6e298a51-68e1-4d8c-a713-e7252229fd26",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "aaf9a589-ded3-4928-b28e-d23cebd602fd",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "78d94a6f-4f50-458f-aada-3067784ddc9b",
        "cursor": {
          "ref": "445fa76a-d4e9-4743-9997-415c69e47165",
          "length": 152,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "96acf745-e5f0-41fb-89f9-1710bdc96734"
        },
        "item": {
          "id": "78d94a6f-4f50-458f-aada-3067784ddc9b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "64fb77fc-8b1c-497a-a6ed-98a8edfe60f2",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "41ee5105-29fa-4b48-b47d-075f4e66c415",
        "cursor": {
          "ref": "bf493062-948c-4218-828b-ebb7cc5b5dc1",
          "length": 152,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a3fa431f-08af-459b-80e8-e1ed395632c6"
        },
        "item": {
          "id": "41ee5105-29fa-4b48-b47d-075f4e66c415",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "62c5a071-d067-4205-a9c5-8badaa78a2b1",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "e89c2ee2-40d2-4a6d-baa6-0ccf69e9718c",
        "cursor": {
          "ref": "be7de0b4-6ac8-4a04-a9b1-b897772fdf82",
          "length": 152,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ac9bc824-725f-4333-8206-b7cb26b688f7"
        },
        "item": {
          "id": "e89c2ee2-40d2-4a6d-baa6-0ccf69e9718c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4117ad4f-11aa-4e85-99b7-8dab3ded10e3",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "dc1329ac-8924-4a96-9eb7-39bfa3369070",
        "cursor": {
          "ref": "a2705c9b-4586-4e3a-aec0-c0afddab2755",
          "length": 152,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8d798de5-14a0-4180-aebf-0bf0d6647934"
        },
        "item": {
          "id": "dc1329ac-8924-4a96-9eb7-39bfa3369070",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ec23afd8-2f1c-4300-a9e2-657b4f185857",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "1053175d-9770-4c40-8b44-a57aa1de268e",
        "cursor": {
          "ref": "9c067e0e-7fc7-4d61-9b40-eb552c15403d",
          "length": 152,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c5c406fe-d6ba-49f2-805d-32e37370d28a"
        },
        "item": {
          "id": "1053175d-9770-4c40-8b44-a57aa1de268e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "cdf3db56-6cef-4682-b74f-36fc262fa879",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "fe16fe22-5f82-4be9-b4ac-195d0ac28039",
        "cursor": {
          "ref": "26752121-179e-49e2-a378-055a884d0b02",
          "length": 152,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7e6b3265-e7a9-4079-8a4a-da0a78140bd5"
        },
        "item": {
          "id": "fe16fe22-5f82-4be9-b4ac-195d0ac28039",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3c4451e6-a2a1-4e11-b4fc-8e6e8b9116b6",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "db9b5632-3f35-4f90-8926-fd592c6b0e7d",
        "cursor": {
          "ref": "8c001ef4-eb50-4b47-a918-2dc14d44969a",
          "length": 152,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "eb64b69c-7dbb-48b7-ae4e-60f5515e67c0"
        },
        "item": {
          "id": "db9b5632-3f35-4f90-8926-fd592c6b0e7d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8d7e7f15-ad47-4531-b44a-0d1f0b0331f1",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "67b506c9-529a-467a-86c1-42d67230c7cd",
        "cursor": {
          "ref": "eab3f8a8-84a2-4b70-a0db-e713b9b2c765",
          "length": 152,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a96706e3-19a8-4243-9498-695a8ab56049"
        },
        "item": {
          "id": "67b506c9-529a-467a-86c1-42d67230c7cd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c7afdae5-ef81-442e-b88f-e2b394e82855",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "02740632-0536-426d-a4b7-38e03e6211bc",
        "cursor": {
          "ref": "ada58117-7344-4b6c-89e5-8e4637558080",
          "length": 152,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a3344032-69b1-4a41-83d4-d8f753a53626"
        },
        "item": {
          "id": "02740632-0536-426d-a4b7-38e03e6211bc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e96caf89-1c70-487d-9611-bd863acbf871",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "6be3bc45-cbf5-42d7-9b4e-0bb62ca480d0",
        "cursor": {
          "ref": "1200c261-f4ab-46f4-be07-d8ff6affe713",
          "length": 152,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4d2774a9-9d6e-470a-b9a0-b52953c937e4"
        },
        "item": {
          "id": "6be3bc45-cbf5-42d7-9b4e-0bb62ca480d0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d538bf69-e837-4848-9027-6965e5538b73",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "b296c55b-6401-496d-b763-3bea972ee786",
        "cursor": {
          "ref": "34314b73-b32d-4ba7-bced-5d1e4e2cf3b1",
          "length": 152,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1ee86054-439a-4a5c-a89b-f296c5d592d8"
        },
        "item": {
          "id": "b296c55b-6401-496d-b763-3bea972ee786",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "777a2ea0-7afa-4033-8c15-431497a4fedc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "872e9b34-e67f-4f9f-9e53-c779dca7822f",
        "cursor": {
          "ref": "c767716b-961b-425a-9f0a-6aa0bd215e96",
          "length": 152,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d8f589f8-fa74-43aa-8928-47ed18ba3d07"
        },
        "item": {
          "id": "872e9b34-e67f-4f9f-9e53-c779dca7822f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c4bafcba-319a-4ef4-b029-a04c087befcd",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "25a5a3d4-3b5a-44bf-beff-8b93b2f25e12",
        "cursor": {
          "ref": "28a9c6c4-ab11-409a-a632-e304a83d6233",
          "length": 152,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "782aa8f3-92b6-414c-9789-abe8fdf2f5c7"
        },
        "item": {
          "id": "25a5a3d4-3b5a-44bf-beff-8b93b2f25e12",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fd248673-5333-4d77-9286-7cf05583e611",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "d7fbc577-9ca7-4f8e-b23f-57538a3d7cf3",
        "cursor": {
          "ref": "a0d5d9c0-3887-43d4-95a7-a76a5821443c",
          "length": 152,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d76d1411-fc6f-4d12-80a5-87d8f269534f"
        },
        "item": {
          "id": "d7fbc577-9ca7-4f8e-b23f-57538a3d7cf3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "71f0d525-f001-4013-ab99-66f970c950f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "1e9a4936-f96f-4872-b7c7-bb10aad76fb9",
        "cursor": {
          "ref": "0a0a055c-516a-4520-9628-02df44215795",
          "length": 152,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4fdafc50-cc44-40fe-941d-54211c297ce2"
        },
        "item": {
          "id": "1e9a4936-f96f-4872-b7c7-bb10aad76fb9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3eeb8e8b-8d09-4054-af96-158727bbf424",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "89d1042c-8f20-46b9-b084-1fe9fd0438ea",
        "cursor": {
          "ref": "5c98c5fb-1f37-4a3d-bcce-cc8ebc64db62",
          "length": 152,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bee747fd-ff2b-4030-86c5-7777e6cc9ac7"
        },
        "item": {
          "id": "89d1042c-8f20-46b9-b084-1fe9fd0438ea",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fcd42052-8318-4cea-90b7-6e7670044d2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "051a0021-a503-4c48-879c-e62aea95bae9",
        "cursor": {
          "ref": "0a74a31a-d0c3-4e65-97c2-63103323fc43",
          "length": 152,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fdd7e2f7-2c3d-423e-aea8-ac0939f8a217"
        },
        "item": {
          "id": "051a0021-a503-4c48-879c-e62aea95bae9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5f76a015-4ca3-4c6b-9abb-2ebc290f18d8",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "60be06d9-bc36-4a67-a8bb-3bc129256b18",
        "cursor": {
          "ref": "44fd6be6-64ef-44a3-acd8-e3b9c50337e5",
          "length": 152,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a6f663e0-a146-49f0-bb41-2a75c7a6ac4b"
        },
        "item": {
          "id": "60be06d9-bc36-4a67-a8bb-3bc129256b18",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "13c8c971-3113-4e76-a1de-8cc82bc7f091",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "b5d112d3-bf46-4543-b757-d061f211f056",
        "cursor": {
          "ref": "9d1c97a5-71b4-4d1d-a847-b2ea2397bf12",
          "length": 152,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "56b0f301-0382-42f1-88e6-bb2578ab7fbd"
        },
        "item": {
          "id": "b5d112d3-bf46-4543-b757-d061f211f056",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c6604d0c-25e6-44aa-bd67-258f469a300a",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "de7edad4-90e2-45f7-842d-d0c89d429083",
        "cursor": {
          "ref": "fc8b0a4f-6ba1-4055-8956-09ab647d86c7",
          "length": 152,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5d7b4f73-0bda-4526-9edd-8d2a54d325a2"
        },
        "item": {
          "id": "de7edad4-90e2-45f7-842d-d0c89d429083",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e0ba6a30-ac8b-4ef7-acc6-2dbfd3e0ce93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "0855a61a-ea26-41c4-adf1-ba008952de88",
        "cursor": {
          "ref": "8d438d0c-33d6-40a8-ad01-d4a0468cdcc6",
          "length": 152,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b50c1dca-b9aa-416e-ae32-08c0c3e45831"
        },
        "item": {
          "id": "0855a61a-ea26-41c4-adf1-ba008952de88",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "112e8882-6499-417f-bd7a-69ed555c6625",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "019e3c2c-fd0d-4a55-974d-dadd601dfed6",
        "cursor": {
          "ref": "50731c86-adc5-4d49-882b-7b32a35d7639",
          "length": 152,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "89095c74-5b00-4444-8844-4d70da5b1c91"
        },
        "item": {
          "id": "019e3c2c-fd0d-4a55-974d-dadd601dfed6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6c4e73bb-a9e3-45a7-ab1d-a7c937ea8dea",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "f3d1db95-8adb-4779-b215-2a3b97de226b",
        "cursor": {
          "ref": "90ab3755-dee0-4e8d-8aba-b9adbdc61fc0",
          "length": 152,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "60be4ade-9097-4f02-87ad-3b428cf2d96f"
        },
        "item": {
          "id": "f3d1db95-8adb-4779-b215-2a3b97de226b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f10b9091-d4f7-44ef-8d2b-b1b00244aa36",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "db2b75d9-8ed3-4f21-aeae-5d57c2a63bf6",
        "cursor": {
          "ref": "b7dec784-0a79-41dc-bc11-e4f869d4a2b9",
          "length": 152,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2a29bc8c-7458-4a45-bb48-00da3cc59910"
        },
        "item": {
          "id": "db2b75d9-8ed3-4f21-aeae-5d57c2a63bf6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2ed95817-b3fb-46a8-aa31-3ceb27595ee0",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "27a0d597-f7d4-40c6-ac94-f398adbebef3",
        "cursor": {
          "ref": "bf42540d-8a7b-4178-ab01-a38d0cb1108f",
          "length": 152,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7f8a14b7-6477-436a-81fb-066b48eddb37"
        },
        "item": {
          "id": "27a0d597-f7d4-40c6-ac94-f398adbebef3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "90a0ffd9-182b-468f-8c70-572c8f39616d",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "bc672d38-eb5e-49c7-b885-0b9af82ceaab",
        "cursor": {
          "ref": "2df7e961-c716-4eeb-964c-fdf28e6a1031",
          "length": 152,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ce2412bf-5a6e-4a7b-af08-c0fc37cd8175"
        },
        "item": {
          "id": "bc672d38-eb5e-49c7-b885-0b9af82ceaab",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "49121a34-420f-4121-a520-40a5733ecc0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e4f180b0-0d9f-4abc-98cc-6fda49588534",
        "cursor": {
          "ref": "d04fbeca-3f8f-49f8-acbe-7c9a419144c5",
          "length": 152,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "57210084-25fe-4102-aef5-7c0fceb311e1"
        },
        "item": {
          "id": "e4f180b0-0d9f-4abc-98cc-6fda49588534",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5f5961a9-9732-4893-966e-8cd8cd852df7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "24ab411e-3892-4926-a8c3-a62408a698b5",
        "cursor": {
          "ref": "76af7622-c80e-4b52-90d6-57d09b3457e6",
          "length": 152,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "174dfae2-4b74-44f9-a977-8aeccd1ff202"
        },
        "item": {
          "id": "24ab411e-3892-4926-a8c3-a62408a698b5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7ab4f56e-dedf-4754-9a44-5aa2a19dcf0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "5ffba832-0b0e-4959-a09b-b287fdf5b005",
        "cursor": {
          "ref": "9544861c-2633-4039-9aff-68c003c90560",
          "length": 152,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ca4cfb5c-e1b0-4ed4-b920-7a199e0b4a9f"
        },
        "item": {
          "id": "5ffba832-0b0e-4959-a09b-b287fdf5b005",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7783b811-63cc-4f0e-8400-42ba24fdb148",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7eb42f0d-69fd-4feb-bf17-840c0e3ed673",
        "cursor": {
          "ref": "c41d9a89-407c-46fc-b4fd-0aaa32f6e124",
          "length": 152,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "438f500b-2586-48f4-aad9-4880bbc0c165"
        },
        "item": {
          "id": "7eb42f0d-69fd-4feb-bf17-840c0e3ed673",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "810e010e-21a9-41ba-8b4c-4ecdb97e8a1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "9fbc14a6-7cc8-479f-b4c9-81acba8d4b82",
        "cursor": {
          "ref": "39ddfb45-1e05-45bb-b5ad-bd4d0c5ad18e",
          "length": 152,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f4581a2b-18c8-41a8-86f5-83be454610e3"
        },
        "item": {
          "id": "9fbc14a6-7cc8-479f-b4c9-81acba8d4b82",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f087b248-7991-43b4-a74b-54132dbd7cdc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c5d1d13c-57ae-405d-96cf-18defffe5352",
        "cursor": {
          "ref": "31a044f5-0425-4ac8-acf2-6e2ce0384ca5",
          "length": 152,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "498bc486-505a-4814-b61d-c620dea9f0b1"
        },
        "item": {
          "id": "c5d1d13c-57ae-405d-96cf-18defffe5352",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "85d0abaa-0413-44db-ace3-52153f087daf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "98e3a515-8024-42fa-85ef-c6a2d57fad70",
        "cursor": {
          "ref": "7c30f850-eb81-40d7-a48c-5dd4badc09fe",
          "length": 152,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "83c80a6b-c275-4050-8fd3-c44410cc006f"
        },
        "item": {
          "id": "98e3a515-8024-42fa-85ef-c6a2d57fad70",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7a87e5be-7e40-4a8f-8fa1-d8133c8e43bc",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "87108229-33db-4678-aa97-b050a218887a",
        "cursor": {
          "ref": "6512f8ef-c905-4aa7-bc1e-8b7c2b4fb8c3",
          "length": 152,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "413c2eef-cdb7-4793-9d7d-1c446bf4a21d"
        },
        "item": {
          "id": "87108229-33db-4678-aa97-b050a218887a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1ab25336-4b65-41d1-81fe-b5e8e3e72728",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "658f87a2-574a-4f25-85cf-587a18749a15",
        "cursor": {
          "ref": "d189dfe2-76eb-438d-aaea-4fdc421edf7a",
          "length": 152,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9bde8265-d7cf-4a79-b1be-6adcd870142a"
        },
        "item": {
          "id": "658f87a2-574a-4f25-85cf-587a18749a15",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "72f5f390-393d-4aa8-a1c5-499f2ab284f0",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6374f684-f7f1-442f-9068-82e725c19763",
        "cursor": {
          "ref": "1e4c042c-1969-4ec5-bf58-3a28dc008d16",
          "length": 152,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4c54bc34-406f-49f2-8c9c-beb0ecbf865c"
        },
        "item": {
          "id": "6374f684-f7f1-442f-9068-82e725c19763",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b9395910-ac0f-4763-a79b-0ba041599089",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b005f772-ece0-49d8-a531-1aa37741c7dc",
        "cursor": {
          "ref": "67cb7c42-713c-43c2-a550-69d726fc37d1",
          "length": 152,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "452aaed2-84b6-4464-9f43-1b737761463b"
        },
        "item": {
          "id": "b005f772-ece0-49d8-a531-1aa37741c7dc",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d96e1ff4-fb8e-4e41-8221-149efebd7fd6",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "ebe103bb-d4dc-4eed-8d83-e4d0fe521a3d",
        "cursor": {
          "ref": "373d56e9-a045-458f-af59-0832297107ef",
          "length": 152,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e7186edc-b283-41d1-a01a-c36c68c17a66"
        },
        "item": {
          "id": "ebe103bb-d4dc-4eed-8d83-e4d0fe521a3d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c1cffb42-a186-4bf7-becb-08f04bdeeb91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "237adb43-6863-4645-8e51-38c93568c29e",
        "cursor": {
          "ref": "0d594aca-b0cb-4814-96be-fce30bce40d6",
          "length": 152,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e93fdcfd-04d5-48bb-b3d8-efb24cd49e6c"
        },
        "item": {
          "id": "237adb43-6863-4645-8e51-38c93568c29e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0e8ab443-4823-4862-a0cd-0ddf1d00846e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "489f9c76-9bd9-417d-bfb1-c1f75c0c8d70",
        "cursor": {
          "ref": "f1fd1822-5d58-43cd-8b18-eb767343f591",
          "length": 152,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5dfe5cf5-27e1-4119-97b9-f3d204b29ac7"
        },
        "item": {
          "id": "489f9c76-9bd9-417d-bfb1-c1f75c0c8d70",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d0d26e79-fc1b-47ae-b3e6-a79cd6b3a21a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "06807e79-8e46-45ef-a5a0-4320069b7c21",
        "cursor": {
          "ref": "ece60343-c43d-4aab-b69c-1327d7ae3e92",
          "length": 152,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fedbd3be-0317-46df-82e6-2b5be8ce18c7"
        },
        "item": {
          "id": "06807e79-8e46-45ef-a5a0-4320069b7c21",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d34dea80-6ee5-4962-a782-e92afb90d3a4",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "e0208ab9-7f18-48c9-b8df-759c6bab1407",
        "cursor": {
          "ref": "7b58b4d7-0f63-4918-841b-27fadb89fd08",
          "length": 152,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2bb4b8ac-48d2-4109-8d7d-6e9180324cfa"
        },
        "item": {
          "id": "e0208ab9-7f18-48c9-b8df-759c6bab1407",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a2387d96-1686-4bff-8bc5-fdebe235b168",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7eecf8c1-7e3b-41a3-8b6d-d069dc846eba",
        "cursor": {
          "ref": "71e3903b-f94f-4dc9-ade6-27bd55025f42",
          "length": 152,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "608c950e-e4f0-40ed-9338-eda000268c8d"
        },
        "item": {
          "id": "7eecf8c1-7e3b-41a3-8b6d-d069dc846eba",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d9264292-e27e-4d75-a4a4-c2ca3e0adff9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "54b888d6-5daf-48ad-8457-2665a73cea98",
        "cursor": {
          "ref": "f74b071c-66b4-4543-8015-0ce6266ffb69",
          "length": 152,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c127c1dc-313c-48ba-a0a0-1863841f53b1"
        },
        "item": {
          "id": "54b888d6-5daf-48ad-8457-2665a73cea98",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a0871917-616c-4abc-a726-da92f20000e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7648a5d6-15eb-4673-8ab5-718ff4e180ca",
        "cursor": {
          "ref": "5251fb91-f168-4d96-a9e4-0d0edd85dfb7",
          "length": 152,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "65bb333d-62f7-4af0-97a4-1347d208f928"
        },
        "item": {
          "id": "7648a5d6-15eb-4673-8ab5-718ff4e180ca",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e430a842-ee69-4667-a962-ad0c568a0b72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "aed9f496-004c-4851-8b60-5340eb5011dd",
        "cursor": {
          "ref": "4394901d-87d0-4aec-a784-fa9a6b27bae9",
          "length": 152,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fc16750c-5dbf-4bea-aadb-6f5f1626cc2d"
        },
        "item": {
          "id": "aed9f496-004c-4851-8b60-5340eb5011dd",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1190c8ab-ea9a-4e0d-a973-91384eb89d6b",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8deb6000-3f11-4928-895a-761a7c9de4cc",
        "cursor": {
          "ref": "bfb6aafd-4109-4c01-9dfd-d964117aa32e",
          "length": 152,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bcc63f86-23aa-4963-a622-ae015dcc6579"
        },
        "item": {
          "id": "8deb6000-3f11-4928-895a-761a7c9de4cc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a9ce218b-a6c1-4320-86ea-d3bc847b0aed",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "b50766e4-e4fd-4b43-a582-e183f17a9d93",
        "cursor": {
          "ref": "a0daa86d-1899-4b3a-84e4-24a7ac8e051e",
          "length": 152,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4329e0ca-ae11-47fb-951c-af5016532718"
        },
        "item": {
          "id": "b50766e4-e4fd-4b43-a582-e183f17a9d93",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b3fd16f0-0cd8-4177-9a6d-5d458674d4a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "91147b75-451a-4088-aa43-cd2cc6c5330d",
        "cursor": {
          "ref": "aa8d11fc-7516-4fea-83d6-b8f5b9e00c9c",
          "length": 152,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b9fe7fb5-0f60-405e-87ba-969407ac1403"
        },
        "item": {
          "id": "91147b75-451a-4088-aa43-cd2cc6c5330d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b11193bf-6b7c-466d-9a2b-d717bbf72a7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "d6cb7893-e6e8-43f3-8c67-dcbb8dba0935",
        "cursor": {
          "ref": "a965e867-1bf2-4154-9c97-8fa6b0a8682b",
          "length": 152,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "82b6f9f7-078e-493e-86f6-dacbb0e41aba"
        },
        "item": {
          "id": "d6cb7893-e6e8-43f3-8c67-dcbb8dba0935",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "39c6e6c8-a5e4-4594-b330-0790c7a983bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "fa357eca-5b13-4e2a-bb28-56745794fc8a",
        "cursor": {
          "ref": "cdbf30ac-36c1-4f68-96c3-1c46ba7737ae",
          "length": 152,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5974b96d-ae29-4093-9504-b166d6c46584"
        },
        "item": {
          "id": "fa357eca-5b13-4e2a-bb28-56745794fc8a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "71c0242b-1c74-4702-a4c8-538d77e32b53",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "7379ad3a-3f7f-4fb7-bfbe-28987d677953",
        "cursor": {
          "ref": "8b2aedf3-5773-4634-a5da-be413e73171b",
          "length": 152,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "012fac22-b65f-463d-b0cc-1ca34d205d28"
        },
        "item": {
          "id": "7379ad3a-3f7f-4fb7-bfbe-28987d677953",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4529a946-2407-4536-a102-33afbdadcf9f",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "0d6e4b44-e413-4195-b3c6-0373c129c94d",
        "cursor": {
          "ref": "971bf039-9399-4fbc-81ee-6fc307ab5191",
          "length": 152,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e7db23b5-cf64-471e-a319-4c6e22d46069"
        },
        "item": {
          "id": "0d6e4b44-e413-4195-b3c6-0373c129c94d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b57e0b6b-86ea-4672-b07b-1c95b475231b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "d3649b8e-5cdb-4b18-b133-275b7134a9ed",
        "cursor": {
          "ref": "7aeed648-13d8-49de-8140-b8129cf1b3af",
          "length": 152,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0404c08d-171b-4960-9a19-2b1a0f590989"
        },
        "item": {
          "id": "d3649b8e-5cdb-4b18-b133-275b7134a9ed",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "edcf46f2-23bf-4f69-bba3-4d1e197b082a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "103b25cb-a269-4ebe-b38e-860a897eb60f",
        "cursor": {
          "ref": "0dd4e351-f176-48a3-bbc9-faec4d5184d5",
          "length": 152,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "88da47b0-3670-4548-9709-2508519ec33d"
        },
        "item": {
          "id": "103b25cb-a269-4ebe-b38e-860a897eb60f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "759c34b1-7fa7-4954-a1e2-47dd28e2c1e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "9d385e68-5b3e-438c-bc7d-161525fca116",
        "cursor": {
          "ref": "ebb61d72-896e-4fff-9b94-8a26a07a846f",
          "length": 152,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f7b87562-4a3f-4a78-8737-64e6a643def7"
        },
        "item": {
          "id": "9d385e68-5b3e-438c-bc7d-161525fca116",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "89c4e0b6-7a51-40f6-83ab-66f91d4d91e5",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "6b820a53-08f9-435a-8cc3-2c74fe4e82e9",
        "cursor": {
          "ref": "f2556bfe-aae8-4cfd-b6cb-1eebd6038474",
          "length": 152,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bf3989e8-f70f-457b-8940-97d761459bc5"
        },
        "item": {
          "id": "6b820a53-08f9-435a-8cc3-2c74fe4e82e9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "df013549-6863-4a2a-bbf2-3a8c4483d6d0",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "2ee270c1-9f60-4f8f-be22-9d709c05e759",
        "cursor": {
          "ref": "47856026-0a05-4223-8297-7cc55d1aa552",
          "length": 152,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "19389edc-c090-40b2-a704-6a3b86fa75a5"
        },
        "item": {
          "id": "2ee270c1-9f60-4f8f-be22-9d709c05e759",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "45a03251-9e88-4bfc-8c5c-1c852e55c185",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "360aca01-94c1-4cd7-8101-f7e53f6b7ad7",
        "cursor": {
          "ref": "2f20078c-cc7b-4332-ae54-dc51004ec13d",
          "length": 152,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9f3be809-e81c-42b2-bf29-2c127873eac1"
        },
        "item": {
          "id": "360aca01-94c1-4cd7-8101-f7e53f6b7ad7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "171033ee-0089-4d03-afd7-3279fbb01bd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "65e0abb1-1854-4ba1-9c98-fb6d47dc6563",
        "cursor": {
          "ref": "2f0f309c-b521-4e45-90e8-ae7fb99737a6",
          "length": 152,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "263dea82-9b8d-4a55-b8fe-4218072e2bca"
        },
        "item": {
          "id": "65e0abb1-1854-4ba1-9c98-fb6d47dc6563",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "cfab4639-b0c9-44aa-b36d-5f8c074a7aff",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "1f6e5aca-4506-46f3-a5a7-2a9c61d19988",
        "cursor": {
          "ref": "d8a4fa4f-8414-4412-9495-4e15657cac33",
          "length": 152,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "219f60fb-c9d1-48e9-8349-8a096cf616bd"
        },
        "item": {
          "id": "1f6e5aca-4506-46f3-a5a7-2a9c61d19988",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "20a3a0a8-1496-4270-b369-87c1439b3664",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "1f6e5aca-4506-46f3-a5a7-2a9c61d19988",
        "cursor": {
          "ref": "d8a4fa4f-8414-4412-9495-4e15657cac33",
          "length": 152,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "219f60fb-c9d1-48e9-8349-8a096cf616bd"
        },
        "item": {
          "id": "1f6e5aca-4506-46f3-a5a7-2a9c61d19988",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "20a3a0a8-1496-4270-b369-87c1439b3664",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "911904d3-c513-425b-a9b1-029f95133426",
        "cursor": {
          "ref": "257907bf-efc7-467c-8257-702074cad59e",
          "length": 152,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bf08947f-21fe-466b-918f-fc70e7b459dd"
        },
        "item": {
          "id": "911904d3-c513-425b-a9b1-029f95133426",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "b80d964c-32fa-43f7-b95f-47387e096ee4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "44ef175a-479a-4acf-b4fc-6ea0b0fc0c51",
        "cursor": {
          "ref": "8bb7ad18-bdb3-4c40-a169-3a667576ed96",
          "length": 152,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "56c2fa8f-ff51-4ece-a623-bef79cee7325"
        },
        "item": {
          "id": "44ef175a-479a-4acf-b4fc-6ea0b0fc0c51",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4299547b-6242-4e8f-8529-596b8657f877",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "44ef175a-479a-4acf-b4fc-6ea0b0fc0c51",
        "cursor": {
          "ref": "8bb7ad18-bdb3-4c40-a169-3a667576ed96",
          "length": 152,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "56c2fa8f-ff51-4ece-a623-bef79cee7325"
        },
        "item": {
          "id": "44ef175a-479a-4acf-b4fc-6ea0b0fc0c51",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4299547b-6242-4e8f-8529-596b8657f877",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "8771e33d-e6ba-452a-88a6-92ad581ffbe8",
        "cursor": {
          "ref": "0985c539-0f3f-4f24-98e8-3dd4ba700af3",
          "length": 152,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fdc9fc1e-046c-4cad-a4a9-b1c5c6f264f6"
        },
        "item": {
          "id": "8771e33d-e6ba-452a-88a6-92ad581ffbe8",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "5d6e0129-5a74-4dda-a596-dc0be6eca9b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "825e0b1d-e2fa-4d26-93fa-c53af6b30b5f",
        "cursor": {
          "ref": "bb604967-79a0-4313-a063-7f3b8fb9f61a",
          "length": 152,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "af6fe881-1af3-43b8-ad41-03daac1a44a2"
        },
        "item": {
          "id": "825e0b1d-e2fa-4d26-93fa-c53af6b30b5f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f549b8ed-8f8d-4ffd-91ff-87016dec37f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "825e0b1d-e2fa-4d26-93fa-c53af6b30b5f",
        "cursor": {
          "ref": "bb604967-79a0-4313-a063-7f3b8fb9f61a",
          "length": 152,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "af6fe881-1af3-43b8-ad41-03daac1a44a2"
        },
        "item": {
          "id": "825e0b1d-e2fa-4d26-93fa-c53af6b30b5f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f549b8ed-8f8d-4ffd-91ff-87016dec37f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "b9c71209-0d8a-4710-be04-0703cff99cd7",
        "cursor": {
          "ref": "9e636288-a5ba-4403-8622-12271e9b5c9f",
          "length": 152,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "73e8fbaa-9fa5-4f95-ad99-5211c761d0ce"
        },
        "item": {
          "id": "b9c71209-0d8a-4710-be04-0703cff99cd7",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "66dc5634-704f-459d-9072-bf6b813552ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      }
    ]
  }
}