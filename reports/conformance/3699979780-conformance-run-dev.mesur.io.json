{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fb6b329e-a775-4b29-a5e3-88b39e299f3b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "51b6b856-e3da-4dcd-a1c1-69f00a9453a8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89d39139-babb-4184-b1cd-9ec4637d956b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6b9880e6-694c-4b06-9c67-b7a7bf2e7dda"
                }
              }
            ]
          },
          {
            "id": "9e50fed3-acbd-4151-bf9a-2ff490eb3897",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "69025c99-b5ed-4c71-b745-59b887d6dee3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "07d7abd2-9092-4663-8505-e4007cb1d6d6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d4a76713-509b-42e7-93f1-ce85e344f6ea",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "111a94f2-c7d9-4baa-b2d2-bdf4d3982cc4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d481ad60-9f13-4843-af0c-9c5452ab30c8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53044e5c-479e-46cd-b4f6-1fcc1364ee10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69a3e458-20cd-4176-b11a-a51475b6e746"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "56f6c54b-7f1f-4e8f-8e80-5d710c82e93b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fff1d45d-8f6f-4f09-ac87-76c7472474d6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "796cff04-5a3c-4ab1-8325-aed9bfd46e82",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3ce480c0-69d3-46ae-a954-0e687d72a1d7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bdbd23aa-2251-4354-9e6a-f351bec1aaaf",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9c46af29-67a6-4bbe-85b0-26362ced1696"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6dac3112-9d79-4568-b5f6-75953c30e5b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7c59e39-dd77-4a40-8987-c5ac86422450"
            }
          }
        ]
      },
      {
        "id": "d91c5b52-cfe1-43ed-9044-15b5d6b1eeef",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a1dc561f-7827-4b61-a845-9aef54300988",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f3f3c9e-9a89-49dc-86a6-e33466787327",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9c8a5a90-c180-4eec-aa8a-e2c25ef10609",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df092d6e-1a76-4bb8-9057-3298c91946b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "235cdd40-e1ff-4302-ac95-435d0bdfe691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe120c5-11e2-493b-afe5-1f6d7e3cfad4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108932fb-3b54-4116-9593-a20d3fbae863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d848e133-74a7-4792-b0f4-dd8f39c02dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e47550-ceaf-47df-b579-592a1e717fc2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee4cc4f-0ae9-4911-a237-d933c2c04ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "125b8d78-6f75-477a-8194-bed9b99c4fb1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "15760203-3575-47e3-8e5e-29f20e5a4ebc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c456337-9207-485f-8f85-bdaa0a0fd7e2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7c1baf-3949-4c2f-8357-568beb8ae46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c877454e-12aa-4f99-8d03-b5c516ff16d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380ff8cb-1840-41d5-b92f-626b8a3cd49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5094a8d-e57c-4bbf-8060-bf527fab02da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4535c34e-8a36-4a60-9244-610b5e1871a4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b348de80-f16d-42b1-bacd-e8830db3babf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8bf3432e-f294-4096-ae30-f70ffc982629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c7e26d-7839-429d-9a97-fbdf0efcc975",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a2026d2d-fb92-478d-adb1-e1262f939145"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7fadc4c1-7c4d-41df-af2e-d07d484bcb7a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "13759f87-77da-4e42-a23c-940d1b91c8ab",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22c5c5cb-09f3-40a3-8262-fb317a67914a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "40efe181-4eee-43bf-9cb3-5d05a82f0e05"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6120599-372b-4218-8b27-9bb607c37887",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "178d212c-4941-4306-bf7f-f5d10ce43af4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69b93f38-ab37-4a40-9e04-3c5fc6f452fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7871bdf-c699-4548-8908-4a0aa6ff9446"
            }
          }
        ]
      },
      {
        "id": "15426c50-09a5-4a88-8599-4a73933ae472",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "79cf7147-0be1-4fed-a1dc-881a6363d413",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2aad030c-3496-40f2-8e9b-8876c8ccc5bb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "358cdd1b-221e-4246-988f-0f42ce25d03b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f7b799-d863-4c66-867e-49c52b8ff214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c66276d-3b2a-4723-8f20-2d1fb87ca97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e152d21-5ae9-4f2b-abaf-5721de3d33f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e954a4ba-293a-46ba-aa6e-b5350741dd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e1d176-4848-4b83-a9f3-b8d539d62856",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01955b69-9254-4340-9d08-e5402f72dfd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022d1187-4909-4081-a12f-2859324dc843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7aff57f-d266-4954-bbdb-d39d8e811d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcd03d81-0787-4282-a70f-2e724aafa5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b85f854-c4ec-4bcb-847b-7a8d9e7a1fdd",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdecb57-f895-4705-92bf-39d297b0943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019c39ef-6699-4673-a601-03426d7755d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96549091-6f1c-44ef-8233-765a1f434a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d41eee5e-300c-40c3-bf6e-59cc60a36d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9f43dc-6c44-4c21-8ddf-5da53a2bf7a7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6dd4e1-e01d-40dd-ab27-d02152a86a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b5d5b8a-0814-42b2-81da-8d6f9fd48e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79591124-d254-494c-a5fa-df7332c76213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ff3e682-555c-421b-9ca6-ef49c2ea0709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9254531a-89e3-401b-9f6a-f4a8423b085c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4459e50-0d93-4779-ab21-1b71f6c58161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdef1fa3-b8a2-48bb-ab5b-9c461594fa7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2a1305-9493-4100-a86b-7226f85f5af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e1c73bf-f4db-45ad-8a56-9588af0eba15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30e796c-d758-458a-88f5-2c31358befa4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "727a036c-54ba-4863-8f9c-21fae9408e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8441a3f7-c758-4a17-990c-eeb488277cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae194d8d-12fa-40e6-9362-41d889a48bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f37d192-3ab2-4569-b110-7d5a902d2a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde50928-c866-42ac-8c3b-ede9cb326191",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4eb8ae-93ce-43b1-854b-cbf98f9698e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c54e392-5785-47e8-ba1b-9a2fa4d313a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf1042d-84b3-4ce4-97b3-be610cbde11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24e08aef-2d82-4824-ab51-ddb61c359452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff29cdf3-b6d9-46c1-98d1-678a1d457272",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712aca1f-ec99-42a5-b7db-4b44757b16c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea40988-a355-473d-827d-ca047b6dfeba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a435b3b8-804f-4a94-b183-473cf31cf843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "635df486-fcbd-44a5-83b5-999172718b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97a628c-6c0e-4a6e-8210-74dc144e4112",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4db9aaa-6200-45c7-a876-2ebd6be4b490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4823c1de-b4cb-40e0-8932-e50876c80bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a2d8f2-3380-4954-bd9f-60a4a21cd0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91a7e42f-c858-4577-8692-ffff13125918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91fe0692-e105-4841-b538-75fafb095e5b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635672c5-8a7d-4a0d-b206-7a3a92f8fcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f837f7a-c1a7-4752-900b-8ebceefcd771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c5eb4e-5c4e-4e75-9d72-4052253a2467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00e61716-10d8-42bf-81e7-afd73f74ade6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328d9a33-580a-42c0-a4a0-1b6419277047",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca92d0ff-2bff-473c-9362-0894fd84ee85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10edf9d3-908d-4136-88ed-ab947b803500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbcabdf-c2c0-4305-ad37-3dd0bd0fa1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adf40182-4877-41d0-aefd-8f0d459fcd75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe0cffd-bd6d-496a-bd3c-2ccb4d55434a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0dfb39-f90e-4fd2-a5c5-69d54b286a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d129475b-9963-4700-bfe3-fd9970f2b995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916886b3-d0f4-469f-9b73-3a83d6d1171f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "646cc7e0-7ad0-4393-9de3-ce0e14a0f46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf817054-1605-470a-92a8-bc273c12aae6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9490984e-0fe7-4050-9cfd-3ec62f7f1eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02804ca3-aab0-489e-b193-9ed400b4d7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b719022a-73d2-4150-8263-0b2890e99cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e3a4749-a867-46b9-8ef9-fc40612fae2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567ab59d-7d06-424f-8c73-d5b8374f4807",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fec902f-c837-4abe-b86a-ad189c3d9765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db1849f-1c3a-4fd8-aca7-71ec379b3193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aff736b-50da-4fdd-8278-59c84f983c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "28bbf669-a2a5-4e90-9c2c-0a384f6184e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83939654-35c3-42e3-9f94-ab8eca2659f2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b73dbf-0d2f-4f97-bc81-67bc28650565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a233c0df-5f52-4d57-bc54-16a6bc29726c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88889de7-7f56-42b8-8486-5ce867ae8a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c94797ff-1110-49f3-bd15-9e70bf41e8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999a54c2-9bd4-4a36-b7b3-3602091e476d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98dc561-0476-4007-92af-d92e43b09983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9a3667-e351-4125-a6c1-68780fcc22ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e37f13-4670-46b0-8a27-15b28bdbd5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09393a2b-5035-4d12-b8c0-ac1b0b146a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631f15a4-a52f-48b2-bb0b-53b2c0ed6c86",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b25b330-9a62-40d4-b06b-480d1ca2bdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2500b65-5002-49ac-8a5a-8c6df2dec8b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2511914d-783b-4516-a749-3ddfa86112f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "354c8f52-2c04-4c35-8907-396d2015f958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e55347-1675-490b-ba2a-52f6685e20eb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723394e1-64fe-4a8d-b42a-02dc50a090a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6963b21b-6f4b-40e1-9212-6db636410efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716dba82-976b-4e1a-ab7d-0de453cc16ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60884229-9004-426a-b6c7-a7687dc4305d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a8a5bf-81d1-4b6a-a8ae-3b36c2dcf339",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e03a66-a954-4769-864c-3b31a62c426e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f61ff97-ccd7-4510-a97c-8cb34450e5a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae58a28-5c0e-49ba-b026-bf5d8164441c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9da6b7f-5616-4b01-b85b-83638a48c941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdfa7e9-fa59-43f1-a83a-86a0b89cd5c8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2ca081-01fb-4a7d-a15d-caf55f0ad6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e5cd23-b785-4faa-b3e0-40f325df0dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cc0f45-391b-4649-9f04-6fa97c063563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "17185781-e645-49b5-affc-eb52ab0b08fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fe0667-2f32-4040-b4cf-225e97237294",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87ee6d2-872e-4c4f-94f5-146118b835f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0f9dbb-a9aa-43dc-82be-b893da06fbc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1593738a-e3e6-4be1-8d64-34ddd4ecc156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dbcdaef-e0a9-42d8-abee-fa04a09929cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dab9b65-07c2-449b-a2e8-73eb59e15f6f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44aa9099-b674-4b1e-aeb1-2f1f76692671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffdfe80-d559-4331-86eb-295f391df81a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a981428e-d9c6-422b-b6ef-7dbea12196af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "caf47c04-ddd5-4957-8479-dbbc793dfd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738847ad-adb3-466d-a02e-36256c82ddd5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05eb7410-a729-4589-a677-a9b8c6d154ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1f8b68-6570-4812-87ed-68c31c1def20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412724e8-3594-4a87-953a-dea537be02fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32ae01f5-6262-40a8-9405-e43e7429ffbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abeea587-c167-4bfb-9e77-7ce1d03669dc",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501f6c17-18c1-4a83-8363-8f1ccbeed89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd656d6-78cc-4972-8e4a-64054d2bd68e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f7fa9b-ff98-4175-b13a-5f8336e925b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da41245d-1ce0-4082-83cc-3c744407f791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82656842-153c-4e0b-b396-6580f71a737a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b06c870-fb53-4bc7-8f86-9e29500c41e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ff006c5-21e0-45f1-966c-00e9568ba773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1a8d16-99fd-4352-88f5-da751c7fec8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d21191-344a-4f86-a4ac-ca51fa15654d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4813d0f-90e6-4b8f-b35f-ac8572dd7ebf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57195d0-db32-4ff6-9531-213cf474e233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c027b1-39d3-47c7-a5e9-693af67ef98f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39e01a1-3fe7-48f3-a458-d6d28f5ab300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9dea2a1-ff68-4885-82cd-2b2e172e222d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec198642-5c22-434e-9161-0149165f67db",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981f0451-3c85-47a6-a4a4-f5294f7a7f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ce0041-d7e0-4638-bd71-7ebf9988f28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b4345a-5870-4436-9bb3-4b1f6bc1b8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10c0e4b6-1d93-47c8-932b-a2fa5b07c8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87544f51-6e4c-41d5-996b-f15aa1568ae4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13df7511-e807-4cb4-bea9-ef3c76d6de43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fd9706-4d01-403b-a5f7-cfcd4ca94a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a640cc7-fd75-4010-b4d4-71e5e2e7435f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae87167-ecb1-40b2-a9f5-362461cbaff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a3e3a7-7171-4c9e-a520-dcd4bf6b2ac7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2baac69-c3ad-4d68-bcce-af2cfd81544d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72aa34e6-0fb3-476b-bbf4-f12bc97652cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141ad6c8-7045-4252-a4a3-f724b0cae2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "643a672e-6212-4e58-8322-b3669e90c895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3793dd-95f6-464c-820d-9cd823251957",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8c42f8-22d8-46cc-8557-ea3f1701e405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3c286e-3e45-43fa-9642-ade88ce4b6cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222c3780-2af1-4bdd-b299-929824f9716c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6778c278-bbd5-434d-a3fa-78f01a6011b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8afdfaa-b3a5-47aa-8a23-63e08b4e754e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d0d215-7f15-4a0c-8424-f1cc04cee42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1688e71a-e602-4244-9c3d-4515aa27c943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f35043e-05e3-4697-9bb1-af57e4b765ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cebcc27-65f2-4752-b11b-63b25c6e437e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a21ad2-7365-44da-87a5-5fed2c31c8f4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3d58c1-9b77-4ccf-b0d6-88b6f9679646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9103a5-8c8b-4635-b7f9-c8dd6aab1710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c6e8b1-e15f-4b15-add1-65dfd93ad7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "98d98ee6-7c89-41f5-a3f9-f0e3ebc8cda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb902cec-7b3e-44ba-8741-20b3596e00be",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2687dad4-3977-402a-a102-498173fa8b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aef02fc-95ac-4293-ba34-03cafc5d5ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cef72a-8b81-462d-be97-29bea23cd2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3c441a-ff2b-4667-9a75-6731b03b95e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f63f9fa-75a6-4850-b4be-70680082f1d7",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac01d984-c0a8-440a-8825-406df7b6459a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9b983f-eb34-43b5-952a-ca9bf9f86c97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64606032-003e-4d92-93cd-b62e0dafe6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05914b58-9a04-4a1a-b440-d0c59ef64ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6040bd-0afa-4b21-80f3-322f87577dd9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c1a240-1551-4d2a-ad6c-d4f89bbedbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7040b278-75b6-43b4-9403-e5d342d361de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc563d91-9cf1-445b-80ac-9bb52c36a3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc6ef2a-b1af-4ea1-abdd-fbb3666816d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5953641-30a1-4ff7-aef6-adc88ac9507e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bec9928-e563-49ea-b7e8-90e6c1e53bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0893de87-8a70-4db0-b504-e71e99821ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a03e68e-e469-49ed-ab36-a28a88f3f389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e78035f-efc0-42cc-b57c-dbd17a624781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff935ced-d65e-416e-be74-dc908254b615",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed49801a-233a-49cc-863a-a4a13e04b4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d9a9ce-a892-466f-b2c9-472ee41ae5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa16af7d-39ca-44ca-93a7-ed3a61e3b212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "62861e48-2f18-4ec2-a660-0a79b52b2dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df60f71-ef3d-4f4e-afed-4f3c39576b88",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef7bae4-4aaf-47f4-bc99-6e92a7d2615e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be607ac1-d9dd-4fba-ae2e-5ca8c9709748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caaeb67f-6e74-459e-9627-da2c4d0d4c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8077d556-027f-4109-800c-881315fc447b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6511fc-a86e-4882-80fb-08eb0a358260",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb0d08c-d27a-4689-be58-d5d18bc2b6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c18fe2-725b-446a-b3cd-7df9a3e927e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c058b6-4cf6-4043-8075-6560979c3034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae14e229-a3bb-4674-af00-87968d9ade72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea08d62-a1b2-42cf-b9b8-16026f146aac",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8501db50-b55b-40f5-ba8c-fa7b3c2659d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a612dda4-6682-48ad-917e-7507ff56e4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88397fb9-5990-471c-98f0-d19e5c5f849d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "29bc5c51-68c2-4263-8daa-0d1feaa85175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1054c0e0-3a00-4c8c-a47d-9316e0b5c191",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799f317d-6e88-4716-ae4f-fc87f15413d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a628d94-1ead-4e85-8f61-26ee6baa0b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f88b8a-b089-48ae-a01e-53f0990dafbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3160bc84-85bf-4b49-81f7-883442c9b27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc22516-43f7-41c8-bb06-bd3f884b16c6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f2acf0-0d9a-4b26-ad00-7d34f86fc748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85584d4-8356-41f3-acb2-9dcb22c3524a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b97211-d37b-4cf8-9406-1bda6817f624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d383c420-1453-43c2-b0b5-4d77cba50094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43535afb-a94a-4787-8627-24c5bff03c0a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ceebc83-65fb-4c57-bc5e-d3dd167a4f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a46b30-a462-4909-911c-b66cf1591524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1109b4f-f135-42d1-9d9b-35aa437de3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9962956f-cc06-4f39-9d5e-3b8c19fe9fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d5bf16-4526-4fb3-a19b-8846e52f6ea2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8bc773-7efe-4518-8d2c-1c5d7bcd2edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056d8317-5cee-49d6-a1cc-608ad8201ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd352e9-c98d-46a9-a97a-74d961817d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "edf4c94b-3334-4247-9859-f70dccb6e1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41d0f02-83d4-4779-a3e8-b4176f52337e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5fe8f0-9428-4d38-b74a-6cbd2af0871c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fefba135-9244-4101-8c8f-fb8d321d012b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da5375b-5267-427d-83cd-9ed6c8868e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "023d486c-6dd6-43a5-b9dd-ad33dc1b15d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8aa9d0-bd7e-4dff-bdcd-055431e997ba",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a88b5c2-b559-4126-80cd-adaf8d7502fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08adff88-dfb3-4b2d-bed2-519dd08a5425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b86ced0-5202-4c93-9b59-48b45127380c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "069a6390-e617-42ff-a44f-35f48ae72575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52c5cef-56fa-4e19-998e-4dd782bd25d1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa51818-06f9-4d2f-9dea-56fbbaa439c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c6181b-a5e1-4407-8cb5-e1b0b706de10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec32fa7-5fd7-4183-b4fa-a7eed79450cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fee67fe9-5028-487e-a32a-8962b3b4c2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f959a742-e4d6-4048-b082-9493a2f2ead7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5576a4b-7c58-4ef8-9378-94e46d1f0492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8ff999-dd47-4276-8f59-ca63b708c12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da779a4-cd7f-4f37-946f-8a9a49480955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8b8538-ca86-41ba-8bc4-41a6fce58550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102a4361-85d9-4a7e-868d-d5dad00c6c15",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e230bc17-de50-4468-835c-94c98167e989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43105369-78ad-4c22-be0c-6d7d7378ff72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7dd9c6-e928-4613-b7ac-57e4c6900f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0115901f-7002-45d2-8d43-5c03d60bd48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a4a54d-0d7b-42a7-aa30-301d6f966705",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8289621-a071-4993-b49e-f3302e2bc5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8aee996-76f5-4db2-8a25-ab9b89ff4c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358271e1-fbe5-4b41-9563-81d7ebc0cde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3aeb74cd-235f-49ab-9ff9-cd91eba803b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cebec07-9338-488d-8328-b5aba07ea95c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481fc056-7129-4be4-8988-9d373dae28ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb30f8c-2a09-4aee-86e5-f84a7d9576f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731ab6ed-9a2f-4f35-a42f-1f90705661a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8907536d-7234-4436-af7b-8321ad19bd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e28dc9-e6ef-4197-aff1-0d3a87026946",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb10435-c3b3-48b5-9a9c-4a7337a4bc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bb4ffe-6de3-4e87-b0fd-dd04bb30cfc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dab1b3-4c8e-4e72-8423-daecefe26a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fe775f-81d4-4a82-bb28-0bb3634986a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d1aeac-e09e-4a82-a522-91e180adfba0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13188bdb-7890-4d28-8462-c8257ad3843f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66e40ec-61d7-44ca-b02e-bd74759591a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea7d9e9-a2a9-4829-b981-94b10312c3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4bb89c2-c325-4ba5-aa08-af2061876464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04de2f2-eccc-4cfb-b32d-fda683ba043d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb17d20-135b-4b56-9560-5e5a6f039eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43433cab-25b8-4bdc-a99d-3892ad5cb9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7aa7e9-4d1f-4b63-804f-0d6a98bf615c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c58a901f-013f-4b01-a495-89fb89465c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237d36a1-418f-4da3-b4dc-2b135dacc32e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3648087f-0af0-458f-b14f-f6a0dd985f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aeccdd7-6bde-4094-a99e-f01f8b1c619f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2802f81-dc30-4c70-9119-8420a5bd733f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcba64cf-f1fe-45d8-89ea-bc2aeb1289f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebac7d51-3dae-4595-a89a-a1fd54430805",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68627bf-c426-4ba5-8e35-d6c462baa709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54af63b0-e8be-46e6-8398-23419f4ff58b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462b277a-313f-48aa-8dfd-ad10b76d5762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7125ee4b-52de-4ae9-bfc6-1295845d566e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3e7d7e-1fa7-43cc-a114-f0f1ec5a4e80",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32550c82-18c1-475c-8d53-caadde4c574a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df03a38-525b-4f8f-94e7-342c52b810d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f56c14-bbd5-4cc6-b8d9-f26b74ad667c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d9758e5-56f2-421b-a88b-d1335880df68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4cb34cc-20af-4405-8d67-45e13d2669db",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9266f477-bcd7-4982-ba48-6297f75c17de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a3f95f-c8bd-4492-a32b-a42a94a2ecc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca63b540-ea19-4d0d-a407-b83b927075fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8dcefa51-3de0-4edb-ac1c-d02c604bd283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d90b631-712c-40fd-a643-f2f94ba059ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1ec0ed-6c87-4eed-a3e2-95daf4b22c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91e9c05-031e-470a-9534-da236e7a6a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a42821f-6146-4b1c-819f-a179f013c089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b22b9d9-227b-43e1-ac9e-6dd83d2729f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb78f42-eeeb-4142-95d5-a95135f4f20a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b81c681-90df-4cea-9546-b941cbc1fe56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c36c7e3-c020-4190-8c3b-fad576718696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f11d7f-1b37-4312-aa30-285fdecc4403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4426cf38-5f30-4ade-b57b-af41e5d7e77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9b48ab-dc5f-4224-8224-03e2450ca9b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d97012-ce76-4c54-baa8-203fd6e19280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc76dfb0-17ba-4805-93f2-e129d1aeb2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b877cd1-f444-4c30-854c-f338be815376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b46a3722-1e25-4cb1-b1e9-5ce6c345b3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21bf644-f8ce-4c0c-9a1c-439b1bf04986",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45442db0-68df-471b-8e56-42511e11cdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d068a4-bd9a-4b69-b725-220e95fc3377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2514eb-4428-4e07-89ee-71d40b44270a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "379c2227-8766-492e-9900-b1486115f19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbfaae8-7f44-40db-9898-337d3412c2d6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12903e5f-e0ab-4db3-808a-0634abb88016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a000815-3d33-4395-817e-fee43cc3b66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ae5362-e029-4b94-af6d-4431c9a840a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "db14762a-6f7c-4967-bac1-029ddf4cd993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb816f40-9990-4ea7-b4a9-346afbec89a8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac89a70-d12f-4a3d-ac61-1566c6373141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebab3e56-0117-448f-8b4f-8fe283d9da2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8ab108-180c-4dc3-bd57-0b5b83fd2a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4814ae8f-02d3-4bf2-be75-23ee29a01844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da79074c-a494-4e29-adcc-23b00c929045",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d59745-cd69-4b70-8a9f-0a7a3fb8299a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba471b31-c33a-4996-8c6d-e28a3502182e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d78b752-cd13-460f-94d3-b1e9262eeedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b040cc88-dba3-47b6-93dc-4f46260c818a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383a30dc-747d-4a8c-921b-426be9cbd717",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa7e8a5-eb41-4352-8fac-f942884085f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2c1f15-c60b-40f9-a6a2-0c5fc36dda0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2dfe10-adf8-4aae-9566-95a77fae133e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d763f04c-243d-442a-b19d-f3d24560fd4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d195b4b2-2973-4ca3-9a86-9f0ceba81a36",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537ff830-dd85-46d8-84c5-c19d61fb8e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c5e1f4-3465-47a2-9937-35512cefb360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3309844-7f9b-46fd-89f3-5625ed49a3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05e3f0c9-f2c9-4a5f-8586-2885b3f52835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b432e3d-d284-40e7-83f0-0867b5997c04",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09445b40-1703-45cf-b203-ff8ed7695d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e30cac-f87c-457b-8fe4-adff03b4c285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a5f30b-57dc-42c1-a9dd-14e2495592b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e30b3ac0-681a-49dd-99a3-27973e1f9ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1eb274-e305-4f21-8816-f5decc26778a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220fd2d9-5cf5-4bf9-8c3a-a9ae227b1589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0a5cdb-6b48-4e1d-b523-057efb0ebd23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae229f5-9031-410e-a5ee-c882199b04e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2cea35e-58f7-4e61-a719-8eb0e4cfac87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0c3d7a-cd17-4acf-9a22-27c8f4d828b6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b41a2d1-c7c3-4c4e-b01f-edd6d98d3733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68366b75-2963-4d3c-a8c8-97b5a372ff32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe8a9a5-a490-4690-8615-38fdeaf2384e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "df058475-f4a0-472d-a9d3-7164c3e95f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be8ceee-b3d6-4523-b71b-8d05f35476e3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b941c8e-edf2-4767-b149-5ae429b7aa05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b745da2d-a3ae-418c-8831-42dc906f4fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d3e325-f3f0-4b12-b572-194cece84488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "faa5fae7-7d1f-45d8-ac0e-0cc294dc6dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2346eaa8-f383-432a-a6f0-a875ce2b5e5e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb978766-af08-4ed5-b9c1-471e8e060610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a1374f-40a6-4360-ba58-570c0ab34cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3740b9-8dbd-4ca7-8aa9-35fb6df8e4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "621460e7-d6b4-4a44-bb63-6df331dde978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ebfac0-7bda-4a94-ad62-a2ba2cca51c6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc36e079-6735-4a86-a5e6-1d4315dcae38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9900b7-a003-4081-99a5-e5e3c0c958d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502c1b5f-9db6-4265-b4e5-b1bca73649ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2ad600-4312-4690-b73f-ed16852c7700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a39b542-718d-4a9f-8122-51fdc0680a05",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8cef1a-84d6-46e0-afee-84c756f35bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc3d8b2-b420-4170-b726-0740db6672a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acc24c5-3e8f-4299-80f8-b3d5b9a4e789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcddb43a-3b34-43c4-82f3-27c75f84697c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892d7706-60f8-49f1-80fc-7c48cd2123d7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542a4e81-c60c-4e78-956a-89fd712fcfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09cd68a-05c7-46fd-8fb9-4061476319d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7018551d-7c1b-429e-bc86-a1561204e196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "15b4ac40-b9c9-48f1-8f89-02dbb60235e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce4a174-a063-4dbb-9d54-a7ef102466dd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10659a2-24a1-45ed-9a42-5b0e0de02a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92507de0-4aae-4aba-934c-308eb5f2b11c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0c34d5-68b5-48d6-8925-8e64bf52ea32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1b5e20-dbbb-485c-84a9-a9ec1775411c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab4e7f6-0965-434a-b5a3-1a266a67fb41",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df9e910-7921-49a0-be8c-d5540a100d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29eb6c6e-3ce7-4072-8602-05f643420941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3750c693-b28f-4a0f-90eb-29bd1348e0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f683a2-d5e2-4c08-947f-089bdde32f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6ae477-d1fa-437d-b09c-da3f827ebe7d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de0c862-987e-4a8c-b1ad-559dd9ae959b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4522f8d7-23ba-47b7-ab0d-2a54d8fdef06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139d43c1-5530-43e8-ac56-7932b24df61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ca0650-cc7e-47ac-a9ef-eae78bc0efe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b611311-2b8e-4326-87df-260f70d312ae",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0d3af2-6232-443c-81c3-8a59d1213625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0145ca-dd7b-42e3-b98b-7f43626a3aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea27f8e-b80a-42ed-877e-2f5040cab8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5652d2a4-354c-4eed-a945-c235a3d821b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0176b0bb-1db6-4c9f-819f-654bc1b2282a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b7f862-7116-4ad6-8960-4d736da1c9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97556574-76a3-4e31-a356-5d6da9198f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f98f6f-df12-4f57-a033-dc4d139cf942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbfee7d-a9f7-4389-88e2-5160983d2603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb13fbac-08c6-4ee3-801b-555dc749a792",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdd5630-926b-4913-a8be-24e49eed9030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11fc7e39-3963-43b4-b54a-b0e9b4d99d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036163a4-6be9-4774-9c27-52c23d223d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c25b51ad-ffe6-4b53-8f30-3423fb1fce76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d89e356-91a4-4b90-809c-df77bb743baf",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc215c8-adc2-489d-b3ed-2d41a5094c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5ed003-c5e0-4485-bb94-6cb25a85a6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178b22f5-62fd-4968-bb1c-e3292ad457df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "752059f0-8d4f-4f6e-adef-f73cbe8c0868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f741c7-6fdf-4744-b6c3-361ba70c022d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381d9c89-a073-470d-a3e5-bd20dc843bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b68f47-8bfe-4df2-97e4-afdea501a1af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed3a7e3-1d79-4cdf-99f9-4f2bf5586798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "531ced3d-6e74-4cd8-87ee-5922f2de7b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c2cffc-a677-4f30-b94d-f52e57df31fc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00d1d6e-b510-4483-be57-e629e2a7c0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e70085e-dc68-41dd-9365-868e68ae3929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53840e5-52f4-4624-bf93-c6515be5a654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b65895-0507-488f-b70c-c4d07b5bc5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c972d44-a713-455b-9e4c-cdb55361b675",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ef7807-5c25-4e80-9cd2-ee2a40424259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac9bd57-7acb-47b8-962f-6cb92fdfaa43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750047e4-2177-406e-9642-59e42f4a0e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55f16d5f-404d-4493-ac75-27888cd26d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08882f8-9bbb-4506-b0f3-9a188d3806c8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be933d5-491c-4f18-82ae-86d5276d4247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a7fbc37-43ff-4ca3-bd2a-3e44a7db8880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08965cc8-3e72-492c-810f-4fcfe3b929fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54789398-0b46-4749-8ded-cbc69c30ea03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d5f049-c241-449c-9114-7729bb375abb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320c3673-d9d9-4428-81a5-42a3203b6576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043e531a-8830-4eb9-969e-64dab4d1ad0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a523c3-c5c3-431d-b95e-d839764c1187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f92c3486-388d-4e1e-abc0-b0b45c5fd07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b098fa96-b368-4494-8dae-92b1d117f9f7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3123801d-f63d-4fd2-8eaf-b15078a2b34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab5d3d3-e574-4da6-81d3-53a3fdabb810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b076e5f3-4b2a-4a9e-8d7a-c2578a015676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c447a3ae-7e39-4d41-b9b2-8e7f33b3955f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d047ebf9-1078-4c57-9f06-effa42b60b79",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646a66e2-18b1-4f26-a95f-ad8b95e5ff06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ee614b-0632-4d74-813c-527763416167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3d6e79-1a22-4fde-8d2e-785cdde2b4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b243a5f1-a745-425c-8302-d73c33925609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6870452b-ca23-4093-b730-27e00232af9e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e53ea2-4e2b-4d25-b776-7bbc9ebc382f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af658ac-bde7-4e81-b3de-d21231aa7e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb7371e-7c41-4bb1-a8a0-900066325ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "785861be-3ac0-4999-bcae-63f89d4a32cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed3a641-cff8-4e74-ab72-17fb65d855f9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f8ed0a-9993-4e35-8fcd-ba0d786bb10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74db43fd-5135-4230-a736-0d990ae27457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388b63b8-1a7d-40e0-860f-40a59df60bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5331524f-bbec-422b-aadd-bff36fe96286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c72f3b9-898e-49ab-8ad2-c5b86183c8bf",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6fa6e1f-62c5-425c-9ba6-f775b56abe93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6a533b-3d1c-4cfe-94f1-d60bcf8a7530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2284497-d1db-4fcf-b37c-fc6bc173b48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "adcfcfc7-fad5-4ddd-a62a-ddd6d6471512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5365adb-5de7-45f3-bb39-8b7cf3b5c547",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d9c377-0cb8-4665-8c2b-7909645d8957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69134236-0e28-49f7-8119-5d4989c001ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89cd887-0dde-4052-8335-d4f7ac318b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddbc4fb4-4dc3-4de7-a433-9482838550c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23893fa2-0b55-4c30-89c8-988c7ca49333",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3cd382-c790-46df-8d25-4be4f7f4d595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fe46f24f-244c-47ca-b826-8bb7b166550d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068af94d-82f3-483f-9b09-7b22ce32df5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "75104f26-2bf1-4618-8ad4-3c46716a3475"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f42bee74-86ea-4946-9073-4bb2c97774fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e906885b-cd2f-4868-8678-5bf59e29fd5d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a34ead-547d-42aa-a969-e8a454ac443e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbd97cfc-1f1d-4a30-8840-19e77476ff56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c7d878-337c-4c11-86ae-5a891f9549e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1d9a0e6f-8cae-45f4-ba07-0dcfc0725328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e4de85-b418-4ef0-b70e-44b8ae1cdfe7",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc926a55-dd90-4efe-a9a8-510b35b1aad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0164f64e-ba74-40d9-acbd-ae78da700514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3ce15f-ec49-4c8b-ab81-1c49dc1ac3b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a886ef18-5d31-4a1c-afa2-502ed5dc95b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aacab3ec-ae8e-4920-a1f5-aa5655267257",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c57edcf-4570-40be-b7e2-983994c30be2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "23a1c6f8-750f-4e29-b104-09257578ffde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42113975-a096-4f17-a719-4d00ad7e4dae"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec40cedb-21ba-43b7-a54c-3c6cb7eac2e4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "67e1afea-188b-4a6d-9a82-62835de8f63d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "99183ed1-48a9-43b8-94bf-0952c360b016",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49634f88-4979-497e-9d33-ff3dfe88a6fe"
                }
              }
            ]
          },
          {
            "id": "5199a137-fe14-4f6f-8147-cda45bc587eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b2c5754-6708-4f16-8e6b-34a9fa4684a7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a17ac2b-cce0-4db4-81b0-53bfa8321731",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a4a1c67-b0b1-42a3-9911-d7c8b7137913"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74f427f5-55a7-48e7-b23f-ee8b7af78879",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "31a9ee53-5301-4804-82d7-82436a2ed28c"
                    }
                  }
                ]
              },
              {
                "id": "edd9f795-8b41-4c83-95d2-b6645190f1f2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55a0410d-7998-4fec-ad17-4c4dc1c20454",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b67e9330-18ba-4a02-9599-16a18f353f5e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "498a5a1c-71f6-4fb4-8682-58cdc68dfb5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "75cc33e6-c5ab-434e-b559-a18d56440827"
                    }
                  }
                ]
              },
              {
                "id": "2e13fd40-6453-49ce-94bf-258c045be16b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7899fd6-f52d-4841-a4ae-e9524976317c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bda9313-cbca-4658-8de0-398f6ca117e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c474fde0-c9fd-4614-aad4-cdedbefd5ff7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "389cd4a5-31b4-427b-b891-bba1352f761e"
                    }
                  }
                ]
              },
              {
                "id": "a9e54f22-1a02-4f7d-8d8e-0d2ffcc3911a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7257865-0189-4eaf-9afe-f1153b314d05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c591d910-c157-4c79-8a81-101e2575d4df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fac9473-ad32-4c96-afd7-18a3b0424867",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "27780d4b-c374-4953-a81d-b123c173d9b6"
                    }
                  }
                ]
              },
              {
                "id": "ae6e9e4b-7d19-4b74-860f-1407e11927ee",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf594527-7ea1-40d5-a2a7-d2901416a5d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "639406a6-802f-4d55-bc60-f8ad6edb740a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d2805bf-3e0d-4ae0-af03-c433f7f6fa88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e7c648d3-ee79-4c3e-82d3-4d037b3e1311"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ecf3b472-e674-4bf0-a6b1-5b4171149dd7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3aaaf18c-78ad-4a30-9a02-d673a65c2332"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "61399c43-6189-4ed3-a074-493c6922290b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fcb2de3d-9362-4137-a383-f946cd13c921"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd322ce2-2fa3-4aa0-b6cd-97fdf33c7928",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c2304702-cdff-4417-8c2c-530d4cfc2e27"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f110eeb-81fc-43a8-9357-c53f392d7f81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce2e99ba-c053-4426-8a87-0bf72b8631bd"
            }
          }
        ]
      },
      {
        "id": "cf15e154-4223-48fb-9131-a24ccb9cd546",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "26311c66-a588-4f92-9439-852397968afd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1e8f0ea-a092-4723-ac25-e16b9fd39c1c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cec59792-61b3-45e3-8797-daaeaf25cd90",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8415209a-67a1-4d3f-ade9-cbe8dcc3aab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50cc49f0-36da-4f41-9cf8-3ab2ec9f808d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fdb814-46b6-4a3a-8d5c-04cef79b1de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f77784-b654-40bb-9408-f9fd52048f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ec1d44-7287-42ac-b996-8a12bd0cedac",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5cc0fa-9435-461c-870c-057d08411ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f17376d-8112-4127-abc3-d94df49b1ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d69493c-ac4a-4d3a-a333-1b23f0d9a916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "44d88adb-0da8-47a2-8384-7ae04a8afba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce20e42e-85d7-4578-bd68-bf69114b0b82",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d28a3a-7093-4bb6-9a91-1a88d8584c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e2bf26-ac0e-4acb-be50-05f27f8191b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4687879b-9b87-4f28-a9e3-19525be58a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd799d9-c98f-4a23-ac44-b928b352c005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86edc01-0071-457a-9f72-07363a571d20",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b16fbf-14ef-40d7-8637-3113bc94ad60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631d842f-7ade-446d-977d-88ace30558db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabc733d-8949-47e5-9aaf-00d07208246f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1faffbd-6e26-4abf-9a64-7719712c11e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdec577-f063-4220-b458-56362828e69b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1967df5e-53e0-46eb-98fb-826b21be38b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1630748d-b920-4e4a-9389-ebc93736d13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b9dc5e-ad8e-48ef-b1db-be6bf2479df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb764aa3-25a4-4d00-b638-050c30b910be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e22cd2-fcdb-47ba-8279-ff75167eae97",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4303e7-b077-4cc2-a381-182715bb0217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ade8548-0aad-447f-b615-0498f831346d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99877689-15aa-456c-becb-716b207d9328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "60c86d86-8154-4cba-b187-1c3dd3ad82ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8394047b-2971-4ecf-81a1-2a5777fad918",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41111361-b23e-4fe2-a485-63539fce21bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d50c69f-c9f9-42b8-8d79-dbd6afcc1db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829429eb-b67f-467e-aa0d-38568fca4d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c80dfa50-1b0f-4d02-a823-b544c39ce426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3dd843a-5141-4d1f-9044-4cb19690689b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bde43cd-1d6c-40bc-99be-b4b9772419e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b627e411-d68e-47fa-a1d3-ceb10e1b8d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0cc763-8726-4ed5-9d45-1f4323639b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3032d1b9-f050-4751-8d6c-e953e8df9de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fd9c5b-4662-4e69-a806-cf8b78bfaacb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbce9c9-006d-46f0-a551-2932ad5ef6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "991a7e97-db38-4eb9-827f-38d92313f43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4476243-ff72-4936-88d0-0813054117e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6b6262-9a8b-44dd-b045-69bf84337543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012a9383-dd05-409e-a1e8-f3e56ca9054b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b909a5-71ae-42dc-a279-3ec2cb47c8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d850945c-7665-40c3-9ce4-80d48aeaabc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df96999e-139c-4c04-902d-7a63d1852a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe90f02-6d90-4fc7-b616-9413568b61f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cb6bfb-39f5-4241-bb11-8e2d3f42b537",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd35fbbf-8359-4b39-8a69-945fb725d281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a11c8b5-ee10-43dc-a828-a3951bc0a0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50e04d4-4de5-456d-a822-16d6f719fb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c0564e-d4dc-4766-804b-495e7584bfeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3caddc72-9c37-44bf-bc81-bca693a407b1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5244197-b741-4896-9637-0c7c1dbdf8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be8047f-590d-4b55-83f7-8096cb2a130f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7407da4c-8e92-4ab6-b613-84f73a16b15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91fc3456-5355-49da-969e-3b40abfa8d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a081833-fa22-494d-8214-1cc613e1ffe7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fa8b7c-216b-425f-913e-264179451c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b06324e-c88d-4e03-a0c2-20ebe571d2c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1db874c-33a9-45ce-b795-6d46eb0436d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "806f2b42-3f4a-4a40-a6e0-4a5f3226fe17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5c3835-0aa2-4f36-9eb5-105d11627c0a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92790ec4-04d9-4ccf-bc59-b80d4fc13fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffdb08fc-823f-4ab8-87be-bae5ca9926c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acd5f59-8d6c-40ba-bc32-6a9fc09aade2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fafcbebd-8810-4aa3-bf8b-06bef14d6ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c55785-17eb-496d-978c-bb401387ada6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94292c92-ab22-47b0-9b79-0ea0ba50e2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7a496f-739f-4bd8-92e6-78f5f03af8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d1ef3b-0231-4867-b558-fe29312bda55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d058532-9891-4efa-81de-1030e30a4a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93da13e-3957-4b83-874e-1f3007db923a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5044e885-ef72-434c-af9b-8fba7e141dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95001626-0233-4a8e-915c-9945b7514d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acaa348-7a75-47b6-b8c4-e6ec4e3aa1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a850d7de-ef5c-4721-b09c-6d97cf176451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530aea5d-938d-4962-ad5d-96694854d327",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93480d7e-7f1f-4383-8343-d47fd38cf4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b8c801-e729-4af8-96e3-d24edfc26654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21f0ccd-eaee-4a96-88c7-7c4c36308356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e43dad96-de56-4d95-9210-1a37291751a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858264df-a41f-4f98-8c99-d11aa3ccd2d8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2939f7c3-4226-4bd1-b397-d29760cd42c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abfaa3ec-934e-459c-b264-ea5541859390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b66fbb-5f9e-4f80-954e-59d8add29215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "691b172e-e94a-434a-9c8b-4e66ecafd7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff623fa0-9649-4754-ba85-47aaa7646131",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc95cba-8018-43c3-ace1-fff290b72949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2841da88-7707-49a5-a3f5-b596725ca048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4defdd84-7793-46b6-a37a-7e1704d24f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba81210b-01a4-489a-ae08-45f4482be811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ced6de6-9180-47ca-b8de-48946299395c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7089f4cf-135e-4561-9a2d-72674e68a6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6782aff-ec9e-4562-9679-fe35325db087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c966f77f-6d33-4551-af0a-bff146671af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a893b63c-4d85-46ce-b87d-72c84c197191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97bcc806-88f8-472f-9ed0-4dcc2bc2cd89",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8f1de2-4f4f-4f61-a144-75f7f068ecae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278833ce-5dbd-4c33-91b8-2cefd4f7b6bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9048e5bd-6f6c-4b5e-9296-71d437e7bf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "396ccb8a-5ddb-4c7a-b3de-31c8b61c8054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9692b75-f11a-4145-a516-14c4d0e7d155",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d060c166-ac9a-43a9-ac60-749771da4c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72937d4f-17ad-400f-9ef6-9b7248fba613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11a1feb-3811-4ba7-8ce8-465963b3de0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e27b283-4ef4-49b3-bf6d-b43a45384c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded5e05b-f911-46c7-84c4-dce5c85e861b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bde3da-4063-42ed-967f-525b8e2a8562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d4e79ab-dfc2-454d-89b0-7633751b5819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eabe630-6810-4b2d-bd22-de7d404ae6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c3d675-1674-43ce-be83-6c6d3091fbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31546a4b-00ca-4c7e-ab06-5482cef8ed38",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2d2456-0212-4d45-a561-2cfcc7987a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41056de6-d816-49aa-9df6-61e2b6a28caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24423abf-37fe-4237-998f-c40109967dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dfa73fc-48f1-4cdb-9e84-f516af5d000d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50229888-68c3-4308-a2d6-a897132c388d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e44cd0a-1fd3-4d6d-92ff-0df609bf5ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f737ebc-0213-4c50-a157-6d88ddd9d6e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d424d88-8893-4eee-9bea-82462da1f236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b77bdd-8dd1-4f72-ba12-6043d62dfb85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bd132d-83fa-4e8e-b116-798c024c9b6c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e81e9d-9b69-4f16-a16b-913d5477109b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7748cf7c-9161-43ee-a113-b2e56e2d9f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83da83c-1df5-4732-8b64-2d4134a7c371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d958111-063f-4bf5-b740-c0333bf0b8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd408c0-7596-400d-ab76-6a32775d353e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d81da42-e59e-4650-987e-7a7b2c218549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "398a1b4e-9359-49e3-a72a-77520f361064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80dea202-8616-4b2a-b3ca-f28d11d79392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4addb4-687b-4a25-b707-5d79f5c64adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebf9d8e-7a27-42d5-aa7e-670ba73ad03a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0632a17c-413e-46a2-8c31-0c8e6bb00104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8f53f9-a676-4375-adaa-9e99a8d96ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5b43ee-d6a3-4f2d-b80d-2ede08d66596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c059aa8-e64f-421e-9409-ab66ad4300b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200930fc-bc14-4b0f-b24c-ff16336f66fb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede8219e-30d8-48a1-91d8-cec7f8efab27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ba8f6a-d219-46f0-9046-1ca66d1464fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5b8914-3c3e-4530-b000-7d453fee2c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7e94d5-a1d0-470a-ab94-1505dea04f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e3046d-5f80-44fc-9a13-c62e4790f687",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da09dba-1b66-4935-a28d-89d48094db93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9185ef6d-342a-40bd-9239-817d047dee74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17077e9-dc34-4bba-b130-cb599a612b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbdb05d3-3209-4d16-848f-6beffbe7b405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07cb141-c843-48af-98b6-c9d79474a614",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e55736-dee8-419d-b274-6da6ff2ed25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b1beec-d831-42bb-a97f-a7084733e875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4751ecb-c54d-446e-b88d-eca94d6b7eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bbba217-d131-4b05-b35d-15b44150f293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e2b4a2-cc6a-4fc1-a7e1-d6262be7f624",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080872cd-3d8c-4638-ba80-1b830263174b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd844ee-980e-499b-992a-f788f792ef0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e98e61e-8ced-4034-9318-e4fc747e50c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd4be2a4-d1e1-41e0-8fbc-eda45c3a1e28"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "deee7d82-38cc-4351-831f-ed1873d74382",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe5fd7ff-06f5-4849-86ac-f8851b474fe3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afbd467-a639-4fc9-8cc2-54ba9e4a52bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f3bff1-27a3-4d85-8c39-62520329eaaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fddc85-e0f0-4b87-92d8-080fec0f46f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31b29e78-9a60-4f12-90f8-3d3e9ecfa5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41c5446-042c-4108-84ca-0344e2da3e8d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb21a53-197c-4f19-97a9-a60adaff10bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d9195b3a-fc81-4df5-865d-6c415dab1e9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056ce0ee-1718-4e68-835a-5bd8abdc1ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d99adb0-1c79-4d8c-80c0-31a50dc4e58d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26c1d29c-0210-4a32-aa7f-f55d60db86f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19b5eadc-5a2b-4db3-9f8a-6b8215caf6e3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e338f160-4f0a-41b9-8325-0e62972b9a59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bfc793f-be28-4a36-8d8a-a11ad4bcab2a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3303317c-1a36-470b-9be2-c2662bdf7d4e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e29c7fa5-4f1c-4087-ba6e-73f86c1c7c63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7a1c1e2-e5cd-4e23-9f7d-a287689a8962",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "102dc347-dc24-4fa8-8c85-489207471ce9"
            }
          }
        ]
      },
      {
        "id": "a250c53a-51d0-472e-8f1a-07de6f22a83e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "81942c48-983e-4fc8-981c-2e461be9f315",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb130948-ad15-42f7-92df-bc186e62bdfa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "94e753b4-4fbe-4a87-8000-89c09ceeb498",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91dc576c-8034-4830-a8d5-d6fe47f44ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b62b766-106d-4b18-9de7-4738a1e1afef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ff5b0a-eb87-4eb1-9371-b272f0a10461",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a833f5-3800-4d59-ae8a-4f03b3c405bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a854917-eb93-4f78-9e75-6bb2273058a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab4a6aa-db89-4f06-8c2b-b57c1b2ba587",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129ba5a0-501d-4ce0-a379-67e6bb37b407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489ddb21-6961-4c1d-a1a6-b83b7b303fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92f8b24-416b-4106-b006-b93bffa84b7a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b0a28d-ca15-4225-b760-429fa81fca59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f952b465-8d37-4e1e-bb96-80c7e5fe8058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9312b05-2089-4bcd-8b73-23ca780dc121",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9107038a-6a02-4285-b042-ad98114f3361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56a795f2-c6d1-40db-b023-cde60bbf3622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0c33ee-5068-4e33-82a8-a8ee1fba9581",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a509434-768d-4fc1-95c2-595cebcab914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2604a200-3791-4a1c-9c96-cd74038522aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55042c5-26e2-4b87-a6aa-31534a858481",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6936bb4-bb39-48c9-b1b8-0c7cc8eb290e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8219a368-91fc-473c-8db2-aeff1155e3e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b29ad23-55c6-4d98-8ffd-3e4d4e7503fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed826a72-ff9a-4751-b056-1f340be70fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085f26d9-2895-4da0-a6da-3fdd52165940",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4e0bc8-72f5-420a-95f0-cb59ec6ea90b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f47c21dc-695d-417c-9cda-db5a4e2361d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cf06c5-1d93-4f43-b341-39aabca1137f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49322596-320f-4875-9718-d8b6b7ad3e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50511ed4-833e-4066-841f-2cffb75b1e3a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3f511f-e1ed-447f-b471-a513865de227",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74a06711-5a80-4a7b-baf7-1407f6ea6b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7d56ee-f70b-4b01-a946-8adb4b0e7b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc39d80d-c2ab-449c-a7aa-2a534af9662f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7cff7b-9150-4c62-830c-b32e2472313e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5127e5-6989-4cca-b8b5-730482335ce7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07a8c294-2875-4a80-a6a0-e7e94364ac48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc94eb8-8fc1-407c-a53f-8dd46541653d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c7eb78-0285-4339-87b0-5781b416704a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7250079-1ac7-48c5-92a5-7f3f2ea8478e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09732e39-7982-4c1e-a21a-a1fca02432f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256f47f8-087e-464b-9989-e44f8619e53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a44cb3b-b11b-47a2-aec7-0a8d945e338e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dcd9cca-d458-411e-a236-6dc27b3c4aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b833c13b-73f2-4f92-adfb-bd0a72dd484f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a728f68c-e92c-4605-8a4e-09a3da97e549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030e36a2-db0e-40f9-bf36-c1b64f2d4934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75816973-841d-45c5-88fb-86bff37028de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0a73d4-097e-45e9-a8ec-4a749b78a732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9839c2ae-b90a-4304-a663-4cf2b45c89e5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbbfa3f9-0400-45f7-9c64-855712aa1b5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dbbdf24-cc7d-4186-8269-4beb284b816b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d12716-2c1c-42b3-a0ce-cedeafee5fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8072ed0-8fb3-44bd-907e-11cf11597a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c024bbbf-f5f0-4860-afb4-f7fee5ca4d46",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfed2fb9-e64a-4a49-8dca-67e7f4647902",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f88feb51-37fe-4b41-8593-b43c7d0a6d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ceadd59-cc3e-4ed6-bb91-b9e9e35200fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff4a184-4620-4067-ac35-e219d70c39a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2484586b-ec2b-4fdb-bf3b-60a2b2c19eaa",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40b7091-f75b-4111-b490-21cd2c278f15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b88857ff-3020-40a0-99f3-9f25af746019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06d811a-de26-4420-bda5-8ada3a81322a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc80683-a7ce-4db1-8b98-313d89e2efcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d47c71-f3bc-49a9-8915-0c6990734ad8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af46f69f-c093-432e-abb6-4dd6fbca011d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "702e7c16-5d05-4e2a-8d54-084914422cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca88a52-06c6-4a46-a5e1-e4c41d7e2e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740a58cd-e091-4a18-aec5-d9df693aac01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3a7e34-cf0e-4871-bdff-ba238a996445",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d55be90-e1e9-45bc-a509-398d36ae0d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bea3f15-7afd-46a6-8c32-4a030b5fa4da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8b236d-f2a9-44cc-ab1e-916c441976a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b622ffb-e41f-41b3-a7f2-15131edf34db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e0d3c1-1705-4bff-8fbc-69d6935270b1",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03808749-f8fe-4a52-b71a-ad5f3c7c13a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41619649-51c1-4e42-8e0e-7a5e43425012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2f958e-dced-4dc0-bdd9-ae9242cc03e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b87747d-a0af-47a2-b4b1-5a4d2ccf6202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca23b091-ed87-4f1b-87d5-e867470b158a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47faaa7e-fa12-45ea-958d-9c2cb0d90cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0ba2b3-a4a1-4443-baeb-7fa5221fee37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8095425-517c-4006-8ffd-820f0c604f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35339b2d-8ac7-43f7-989c-1a6452b1d9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783d78ab-69de-4dfc-b4af-bef27ce226d5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7223a721-4f35-46bb-9053-161e5822e0df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7fbb744-a147-4a1d-8e88-50dcb3b7bc5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449f242d-1d54-49f9-b996-8abbd746ed6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23681565-b33f-4dad-ba6a-4d1f7de9b2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6c6b4b-bd54-4f26-ae9e-bd4f5d568fd5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745feaa6-828b-4bf2-9d6a-b93176578787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd94c27-b36e-4cc3-bf82-5ac54da9b038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac69c3c-285b-456c-9684-b3dbd0cbdb07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf1f0bf-50dc-4b60-a82b-f46d3b4c85dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fe0b89-ac8f-4be3-ad0d-c9e754ecd8a2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a0fcff-8c51-4edf-bf10-2876ae1cf448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81de082d-5365-4180-9ead-7484287fe513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b26f79-7adc-46d9-98ff-132951e21b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69af2c7-cb9b-4f0b-b7e4-fb07a122541c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3779f17e-f41f-4613-980d-af066140093d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b525a8e-4bf0-42e5-8c62-9308bd1f3420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f77900-86f0-4ce5-9adf-803058515142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527cd460-7580-45f2-8753-f8dfe142e7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67de6dc-af1d-41d6-9d82-338721588e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4940f43a-0fec-46f0-8b9b-76e70090b1a6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134eeac4-1f11-44aa-a980-526eed65fd67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874ca210-da1d-4a1e-b02c-79e865ea2733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a821b419-25ce-4c4e-9b0d-d6c1f05f1644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82db106-ffe9-48a2-b86e-8ba91a829c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24e1a7e-cde3-49cf-bb38-b271437737f8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5fcfd9-ed61-47c5-a701-54a0473f7f63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "169dca98-afd9-4fe3-8fb9-4d317988a821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0c1a0a-60c5-4c67-9698-aa9bb7ea9a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9572bd5c-488a-4c37-a974-6f828757a87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225c3840-6c3d-4ccd-8016-3708f90283b6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bf50ac-e1de-482d-ad99-d47a04b64d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b14be33-4736-4c77-a1cc-92e826732c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263ed506-10e5-4e67-a4a4-737e50b37c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b0088b-272a-4f3e-9689-47f450e7c71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b933f1-3889-429b-8ee6-f73463cec301",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249726af-8506-438a-8f6a-12b0e004c5c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f365d34-6fb9-46d8-9cda-3b7b87446f1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "317ef1dc-ae3b-42c0-a7b4-f5410cc172b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae67e95-1e62-4a72-b9e4-a61c0613ade5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7440b179-e562-4bff-b175-741e7fa580ee",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b8816f-ade9-487a-9b84-fc981ed8db12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc4eaa66-70d7-42d9-a7c6-272d623a1276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f607b13a-ee73-4e17-bbfd-5bcceb315c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bcd7cbd-30a7-4fa6-a6cc-91b66241ba28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05424b89-424b-412e-91ac-ac1a2d942248",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2924cf-f65d-4007-a5f6-ef42cc274eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f468ed6d-0341-407f-bc4c-af98d3bd484b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64719c7b-180c-487e-a072-91f6da9065bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205574e4-7a95-4439-b5bd-9358d3a1201d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce04be3-5070-4b33-a59b-f647ad1fe705",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13b167a-de5f-4d48-abc8-97d4550c29ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb6862db-c5e7-4e96-ac05-6d2784537157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3466e8-ea9d-4d73-89d9-f4fa3d0f3d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627f6904-38cd-4575-91c6-1df63447c3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc57eff-8451-4291-9986-e314e6bd0f47",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f94e506-8459-40ef-a816-db537e62ed89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b0f05db-2dc8-42a2-b975-5ece55b3aab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e22273b-4deb-4084-8027-c7e888a0e5f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99d3747-c634-4b74-bf9d-6cfa15f2fd93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f329a3-229a-4c67-b31f-1cab51d7b6cf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ffdbc1-dd39-4cdc-97f2-fe3851a7de42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fe5aed2-1903-4edd-876e-8daf7ba15958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c71bb0-01a4-4c3f-81d2-9bc33cf3ac4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61bb2329-ba07-40fc-b678-0c91d96726a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4a53af-95a8-4604-b1a4-596152cf0967",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bab1abc-fa25-4220-9227-8564bceb8bb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f2245db-60c1-440a-a8cc-b12aee0095b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb3c884-813d-4241-8371-f8ca51547eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a08d05-e7d0-4f1a-8667-718b080869bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c211054-e6e3-4a79-8aa6-c0033d2f74b4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a6ade2-1e5a-47c2-a0dc-1ce76b964fd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3ff9b88-cdf7-48a5-acc3-0313bd1b8702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e0f031-c43f-4760-a55e-99681d673f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c6aa9d-ab8d-468a-80a4-8bf6e2f6edbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91119d8f-ab13-44c6-bb7b-f259a4c05731",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a771fbcb-b85d-4b0d-91af-84c6c18beb0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb7974e7-fa0b-4b8d-9933-3f92b8ab84ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddc1156-ee3c-41a9-a3b7-77fb5390c696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c758480-906e-4078-b5bb-210bc1109358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0840a3f-4ca0-4247-a28a-6bf00ced0213",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb52c4c3-2a9d-4a10-b38d-59c8d580ecb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b758154b-1752-4c1e-9438-eea6e19764cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c055ab5c-f551-4610-8b9e-e66919c1340b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1a2a164-ffe8-4478-9001-782f805cc070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45daefe-a77e-4086-ae82-bf551763c164",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093f9245-ea24-44c8-b165-9637a1a369d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a0a2f5e-fed7-4547-857b-92b79611b8ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe40c19-5fd6-4719-833e-2985d1fc88f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c4d3e6-d998-4c38-90f0-733a2d99ab9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad013fad-424a-433b-96e8-ae2f752fc200",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12b9572-74ff-42bb-80ce-c77bca5f8853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487f7493-ff03-4aa0-be40-25e630efe7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb5c3e5-603e-4366-b816-7b28095268bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30832f98-6ab0-4903-bff3-8f0cb5fc7e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c8b4ce-2d93-4441-8d43-de59f6d93973",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be50e72-8f8e-438f-807e-a48e8ca5bb0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f858d92-c2d1-413f-bf4e-a52732f557c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8693dfd-d23e-4ce3-98f8-99cadbe51565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45bf65ee-2ff3-44e5-83ee-ae00314e7c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236b35ca-b1ee-4e07-bf7d-df467155b710",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22f77dd-e0ef-4146-8e14-36485a51eea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0903826c-7bfe-4fb8-8617-be788ea69003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a42fa9-308c-403c-97c7-85958ad899f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d356acf2-5907-4c50-b6fb-8ebcdddd18f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e9cf5b-1a62-4c96-aac1-d64bb4f9d125",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e03a7aa-0e9e-461d-a294-ccddeb476d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "967ddd5a-9360-4064-90f2-b78be5859f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7837bee1-43d8-4026-998f-758563262c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d47b840-ca16-4e6e-b340-a464234088e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4baf63a-ddd9-4479-8694-e29f64de2088",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a822f52d-9d5e-48d2-bc38-7ea289307fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1778a16-2505-41be-9c78-7e9df8dbe963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae9a4b5-e71d-4377-b748-985b4db47009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69495b81-0a56-4679-a8a6-887c17fc040e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582430e1-5a3d-437c-9937-6c68bdd53aa9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3095ce-4267-4e92-84ab-40807b1109ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d6507b0-5096-4bfd-9636-d013038c2fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "077e5dd5-7aff-4d1e-86d5-327707bc5f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe15c46-e280-4aa1-a234-96aac573c263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbde748c-2648-4b78-9157-c419d225de64",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b916c6a-6858-4629-bbf1-4d7af722f136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf615cb-f01a-46d6-8205-7409b1feee9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbaed75-5912-454b-83e7-bf4df5f9ed60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e253434-6001-4895-9d7c-89f840b179f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a51b0e-81d5-4f63-aed5-a8c1a9f28783",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5e55d8-178d-46de-97c3-c9f90caeb097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7e0ba0-5207-48fe-99fa-5f10da9681b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "273b2fcd-45d7-4a7a-a703-5102cd31ad1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f36e35c-d4f2-4fde-9c78-4d578eaba432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06773e23-12e5-4bf1-a752-5ec6f4536b7c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4781ec3a-5242-4f3e-ba7d-32c6cc430353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf367d32-19f2-4cc7-a5ed-a285e3a65e02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e5fdf3-c5a2-4e1d-8b1a-5a7e6b710dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c953dff-4d20-4dd3-a7d9-5d763aaaa03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b032aa-3dc2-4bea-b137-18a535562dc0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7c334e-9431-452c-9462-16127d98df5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9843e3-e463-4087-9312-d890f6e07c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d834cf5-b9c0-4568-a473-d4cadce2b4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07289cf5-4207-4446-b038-0c0c8eb75eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63f752e-30c6-4322-892d-b55fb9e51ade",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0c9665-5156-4c7b-a8f7-574b5244a0b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f826d697-c6b6-4475-a2ff-6f5deb479895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5994693b-f216-4c7f-a85a-cd17c1ed31cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03adb0dc-ceb3-4a10-98fb-6014cf6eeb26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908148fc-17f8-4e56-973f-372e1cc84ea8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e98d8bb-f802-4de2-841e-5cd59040159d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d368f4b-a234-47b5-8e70-2df966f3b204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "749a92d1-7ec5-4624-a176-39ac6d7dca68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493b1012-72c3-492d-9e6c-a839d21f6d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c640bd72-4765-4415-822a-c36a83000649",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e52c56f-d6e4-4a64-a363-966d7fb8a9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7794be23-1b83-4157-98b6-df2b6c11dd40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f28fece-9048-46bd-8ff8-2d533814978b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42f0f83-2a7d-4083-b530-3505bad6c53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cfd27c-8cd9-4c2e-8173-6cce440b0e14",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9582f93-fb69-4c83-bda7-29dd0713df4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeee22e2-0768-45bd-bafe-dcc1bd354595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182ef70e-42fb-42b5-a0f6-c85fce07666b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38184673-ab7a-4c7a-ae4f-1d00bbfb50ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8642118a-612b-4a9d-86a0-3ee55502747d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef21ca78-3be8-4215-8a3e-d821b377cc95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336f5417-4597-4c90-b5bf-ceebbc11b4be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881001e0-f87c-4b66-82c0-53b49afef261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8b5ccf-1ee4-4845-8828-33cc03e168c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0ab641-1d0c-4a48-81fb-ab78cfe43c99",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a12a3d-31b1-484b-86c5-fcd34b494522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fccad54f-d315-426b-9833-d735e03bd121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d3c994-83df-4f29-a7c2-fe18578724d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b6b062-8287-426e-9129-e02530c55f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871a9397-0137-4ae3-a091-e658675b0829",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58304ee6-6a9a-4938-8751-d78e5241e0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c60e5ff-8777-4be2-9716-abd8a5a9e249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8b77ec-3832-4281-98a7-1cfd40ab4c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7345d8de-f590-4c11-a11d-9b23ad57687c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cc972d-00df-4603-a488-5e554f78123e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8152a490-c4b8-4635-bdd2-3cc11b1b6a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d521e7-fbcc-4ed5-9e50-f839fe59e730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ed08fd-ebb9-480c-8557-966055af1820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e947ae88-78ef-430b-9819-d07f20c19d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08f0779-ac46-4a40-b4fe-cbf54a55e318",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc4a923-3b71-4840-948b-7bef0573e090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292dd201-d914-4bfc-b342-7ed81c251775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a232f28-b809-4531-881d-fc79b31cf4d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee93931-b0cb-4def-a428-77f60f43fa5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74559a94-e001-4ee0-853b-de39563c7606",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7afa68-63dc-420b-b577-e770f9232567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5929836d-e69d-497b-b408-b422d756848e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf6744e-436c-4bbf-a263-11600c242b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f4492d-3d3a-475c-88af-ddaddf994106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da4a0eb-a207-43d9-bb4c-84dae83dc2c4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85823249-1d9b-490e-aacf-b23379eff53c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20cafa7-e428-4df2-af9d-bdb3e7dd9239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "942ce63e-4647-4209-873e-9755e0d36889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa27581-f01a-4c43-8598-ddb4e0a2e0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c953b1-96ff-4101-b84b-7530fa10d1a0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777da1ce-4de3-4ae6-a3d0-95266692396e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfcc55f3-b150-4ddc-9b2f-600f4e7503a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "677d7c47-c260-48c4-84b0-efb9bd55ca74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4fa914-d47b-48e5-b7ab-84e366fe3f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e70682-0989-41fa-bbd4-68f6d7ed5531",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f884be-339e-4bb5-989b-48ab7c84f6ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9abb2e-e195-4e1e-8360-694337ac98c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b595dd-86da-4f3b-9ed2-de78b1876707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59956691-0096-4b18-9878-48f460d2fffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c4f57b-1f12-4e59-abc1-c7f896297206",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9fb59e-7827-4524-835d-edfbd60f8020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399bafe4-d7e9-462a-9406-5ce8f23be3bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59dd415d-b6df-4ee8-9bd7-741f4b6a6171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c5f764-9ffa-4e14-8097-1fa03e0070d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11010546-adeb-447b-ad2a-a26a0d7b841c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f089293-71a7-4543-8971-cefd7016f37e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70573ffb-2547-48e3-a086-ae12ca03ca47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9752036-1188-4e65-963d-b337c3b83ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8f5f15-20c4-4bb5-b456-e78ec9096e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a190a8ba-ac00-4845-9a75-1afce78c996a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3132275a-c1e3-4084-9a5f-9f1c1efba2e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e09a115-0a89-4550-a59d-0d749645ca7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b164972-aaaa-4a83-9ed3-5258942786b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8392967-e4e0-4b53-9ac6-a4edbbeb38b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae828c3-9479-483c-8d00-41816dbef340",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41142657-01c6-4d37-a556-197d3529a791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116bac70-e93b-4315-bb21-05a9c1cf21c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d20b6c2-cb0d-435a-969a-d2cbde308bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd080cf-5218-4d51-9352-0ddfe6520317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea1765f-9609-433c-aca7-aca4b8d1f7d0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c439cbe0-fdd4-430d-b19a-991b921f0986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66f7c870-351b-443a-aeb6-6fe7115a4cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "578d390b-ac6a-43d8-86ac-d4420aff6467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3a5eca-0288-4cfd-b8c7-46160d0c8a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad34ec10-0e55-4514-8fec-b5d23bb993b5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c34c49-c18d-4c0e-9aaf-aa9327bb5730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "253c1d2e-1f0d-4a5d-9e95-b9109a1fc9cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5bea08-afac-435a-b769-aad1e544b75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c3cc7cc-33de-4bb7-a1aa-e8550c0bf0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c0fb61-5472-4a65-b2cf-bdecb1dc8aa2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120f6448-e8a7-4a06-9913-77acfd4926a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a7ede34-b678-404d-89cb-e68e827aae27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f84df0-b1aa-498b-85c5-71405dbf06bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee979a2-1a5e-4ce7-a0c6-8825a64be5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721d95cc-368e-4e3c-9427-ca132c0e2b6f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fcaa95-1052-4a5e-90fd-af8269d42aea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32c4d553-c3f8-4987-8546-3f344eefb180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0842da79-aa00-4b55-8bc0-9a76411b608f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459a73fb-0b77-4fb3-ad92-13ac4149e23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4affc3fb-6af9-48b5-8e26-c67f5b30ae9c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b440033-82ac-41bb-9551-692c28187f0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a71702-c8a8-4133-8213-a0f7d306aff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24625e88-e2f9-4b8b-a29d-3ee0a717a3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5aaa9a-b572-457a-8349-9e7ac4041a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2ad8b0-41d2-42fd-88e4-85f83362a2db",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f99e61c-ff3c-4576-ab90-a58ef3f54df8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b7d672e-631a-44a7-ae0a-e92c5e1345f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfd876b-c14f-426e-b673-f2aeb74ee0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0efeacd4-819d-445b-813b-d93e9e158ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09095dc3-b75d-4aa2-82c2-2602465c8718",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542898cc-f0c7-4bcb-850d-280a6df25fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3667d06-2dd3-4fa9-9345-c32c2cb347ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "052f029d-d135-4148-9ae9-ca0a1249f43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d20b18a7-6302-4c78-b524-a3fb9ea188ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e6f1ab-1c3e-45dd-aa99-64922f0ba379",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c810bebf-635e-4733-b76c-9fa0272a20c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9307c0ad-a824-4a80-bf05-d3c765e9d029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5ab11a-c1b2-4c4a-8235-fcb9791fc02d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035b8085-59ea-48ed-9c75-63919ca345a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae920fff-12a2-4985-8161-4fcd2547ff41",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8f6a20-d0db-40fc-9a6a-067575176586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20d154ad-c1f7-4fc7-8394-6dd2c56c2e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb802ec-f122-4855-be4d-3afed652b91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cddac4d-1055-4171-860a-1f3577c87fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6408d5-2429-492c-b9ab-f4cb817c16a9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b17e2f-ea38-406c-86ef-07ad9cfb6ac1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19a032ad-b90e-490a-88c1-4363a65626ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f34db9-d42b-4932-aa25-35b4d97b5f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee2f15d-d9ff-40f2-8083-51cdb27aca80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3214af7-53f3-487d-b3bc-8817ee0811a6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788022f5-d3eb-454a-8bbc-a1b2eb4e8927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62eefe49-d051-4e2d-8e78-6b71f9add45a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "380a2e04-b380-4d30-a9de-3897f88c9e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9cf6f75-e7ee-4fa8-92b0-2d1064d82385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5adc26-83bf-4580-b903-6efe7539b356",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072fe11a-5075-4b4a-b8ce-3d5bb1244a55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e3ec8d3-de28-422e-8f4d-6ae41d168998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f6767c-f48d-41e5-8833-054ebb4b493d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0b0dca-eb61-4f20-9742-3926e4d6e9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cb7337-3c4f-4ecf-a643-fb64a98608ce",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af508f6-10b9-474e-8e51-cdd9d4015a93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a9ad56d-2aeb-4087-ae14-071f64917b7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21118ff4-69ed-482e-8b92-3dde0a030f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1ece0c-f7d4-4ded-9741-f508e56f9962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014bc58f-1e79-43b7-a65d-1b27c8ae4eed",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11df42e-2a0e-44b4-9c67-9e2d31b4769a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb4e7745-e569-41dc-bcd0-749be36a6e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf2a0fc-74f2-41ba-bd13-fa2a52d78eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c5dd6d-deb5-4a22-a40f-8e5683e8584b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28835ef5-bf7a-4ec6-8cf6-0430d7ef0364",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5edae8-adaf-4596-bc3d-bb63a693cbe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "839d0ad0-60b6-4e97-b9d3-ce1e525eb81e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e137c1f1-4da6-466a-9764-1b476b80dd6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2e131a-e8d2-4629-8203-9e61c31a9821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c767ee-2a92-48bd-9a3a-d112e47f1412",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f429ca22-4158-4503-9d35-ed075f621f7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62cbc85d-ccb2-42ef-84f5-cda78f34516a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31588d65-e707-4170-bb18-4b495cb349a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89650436-02b8-463a-995e-b5a3121884c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3b3837-2641-4565-a2fb-3a6aa1505e8b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecec62b-ab8f-46af-99d6-44fe546ff569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b47c44a-cdbf-4a69-bd07-4c8191632aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc599ec2-aa2d-4487-96f0-71033f410a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19a1f6e-fda4-434f-a55d-0d18e6073b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1185597-fb17-4546-9232-c2087fe66371",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62414ef0-e0ab-4ff4-b9b2-39bf7f4f2312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cef86e3-c123-416a-b19b-6ff96ce82426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c6523f-81e4-4e4a-b4bd-9a99304ecf8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e76767c-71f4-4932-9c91-f297055de15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1566f0bb-a1ef-45fe-bcad-597cd2a45729",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f570d23-4322-4456-84b4-c8a03de9802a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8030949-e76d-48be-a85e-3b98ac216f61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19273c94-ee04-4676-8abc-91d439ece709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756a7e5a-813c-419b-99f9-d01eed537d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c3bf14-ddb9-4332-8d00-f6e5c306c2a4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952cc378-245f-456a-9ea2-3a9b74c9c809",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53e8d2df-3e7c-4bfd-b314-72ca20da75ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78a0fe5-9500-4a22-92f7-9cee138524c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b71e3be-ed17-4d69-a7e3-fa15d7aa9b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8342edf-301a-40fa-ba2e-c9c777b97821",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977983ff-c6ce-441b-8732-35fcbe4f7fd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69d7e80c-d080-4013-90bd-c503ed8603f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f48b01-7015-4eae-944f-1c59b5fd91a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07d4e72-bc8c-407b-a56b-a8f851887fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3330db-ef1d-4a96-9e1a-b3c371235d80",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff33d1c5-ca62-42d0-8820-104c481d3f00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd03a375-aab7-4197-8842-d0c137f161c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8b6962-5e0c-40ba-92d7-f58a72be6c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6684153-e02e-4d18-ab22-42f421feb56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f2ca3a-28fa-4f71-bf18-45cc1ec09d3a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd714c1f-e97d-4dc2-932e-f4f12cb6e833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd62f9be-c105-4029-bcbc-d5c51eb37cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47cb3d4-e216-49dc-84e7-1ebcf6fa9932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb1b317-39ca-476a-b07c-58db3e96d7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a4e98e-3147-451a-a5d9-1a83dd35d9ea",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d83977d-81a6-46b8-a0b0-3ed7b9345c1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90989103-8903-4813-86e9-a86c5596c0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb7edf6-dfe9-4b1e-81c0-637480f27873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb063604-11cf-4808-8fd9-a1a5bd1fe6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019b819a-7feb-457a-8cd3-a9933000ec74",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920d94d3-45f4-44b9-a4ec-2d20e1a2c152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b99cc64b-d60f-4d6f-bdc9-1b19f01ca26e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4e783c-1028-4298-a07e-ea599fec3729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21129c5c-43f7-4c5a-bf35-03379e9cf1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7b76be-1122-4d9b-b7b7-e064c85d05d4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccd069a-4113-4d83-977c-e6247b02c61d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32b2df42-070e-4f89-acb0-5d492dfa4155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a71b82-93e8-459c-a3f6-ae6e62eae5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f015862-7eac-49a5-ba39-0f4f9e453007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b34114-eca2-4925-8fbb-5387cbb6c17d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe71196-7fb6-4462-a759-7d9017e60c50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bae4194b-7aba-4b66-9cf8-8729ff4b19a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b56772-a3a9-410c-874e-88d37eb290f8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af33a72b-ba3f-4e18-b270-85ee679293b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79b15da-897d-4cfa-8d9e-ec587a4fa6ff",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e47bc2-78c5-4f3f-bd41-516727a6ddb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d3a9ce-523f-45f8-b4f5-64ae7abc2ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e179757-5f45-4fd2-9b21-e90e2e492a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f1ad7f-2619-49e0-b5fa-2b26ed055899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991375c4-b497-4d77-8592-08a741ef79d0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6f4625-8b0f-414e-a83d-10b3c3d52c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edb5829f-ad33-434e-9ade-5035685af705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da0c6f5-ef70-47a7-aadc-2810399301dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f088e4-77a1-42f7-9418-2f3e817aad8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739dcdac-0e16-4e39-9786-39f8b9b04908",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f11dd7-b516-4ddf-8b26-917d8b501025",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97977fd3-b9ff-4dd1-a91f-e98b7b0702a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5832e3db-7ac5-43ff-8c05-38628ba44683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2d4a1e-8d96-4ca8-a9a2-7d4d49858789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b406a7f-0e3b-4a85-9295-b920a689c73d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05c929d-5b67-4192-b5a3-bfc0c7fec54f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88050d2e-43a0-4c49-8020-55788f3bbfc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ace2190-2f7e-4422-8bfb-f1b28d15059e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03112200-9da3-412a-b4f0-9e2000b5afd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6d1a14-4293-44f6-9271-0d4aa435fecd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b935ee-855a-407e-8f9a-d30924b88288",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "708bf72f-b4dd-4c0a-b709-de254d94a7e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9c0d30-3c3f-44a6-bca2-69d780ae04ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0080eb31-57a3-4464-bcfb-1ddc356bd289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cc806f-e6dd-4748-a6f7-629af7729652",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ccfed7-c26d-467a-a90b-4bb6f48d24fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34ad2ce0-d0c0-4b07-b327-ba1c128d3d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c72a05-c4bd-4c48-b4b5-0fcf2b2f0327",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28dc1f35-a614-441c-8653-13b4b1c74b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd826436-bd33-4180-8139-c0149146c5e0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f244674-2f47-420c-8544-2327085a19e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c754fb98-ac98-477e-9938-51d2fff94f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d8cddb-b4c5-4af6-b84f-19b0036d48d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17e103f-a887-4a76-9b17-e3e6e2b45ee4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef638803-9cba-476d-b1e1-a9f8823fa4e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61025b2f-95ad-4e39-b7d0-4f78be64982d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5609883-2106-44f1-a3ee-ffa8d37c6cb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74ed161c-2fbf-4af2-b596-5964457a5a65"
                    }
                  }
                ]
              },
              {
                "id": "45138798-cfac-451f-b264-86d211eaebf7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d68e578a-f949-46c1-b24f-9063cfb92db7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a8caa6-2382-41c7-8989-35743ed2dde1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0821c0bb-ad69-46e3-affa-30becd21994b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44bde9a-f430-40a7-808b-8a1057af8541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ca8e62b-63d4-4beb-8cd5-7694f2fc2270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c508e0-dd78-41dc-9b2a-5267affe34c3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b197109d-32b5-49d7-8451-df5cbb86cdf3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "60f6669e-652b-48de-a0dc-f0a347d0404e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2ec28d-62c9-4a19-a4df-8459b740d70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6009ff4-6290-4477-ba57-85579c66a62e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e571e743-3050-4b57-bd5d-a95eadddaf1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcadb9c4-8a26-42c8-9cbd-2c369cc0ac56"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3e0ef68-da40-4e14-a32c-1bca090ef293",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c17f6927-2298-48e6-9f5f-3a9e815a44f6"
                    }
                  }
                ]
              },
              {
                "id": "118c33e0-91b3-4aa6-afdf-1f49fa5c99a9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b80fe629-f668-48d5-acff-097dda774b66",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd11ee7-d576-4490-869c-71b1abec2cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6f556736-8fea-4a34-81cb-e66ab0ee1949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e202f7-afc2-4f48-b721-c3aaae26f827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30170142-aa54-42e0-8122-1a8a0c214447"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "16dff3cb-151f-4ea5-823f-b8d18cab6446",
            "name": "Positive Testing",
            "item": [
              {
                "id": "44b029c3-c2a8-42ec-8ff6-f07c901009d6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6b8425e-1b73-48b8-a039-84bd97cdbb35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "027e30ae-c263-4aa5-8ea1-931ae3905dc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4403ba3-7266-47dc-a1c0-f88753669a11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89f3ae30-0f8b-460a-a4cd-75dbceb9d868"
                    }
                  }
                ]
              },
              {
                "id": "e3450ead-ea43-42bd-b1f1-14e73c5f5b2c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "897e7a52-d3cb-4e6a-812a-57e458a30805",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6557c5b0-20a2-4fed-91dd-1b18531cd950"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9dbde9e2-497b-4d9b-8ba7-83311c63f7e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "140e576d-e3ae-4ee3-9b7f-a0b9cfe959ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad863c99-872f-4672-ab5a-15abc741ec95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2fc995e5-6f8c-4d83-829d-63cfcdc9e12a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cced317-e2e9-48e4-a0d8-c5e12db01e1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3714f9a4-fd58-45bf-8921-8e388fc9cd56"
            }
          }
        ]
      },
      {
        "id": "c9525d07-781f-4b09-905f-3c5d15500161",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "aac2df7d-c614-4864-8bb0-a700fa444c3f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5b42e89-8fe7-42c4-816c-5fdfb645e89d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6047fcfe-93e6-424d-ac7d-566ee764e1f2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a1faf1-4f2c-40c1-a58e-4c41c80708bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "096be539-c2a2-4d05-bb3a-ec74ae21a652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfbe890-b9b8-4c32-a2c8-2e9437458e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cf12e33-8110-492b-af34-adf4deff8ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e546ed94-8e3b-409b-89ab-01ce94181559",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e8a236-dd51-4a4c-97b1-e69e7009a9ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "05e147cf-f8f4-4b95-b89f-b4b0efae24b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2082167d-0d1d-4e31-94f0-2b216ff8fb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c82df040-7b46-4cbb-84ab-c9148bb59f87"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93af8123-e7b1-4d68-8f4c-80d0f54017d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6943ca69-e474-4b02-8944-95a6860b49e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "098239a8-ecae-428f-9f9a-a5cf24039e76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe06d0c9-002c-4a6f-9f6e-f968e6e215ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efbaa353-352f-4d29-ab32-f5aae51c0592",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d8cfddab-6b53-4361-b807-398f262f44bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32231055-b2eb-4f42-bc12-879486dc44b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d31673dd-eca5-4d77-a39c-548a53b2914a"
            }
          }
        ]
      },
      {
        "id": "a704007b-7f25-4def-87ad-0a2782b9e1dd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "88f22d85-269e-4749-a59a-d3eb0cce86e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcc1bf08-f61f-4461-8ec4-0aa22983ba3e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "22361dbd-d335-496a-b686-ef9cea589640",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dce68fa-c32d-4803-bc74-6d220f9a9d2c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1c53eaa-84cb-40e1-9815-e94f4ec1cfc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4a32bc-d312-45e3-b116-e74ee42702f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2481f835-906b-42b4-99aa-aa4c9e05db50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4141fc-2537-4fc4-a030-1438b9afaf62",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f98e40-2524-413f-813c-eb90f8d3061f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d952c3ad-6630-4b17-a0b3-00ccc33bd9b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2e7dc6-2dcc-4fbe-a56b-5a375d50d188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f492eeb-3a53-48c7-b173-77fa8b136d05"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "399836f5-8baf-4b92-b821-8d8f82ad32ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fbe1c02-6914-4bee-8839-78a985a7c6d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24a16d26-b268-42c7-903c-866819108314",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6628575e-0fa5-42b3-ad65-13e87b978e07"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b10af3d-a504-4c7d-ab7e-96b34693a633",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "97f62bad-f70b-4bba-a15b-599208635a7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c3fbbb0-1f2e-4d8e-bb4f-db95e4771d9f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11641d44-5aa6-40c0-93f7-c9f5d0901722"
            }
          }
        ]
      },
      {
        "id": "58bd885c-ce33-47b8-9870-9c1a34d7f6f6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "53632b61-9048-43c3-bba5-510b36b36f97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee97adac-b082-445d-ad2b-ba54c0e378fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90015499-3b68-4de4-9c8f-9a0a848c0380",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca4f527-493d-4452-8864-ecdff0510443",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1adc2bc4-4d0b-4751-9ba0-24587cc8169f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a3a9fb-9b28-47fa-b7b8-198ca30d7e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8603023b-acb5-4e91-bb27-9121780bf3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beba0f41-8347-472d-9fab-856c1b53cde3",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b9c2e2-85df-4b30-9ea0-4591ce447daa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e2c03eb8-561d-42d8-afa9-18d73d2d10c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bf6128-82a0-4965-8386-d8acff5b3782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16b68bfd-7ca2-4a33-b4db-0b855dd6efdb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d138aff0-31e0-40b7-90d0-33ee6e07550e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89a430c8-ac66-41e8-b100-313667ac49f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "03ef57e1-41d8-4526-9fba-93a7dcc4b985",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "902184ef-5a78-4e53-9740-7f227f0ad8c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1e86bef-8b58-4395-bac3-8ab07eee55ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8119fc4a-3fe2-4d75-b8f3-290fdaf51432"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45037014-853c-4ea7-afcc-8365485de52f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d69dbae-cd39-4bcb-9b6d-2297025c2e6e"
            }
          }
        ]
      },
      {
        "id": "7ddae006-d175-41da-8ecd-1da82a160d3f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be09b1e1-062c-4533-a57e-5be4a046de6b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bcf00fe-bcae-4118-961e-b02f4b34a66a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "95a3b5f6-342d-449d-a9ca-c3fb2b982af8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b941bec-649f-420e-bcba-9d7d204921a6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fe61ecb-71d6-47ab-8afb-af5f416849a9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 126.23282442748102,
      "responseMin": 14,
      "responseMax": 1098,
      "responseSd": 189.99333855045887,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671064859690,
      "completed": 1671064907500
    },
    "executions": [
      {
        "id": "51b6b856-e3da-4dcd-a1c1-69f00a9453a8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "aa1a3bc0-e0fd-413e-8759-4c3637bf9e68",
          "httpRequestId": "937bc07d-b8e0-42f8-8680-9ecc3bb41516"
        },
        "item": {
          "id": "51b6b856-e3da-4dcd-a1c1-69f00a9453a8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "300e9a59-eccd-431c-aa51-74d4839461d9",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 0
        }
      },
      {
        "id": "9e50fed3-acbd-4151-bf9a-2ff490eb3897",
        "cursor": {
          "ref": "30de048c-cb5c-4c66-9fda-7681931797de",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "22039bc7-b9a7-4f2e-8a55-5a1235dd755a"
        },
        "item": {
          "id": "9e50fed3-acbd-4151-bf9a-2ff490eb3897",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "88c2216c-c814-4a7f-a555-74cbc4f9fd71",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "d481ad60-9f13-4843-af0c-9c5452ab30c8",
        "cursor": {
          "ref": "a7c5a241-5a10-4649-86ab-905114d04316",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2edd1740-5c95-4e64-b18c-82fac765b0e0"
        },
        "item": {
          "id": "d481ad60-9f13-4843-af0c-9c5452ab30c8",
          "name": "did_json"
        },
        "response": {
          "id": "99f022c2-8c25-4b2e-965d-b43ca02ad486",
          "status": "OK",
          "code": 200,
          "responseTime": 302,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8a5a90-c180-4eec-aa8a-e2c25ef10609",
        "cursor": {
          "ref": "bca503de-df38-4f31-8c76-66a4d4de1beb",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9c434b14-76fc-4a6a-80c0-61602380750e"
        },
        "item": {
          "id": "9c8a5a90-c180-4eec-aa8a-e2c25ef10609",
          "name": "did:invalid"
        },
        "response": {
          "id": "e693d1c8-f5f4-4eea-979b-90b075b77813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8a5a90-c180-4eec-aa8a-e2c25ef10609",
        "cursor": {
          "ref": "bca503de-df38-4f31-8c76-66a4d4de1beb",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9c434b14-76fc-4a6a-80c0-61602380750e"
        },
        "item": {
          "id": "9c8a5a90-c180-4eec-aa8a-e2c25ef10609",
          "name": "did:invalid"
        },
        "response": {
          "id": "e693d1c8-f5f4-4eea-979b-90b075b77813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe120c5-11e2-493b-afe5-1f6d7e3cfad4",
        "cursor": {
          "ref": "82614810-8ae9-403f-bb84-ccf4854ea9b9",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cd526f30-27b7-460f-89a1-38721a99ae52"
        },
        "item": {
          "id": "abe120c5-11e2-493b-afe5-1f6d7e3cfad4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c572a179-a685-4674-bd50-03a8bd79c16a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 187,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e47550-ceaf-47df-b579-592a1e717fc2",
        "cursor": {
          "ref": "8246f54f-2a4b-4990-ba4d-01002152f997",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f6239069-4ff5-4a0c-895e-2464146f2edb"
        },
        "item": {
          "id": "91e47550-ceaf-47df-b579-592a1e717fc2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9bdba5d5-411d-428b-b94c-cc93b2c592cf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c456337-9207-485f-8f85-bdaa0a0fd7e2",
        "cursor": {
          "ref": "65022c7c-665f-4bc8-b3d2-c15a753081ae",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5cc6616b-4a85-4e84-924a-097bc953acbb"
        },
        "item": {
          "id": "4c456337-9207-485f-8f85-bdaa0a0fd7e2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1a6d20d7-0a8c-442a-a5ed-0c2298e50e6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4535c34e-8a36-4a60-9244-610b5e1871a4",
        "cursor": {
          "ref": "f8fd1fb1-8952-40b7-99a6-ef34195543dd",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3adba268-66bb-46db-979c-7448721082b5"
        },
        "item": {
          "id": "4535c34e-8a36-4a60-9244-610b5e1871a4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7db341fa-0311-45a7-bdf9-181b2fa5cb9d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4535c34e-8a36-4a60-9244-610b5e1871a4",
        "cursor": {
          "ref": "f8fd1fb1-8952-40b7-99a6-ef34195543dd",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3adba268-66bb-46db-979c-7448721082b5"
        },
        "item": {
          "id": "4535c34e-8a36-4a60-9244-610b5e1871a4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7db341fa-0311-45a7-bdf9-181b2fa5cb9d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13759f87-77da-4e42-a23c-940d1b91c8ab",
        "cursor": {
          "ref": "0548f343-2792-4c2e-ab53-930b9073c8c2",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6979c930-45e1-4139-b342-c192f9aa1984"
        },
        "item": {
          "id": "13759f87-77da-4e42-a23c-940d1b91c8ab",
          "name": "identifiers"
        },
        "response": {
          "id": "a4d3c0b9-0210-4caf-ac7b-98a1aa1d8ce4",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358cdd1b-221e-4246-988f-0f42ce25d03b",
        "cursor": {
          "ref": "a4791cbf-7a55-42d8-b568-29ec4c5fd399",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e3391df3-848e-41ce-a055-0fc70f9eafca"
        },
        "item": {
          "id": "358cdd1b-221e-4246-988f-0f42ce25d03b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "68a8d278-983e-4ee4-a1a9-235fdf5b831c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358cdd1b-221e-4246-988f-0f42ce25d03b",
        "cursor": {
          "ref": "a4791cbf-7a55-42d8-b568-29ec4c5fd399",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e3391df3-848e-41ce-a055-0fc70f9eafca"
        },
        "item": {
          "id": "358cdd1b-221e-4246-988f-0f42ce25d03b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "68a8d278-983e-4ee4-a1a9-235fdf5b831c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e1d176-4848-4b83-a9f3-b8d539d62856",
        "cursor": {
          "ref": "4046eac6-3035-4fba-b0e3-f8b5647cb0af",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e5e8a6d0-b9fb-4640-9d4b-786b2eea1ba9"
        },
        "item": {
          "id": "a8e1d176-4848-4b83-a9f3-b8d539d62856",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1412c457-55b8-44d3-a790-d035c2194edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b85f854-c4ec-4bcb-847b-7a8d9e7a1fdd",
        "cursor": {
          "ref": "d4537caa-e53a-4e23-9715-d13bd8486cc0",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "247ec9c3-13de-47b2-b75a-caad554e3eee"
        },
        "item": {
          "id": "8b85f854-c4ec-4bcb-847b-7a8d9e7a1fdd",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "616abbf4-d5b7-4e85-a0a6-3af52f374908",
          "status": "Created",
          "code": 201,
          "responseTime": 886,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "2a9f43dc-6c44-4c21-8ddf-5da53a2bf7a7",
        "cursor": {
          "ref": "ae0b90c2-3f4f-48a4-b00b-15f2d6a0a9ca",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ae4c3209-bf3a-430f-8ca3-839d2b0049c4"
        },
        "item": {
          "id": "2a9f43dc-6c44-4c21-8ddf-5da53a2bf7a7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5ea1a474-7828-409e-b811-fb463897f5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9254531a-89e3-401b-9f6a-f4a8423b085c",
        "cursor": {
          "ref": "2f6105c3-7609-4186-9e30-b774af897092",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "196e0090-1cfc-4640-b9e1-eda0c9fcc3c7"
        },
        "item": {
          "id": "9254531a-89e3-401b-9f6a-f4a8423b085c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "220b6af9-2a75-439f-a881-34dfdb7f9d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30e796c-d758-458a-88f5-2c31358befa4",
        "cursor": {
          "ref": "1524e92e-4bb9-4c04-b1e1-1d928ef488f3",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "76b5dd73-c52e-4974-b153-434f576c963c"
        },
        "item": {
          "id": "e30e796c-d758-458a-88f5-2c31358befa4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5cd2118c-de6c-4293-92a5-878db6de97d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde50928-c866-42ac-8c3b-ede9cb326191",
        "cursor": {
          "ref": "56a372fd-cd1a-4540-b8ca-f36c1a80bf59",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9d9d8869-6249-4d6e-b088-c7ba39662409"
        },
        "item": {
          "id": "dde50928-c866-42ac-8c3b-ede9cb326191",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5e7b3469-8645-481f-a2a4-eeaf646e4499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff29cdf3-b6d9-46c1-98d1-678a1d457272",
        "cursor": {
          "ref": "40a876a0-5192-4361-afeb-9a7d030aae43",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f67fc31c-f0e8-4811-ab8c-22f526e75d2a"
        },
        "item": {
          "id": "ff29cdf3-b6d9-46c1-98d1-678a1d457272",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0212a7e8-6702-4c8d-8439-f199708c4254",
          "status": "Created",
          "code": 201,
          "responseTime": 654,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e97a628c-6c0e-4a6e-8210-74dc144e4112",
        "cursor": {
          "ref": "b0b640ef-611f-40d4-a4d1-2093ad687bb9",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "eb1899e3-03f3-487c-9ae2-6ecd4d092b89"
        },
        "item": {
          "id": "e97a628c-6c0e-4a6e-8210-74dc144e4112",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "dccbb72f-4863-4911-883c-ecc0da37ee3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fe0692-e105-4841-b538-75fafb095e5b",
        "cursor": {
          "ref": "d44f3c99-9a24-4d90-941c-64a40225a4d1",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e14db667-ef1d-47b9-ba66-c5bd98312813"
        },
        "item": {
          "id": "91fe0692-e105-4841-b538-75fafb095e5b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ba0ba9e8-2c43-4699-8ebe-68fb8d0f0c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328d9a33-580a-42c0-a4a0-1b6419277047",
        "cursor": {
          "ref": "d8a8bc4f-c716-4ce9-8e57-bd94e75b304e",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "45ae8c03-32da-43ad-8760-c54ed9624b84"
        },
        "item": {
          "id": "328d9a33-580a-42c0-a4a0-1b6419277047",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c99c3c27-20be-4f57-8257-5e310915ab54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe0cffd-bd6d-496a-bd3c-2ccb4d55434a",
        "cursor": {
          "ref": "6a133dfe-5d50-4d0c-8580-12eada19fc05",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "95867dad-c781-4f9e-9628-09143ccb5a69"
        },
        "item": {
          "id": "efe0cffd-bd6d-496a-bd3c-2ccb4d55434a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fe44d6f8-2d35-425c-bf46-f9decaa286c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf817054-1605-470a-92a8-bc273c12aae6",
        "cursor": {
          "ref": "012e4945-32d6-40ae-9cc5-4d3ec5fe1951",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6abdf4e4-7c85-43da-8638-68ca9dfbb6b4"
        },
        "item": {
          "id": "cf817054-1605-470a-92a8-bc273c12aae6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "89d09c7b-51ba-4179-8283-bcb193a2ba5c",
          "status": "Created",
          "code": 201,
          "responseTime": 668,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "567ab59d-7d06-424f-8c73-d5b8374f4807",
        "cursor": {
          "ref": "8ccc52e4-c382-4b60-98d7-bba07d82cd29",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "457fb69f-1ff1-4678-94f6-187a2052b1fb"
        },
        "item": {
          "id": "567ab59d-7d06-424f-8c73-d5b8374f4807",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "ccd5cc4e-1419-4d63-82b6-e3da8ad6ee20",
          "status": "Created",
          "code": 201,
          "responseTime": 1098,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "83939654-35c3-42e3-9f94-ab8eca2659f2",
        "cursor": {
          "ref": "c14ebf4b-68f4-4ec3-b2ec-4cd93c5821b0",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b1507725-afd4-4843-b0bf-0b53e56e7c0a"
        },
        "item": {
          "id": "83939654-35c3-42e3-9f94-ab8eca2659f2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6cd04701-b07e-49b4-a7c5-e00e6b71195e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999a54c2-9bd4-4a36-b7b3-3602091e476d",
        "cursor": {
          "ref": "45117369-7a97-4b93-b098-c07a98357274",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2496ace8-f957-4e09-9f54-533c4ee3a1a2"
        },
        "item": {
          "id": "999a54c2-9bd4-4a36-b7b3-3602091e476d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "facd60b9-a27b-41a8-903a-45440c10a07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631f15a4-a52f-48b2-bb0b-53b2c0ed6c86",
        "cursor": {
          "ref": "54a5e1fc-4149-4b18-92cf-4b0bf23bb943",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3463ec4b-f24b-4a07-aea2-0b6fa04e1850"
        },
        "item": {
          "id": "631f15a4-a52f-48b2-bb0b-53b2c0ed6c86",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "36a816ae-daf1-40bf-922f-4f3c77419a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e55347-1675-490b-ba2a-52f6685e20eb",
        "cursor": {
          "ref": "54f39c4c-8138-4cf6-bcc6-7b423598428a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "64286fb7-1b42-461a-94a7-05f69d12abec"
        },
        "item": {
          "id": "59e55347-1675-490b-ba2a-52f6685e20eb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "36b79aa8-ec8a-452d-9b79-8dfbbc5fd497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a8a5bf-81d1-4b6a-a8ae-3b36c2dcf339",
        "cursor": {
          "ref": "8ec96d3a-fb1e-4a02-a30b-de8c1aaf78c2",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7c7ca5a4-3e69-4109-8d2d-156babc13f00"
        },
        "item": {
          "id": "59a8a5bf-81d1-4b6a-a8ae-3b36c2dcf339",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3343c45c-3070-49ea-8324-0cfa8f25544d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdfa7e9-fa59-43f1-a83a-86a0b89cd5c8",
        "cursor": {
          "ref": "a2691da4-2da5-44ee-a45b-4c6fd47aa60d",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fbabdcbc-7f35-4003-833d-ea393345b495"
        },
        "item": {
          "id": "6bdfa7e9-fa59-43f1-a83a-86a0b89cd5c8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8cdf8cea-11d8-4e5b-ab38-16d034757d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fe0667-2f32-4040-b4cf-225e97237294",
        "cursor": {
          "ref": "b5b5a797-cf4a-4ecb-b4e6-892c3b3193ee",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "365deaa1-4b49-42b1-96b8-118a7b3abe45"
        },
        "item": {
          "id": "24fe0667-2f32-4040-b4cf-225e97237294",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ff9f79b6-2dd7-4539-a56b-d3a02220cd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dab9b65-07c2-449b-a2e8-73eb59e15f6f",
        "cursor": {
          "ref": "99c4c80e-4471-4182-aed4-2a0d884b88bd",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "91636c85-c6e0-4437-a7bf-442d315ef99b"
        },
        "item": {
          "id": "5dab9b65-07c2-449b-a2e8-73eb59e15f6f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1b78c4b2-78b2-4b76-9864-e4de5542e657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738847ad-adb3-466d-a02e-36256c82ddd5",
        "cursor": {
          "ref": "a558cc0e-f639-4c26-8f01-d8bd8f8795dd",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "027900c6-dfc6-45b8-834d-e47b34afb8a1"
        },
        "item": {
          "id": "738847ad-adb3-466d-a02e-36256c82ddd5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a2753088-d790-4771-a5ef-885613782b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abeea587-c167-4bfb-9e77-7ce1d03669dc",
        "cursor": {
          "ref": "f43d6606-d916-4bed-a210-7d93b63edaf6",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d81ae8e6-4e94-44ee-8aef-e9d8af55fab1"
        },
        "item": {
          "id": "abeea587-c167-4bfb-9e77-7ce1d03669dc",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9f629fd3-6545-4248-8ff4-3549bd2db876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82656842-153c-4e0b-b396-6580f71a737a",
        "cursor": {
          "ref": "a5603234-81e9-4ff1-986b-012f951b5189",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "36fa4a05-2950-490f-87f0-fb68a46aef61"
        },
        "item": {
          "id": "82656842-153c-4e0b-b396-6580f71a737a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "83f1ca18-72e4-446a-b1d9-b73b7ee27b8f",
          "status": "Created",
          "code": 201,
          "responseTime": 744,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a4813d0f-90e6-4b8f-b35f-ac8572dd7ebf",
        "cursor": {
          "ref": "c842c18d-d6bc-4b18-8e33-5ef60a8d1f88",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "71855a07-cd4a-43b6-a7a1-61272446e4b1"
        },
        "item": {
          "id": "a4813d0f-90e6-4b8f-b35f-ac8572dd7ebf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "463e8768-72bf-4bd9-a045-fb8597dd74c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec198642-5c22-434e-9161-0149165f67db",
        "cursor": {
          "ref": "742012de-e18c-4491-85d9-667f28c8ff81",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4a796738-aec0-450c-8f6a-e62f067850ad"
        },
        "item": {
          "id": "ec198642-5c22-434e-9161-0149165f67db",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "566d3b88-8c82-497b-965b-241c9a557c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87544f51-6e4c-41d5-996b-f15aa1568ae4",
        "cursor": {
          "ref": "829f5dea-ed0c-424f-8834-f7cda8a97808",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d38e6aea-3360-40a8-91ee-62560cead7b4"
        },
        "item": {
          "id": "87544f51-6e4c-41d5-996b-f15aa1568ae4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5f9b7827-8e07-4945-abc6-6ebc9c5d3c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a3e3a7-7171-4c9e-a520-dcd4bf6b2ac7",
        "cursor": {
          "ref": "cbcfbb04-254d-40d2-a69e-0d475d9352eb",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e5d7e38c-eb3e-4da1-879d-9cae411e75d4"
        },
        "item": {
          "id": "f6a3e3a7-7171-4c9e-a520-dcd4bf6b2ac7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c6d17f76-912d-4385-8b5e-53a431cec983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3793dd-95f6-464c-820d-9cd823251957",
        "cursor": {
          "ref": "d2750287-6c21-47c8-aa0e-4339023709da",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "830b16e5-ffb7-4de9-9375-6c3fc6b5ddae"
        },
        "item": {
          "id": "de3793dd-95f6-464c-820d-9cd823251957",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0a3cb469-d949-4583-9d45-5ecad1191a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8afdfaa-b3a5-47aa-8a23-63e08b4e754e",
        "cursor": {
          "ref": "8050ddd8-2a3d-4348-9f8d-04d0e3add99b",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "10a584e1-644a-485b-bf55-d871c278dba5"
        },
        "item": {
          "id": "e8afdfaa-b3a5-47aa-8a23-63e08b4e754e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3fc815c2-d407-4a2c-8b1b-96f1f67d1e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a21ad2-7365-44da-87a5-5fed2c31c8f4",
        "cursor": {
          "ref": "9306a6c2-63f0-46e0-821a-42f247300dcf",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5418d3ef-d9fe-4eb9-987b-4fa4b917cc5a"
        },
        "item": {
          "id": "80a21ad2-7365-44da-87a5-5fed2c31c8f4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ecb68538-0349-4a8e-a463-5abcb33ea65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb902cec-7b3e-44ba-8741-20b3596e00be",
        "cursor": {
          "ref": "8594d75b-dc7e-4d65-a283-ac1801442b67",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8fc654df-ad5f-433d-90e1-19b5fd327237"
        },
        "item": {
          "id": "cb902cec-7b3e-44ba-8741-20b3596e00be",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "951a5006-6fad-4b83-866d-34a9d2398cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f63f9fa-75a6-4850-b4be-70680082f1d7",
        "cursor": {
          "ref": "64402e7d-3b80-4017-bb88-7ef12bab2df8",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8f6f6cee-eb9b-4feb-ab20-5fc5941eba37"
        },
        "item": {
          "id": "9f63f9fa-75a6-4850-b4be-70680082f1d7",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "64bf0c9b-8684-4e04-bc6a-e419078288ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6040bd-0afa-4b21-80f3-322f87577dd9",
        "cursor": {
          "ref": "330ea9fa-46fd-47b9-b724-d5f34d99d6c7",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "899aa665-77f9-4d92-b1af-e143951e81d8"
        },
        "item": {
          "id": "9c6040bd-0afa-4b21-80f3-322f87577dd9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f7cc3cdd-ffe1-40ef-b1af-a7a12d8ab43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5953641-30a1-4ff7-aef6-adc88ac9507e",
        "cursor": {
          "ref": "6ffa6768-9eac-45b1-a1a0-91efcadb999b",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "df798a7b-bd6d-4680-a6e6-c122813947bc"
        },
        "item": {
          "id": "f5953641-30a1-4ff7-aef6-adc88ac9507e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1e30fa15-8c35-4f81-9582-15eb0b020c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff935ced-d65e-416e-be74-dc908254b615",
        "cursor": {
          "ref": "6958aceb-64b7-410b-981c-9c893f653a5a",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3ba5a4bb-a429-4e3b-953c-95ae5254c1a9"
        },
        "item": {
          "id": "ff935ced-d65e-416e-be74-dc908254b615",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b33b166e-c29c-47f5-b167-0c32d84991dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df60f71-ef3d-4f4e-afed-4f3c39576b88",
        "cursor": {
          "ref": "1c64d725-4ba1-4c17-9466-cded09d07481",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5e5dc7c2-0619-466c-8af1-0c8ebd1a1fde"
        },
        "item": {
          "id": "7df60f71-ef3d-4f4e-afed-4f3c39576b88",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "38c53c4c-4818-44db-b940-f687229fcfe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "bc6511fc-a86e-4882-80fb-08eb0a358260",
        "cursor": {
          "ref": "bee02422-7e32-49ff-a25e-f3ba52a96ba6",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6d5e07a4-0d77-480d-9e9a-2eed0ad57ca2"
        },
        "item": {
          "id": "bc6511fc-a86e-4882-80fb-08eb0a358260",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "79b19cf6-ea3c-46a3-a49f-19e3fc2baf29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea08d62-a1b2-42cf-b9b8-16026f146aac",
        "cursor": {
          "ref": "32dd2777-c64b-482a-89d1-6a27fd319de0",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "60c701e8-f775-4ff0-afb3-69cd73dcec3e"
        },
        "item": {
          "id": "eea08d62-a1b2-42cf-b9b8-16026f146aac",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d4af0c86-3aa8-4efd-aee7-51700ff2f458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1054c0e0-3a00-4c8c-a47d-9316e0b5c191",
        "cursor": {
          "ref": "83628ab5-c3ec-496a-952f-744355f11cbe",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "001c29a9-8efd-4b36-a019-3c37e8240deb"
        },
        "item": {
          "id": "1054c0e0-3a00-4c8c-a47d-9316e0b5c191",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a37564df-71c5-414a-af59-4ec94118f8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc22516-43f7-41c8-bb06-bd3f884b16c6",
        "cursor": {
          "ref": "51a802e9-8fc9-4f01-822d-eccf96be2946",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9524a728-497c-4dcb-92f5-f2f5425ad95a"
        },
        "item": {
          "id": "ffc22516-43f7-41c8-bb06-bd3f884b16c6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "51f2e56f-793c-45c3-a92d-71adbf624b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43535afb-a94a-4787-8627-24c5bff03c0a",
        "cursor": {
          "ref": "4b4b7439-3ecf-4580-a859-4012b18eb68a",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e61a2587-0fdc-4bac-973f-fe3aa47a8a88"
        },
        "item": {
          "id": "43535afb-a94a-4787-8627-24c5bff03c0a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "42251b8d-f451-4135-bab6-f496d5beb4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d5bf16-4526-4fb3-a19b-8846e52f6ea2",
        "cursor": {
          "ref": "48f82352-75ef-496a-bc1e-bb58df09f7ff",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d675632d-171b-43f2-a591-9e2bd2a53c5e"
        },
        "item": {
          "id": "b7d5bf16-4526-4fb3-a19b-8846e52f6ea2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "516fdd4c-f1a4-4371-a2d8-4ccb4a7dbe37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41d0f02-83d4-4779-a3e8-b4176f52337e",
        "cursor": {
          "ref": "6e2d5402-da9d-4f03-8bf6-3479ce61db01",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b5dba743-63f1-487c-a0b3-f607dd99beb9"
        },
        "item": {
          "id": "d41d0f02-83d4-4779-a3e8-b4176f52337e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ba86226a-9656-4c5d-8825-cfef4df312c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "dc8aa9d0-bd7e-4dff-bdcd-055431e997ba",
        "cursor": {
          "ref": "c34039bb-df83-419a-8c6a-c657f8faf6b9",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ea7b5b06-0ec6-419d-8948-56a6fca92992"
        },
        "item": {
          "id": "dc8aa9d0-bd7e-4dff-bdcd-055431e997ba",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1fa570b4-8e12-4c73-b7a0-e2da3663b442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52c5cef-56fa-4e19-998e-4dd782bd25d1",
        "cursor": {
          "ref": "2fc6df15-00ca-483d-8a0d-df639e9c5d46",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a4f4beee-d863-4a66-93c0-2e3f11adb729"
        },
        "item": {
          "id": "c52c5cef-56fa-4e19-998e-4dd782bd25d1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bbf6fc0b-2ca0-432f-8845-544f27970741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f959a742-e4d6-4048-b082-9493a2f2ead7",
        "cursor": {
          "ref": "3e468e9f-33ec-4464-b728-1bdcae47ef8c",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9f039ab8-6900-426e-870e-b46b02aef616"
        },
        "item": {
          "id": "f959a742-e4d6-4048-b082-9493a2f2ead7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2f6873e8-3fc6-4089-a647-a3796c24cc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102a4361-85d9-4a7e-868d-d5dad00c6c15",
        "cursor": {
          "ref": "78f5a131-2a57-4b19-9bd5-4bc9e5de4498",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f844473e-305c-43a4-99ba-0bcd6adde53a"
        },
        "item": {
          "id": "102a4361-85d9-4a7e-868d-d5dad00c6c15",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5366d027-6f1f-4349-a5c1-ff044bc1eaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a4a54d-0d7b-42a7-aa30-301d6f966705",
        "cursor": {
          "ref": "7c939d50-68d1-44d6-8008-0c110b5388c2",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ef04844d-83b6-4e20-a678-55e3ea3e0d01"
        },
        "item": {
          "id": "32a4a54d-0d7b-42a7-aa30-301d6f966705",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4bb39ccd-e368-4623-a7c5-cb85b6f32234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cebec07-9338-488d-8328-b5aba07ea95c",
        "cursor": {
          "ref": "94416c00-0ade-4ad2-920e-80f083feecb5",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b8a4c514-4f35-48a3-a8a3-a532f47152b6"
        },
        "item": {
          "id": "5cebec07-9338-488d-8328-b5aba07ea95c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "98d9a651-a6bc-42b5-a0ab-afc905c0b210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e28dc9-e6ef-4197-aff1-0d3a87026946",
        "cursor": {
          "ref": "200414ce-a1c6-432e-9332-9b95fe7c0611",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f5ff110e-51cd-4909-99c8-bd31fe727ec9"
        },
        "item": {
          "id": "92e28dc9-e6ef-4197-aff1-0d3a87026946",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ab93479c-bb5a-4fdf-ac33-b92bb7b4e457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d1aeac-e09e-4a82-a522-91e180adfba0",
        "cursor": {
          "ref": "7cc5d70f-3233-4adf-9427-0f86274efc4d",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "adc78a61-2f88-44df-bcb2-ab25746118da"
        },
        "item": {
          "id": "19d1aeac-e09e-4a82-a522-91e180adfba0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a1c85766-284d-45c5-aee4-34c0337e2b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04de2f2-eccc-4cfb-b32d-fda683ba043d",
        "cursor": {
          "ref": "ab783ff0-2cb0-47c0-b0cf-1c018cb4a614",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0905e229-5204-4329-965b-de7c7009bfe4"
        },
        "item": {
          "id": "a04de2f2-eccc-4cfb-b32d-fda683ba043d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "732c8d80-0d15-45ab-b360-0aa1f5026bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237d36a1-418f-4da3-b4dc-2b135dacc32e",
        "cursor": {
          "ref": "8ec127c8-4b08-469a-8600-a20415a043a1",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b0434053-fd6e-4c67-82ab-aa9d05537b66"
        },
        "item": {
          "id": "237d36a1-418f-4da3-b4dc-2b135dacc32e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4ca198bd-50ff-4c5b-8f87-3a8ca83f17d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebac7d51-3dae-4595-a89a-a1fd54430805",
        "cursor": {
          "ref": "41f4c51c-ab78-4688-9316-2e6e79409059",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "65768901-58d6-480c-8620-3984907dd587"
        },
        "item": {
          "id": "ebac7d51-3dae-4595-a89a-a1fd54430805",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "442b888c-ed07-4fb3-8d5a-0679bb6caeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3e7d7e-1fa7-43cc-a114-f0f1ec5a4e80",
        "cursor": {
          "ref": "7048431d-e1ef-413d-8372-8cde595da07e",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "21e924ee-fc7f-4706-9ecb-5b234e3ac374"
        },
        "item": {
          "id": "ab3e7d7e-1fa7-43cc-a114-f0f1ec5a4e80",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "864af03b-cd3c-4f4f-b72f-6914c99f1b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cb34cc-20af-4405-8d67-45e13d2669db",
        "cursor": {
          "ref": "aa75cec7-9978-4de5-95b1-bb7717553c25",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d460a579-19a0-4489-a3c4-d892c59eda06"
        },
        "item": {
          "id": "a4cb34cc-20af-4405-8d67-45e13d2669db",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2c390bc5-323f-4901-9210-0fdfe78ca2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d90b631-712c-40fd-a643-f2f94ba059ad",
        "cursor": {
          "ref": "0149ce04-ffb8-42f0-bc48-2d2df2822bbc",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9e3bf540-b137-4476-af60-49c6fe3edc96"
        },
        "item": {
          "id": "0d90b631-712c-40fd-a643-f2f94ba059ad",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "bc04f7bd-dbdf-4831-a74d-b73ce6fd301a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb78f42-eeeb-4142-95d5-a95135f4f20a",
        "cursor": {
          "ref": "fd9bb92f-6de2-444b-a216-012c6dc1c366",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "52b7ba80-86c2-4793-ae2c-ba5c1e1ddfe6"
        },
        "item": {
          "id": "9fb78f42-eeeb-4142-95d5-a95135f4f20a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5a1d982a-49b1-44a4-bb4b-18f787c2e58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9b48ab-dc5f-4224-8224-03e2450ca9b9",
        "cursor": {
          "ref": "fc1d43b9-2c74-4ccb-b923-777954da692a",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a25a4324-f2a3-4287-bc97-34b1c10c8149"
        },
        "item": {
          "id": "9b9b48ab-dc5f-4224-8224-03e2450ca9b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c0a429d9-533c-4539-a0ca-6493acea1d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21bf644-f8ce-4c0c-9a1c-439b1bf04986",
        "cursor": {
          "ref": "7a06bc8e-965a-443f-9ea4-26e4848adf37",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4d605bdd-d3cb-470a-9688-c31f67428ae9"
        },
        "item": {
          "id": "c21bf644-f8ce-4c0c-9a1c-439b1bf04986",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d9162dd5-981a-4791-be10-2ce3b7d525ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbfaae8-7f44-40db-9898-337d3412c2d6",
        "cursor": {
          "ref": "24a51a4d-6ed1-46ad-b76a-1a1a23655a1b",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c814e28f-7361-46ca-801c-244ad0e68b1e"
        },
        "item": {
          "id": "1fbfaae8-7f44-40db-9898-337d3412c2d6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f72a13d0-79a8-404a-ab5a-9807e0204118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb816f40-9990-4ea7-b4a9-346afbec89a8",
        "cursor": {
          "ref": "0fbc2e5a-26c6-44ab-99c5-723a1e868127",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1f22404b-5b59-4dfc-b999-7cbaf31df8c1"
        },
        "item": {
          "id": "eb816f40-9990-4ea7-b4a9-346afbec89a8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bbb50b2b-f03d-438e-9031-b18349f42936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da79074c-a494-4e29-adcc-23b00c929045",
        "cursor": {
          "ref": "3a626bd9-c688-423b-b5c5-2e1215b06fb4",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b94a0358-27f8-44b6-8825-06adc2cc0e55"
        },
        "item": {
          "id": "da79074c-a494-4e29-adcc-23b00c929045",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fc11f016-c31c-41df-8704-55bc5f43455c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383a30dc-747d-4a8c-921b-426be9cbd717",
        "cursor": {
          "ref": "873b8a18-e881-417f-bd30-a93a2c3babf9",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1d8c859a-e484-4583-8866-94c09427582e"
        },
        "item": {
          "id": "383a30dc-747d-4a8c-921b-426be9cbd717",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4735eb3c-3077-43bc-be4e-cf16dcd56d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d195b4b2-2973-4ca3-9a86-9f0ceba81a36",
        "cursor": {
          "ref": "e72d1847-a5a4-45d0-9d6a-9d61f3106020",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "33b44a8e-49cf-4518-8811-8e58ebfff1ea"
        },
        "item": {
          "id": "d195b4b2-2973-4ca3-9a86-9f0ceba81a36",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "eaa4342c-e19c-41ef-b201-cbf30bd4e563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b432e3d-d284-40e7-83f0-0867b5997c04",
        "cursor": {
          "ref": "be7dd874-192c-4f0d-870b-602dfa07e3d3",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8eb12f8c-0d8a-4a60-bb75-330c78d1f91b"
        },
        "item": {
          "id": "6b432e3d-d284-40e7-83f0-0867b5997c04",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9e4af47a-2824-48cf-ae68-89be50a14a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1eb274-e305-4f21-8816-f5decc26778a",
        "cursor": {
          "ref": "65943b31-9503-4a03-ba23-eba3ce81a860",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d5ae707e-ba0e-4daf-aadd-17cebf325df6"
        },
        "item": {
          "id": "3a1eb274-e305-4f21-8816-f5decc26778a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "beba79dd-3c9c-4557-b606-a564296c8b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0c3d7a-cd17-4acf-9a22-27c8f4d828b6",
        "cursor": {
          "ref": "2ceae6bb-dad6-4493-a92b-547f984ae00c",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "dcbb3acc-0c98-44c3-9db7-ecb2054f4d17"
        },
        "item": {
          "id": "0b0c3d7a-cd17-4acf-9a22-27c8f4d828b6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "367422f1-c610-4e5a-91a3-017001fcdf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be8ceee-b3d6-4523-b71b-8d05f35476e3",
        "cursor": {
          "ref": "e97b23ed-7e30-4a68-9874-889277d891b7",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0aa2f855-1108-4c02-9ceb-76d16026de5b"
        },
        "item": {
          "id": "9be8ceee-b3d6-4523-b71b-8d05f35476e3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e11a01f6-b9b9-43f6-9cbf-392da7ec02f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2346eaa8-f383-432a-a6f0-a875ce2b5e5e",
        "cursor": {
          "ref": "44bf2c2b-040c-4a4f-8e83-365f77c51944",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "db9a95c1-576b-4533-a14a-8702eda08780"
        },
        "item": {
          "id": "2346eaa8-f383-432a-a6f0-a875ce2b5e5e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c7d79cbb-1909-425d-85bd-82a06cc8b798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ebfac0-7bda-4a94-ad62-a2ba2cca51c6",
        "cursor": {
          "ref": "87d89752-143e-40f1-a9bb-dcc2a9d8d242",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f9cbe904-0a4b-4a57-a8d7-599e753b22dc"
        },
        "item": {
          "id": "74ebfac0-7bda-4a94-ad62-a2ba2cca51c6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3ba95777-512a-43ea-acb1-48ba8851473a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a39b542-718d-4a9f-8122-51fdc0680a05",
        "cursor": {
          "ref": "a758e455-757d-4776-b50a-dcf923c4a383",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9ffa4149-f922-469d-8a1a-aee0bfe5781f"
        },
        "item": {
          "id": "7a39b542-718d-4a9f-8122-51fdc0680a05",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "55cecdc1-7e87-4371-9e37-66b3010b36ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892d7706-60f8-49f1-80fc-7c48cd2123d7",
        "cursor": {
          "ref": "f5952e26-e252-43d4-bc8f-ea89a7b22c5f",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "01ab16c1-f02b-4ac2-b67e-581ed59dc071"
        },
        "item": {
          "id": "892d7706-60f8-49f1-80fc-7c48cd2123d7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "74eb7411-4069-465c-8d36-70668f47ab90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce4a174-a063-4dbb-9d54-a7ef102466dd",
        "cursor": {
          "ref": "eaa518b2-bd61-4ce9-bb1d-4d60c3bf9983",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "102ec9a9-d60e-4a46-bba1-43270f6a612e"
        },
        "item": {
          "id": "bce4a174-a063-4dbb-9d54-a7ef102466dd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "08af4dd8-5b9c-42c4-b5ed-d48af89f9480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab4e7f6-0965-434a-b5a3-1a266a67fb41",
        "cursor": {
          "ref": "0e7e25ff-48dd-41fb-9325-6afea394f367",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b4075be5-4f75-4eb8-84ce-653d861447b2"
        },
        "item": {
          "id": "fab4e7f6-0965-434a-b5a3-1a266a67fb41",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d04d8876-709a-48ff-ad97-895d8431bef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6ae477-d1fa-437d-b09c-da3f827ebe7d",
        "cursor": {
          "ref": "655a7a22-8fd9-4658-8793-5481ca69e12f",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a7385336-2c3d-4848-87ce-d21181651a9a"
        },
        "item": {
          "id": "8f6ae477-d1fa-437d-b09c-da3f827ebe7d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8ced7ad5-b4a0-4255-bb4f-8c73c234bcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b611311-2b8e-4326-87df-260f70d312ae",
        "cursor": {
          "ref": "c078a90c-9991-4ca4-afdd-76f76732d10f",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "dbb96e6b-462f-4a8a-bc08-366c22e145db"
        },
        "item": {
          "id": "7b611311-2b8e-4326-87df-260f70d312ae",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1a6d8fdb-976d-4463-bb93-e0a0be1ec4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0176b0bb-1db6-4c9f-819f-654bc1b2282a",
        "cursor": {
          "ref": "59a68c50-d6a6-404c-871f-9ece91380425",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7b13018a-4492-4a0b-814b-3419a3a0354f"
        },
        "item": {
          "id": "0176b0bb-1db6-4c9f-819f-654bc1b2282a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "81bcb34d-87cf-40a2-8da9-303018c6c166",
          "status": "Created",
          "code": 201,
          "responseTime": 726,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "eb13fbac-08c6-4ee3-801b-555dc749a792",
        "cursor": {
          "ref": "6f4d2db8-a021-4b11-b9ee-fe2b540dc379",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cea4b738-0de1-4807-bf31-b134410095e3"
        },
        "item": {
          "id": "eb13fbac-08c6-4ee3-801b-555dc749a792",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "451dca82-6c09-4a8b-ad7f-810c5183c4fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d89e356-91a4-4b90-809c-df77bb743baf",
        "cursor": {
          "ref": "cb5d0891-4f4a-4199-8e11-d4549db623c6",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e7634050-e0ab-4aa6-a465-b794807d4b73"
        },
        "item": {
          "id": "8d89e356-91a4-4b90-809c-df77bb743baf",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0669f560-7959-481b-8eb2-86ab62c972fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f741c7-6fdf-4744-b6c3-361ba70c022d",
        "cursor": {
          "ref": "8ae04bed-d533-4bfb-bad4-8508de95a9a4",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "093ca275-80b5-4a70-8440-14800b837937"
        },
        "item": {
          "id": "53f741c7-6fdf-4744-b6c3-361ba70c022d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "395fe4e3-ad48-4627-b3f9-fcb7aeb6aca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c2cffc-a677-4f30-b94d-f52e57df31fc",
        "cursor": {
          "ref": "042a1205-3df9-4aae-bbf8-fba01375c36b",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6044ecb7-1ce9-4c2a-9b1b-8f16514f35ed"
        },
        "item": {
          "id": "14c2cffc-a677-4f30-b94d-f52e57df31fc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6a7c54d4-fcdf-479b-af29-de0fa6c5010e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c972d44-a713-455b-9e4c-cdb55361b675",
        "cursor": {
          "ref": "4218545f-7057-44d3-af2f-274862cbef6e",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9609e4c9-32b3-429c-9099-31cfddf900e9"
        },
        "item": {
          "id": "3c972d44-a713-455b-9e4c-cdb55361b675",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "23350741-803a-441f-b58c-a95b116ca921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08882f8-9bbb-4506-b0f3-9a188d3806c8",
        "cursor": {
          "ref": "2c347888-f3b4-4cd4-b9e3-97e4ce7b6a38",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "eeeab5e7-8573-44f1-b7d1-6bc18008a42c"
        },
        "item": {
          "id": "d08882f8-9bbb-4506-b0f3-9a188d3806c8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ddcce137-6d42-45f5-8fe0-a22a681db38e",
          "status": "Created",
          "code": 201,
          "responseTime": 750,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "b4d5f049-c241-449c-9114-7729bb375abb",
        "cursor": {
          "ref": "27ab1726-b6eb-4cf5-a5b9-0dba48c5445e",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0a8834e1-9776-47c2-b840-e4d18871fbe5"
        },
        "item": {
          "id": "b4d5f049-c241-449c-9114-7729bb375abb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a8841cad-05fb-4bb1-a9d6-be427283e25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b098fa96-b368-4494-8dae-92b1d117f9f7",
        "cursor": {
          "ref": "8c869b5d-7ffb-4a85-b9ef-5fb3374b053a",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "815d020c-d078-493e-8f33-9a1e6ef2da2e"
        },
        "item": {
          "id": "b098fa96-b368-4494-8dae-92b1d117f9f7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3d3637c2-0cd4-4ec0-8fda-541a202ce654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d047ebf9-1078-4c57-9f06-effa42b60b79",
        "cursor": {
          "ref": "ac6afe86-7aa6-4fae-b948-447a63a63829",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5a7776f7-c82a-4fa2-8257-eb0355442675"
        },
        "item": {
          "id": "d047ebf9-1078-4c57-9f06-effa42b60b79",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a2b1ac91-efd4-40c0-8051-6dce6613dca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6870452b-ca23-4093-b730-27e00232af9e",
        "cursor": {
          "ref": "ddcdbdd6-d290-4828-9c28-96d406b560fb",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "64513eeb-1058-4431-a749-9ada6fb0f026"
        },
        "item": {
          "id": "6870452b-ca23-4093-b730-27e00232af9e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "548b4390-2ce4-4206-bf8b-64e71792e499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed3a641-cff8-4e74-ab72-17fb65d855f9",
        "cursor": {
          "ref": "6a4aa775-578d-42d6-86e4-f7e4bdda3c46",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "12a3fae2-155e-46e0-9f1b-6ac86b65732d"
        },
        "item": {
          "id": "fed3a641-cff8-4e74-ab72-17fb65d855f9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b4593a40-0b30-43c1-a409-c560621f8c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c72f3b9-898e-49ab-8ad2-c5b86183c8bf",
        "cursor": {
          "ref": "815a26f1-87d7-4d51-aa86-ccd18c856bcd",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2ad1f44d-d5bc-43d6-b057-299edc4c5c9a"
        },
        "item": {
          "id": "0c72f3b9-898e-49ab-8ad2-c5b86183c8bf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "86ebae16-dc09-4b4a-9d83-4d051847aa7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5365adb-5de7-45f3-bb39-8b7cf3b5c547",
        "cursor": {
          "ref": "eb04dd90-d00e-4be8-af93-7fdcfb718097",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9c47c6fa-16f6-4b40-babc-3d4df9c64675"
        },
        "item": {
          "id": "c5365adb-5de7-45f3-bb39-8b7cf3b5c547",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "45e457db-457c-4342-b14a-00fa5092c811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23893fa2-0b55-4c30-89c8-988c7ca49333",
        "cursor": {
          "ref": "fbd9a8b2-fb9b-4bf9-bfd4-2cd683ac3416",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2c6ef091-438a-440c-a004-d1df05019bd8"
        },
        "item": {
          "id": "23893fa2-0b55-4c30-89c8-988c7ca49333",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "dcc02f4b-3e80-4343-b144-5d326053247f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e906885b-cd2f-4868-8678-5bf59e29fd5d",
        "cursor": {
          "ref": "c32f589d-6bb3-4854-9047-f009111c3b19",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "99e3a3aa-b68a-4fc5-b530-42ee6621af39"
        },
        "item": {
          "id": "e906885b-cd2f-4868-8678-5bf59e29fd5d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "92949384-acf7-4bda-86e1-b0c0b75c1331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "54e4de85-b418-4ef0-b70e-44b8ae1cdfe7",
        "cursor": {
          "ref": "367bdb65-4e08-47e5-8ae8-6f69f996f779",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a9003c88-554b-46ab-a6d7-11f79a3c8c1d"
        },
        "item": {
          "id": "54e4de85-b418-4ef0-b70e-44b8ae1cdfe7",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e0d5f4f0-1367-478f-b07f-f3de98745ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "0b2c5754-6708-4f16-8e6b-34a9fa4684a7",
        "cursor": {
          "ref": "b84b9d32-ef71-4c89-9832-21f46115fe8d",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2eba7199-c26c-46b5-8385-72910d42e789"
        },
        "item": {
          "id": "0b2c5754-6708-4f16-8e6b-34a9fa4684a7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0bb35078-f6a1-45ac-9716-ca81878839d6",
          "status": "Created",
          "code": 201,
          "responseTime": 783,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd9f795-8b41-4c83-95d2-b6645190f1f2",
        "cursor": {
          "ref": "dd332d9f-cf2d-48e4-a5fa-e44ffb463183",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5f187408-55a2-4277-8777-b0ae3337525f"
        },
        "item": {
          "id": "edd9f795-8b41-4c83-95d2-b6645190f1f2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c461d66c-e00c-4577-ad68-cd656e53bb4d",
          "status": "Created",
          "code": 201,
          "responseTime": 788,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e13fd40-6453-49ce-94bf-258c045be16b",
        "cursor": {
          "ref": "8aa9e0d6-eeec-445f-8985-db1a612b799d",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c83332e4-c711-4837-a17a-dcefa82c813f"
        },
        "item": {
          "id": "2e13fd40-6453-49ce-94bf-258c045be16b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0a63c9eb-dd75-4d91-90e1-d7cf8d1d7e6a",
          "status": "Created",
          "code": 201,
          "responseTime": 716,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e54f22-1a02-4f7d-8d8e-0d2ffcc3911a",
        "cursor": {
          "ref": "89f35758-49fa-4afc-9e17-4f8a4e3c0a99",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b82a2ce1-a30a-44f5-af99-9a25f7d3d9f0"
        },
        "item": {
          "id": "a9e54f22-1a02-4f7d-8d8e-0d2ffcc3911a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a66b47f2-a459-41df-bdb7-3e4596d477b3",
          "status": "Created",
          "code": 201,
          "responseTime": 791,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6e9e4b-7d19-4b74-860f-1407e11927ee",
        "cursor": {
          "ref": "59c63148-0c8d-424c-a939-7ee2d79b3972",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6ecd46db-d76c-4d1d-b9a6-81ebd4805ae2"
        },
        "item": {
          "id": "ae6e9e4b-7d19-4b74-860f-1407e11927ee",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "33c8864c-9697-4023-b47f-0bbdbfdaae1c",
          "status": "Created",
          "code": 201,
          "responseTime": 749,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec59792-61b3-45e3-8797-daaeaf25cd90",
        "cursor": {
          "ref": "2ab49ee1-e828-4965-b2e9-788463533b46",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "20821b98-ab1d-4854-b260-d1dba4199aef"
        },
        "item": {
          "id": "cec59792-61b3-45e3-8797-daaeaf25cd90",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0e6c7cac-3227-4437-9d84-b25e052367fa",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "cec59792-61b3-45e3-8797-daaeaf25cd90",
        "cursor": {
          "ref": "2ab49ee1-e828-4965-b2e9-788463533b46",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "20821b98-ab1d-4854-b260-d1dba4199aef"
        },
        "item": {
          "id": "cec59792-61b3-45e3-8797-daaeaf25cd90",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0e6c7cac-3227-4437-9d84-b25e052367fa",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "d4ec1d44-7287-42ac-b996-8a12bd0cedac",
        "cursor": {
          "ref": "0a8bf9e4-a8f3-40a1-91ae-bf6fdcbb0637",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "18313cbb-2581-4188-9c3c-bcafb20720ae"
        },
        "item": {
          "id": "d4ec1d44-7287-42ac-b996-8a12bd0cedac",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "66a44a4e-f1cc-4587-a599-e155aeec0e37",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ce20e42e-85d7-4578-bd68-bf69114b0b82",
        "cursor": {
          "ref": "53346cef-5a46-44a0-8632-25fb657b5162",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e445f857-df00-4910-9886-cd59841c6ea1"
        },
        "item": {
          "id": "ce20e42e-85d7-4578-bd68-bf69114b0b82",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ec3a9dd1-d2c4-4531-ab9b-f91e00b3cbdb",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "d86edc01-0071-457a-9f72-07363a571d20",
        "cursor": {
          "ref": "938e2161-5a5e-47a7-b2b2-a4df50a0438e",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cee9a0ad-07f3-4f6b-8ad2-61934ac1cbb4"
        },
        "item": {
          "id": "d86edc01-0071-457a-9f72-07363a571d20",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "29dfdf3d-3413-4f8a-8b71-a0bc32878f2e",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6bdec577-f063-4220-b458-56362828e69b",
        "cursor": {
          "ref": "f5b07a30-d9c7-4025-8b19-d0d60ab7fc08",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4643547e-1f6c-46ac-a212-731ece57e5c7"
        },
        "item": {
          "id": "6bdec577-f063-4220-b458-56362828e69b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9dec2473-2549-4c00-810e-0a00940b2d8c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "45e22cd2-fcdb-47ba-8279-ff75167eae97",
        "cursor": {
          "ref": "209db3ab-2cb9-49bd-b071-459752a029a2",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "329ea1f2-e6c5-463a-8c13-873a53cc6eae"
        },
        "item": {
          "id": "45e22cd2-fcdb-47ba-8279-ff75167eae97",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d2106c56-f43f-42e6-a6f5-449494e42e61",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "8394047b-2971-4ecf-81a1-2a5777fad918",
        "cursor": {
          "ref": "049513d9-5134-4129-84d4-ea544f1291cb",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c57e5a1c-b531-4984-a17a-e31f6ea7ef92"
        },
        "item": {
          "id": "8394047b-2971-4ecf-81a1-2a5777fad918",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "14191988-cf36-4d6b-8290-eff07db21556",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c3dd843a-5141-4d1f-9044-4cb19690689b",
        "cursor": {
          "ref": "b7627235-2ad0-410f-a515-14364c7f54c3",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "492a71e2-83eb-4ffc-bb1d-ca03ff08eb80"
        },
        "item": {
          "id": "c3dd843a-5141-4d1f-9044-4cb19690689b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "740ba746-25a7-4fbf-9173-d3276710d18e",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "b2fd9c5b-4662-4e69-a806-cf8b78bfaacb",
        "cursor": {
          "ref": "47745691-5d2a-4477-9d50-280cdb64edf6",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "41c35ef1-8af4-4293-bfa2-35ac60003e33"
        },
        "item": {
          "id": "b2fd9c5b-4662-4e69-a806-cf8b78bfaacb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "58103602-c25b-4669-aa67-7d52c7f42f47",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "012a9383-dd05-409e-a1e8-f3e56ca9054b",
        "cursor": {
          "ref": "053cba72-3aba-4bce-9c25-1dab82325d64",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9130383a-c218-4170-a525-bf0c4a28298c"
        },
        "item": {
          "id": "012a9383-dd05-409e-a1e8-f3e56ca9054b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f72c486f-6be2-463a-8e6c-9651e6e3f242",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "00cb6bfb-39f5-4241-bb11-8e2d3f42b537",
        "cursor": {
          "ref": "76e13f55-06ad-400f-b36b-1d2ed462b64b",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a107ed2b-9e08-4479-9673-46343338e44a"
        },
        "item": {
          "id": "00cb6bfb-39f5-4241-bb11-8e2d3f42b537",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2af79ee0-f8c7-4dba-ac62-616411e35307",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "3caddc72-9c37-44bf-bc81-bca693a407b1",
        "cursor": {
          "ref": "bbe1f442-5dce-4995-8b38-200e79bfee10",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c885e40e-258d-46f1-8e22-426ae48d3816"
        },
        "item": {
          "id": "3caddc72-9c37-44bf-bc81-bca693a407b1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "91222af1-c37f-46f6-aa25-48632664ab2f",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7a081833-fa22-494d-8214-1cc613e1ffe7",
        "cursor": {
          "ref": "c9f44ee8-41e2-4f9a-9d60-b13b5220a8c2",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8c14308f-1bdd-4b91-8f7c-f6bf54641e9f"
        },
        "item": {
          "id": "7a081833-fa22-494d-8214-1cc613e1ffe7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8376576e-3100-4391-b2d8-b68e97e029f3",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "5f5c3835-0aa2-4f36-9eb5-105d11627c0a",
        "cursor": {
          "ref": "015ca963-a323-4868-b78c-34cceb528a10",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "72d0248e-fd70-452f-bb14-1bfe1a26c17d"
        },
        "item": {
          "id": "5f5c3835-0aa2-4f36-9eb5-105d11627c0a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a974970f-a96a-41b1-a7e2-ada9a63fc718",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "27c55785-17eb-496d-978c-bb401387ada6",
        "cursor": {
          "ref": "3669a75c-7a02-4700-ac73-f727e9b019c0",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "230dc089-e3bc-47a4-8706-c89184a0a4b6"
        },
        "item": {
          "id": "27c55785-17eb-496d-978c-bb401387ada6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f654fbb9-d413-4b91-959b-9fb890ba5a07",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "f93da13e-3957-4b83-874e-1f3007db923a",
        "cursor": {
          "ref": "649e3a42-2e23-49c8-84b8-572cfc0c35d0",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c54d4d20-af81-4f07-8391-8287cf0a08d7"
        },
        "item": {
          "id": "f93da13e-3957-4b83-874e-1f3007db923a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e5f8e9e7-36db-4e65-8129-14f21e3e1879",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "530aea5d-938d-4962-ad5d-96694854d327",
        "cursor": {
          "ref": "6ead9b40-652d-4c59-b564-b86f032f3dc2",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5205f11a-b216-4cac-a6fb-ad1cd35ae62b"
        },
        "item": {
          "id": "530aea5d-938d-4962-ad5d-96694854d327",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "284a6301-7b55-467b-badc-743f6388d056",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "858264df-a41f-4f98-8c99-d11aa3ccd2d8",
        "cursor": {
          "ref": "adf5bb9e-83b0-420e-8ff6-114ff7f3cd19",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4e19d3a2-dd82-4909-b697-6852c172e4e6"
        },
        "item": {
          "id": "858264df-a41f-4f98-8c99-d11aa3ccd2d8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2238fbd5-a8a6-4795-afa2-5d8c58c326a7",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "ff623fa0-9649-4754-ba85-47aaa7646131",
        "cursor": {
          "ref": "bf0959f7-ee8a-4b22-a225-d6191b91fa08",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fa0c81d9-c0fd-4b48-8a49-ae56878f8836"
        },
        "item": {
          "id": "ff623fa0-9649-4754-ba85-47aaa7646131",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "083067dd-2b1b-4047-952c-03ff4fd670d6",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "5ced6de6-9180-47ca-b8de-48946299395c",
        "cursor": {
          "ref": "b729a501-c74b-48f7-8c6a-5710c90a6e0e",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0e1a38f7-96d7-4452-988e-77bc1a1eb9e5"
        },
        "item": {
          "id": "5ced6de6-9180-47ca-b8de-48946299395c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "edc50536-6f25-4794-86f5-110bb188a2f8",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "97bcc806-88f8-472f-9ed0-4dcc2bc2cd89",
        "cursor": {
          "ref": "ab029b1f-7d30-4fa9-8086-682b57f12cb0",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4c6528a3-aa00-46ad-a756-84495299f14d"
        },
        "item": {
          "id": "97bcc806-88f8-472f-9ed0-4dcc2bc2cd89",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bff89eb7-b048-4113-b4c5-1b0a4e8b5b1c",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "e9692b75-f11a-4145-a516-14c4d0e7d155",
        "cursor": {
          "ref": "0e35b165-bba6-4e13-b2b3-8aa58a16db8c",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e26fbcce-c99e-4e08-9069-b92d98b43452"
        },
        "item": {
          "id": "e9692b75-f11a-4145-a516-14c4d0e7d155",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d9b78791-85b0-4d43-b416-9d4b5534614f",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "ded5e05b-f911-46c7-84c4-dce5c85e861b",
        "cursor": {
          "ref": "69c2c118-5046-417b-85e6-21db4441d668",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "dd9d305c-93e2-40b4-9bae-a692019f5ae4"
        },
        "item": {
          "id": "ded5e05b-f911-46c7-84c4-dce5c85e861b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e0ff5f67-91f1-4f09-8466-19529c2ecf9e",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "31546a4b-00ca-4c7e-ab06-5482cef8ed38",
        "cursor": {
          "ref": "08de7830-71de-4b23-b1d7-00fa56e76741",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2624bb7b-2dd6-447d-95b9-4a82ee9c068c"
        },
        "item": {
          "id": "31546a4b-00ca-4c7e-ab06-5482cef8ed38",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6c827ded-b6e0-4e5f-b073-72532d680eae",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "50229888-68c3-4308-a2d6-a897132c388d",
        "cursor": {
          "ref": "7e13fb07-e867-485d-9a08-6bf18f20aa73",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "34d2bf94-c78e-46e0-a445-567f0d7a6bbd"
        },
        "item": {
          "id": "50229888-68c3-4308-a2d6-a897132c388d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e7391b1b-f310-4cf1-92ae-e9596f4fd014",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b6bd132d-83fa-4e8e-b116-798c024c9b6c",
        "cursor": {
          "ref": "66f15ab1-bd55-4755-8757-28aee75bbd33",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "be6f6766-7f17-4fc5-a649-6353ae9fef0a"
        },
        "item": {
          "id": "b6bd132d-83fa-4e8e-b116-798c024c9b6c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "81fd472b-bf3d-413a-95d3-3a813880fa6f",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ccd408c0-7596-400d-ab76-6a32775d353e",
        "cursor": {
          "ref": "2062cb23-6cc1-4888-bdce-f51edab0b7f9",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8c597f6b-6b84-4e05-8faa-7b56cdaeef2c"
        },
        "item": {
          "id": "ccd408c0-7596-400d-ab76-6a32775d353e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e0b3f4bd-8eb4-43ea-b9ed-0057054130c7",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "7ebf9d8e-7a27-42d5-aa7e-670ba73ad03a",
        "cursor": {
          "ref": "e3b91bcc-64ab-4458-b0e3-a9ed45f92b32",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6a5e8859-855b-433d-b158-fc98f731eb18"
        },
        "item": {
          "id": "7ebf9d8e-7a27-42d5-aa7e-670ba73ad03a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fae47ef5-93fe-43e6-8072-759287465273",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "200930fc-bc14-4b0f-b24c-ff16336f66fb",
        "cursor": {
          "ref": "7d24dd92-4a97-4e8c-9eae-687f32a4843a",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a2782b3c-ab7c-486c-b839-bc0c379a99b6"
        },
        "item": {
          "id": "200930fc-bc14-4b0f-b24c-ff16336f66fb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1d2c2503-78b0-4d5e-8810-12692393ae2a",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "25e3046d-5f80-44fc-9a13-c62e4790f687",
        "cursor": {
          "ref": "ad737fce-64a7-46db-a303-25bc06539a48",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "08656434-e9c0-4b97-9b82-1e60b820e683"
        },
        "item": {
          "id": "25e3046d-5f80-44fc-9a13-c62e4790f687",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "748ba2f4-3272-4941-817a-2c2786c8fd6f",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c07cb141-c843-48af-98b6-c9d79474a614",
        "cursor": {
          "ref": "afeb600a-78de-488d-8681-0d5d2c277385",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9639f5d7-aa41-4ded-a2ca-f9177e4941ff"
        },
        "item": {
          "id": "c07cb141-c843-48af-98b6-c9d79474a614",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d74a3276-f069-4884-b400-97e7522ffbfb",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c8e2b4a2-cc6a-4fc1-a7e1-d6262be7f624",
        "cursor": {
          "ref": "9703a475-934b-47e9-b064-3f7b54615dd5",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0de4d81c-de93-46fd-9058-3e340a059c59"
        },
        "item": {
          "id": "c8e2b4a2-cc6a-4fc1-a7e1-d6262be7f624",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1e1ada8c-0748-4690-96bc-1664b5e05a50",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "fe5fd7ff-06f5-4849-86ac-f8851b474fe3",
        "cursor": {
          "ref": "7351d0a4-eeaf-442b-998b-807437c8ac7b",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fb81b211-aace-4f54-986a-321fe096ccba"
        },
        "item": {
          "id": "fe5fd7ff-06f5-4849-86ac-f8851b474fe3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "27e2e1fa-cbd5-46b4-adfa-fcaea17764ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41c5446-042c-4108-84ca-0344e2da3e8d",
        "cursor": {
          "ref": "a2cbd59d-55b9-463e-98a9-eb19a4857853",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6b169cb7-a4f5-40ef-9ddd-62f3ee65b07c"
        },
        "item": {
          "id": "e41c5446-042c-4108-84ca-0344e2da3e8d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "bac61e5c-5a8e-45ba-9199-0b917217f00b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e753b4-4fbe-4a87-8000-89c09ceeb498",
        "cursor": {
          "ref": "7ede6a16-5ce7-49cc-a2ab-e9d7e454ae26",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7312e78e-ef1a-4e06-9084-283385747cf7"
        },
        "item": {
          "id": "94e753b4-4fbe-4a87-8000-89c09ceeb498",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8e5051f6-46d1-448f-97bb-150b87347dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e753b4-4fbe-4a87-8000-89c09ceeb498",
        "cursor": {
          "ref": "7ede6a16-5ce7-49cc-a2ab-e9d7e454ae26",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7312e78e-ef1a-4e06-9084-283385747cf7"
        },
        "item": {
          "id": "94e753b4-4fbe-4a87-8000-89c09ceeb498",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8e5051f6-46d1-448f-97bb-150b87347dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ff5b0a-eb87-4eb1-9371-b272f0a10461",
        "cursor": {
          "ref": "da7e7a1f-a114-450e-a58e-795e9790fed3",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f005e147-811f-41c1-90ab-f25f5d2e345c"
        },
        "item": {
          "id": "a9ff5b0a-eb87-4eb1-9371-b272f0a10461",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b94b2a9d-4ea3-4857-9305-1b2a451b6297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab4a6aa-db89-4f06-8c2b-b57c1b2ba587",
        "cursor": {
          "ref": "1bfd035d-3b4d-415e-a42d-bf175ad7f064",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "db4fb2ea-501b-47b2-8b07-d6c65ec1cfa7"
        },
        "item": {
          "id": "1ab4a6aa-db89-4f06-8c2b-b57c1b2ba587",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2ec09b04-2b05-45bb-be13-dc20fd389804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92f8b24-416b-4106-b006-b93bffa84b7a",
        "cursor": {
          "ref": "c520f581-3e29-43d0-81f7-c2c652f864bc",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "737f6e57-4577-4a89-a593-b242b37a1ee1"
        },
        "item": {
          "id": "d92f8b24-416b-4106-b006-b93bffa84b7a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9a767be1-947f-486c-bd54-8090e32e5087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9312b05-2089-4bcd-8b73-23ca780dc121",
        "cursor": {
          "ref": "1c144f9d-94d9-418a-a3f9-93c2f3f5ecc6",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "97b93d21-c770-44e2-83e4-311c53a3164f"
        },
        "item": {
          "id": "e9312b05-2089-4bcd-8b73-23ca780dc121",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "84c2a1e9-1933-4cef-8e83-aea067c91a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0c33ee-5068-4e33-82a8-a8ee1fba9581",
        "cursor": {
          "ref": "9d0f6f36-e7ca-4b4b-9d96-63dec7c203dc",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "811c4a2b-d1f6-46e7-9185-22681117ac7c"
        },
        "item": {
          "id": "9f0c33ee-5068-4e33-82a8-a8ee1fba9581",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "62129e1f-b685-42a2-b8cc-2ff9584c6e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55042c5-26e2-4b87-a6aa-31534a858481",
        "cursor": {
          "ref": "df68531e-0ded-44a2-94d6-f750ae56c79f",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8839e907-e815-42b5-980a-5cad985963cd"
        },
        "item": {
          "id": "f55042c5-26e2-4b87-a6aa-31534a858481",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4729e4f7-ad13-406e-922a-85a2e778b6b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085f26d9-2895-4da0-a6da-3fdd52165940",
        "cursor": {
          "ref": "96eed9a4-48fd-4eea-81bb-3d802a46473e",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2f5c9a34-79c9-469f-99c0-3b5561d3e90a"
        },
        "item": {
          "id": "085f26d9-2895-4da0-a6da-3fdd52165940",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "12492548-40a8-4fd2-ac02-695ff2655c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50511ed4-833e-4066-841f-2cffb75b1e3a",
        "cursor": {
          "ref": "96491631-1ed3-49b7-b000-ce1b30cbd557",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "39c0aa46-b9aa-4262-a616-09c3ee23a786"
        },
        "item": {
          "id": "50511ed4-833e-4066-841f-2cffb75b1e3a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5a1d4401-8705-4950-b173-68c697edb13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7cff7b-9150-4c62-830c-b32e2472313e",
        "cursor": {
          "ref": "2c2d07e6-75af-4216-8e24-010a5dbfb814",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2a7c3376-d592-4f57-9d3f-4c86fa998a3b"
        },
        "item": {
          "id": "3c7cff7b-9150-4c62-830c-b32e2472313e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "83a0c726-eabf-4897-9e4d-fa04748aaa27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7250079-1ac7-48c5-92a5-7f3f2ea8478e",
        "cursor": {
          "ref": "57f46fe1-1a00-4a38-9c98-8c3ff29246a0",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a15a34df-5b21-43c0-9a19-1080fd5bf780"
        },
        "item": {
          "id": "f7250079-1ac7-48c5-92a5-7f3f2ea8478e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c8fe47eb-012e-4677-8cda-25aee5541e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b833c13b-73f2-4f92-adfb-bd0a72dd484f",
        "cursor": {
          "ref": "0d55851d-297d-40aa-aaa7-8801d09e0de8",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0ebfdfee-5055-40e7-935d-5051650ac233"
        },
        "item": {
          "id": "b833c13b-73f2-4f92-adfb-bd0a72dd484f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c2c01715-05cc-490b-b7f0-0e3c21843abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9839c2ae-b90a-4304-a663-4cf2b45c89e5",
        "cursor": {
          "ref": "6ed7589b-2783-45ee-85c3-288be7dcf3fd",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fda98253-b801-4588-8bdc-f5be73e4481c"
        },
        "item": {
          "id": "9839c2ae-b90a-4304-a663-4cf2b45c89e5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b7a20d34-b84d-4d01-b22f-0390a33a5d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c024bbbf-f5f0-4860-afb4-f7fee5ca4d46",
        "cursor": {
          "ref": "717c60c0-d6a0-4ba5-bcda-790676e2f295",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f5bea38c-94c2-479a-a7d4-989dcfb48b6f"
        },
        "item": {
          "id": "c024bbbf-f5f0-4860-afb4-f7fee5ca4d46",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "645e1008-6f98-4f91-a7c7-2b29deaad7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2484586b-ec2b-4fdb-bf3b-60a2b2c19eaa",
        "cursor": {
          "ref": "cfd28202-c563-4a8b-b1e1-23e65092bf87",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "984a1766-f558-4ab9-b12f-19b47eb2bbbe"
        },
        "item": {
          "id": "2484586b-ec2b-4fdb-bf3b-60a2b2c19eaa",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "41c856a0-ea30-4ef8-89bb-61f795c8e780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d47c71-f3bc-49a9-8915-0c6990734ad8",
        "cursor": {
          "ref": "f4f81e21-87e4-401b-b758-7c0797ad8a30",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c7776bc8-1bbb-4160-936a-c5b4cacca9f9"
        },
        "item": {
          "id": "c6d47c71-f3bc-49a9-8915-0c6990734ad8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9262a3ee-ea8a-45db-902c-1f54d3191e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3a7e34-cf0e-4871-bdff-ba238a996445",
        "cursor": {
          "ref": "c741cccc-5d9e-46e2-8190-d3fb0fe32dd5",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3e3cdb1b-249c-4dfa-9cac-ce661eaf12b7"
        },
        "item": {
          "id": "bd3a7e34-cf0e-4871-bdff-ba238a996445",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d731b86a-0a54-4984-8d0f-3c938716e872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e0d3c1-1705-4bff-8fbc-69d6935270b1",
        "cursor": {
          "ref": "82e4db79-b311-4fc7-bff6-cc41eae95683",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "28c67af5-5e67-40a5-81bc-3d7a9601e9c2"
        },
        "item": {
          "id": "72e0d3c1-1705-4bff-8fbc-69d6935270b1",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "64de4f07-4b17-4378-90ab-c980223f6ca3",
          "status": "OK",
          "code": 200,
          "responseTime": 655,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "ca23b091-ed87-4f1b-87d5-e867470b158a",
        "cursor": {
          "ref": "50395870-e106-4439-b136-037d0ddd8e3a",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d5708b05-f05a-40dd-b6ab-461a589b344f"
        },
        "item": {
          "id": "ca23b091-ed87-4f1b-87d5-e867470b158a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "96d2bec0-ae07-469b-8680-38b0e929e91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783d78ab-69de-4dfc-b4af-bef27ce226d5",
        "cursor": {
          "ref": "23732d19-a06b-4400-a4d9-977eda72f2ce",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "99b420e1-3b68-40c8-b2a3-3b4235d1310e"
        },
        "item": {
          "id": "783d78ab-69de-4dfc-b4af-bef27ce226d5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1300efd9-a5fc-4f69-b2e1-b03d94e6a51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6c6b4b-bd54-4f26-ae9e-bd4f5d568fd5",
        "cursor": {
          "ref": "afdb0b30-17bf-4938-aaeb-75b10b641cea",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "632f334d-8279-460a-8a36-d3176fa61e6e"
        },
        "item": {
          "id": "af6c6b4b-bd54-4f26-ae9e-bd4f5d568fd5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "80bb489a-70c8-4194-8324-20d1381335ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fe0b89-ac8f-4be3-ad0d-c9e754ecd8a2",
        "cursor": {
          "ref": "ec16245c-aa87-48fe-9a18-d52dcb67614c",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c50ee704-70a6-45a7-b1ba-2322d092a9ff"
        },
        "item": {
          "id": "97fe0b89-ac8f-4be3-ad0d-c9e754ecd8a2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "539ffda3-6106-4465-b5bf-ca866302adfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3779f17e-f41f-4613-980d-af066140093d",
        "cursor": {
          "ref": "da19e75d-55f3-4c1f-ba52-276bfc84b0ec",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7e7a580a-29a8-4390-89ee-91b461b05e62"
        },
        "item": {
          "id": "3779f17e-f41f-4613-980d-af066140093d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "72451969-90b4-4c6a-82b0-e8c2b9e19c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4940f43a-0fec-46f0-8b9b-76e70090b1a6",
        "cursor": {
          "ref": "43dbbdae-cdb7-47eb-8194-fc5046136918",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e86aa851-d26d-487d-9e8b-dcac3088778e"
        },
        "item": {
          "id": "4940f43a-0fec-46f0-8b9b-76e70090b1a6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "21fab328-ffc1-4458-b34f-35595dd87383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24e1a7e-cde3-49cf-bb38-b271437737f8",
        "cursor": {
          "ref": "21cd3158-d181-4b6a-908b-b54b7133395d",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ad9d8857-53aa-46a0-9b11-bfa564c51000"
        },
        "item": {
          "id": "e24e1a7e-cde3-49cf-bb38-b271437737f8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e8cd936c-47be-4529-936d-c29739a79736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225c3840-6c3d-4ccd-8016-3708f90283b6",
        "cursor": {
          "ref": "b449b537-d285-46c1-a144-bba1d5f4b63f",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9072aaef-0e62-4ee3-a83e-4385a0d75411"
        },
        "item": {
          "id": "225c3840-6c3d-4ccd-8016-3708f90283b6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0df65852-ccb0-419e-9655-a2b07d8f6d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b933f1-3889-429b-8ee6-f73463cec301",
        "cursor": {
          "ref": "7796953c-b86f-4f2d-951e-4506410b2f95",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7717d5ab-f7c8-4926-ae47-020270d3abec"
        },
        "item": {
          "id": "64b933f1-3889-429b-8ee6-f73463cec301",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4731269f-90fb-42c3-816c-4fcb2a06257a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7440b179-e562-4bff-b175-741e7fa580ee",
        "cursor": {
          "ref": "8af82136-659c-4ab5-aa10-683472b89792",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6a778e64-e41e-4859-910d-0df60c05825f"
        },
        "item": {
          "id": "7440b179-e562-4bff-b175-741e7fa580ee",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f525ec1a-ecdc-4017-b31b-4146334ed350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05424b89-424b-412e-91ac-ac1a2d942248",
        "cursor": {
          "ref": "7c8cef60-5e8f-4310-9a83-ae95769c10d4",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "568d22c7-0604-4fba-a804-7a20fab27dc5"
        },
        "item": {
          "id": "05424b89-424b-412e-91ac-ac1a2d942248",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2800235c-5859-47ed-b572-edc3e070cf3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce04be3-5070-4b33-a59b-f647ad1fe705",
        "cursor": {
          "ref": "68873a59-947e-4db1-b813-5b4da6817c25",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "28ef7d9a-fb64-444d-926f-5bfcd617c501"
        },
        "item": {
          "id": "5ce04be3-5070-4b33-a59b-f647ad1fe705",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7feee5a5-c7cc-451d-8ba2-f046985204c2",
          "status": "OK",
          "code": 200,
          "responseTime": 257,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "abc57eff-8451-4291-9986-e314e6bd0f47",
        "cursor": {
          "ref": "17f27942-d462-48ba-8f07-48c33a3036ea",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5b84c744-c57d-4f67-99ba-ead67610af37"
        },
        "item": {
          "id": "abc57eff-8451-4291-9986-e314e6bd0f47",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2995894c-cdef-4a59-9583-8df9d829a572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f329a3-229a-4c67-b31f-1cab51d7b6cf",
        "cursor": {
          "ref": "0775bcd5-7297-4ff7-ae03-5f9f89bbf511",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d4c619d4-9ba7-4355-860d-b0b60c944588"
        },
        "item": {
          "id": "a7f329a3-229a-4c67-b31f-1cab51d7b6cf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1cd8e4b5-05e1-4c2d-ab0f-0434fc601051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4a53af-95a8-4604-b1a4-596152cf0967",
        "cursor": {
          "ref": "e1a7b76f-5791-4622-8d5d-eabbb41e8f20",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4028f62f-abe1-4ff0-a3bb-0ebc5d5c70d6"
        },
        "item": {
          "id": "1a4a53af-95a8-4604-b1a4-596152cf0967",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e6cfd787-ec6e-4cde-b188-887ed3d80e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c211054-e6e3-4a79-8aa6-c0033d2f74b4",
        "cursor": {
          "ref": "ab753dd4-9430-4273-85d2-e12e4ec84097",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4cceab26-abd3-4739-9e43-4e4d1d93d26f"
        },
        "item": {
          "id": "8c211054-e6e3-4a79-8aa6-c0033d2f74b4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5d3576b5-b163-4888-bd46-a7976d3df0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91119d8f-ab13-44c6-bb7b-f259a4c05731",
        "cursor": {
          "ref": "4d7fc961-540d-4068-bece-f8ab9b3ef85c",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d84138f0-4370-44c4-bdad-32eb042012d1"
        },
        "item": {
          "id": "91119d8f-ab13-44c6-bb7b-f259a4c05731",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "59c4d257-52da-4d4f-a5b7-d2f61a91eecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0840a3f-4ca0-4247-a28a-6bf00ced0213",
        "cursor": {
          "ref": "0dfdf8e2-7c64-4841-a1ec-55f2fda1a33b",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ad26c612-ec8e-48b8-84b3-0447188a3d39"
        },
        "item": {
          "id": "b0840a3f-4ca0-4247-a28a-6bf00ced0213",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4371c4c2-a522-411d-aab9-4b0280e3b43d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45daefe-a77e-4086-ae82-bf551763c164",
        "cursor": {
          "ref": "00230a4e-e676-444d-92ec-612985a5fd95",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4d049acd-548a-450a-8772-8deced448a8f"
        },
        "item": {
          "id": "d45daefe-a77e-4086-ae82-bf551763c164",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "37ab34e8-2d68-4ddc-bb66-165e541852d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad013fad-424a-433b-96e8-ae2f752fc200",
        "cursor": {
          "ref": "c0fbe34d-1c59-437c-be86-7005da4edbc7",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "76620949-2492-4cd1-874c-77b519c5f269"
        },
        "item": {
          "id": "ad013fad-424a-433b-96e8-ae2f752fc200",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d6b62e74-9e98-466a-a76e-515422e77444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c8b4ce-2d93-4441-8d43-de59f6d93973",
        "cursor": {
          "ref": "f770cc4c-0a0a-4efb-b252-c2d5dca144e7",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "13b7d860-8294-4797-bbac-a6038d7c08c9"
        },
        "item": {
          "id": "56c8b4ce-2d93-4441-8d43-de59f6d93973",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7298a8c1-3e63-43be-a227-780062e56d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236b35ca-b1ee-4e07-bf7d-df467155b710",
        "cursor": {
          "ref": "e542bbcc-7d67-4a24-993a-1ef155bf9aa8",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d7911f1e-97a2-495d-9ee6-a6f04def27fb"
        },
        "item": {
          "id": "236b35ca-b1ee-4e07-bf7d-df467155b710",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b4ffe1f6-c384-4eda-b06a-1134da5cc8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 664,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e9cf5b-1a62-4c96-aac1-d64bb4f9d125",
        "cursor": {
          "ref": "0aed575d-e266-4e3c-89bb-33404773a011",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "804364dd-afaa-4add-9564-011149e795b6"
        },
        "item": {
          "id": "c4e9cf5b-1a62-4c96-aac1-d64bb4f9d125",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bb31dab4-abf7-4ab1-8a66-392773e8e926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4baf63a-ddd9-4479-8694-e29f64de2088",
        "cursor": {
          "ref": "9f740c9c-47df-476d-be7f-0573aef3d560",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d2a8f489-51c3-4970-ba87-41e4f8541f44"
        },
        "item": {
          "id": "d4baf63a-ddd9-4479-8694-e29f64de2088",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e32dd50f-c73e-498d-8944-c1e437450adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582430e1-5a3d-437c-9937-6c68bdd53aa9",
        "cursor": {
          "ref": "3f18926b-a954-41ce-b7a8-426998cdf8ca",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5bf961ff-0802-4c18-a642-97bf897f4e59"
        },
        "item": {
          "id": "582430e1-5a3d-437c-9937-6c68bdd53aa9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "da80297b-ef8e-46e4-9213-3462a9834827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbde748c-2648-4b78-9157-c419d225de64",
        "cursor": {
          "ref": "e1955715-c4f2-42d3-9ff8-c43dafc017ce",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ebc03fd3-0b7d-4842-a304-8c33c06454b2"
        },
        "item": {
          "id": "cbde748c-2648-4b78-9157-c419d225de64",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b782916f-32e2-4385-b1a3-b9e2c902add5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a51b0e-81d5-4f63-aed5-a8c1a9f28783",
        "cursor": {
          "ref": "71ea5c6b-5e8a-48bf-a7d0-a1a6961e8485",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "02bd42b7-339a-4d3f-a895-e5f53ce3f239"
        },
        "item": {
          "id": "16a51b0e-81d5-4f63-aed5-a8c1a9f28783",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d00bc756-e0a8-4dd9-915f-7b660e620658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06773e23-12e5-4bf1-a752-5ec6f4536b7c",
        "cursor": {
          "ref": "caafd194-84ac-42c1-8858-e0f22e961812",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ff8c399f-8d8b-49d5-ba16-8f4a9b572232"
        },
        "item": {
          "id": "06773e23-12e5-4bf1-a752-5ec6f4536b7c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c1a9127a-c2d0-4ee2-b08e-4c887b5de8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b032aa-3dc2-4bea-b137-18a535562dc0",
        "cursor": {
          "ref": "e4d10bb1-139f-4a50-912d-bed6230ed405",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6316564e-33f6-4ef2-86b5-9bd01d8d74c1"
        },
        "item": {
          "id": "23b032aa-3dc2-4bea-b137-18a535562dc0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "686c0438-0aaa-4853-9f3e-e26ce008a85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63f752e-30c6-4322-892d-b55fb9e51ade",
        "cursor": {
          "ref": "a8c9ea07-035d-478d-b85b-96d9e0a72589",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5db21e64-9dea-44c5-a5f8-f0275fa6716c"
        },
        "item": {
          "id": "f63f752e-30c6-4322-892d-b55fb9e51ade",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ddf977f4-d670-45f7-a017-b744f85bb37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 357,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908148fc-17f8-4e56-973f-372e1cc84ea8",
        "cursor": {
          "ref": "43e90e77-bea7-4385-9568-c9910d71b483",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "44521aaa-a737-4a41-9c93-8fadbcf8026f"
        },
        "item": {
          "id": "908148fc-17f8-4e56-973f-372e1cc84ea8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d2f64d40-6247-4dfc-9077-9e952656a5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c640bd72-4765-4415-822a-c36a83000649",
        "cursor": {
          "ref": "f71daa46-fb94-4352-afd7-ebbe76f7f9e9",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8a0a8a2d-d626-4c7e-b14d-d933e9268c35"
        },
        "item": {
          "id": "c640bd72-4765-4415-822a-c36a83000649",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4b080cfb-8988-4e47-9e83-23457461da8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cfd27c-8cd9-4c2e-8173-6cce440b0e14",
        "cursor": {
          "ref": "770b384d-fcd7-4912-bee3-39596df125ce",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5e3e09c4-4c0c-4e83-b580-a86931225122"
        },
        "item": {
          "id": "e9cfd27c-8cd9-4c2e-8173-6cce440b0e14",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "94cf948c-644d-4f5c-b653-86695077ab3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8642118a-612b-4a9d-86a0-3ee55502747d",
        "cursor": {
          "ref": "60726b48-b9d5-4294-9bc6-557a00e6ffef",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "68bc3b6f-5763-4798-8d72-56d4897f6072"
        },
        "item": {
          "id": "8642118a-612b-4a9d-86a0-3ee55502747d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d32b5133-d99a-4a0e-84d8-0f98218132bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0ab641-1d0c-4a48-81fb-ab78cfe43c99",
        "cursor": {
          "ref": "65023b45-5036-4704-8632-69ce2d337646",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9ca9766f-88ec-49b8-b350-2fe2844a7bff"
        },
        "item": {
          "id": "8f0ab641-1d0c-4a48-81fb-ab78cfe43c99",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0517b337-d674-44bf-a53d-80e0ff22b9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871a9397-0137-4ae3-a091-e658675b0829",
        "cursor": {
          "ref": "4bd05cd5-2c2f-4b07-a46e-2b1fa5125613",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b8b0d7e7-4013-49c5-add0-f410f698df38"
        },
        "item": {
          "id": "871a9397-0137-4ae3-a091-e658675b0829",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0f299026-8cdb-4c53-8ae5-6980b49264e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cc972d-00df-4603-a488-5e554f78123e",
        "cursor": {
          "ref": "592f7ed2-8035-4e97-a51a-e7b0ed8c5644",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0d73cb7d-f0b0-4a5c-bec6-d15929ae1cbd"
        },
        "item": {
          "id": "f0cc972d-00df-4603-a488-5e554f78123e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "74a4c4d6-4af3-4911-842d-ede92a9c458f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08f0779-ac46-4a40-b4fe-cbf54a55e318",
        "cursor": {
          "ref": "1be5abde-374b-4b59-805b-e2f98e1d53c4",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "57b35940-340e-403c-a23b-33804275ed1a"
        },
        "item": {
          "id": "f08f0779-ac46-4a40-b4fe-cbf54a55e318",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a70e82b3-de03-40d8-adff-35cb66b824cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74559a94-e001-4ee0-853b-de39563c7606",
        "cursor": {
          "ref": "32cd4cb6-8c05-44d5-ae96-c9f6fcb85336",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d04c3004-b352-4412-94ac-e93b4a1eb20d"
        },
        "item": {
          "id": "74559a94-e001-4ee0-853b-de39563c7606",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "52da7779-cfc7-4219-b9e9-dd55b7601878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da4a0eb-a207-43d9-bb4c-84dae83dc2c4",
        "cursor": {
          "ref": "4dc4919c-a156-4116-9a62-c92dd93234a1",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8ec8c7d4-9a72-4eb7-97d1-abb6890937fe"
        },
        "item": {
          "id": "2da4a0eb-a207-43d9-bb4c-84dae83dc2c4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "26138a97-c229-4924-b977-fce506d2b32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 346,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c953b1-96ff-4101-b84b-7530fa10d1a0",
        "cursor": {
          "ref": "61032c79-0c46-4f9b-9899-ae18efd7b562",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bf91f7a4-c585-46bb-a056-f88816ec5ffb"
        },
        "item": {
          "id": "16c953b1-96ff-4101-b84b-7530fa10d1a0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7cb9ac52-82a5-438b-9aec-f69204601e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e70682-0989-41fa-bbd4-68f6d7ed5531",
        "cursor": {
          "ref": "7c748e82-f907-4a5a-8074-067dc321cd37",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2b8f2826-ca87-48b2-bc2a-17abd5eae2bf"
        },
        "item": {
          "id": "a9e70682-0989-41fa-bbd4-68f6d7ed5531",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "16395c6f-a04a-4264-bfcf-8c6a9961e068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c4f57b-1f12-4e59-abc1-c7f896297206",
        "cursor": {
          "ref": "82b0255f-a2cd-4313-9d18-29a300ce0a85",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "32a12c4e-ca02-49c1-93c1-9e16526ff99b"
        },
        "item": {
          "id": "e9c4f57b-1f12-4e59-abc1-c7f896297206",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5e5da06e-4692-4629-ae6d-59a4cfff5c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11010546-adeb-447b-ad2a-a26a0d7b841c",
        "cursor": {
          "ref": "fcc5af7c-a05e-4e59-a6b5-18b77bbbc448",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "77c2411e-b232-4298-b2cf-66c955e3c833"
        },
        "item": {
          "id": "11010546-adeb-447b-ad2a-a26a0d7b841c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e15788b7-8cbd-460b-8539-3cd6ef4393f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a190a8ba-ac00-4845-9a75-1afce78c996a",
        "cursor": {
          "ref": "35a5d94e-d8b4-4d0e-9229-9305ba9866d2",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1bf7dc15-cb27-491c-9580-d91c00090189"
        },
        "item": {
          "id": "a190a8ba-ac00-4845-9a75-1afce78c996a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1aa88a01-c7d9-434a-9d57-e2ef04cf6fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae828c3-9479-483c-8d00-41816dbef340",
        "cursor": {
          "ref": "221b956e-efa4-4940-bd64-1208298b0cb7",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b1900976-0389-4522-b1ac-3414885957bc"
        },
        "item": {
          "id": "fae828c3-9479-483c-8d00-41816dbef340",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c8341117-6154-436b-9b83-fc87930f11dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea1765f-9609-433c-aca7-aca4b8d1f7d0",
        "cursor": {
          "ref": "59c1da86-a2ca-4b27-a938-17f3dd58bbe5",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "917d4029-9086-4654-88b0-9d52cc58acc2"
        },
        "item": {
          "id": "dea1765f-9609-433c-aca7-aca4b8d1f7d0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "619bbf3f-c0f9-4290-b5dc-45950cc45f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad34ec10-0e55-4514-8fec-b5d23bb993b5",
        "cursor": {
          "ref": "08909d0d-8b01-4cfa-95f1-20e659b6f8d3",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "609803fa-9b6a-493f-9e7e-27b74e9f76c4"
        },
        "item": {
          "id": "ad34ec10-0e55-4514-8fec-b5d23bb993b5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1ed297ed-1638-4eea-ad35-13c1f6576e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c0fb61-5472-4a65-b2cf-bdecb1dc8aa2",
        "cursor": {
          "ref": "32ca106b-2e96-4e02-ba7b-579a015236d1",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8ac7f55b-8599-4dc4-97ed-782114e863ea"
        },
        "item": {
          "id": "d6c0fb61-5472-4a65-b2cf-bdecb1dc8aa2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "69f0ceee-71ba-43c4-afd2-9c7987081c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721d95cc-368e-4e3c-9427-ca132c0e2b6f",
        "cursor": {
          "ref": "990d2a74-2ad7-4f81-a661-797f4859e959",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "34686880-0e16-40f3-9538-4d5e599b800b"
        },
        "item": {
          "id": "721d95cc-368e-4e3c-9427-ca132c0e2b6f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0fc6aa27-b995-4e59-92da-12e412808181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4affc3fb-6af9-48b5-8e26-c67f5b30ae9c",
        "cursor": {
          "ref": "3002070b-f806-418b-95ba-aea5a66e86e8",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "13a479f3-a0a7-4ded-b45b-c8094959eb65"
        },
        "item": {
          "id": "4affc3fb-6af9-48b5-8e26-c67f5b30ae9c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a1a31a27-0f53-4306-98b0-be92dc86e9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2ad8b0-41d2-42fd-88e4-85f83362a2db",
        "cursor": {
          "ref": "991ec071-1cfd-40e6-8ceb-003fbc0b96cf",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "41831345-f8a5-451f-b69b-b0f5cbe297d1"
        },
        "item": {
          "id": "6f2ad8b0-41d2-42fd-88e4-85f83362a2db",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b74a52ad-9d91-4914-a9a4-ca1ea9a16ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09095dc3-b75d-4aa2-82c2-2602465c8718",
        "cursor": {
          "ref": "a9b1a56b-925f-4106-99a3-0235ca2250e0",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7c42f99d-66a8-4351-97fc-b5618e549954"
        },
        "item": {
          "id": "09095dc3-b75d-4aa2-82c2-2602465c8718",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1fb946d0-4026-40a1-a242-633cbf090fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e6f1ab-1c3e-45dd-aa99-64922f0ba379",
        "cursor": {
          "ref": "aa903a04-0b21-49dc-bc00-a0b523ee6c25",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d1ab9aa6-3a04-4e7a-b968-6d5d2dd34668"
        },
        "item": {
          "id": "f0e6f1ab-1c3e-45dd-aa99-64922f0ba379",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8a0ee61c-a6a3-4869-bda3-6b7c8da3b396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae920fff-12a2-4985-8161-4fcd2547ff41",
        "cursor": {
          "ref": "6d5ec603-f190-4fa1-97cf-6e6f54230010",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f164d629-cb72-49c1-a55b-71128fa3524c"
        },
        "item": {
          "id": "ae920fff-12a2-4985-8161-4fcd2547ff41",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0f6580a7-cefc-458a-b6b9-5f29c6897ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6408d5-2429-492c-b9ab-f4cb817c16a9",
        "cursor": {
          "ref": "d2d7838d-0bde-4753-b4e7-3242d403ee61",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d75511d9-51a9-49dc-84bb-88d1d5eb7fbd"
        },
        "item": {
          "id": "1f6408d5-2429-492c-b9ab-f4cb817c16a9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b7ce159d-98da-45ea-9571-9b9bf082e318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3214af7-53f3-487d-b3bc-8817ee0811a6",
        "cursor": {
          "ref": "693c36a4-daf9-43dd-9cdd-948018398a19",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7a184d00-22bb-4bbb-a984-4572eaa28233"
        },
        "item": {
          "id": "f3214af7-53f3-487d-b3bc-8817ee0811a6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e6d7b1f6-1597-41f0-9bc1-0e8e44b39ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5adc26-83bf-4580-b903-6efe7539b356",
        "cursor": {
          "ref": "5fe37d7f-db70-4515-b779-e7028096dd13",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3c46b8d9-25b8-4c06-92ed-4179e7c1c1a5"
        },
        "item": {
          "id": "bf5adc26-83bf-4580-b903-6efe7539b356",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d70a7766-086f-456a-9140-ff0ee1304cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cb7337-3c4f-4ecf-a643-fb64a98608ce",
        "cursor": {
          "ref": "2f052bcc-1592-4a3f-88ee-006b766c7432",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ca4a7ab9-3840-4266-829c-d2b705f4a496"
        },
        "item": {
          "id": "62cb7337-3c4f-4ecf-a643-fb64a98608ce",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b504b433-d416-4a0a-9ee6-6336d130637a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014bc58f-1e79-43b7-a65d-1b27c8ae4eed",
        "cursor": {
          "ref": "46b69079-af9c-4c95-b3cd-b0e74060bfc9",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6a77c491-af01-4715-a849-f0ed29175e78"
        },
        "item": {
          "id": "014bc58f-1e79-43b7-a65d-1b27c8ae4eed",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c2079d12-c42c-45be-97fd-354a07fb6cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28835ef5-bf7a-4ec6-8cf6-0430d7ef0364",
        "cursor": {
          "ref": "50e2fa65-6d85-4927-88ca-ccc6635da1dd",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "806ab993-7514-4f24-9f59-03528d9e2610"
        },
        "item": {
          "id": "28835ef5-bf7a-4ec6-8cf6-0430d7ef0364",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "da1efb5e-522e-4cd7-8c63-502badedcf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c767ee-2a92-48bd-9a3a-d112e47f1412",
        "cursor": {
          "ref": "838b194a-7d08-4bf8-8ee2-c44f352bbc48",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "30b14f58-a144-427d-9742-f391c992c017"
        },
        "item": {
          "id": "19c767ee-2a92-48bd-9a3a-d112e47f1412",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f006e0b9-ddfa-43a6-ba2a-05ebc12c9070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3b3837-2641-4565-a2fb-3a6aa1505e8b",
        "cursor": {
          "ref": "14582707-3661-4895-804d-7809e1515fd4",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "956037c7-16ca-4dd2-a95b-92384d4f2e44"
        },
        "item": {
          "id": "3e3b3837-2641-4565-a2fb-3a6aa1505e8b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2e0b5091-a0cf-4d09-959f-9499d017895a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1185597-fb17-4546-9232-c2087fe66371",
        "cursor": {
          "ref": "ffb1082a-3d36-4c5b-901a-5eef81b532a4",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "786ea02d-64b4-43a4-a439-a520a01a9195"
        },
        "item": {
          "id": "c1185597-fb17-4546-9232-c2087fe66371",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "863bf41a-8c7d-4744-b38f-4e8906b9523d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1566f0bb-a1ef-45fe-bcad-597cd2a45729",
        "cursor": {
          "ref": "d725d24c-79c3-4919-a999-9d0afd8dc69a",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c43bdad2-ee9f-450c-9077-b83bb5e66e9e"
        },
        "item": {
          "id": "1566f0bb-a1ef-45fe-bcad-597cd2a45729",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "34d0f959-d84c-40b2-917c-512bc7f80c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c3bf14-ddb9-4332-8d00-f6e5c306c2a4",
        "cursor": {
          "ref": "ab2852b1-e0fb-4c01-806a-406c07a84933",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "109251af-0fe6-42f1-9c3b-180cd7894c8e"
        },
        "item": {
          "id": "32c3bf14-ddb9-4332-8d00-f6e5c306c2a4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6cfe5ecd-af9b-42bd-beff-cd266daf8cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8342edf-301a-40fa-ba2e-c9c777b97821",
        "cursor": {
          "ref": "7332b574-a1af-4dcd-8702-3fd97e7de163",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ab42aea1-9f2c-4f5e-9521-8ca413ad488b"
        },
        "item": {
          "id": "e8342edf-301a-40fa-ba2e-c9c777b97821",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "25c2d195-6bd8-447c-8c52-b02abeaef627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3330db-ef1d-4a96-9e1a-b3c371235d80",
        "cursor": {
          "ref": "be4100f5-5c76-4201-b951-57b4b01bc76b",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "86604888-ebe8-414c-a87e-e5f9f8f1206b"
        },
        "item": {
          "id": "bf3330db-ef1d-4a96-9e1a-b3c371235d80",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f6e23672-b34b-4d4b-8436-1e70877db03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f2ca3a-28fa-4f71-bf18-45cc1ec09d3a",
        "cursor": {
          "ref": "8c85a13c-b0bc-4b82-ad0e-8e3785e70808",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "519d789a-6ca0-4a6f-b334-dacba25b15f2"
        },
        "item": {
          "id": "61f2ca3a-28fa-4f71-bf18-45cc1ec09d3a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7af23bf7-0216-41a1-ab2b-f48a9f0e5b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a4e98e-3147-451a-a5d9-1a83dd35d9ea",
        "cursor": {
          "ref": "8a219900-38ac-4a9c-96b0-bf55210af5ef",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "566f316c-3337-4bd6-8faf-40474926b3a9"
        },
        "item": {
          "id": "b7a4e98e-3147-451a-a5d9-1a83dd35d9ea",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6473080a-c8cc-4fed-8834-019255f027a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019b819a-7feb-457a-8cd3-a9933000ec74",
        "cursor": {
          "ref": "cafa378e-5bbb-437b-bab7-9d6d9211ec7f",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "dfe797a8-a20f-45d3-9686-2f2b974dc6a0"
        },
        "item": {
          "id": "019b819a-7feb-457a-8cd3-a9933000ec74",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fd604b22-a471-432a-9026-5fc1df75267b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7b76be-1122-4d9b-b7b7-e064c85d05d4",
        "cursor": {
          "ref": "63383318-59bd-4838-aa3f-d8d62c9dc32b",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e867917e-9741-424b-bb1e-1428fb0fdf87"
        },
        "item": {
          "id": "3f7b76be-1122-4d9b-b7b7-e064c85d05d4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9e5a94dc-b15b-4f39-84c8-5d2766138f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b34114-eca2-4925-8fbb-5387cbb6c17d",
        "cursor": {
          "ref": "0dba5ac0-4f98-4cda-897f-c31837dc0fbe",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3396c1ee-eda4-4f69-8309-8e7f72561a10"
        },
        "item": {
          "id": "73b34114-eca2-4925-8fbb-5387cbb6c17d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b0fd3601-ce4e-49c6-8b44-d9ea07a9e98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79b15da-897d-4cfa-8d9e-ec587a4fa6ff",
        "cursor": {
          "ref": "e35eb532-3c5b-4314-b5c7-4059d5624086",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "166e59c0-09de-4f3e-b6af-81c9579f9082"
        },
        "item": {
          "id": "c79b15da-897d-4cfa-8d9e-ec587a4fa6ff",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d523accb-88d4-4569-8430-93ff5704f211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991375c4-b497-4d77-8592-08a741ef79d0",
        "cursor": {
          "ref": "94df2d99-210f-40d2-b00b-865137b4d542",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "877fdf82-7711-403b-bdb1-5c298146f4f6"
        },
        "item": {
          "id": "991375c4-b497-4d77-8592-08a741ef79d0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a05a44cf-fbb6-4d8b-b6c7-fa3b23b75a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739dcdac-0e16-4e39-9786-39f8b9b04908",
        "cursor": {
          "ref": "002f60f9-f0e4-45e5-a49e-cc8afb6d1265",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "83051e6e-04f3-4879-8ae9-17c26806bce1"
        },
        "item": {
          "id": "739dcdac-0e16-4e39-9786-39f8b9b04908",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "775b8dd8-ada1-4e7b-b473-07b43cc7ed99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b406a7f-0e3b-4a85-9295-b920a689c73d",
        "cursor": {
          "ref": "eb520a6c-49d1-4609-b8d3-ecb0a00befbc",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3ae21a0f-ea77-4aab-ac4f-f756098d64d4"
        },
        "item": {
          "id": "5b406a7f-0e3b-4a85-9295-b920a689c73d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5e9aa615-e717-4d46-9d04-3047ff6f10de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6d1a14-4293-44f6-9271-0d4aa435fecd",
        "cursor": {
          "ref": "4caa1e5c-7eaa-4b0b-9029-f5cdc823ae5f",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "83deb7e3-56ca-4930-8252-595df3eb66e6"
        },
        "item": {
          "id": "4d6d1a14-4293-44f6-9271-0d4aa435fecd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5e85f37f-cfbf-476e-9e49-bf155593373e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60cc806f-e6dd-4748-a6f7-629af7729652",
        "cursor": {
          "ref": "b0204c1c-c3c7-42ae-aa67-701cafdd3a87",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ecd7ec21-d712-474a-84de-f5f788c491a6"
        },
        "item": {
          "id": "60cc806f-e6dd-4748-a6f7-629af7729652",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d0ace28d-a8a1-44ec-9765-a549efbfc8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd826436-bd33-4180-8139-c0149146c5e0",
        "cursor": {
          "ref": "774c1826-ae6e-48ef-adf9-500bf7cd28f4",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fdfb91da-fd92-401e-b930-d5e6e85f73e3"
        },
        "item": {
          "id": "fd826436-bd33-4180-8139-c0149146c5e0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0cfdbdb3-ae9b-480b-9876-82b8bdf9a11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68e578a-f949-46c1-b24f-9063cfb92db7",
        "cursor": {
          "ref": "7d2c728d-6855-4d21-861f-c7f3f655fe44",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c99fef6d-5e45-431a-8bac-a6db2eb82e92"
        },
        "item": {
          "id": "d68e578a-f949-46c1-b24f-9063cfb92db7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "74fc61a9-07b9-4cb9-aafe-0959fec056eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c508e0-dd78-41dc-9b2a-5267affe34c3",
        "cursor": {
          "ref": "683b10b7-4eb1-4fa3-8588-7cc13c1eca81",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dc4935c5-98bc-4b7b-9cc8-fde38eb8375a"
        },
        "item": {
          "id": "e2c508e0-dd78-41dc-9b2a-5267affe34c3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4bee59cf-74d7-4c54-abb6-81578be5e1a6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80fe629-f668-48d5-acff-097dda774b66",
        "cursor": {
          "ref": "45f75181-f588-4e8b-a67f-2824e170d671",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2ebac408-d9cd-4ca6-8c27-8dc26b49d1c7"
        },
        "item": {
          "id": "b80fe629-f668-48d5-acff-097dda774b66",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "dc09e77f-8f40-4e31-b746-1d37035ccc26",
          "status": "OK",
          "code": 200,
          "responseTime": 285,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b029c3-c2a8-42ec-8ff6-f07c901009d6",
        "cursor": {
          "ref": "cdb2eee1-960f-4b57-9a89-8dd0e6813df0",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4819349f-97f8-4f81-903f-19247ed47c42"
        },
        "item": {
          "id": "44b029c3-c2a8-42ec-8ff6-f07c901009d6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "353f2e19-f3f3-47e6-a46c-29fb1ede8cbb",
          "status": "OK",
          "code": 200,
          "responseTime": 690,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3450ead-ea43-42bd-b1f1-14e73c5f5b2c",
        "cursor": {
          "ref": "dd17c1cc-dc2b-4aba-958a-369727802ad0",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "95f0707a-3163-443a-96a1-5b4f210fd0be"
        },
        "item": {
          "id": "e3450ead-ea43-42bd-b1f1-14e73c5f5b2c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8b47510a-3b97-447d-a4e8-2218e30ef14b",
          "status": "OK",
          "code": 200,
          "responseTime": 657,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6047fcfe-93e6-424d-ac7d-566ee764e1f2",
        "cursor": {
          "ref": "dc38afda-507d-4086-894c-5a2cf6af3c3d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "df3ee404-c49b-4f3b-84e5-f713b428b824"
        },
        "item": {
          "id": "6047fcfe-93e6-424d-ac7d-566ee764e1f2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dc6394b9-8b7e-4de9-92db-f921f1bdd288",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6047fcfe-93e6-424d-ac7d-566ee764e1f2",
        "cursor": {
          "ref": "dc38afda-507d-4086-894c-5a2cf6af3c3d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "df3ee404-c49b-4f3b-84e5-f713b428b824"
        },
        "item": {
          "id": "6047fcfe-93e6-424d-ac7d-566ee764e1f2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dc6394b9-8b7e-4de9-92db-f921f1bdd288",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6047fcfe-93e6-424d-ac7d-566ee764e1f2",
        "cursor": {
          "ref": "dc38afda-507d-4086-894c-5a2cf6af3c3d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "df3ee404-c49b-4f3b-84e5-f713b428b824"
        },
        "item": {
          "id": "6047fcfe-93e6-424d-ac7d-566ee764e1f2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dc6394b9-8b7e-4de9-92db-f921f1bdd288",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e546ed94-8e3b-409b-89ab-01ce94181559",
        "cursor": {
          "ref": "587c43d3-d796-48aa-a2b4-7642efd0adc2",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bdd7d128-8464-41e7-bbbd-2fe0b19ce6b1"
        },
        "item": {
          "id": "e546ed94-8e3b-409b-89ab-01ce94181559",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f249163e-48f1-4960-b2ab-58231a3c3bac",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22361dbd-d335-496a-b686-ef9cea589640",
        "cursor": {
          "ref": "04f5e250-59e8-4bdb-b3b5-451bf8e54004",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "776ebb1b-3d27-4c6b-91f3-a5b3cfac08e7"
        },
        "item": {
          "id": "22361dbd-d335-496a-b686-ef9cea589640",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "87462923-86d3-46e5-8346-6828f3545683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "22361dbd-d335-496a-b686-ef9cea589640",
        "cursor": {
          "ref": "04f5e250-59e8-4bdb-b3b5-451bf8e54004",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "776ebb1b-3d27-4c6b-91f3-a5b3cfac08e7"
        },
        "item": {
          "id": "22361dbd-d335-496a-b686-ef9cea589640",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "87462923-86d3-46e5-8346-6828f3545683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3d4141fc-2537-4fc4-a030-1438b9afaf62",
        "cursor": {
          "ref": "0c43fe47-bc02-448b-88d3-e87186eaf1eb",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "feff116f-bf1c-40b2-8f0f-93dfe50ccee1"
        },
        "item": {
          "id": "3d4141fc-2537-4fc4-a030-1438b9afaf62",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4632b777-49a4-48cc-a6fd-ffa7a01d211b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "90015499-3b68-4de4-9c8f-9a0a848c0380",
        "cursor": {
          "ref": "ef1a28ee-c1dc-4b59-adf4-f73a6d275100",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "26d61351-6461-4edd-ba68-9c3cbed0c48c"
        },
        "item": {
          "id": "90015499-3b68-4de4-9c8f-9a0a848c0380",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2dd880e2-a38f-477e-a6a2-3fd00c5c4430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "90015499-3b68-4de4-9c8f-9a0a848c0380",
        "cursor": {
          "ref": "ef1a28ee-c1dc-4b59-adf4-f73a6d275100",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "26d61351-6461-4edd-ba68-9c3cbed0c48c"
        },
        "item": {
          "id": "90015499-3b68-4de4-9c8f-9a0a848c0380",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2dd880e2-a38f-477e-a6a2-3fd00c5c4430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "beba0f41-8347-472d-9fab-856c1b53cde3",
        "cursor": {
          "ref": "a8dbb8f0-fe41-4e95-984d-139d080a5446",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0c218282-a62b-4694-92dc-f551f080feb1"
        },
        "item": {
          "id": "beba0f41-8347-472d-9fab-856c1b53cde3",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "1d753daf-b3f5-4fa5-9466-bd7696e84144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}